@using Bec.TargetFramework.Web.Framework.Extensions
@model Bec.TargetFramework.Entities.AddressDTO


<script>

    var populateAddress = function(field, newValue, oldValue, eOpts) {
        var selectedItems = App.PostCodeResults.getSelected();
        var address = selectedItems[0];
        this.hide();
        if (address) {
            var form = this.up('form').getForm();
            popAddress(address, form);
        }
    };

    var popAddress = function(option, form) {
        var address = option;
        if (address) {
            if (address.data.Company)
                form.findField('Line1').setValue(address.data.Company + ', ' + address.data.Line1);
            else
                form.findField('Line1').setValue(address.data.Line1);
            form.findField('Line2').setValue(address.data.Line2);
            form.findField('City').setValue(address.data.PostTown);
            form.findField('County').setValue(address.data.County);
            if (address.data.BuildingName)
                form.findField('BuildingName').setValue(address.data.BuildingName);
        }
    };


    var processPostCode = function(formName) {
        var postCode = App.AddressPostCode.getValue();

        var multiSelect = App.PostCodeResults;
        var form = multiSelect.up('form').getForm();
        multiSelect.getStore().load();

        multiSelect.getStore().on('load', function(store, records, successful, eOpts) {
            if (store.getCount() > 0) {
                if (store.getCount() > 1) {
                    multiSelect.show();
                } else {
                    popAddress(store.data.items[0], form);
                }

            } else {
                multiSelect.hide();
                Ext.MessageBox.show({ title: 'Post Code', msg: 'No addresses exists for postCode ' + postCode, buttons: Ext.MessageBox.OK, width: 300 });
            }
        });

    };
    var showOrHideAddressDetails = function () {
        var addressline = App.AddressLine1.getValue();
        if (addressline != "")
            return true;
        else
            return false;
    };

</script>

@(Html.X().Container().ID("UKAddress").Hidden(false).Layout(LayoutType.Column).ColumnWidth(1).Flex(1).Items(

              Html.X().Container().ID("UKAddressLabel").Layout(LayoutType.HBox).ColumnWidth(1).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.Start }).Items(
                    
                    Html.X().Label().ID("CreateLoginInfoLabel").ApplyFieldDefaults("Address", "FindAddressLabel").PaddingSpec("0 0 30 2")),
          //.ApplyContainerDefaults(c => Razor.CreateImageTextContainer(c, "Address", "FindAddressLabel", false)).MinWidth(450),
          Html.X().Container().ColumnWidth(0.5).PaddingSpec("38 0 2 0").Layout(LayoutType.Fit).Items(
              Html.X().TextFieldFor(model => model.PostalCode).ID("AddressPostCode").ApplyFieldDefaults("Address", "Postcode")
                          .Listeners(l => l.Change.Handler = "#{AddressFindPostcode}.setDisabled(!#{AddressPostCode}.isValid());  App.AddressPostCode.setValue(this.value.toUpperCase());").Flex(1),
              Html.X().TextFieldFor(model => model.BuildingName).ID("BuildingName").ApplyFieldDefaults("Address", "HouseNumber/Name").Flex(1),
                  Html.X().Button().ApplyButtonDefaults(Razor.ApplySTSGreyButtonDefaults).Text("Find Address").Disabled(true).ID("AddressFindPostcode").StyleSpec("text-transform:uppercase;")
                      .Listeners(l => l.Click.Handler = "#{AddressDetails}.setDisabled(false);processPostCode();").Padding(2).Flat(true)
              )
          ,
                  Html.X().Container().ID("AddressDetails").Disabled(true).ColumnWidth(0.5).Layout(LayoutType.Fit).PaddingSpec("37 0 0 5").Items(
              Html.X().TextFieldFor(model => model.Line1).ApplyFieldDefaults("Address", "AddressLine1").Flex(1).ID("AddressLine1"),
                  Html.X().TextFieldFor(model => model.Line2).ApplyFieldDefaults("Address", "AddressLine2").Flex(1).ID("AddressLine2"),
              Html.X().TextFieldFor(model => model.City).ApplyFieldDefaults("Address", "Town/City").Flex(1),
              Html.X().TextFieldFor(model => model.County).ApplyFieldDefaults("Address", "County").Flex(1),
              Html.X().TextFieldFor(model => model.Name).ID("AdditionalInfo").ApplyFieldDefaults("Address", "AdditionalAddressInformation").Flex(1)
                      ).Listeners(l => l.AfterRender.Handler = " var addressline = showOrHideAddressDetails(); if(addressline) #{AddressDetails}.setDisabled(false);")
          ,
          Html.X().Container().ColumnWidth(1).Items(
              Html.X().MultiSelect().ID("PostCodeResults")
                  .ValueField("FullAddress")
                  .DisplayField("FullAddress")
                  .FieldLabel("Postcode Results")
                  .Height(70)
                  .LabelAlign(LabelAlign.Top)
                  .Flex(1)
                  .Hidden(true)
                  .Listeners(l => l.Change.Fn = "populateAddress")
                  .MultiSelect(true).Store(Html.X()
                      .Store()
                      .AutoLoad(false)
                      .Parameters(p =>
                      {
                          p.Add(Html.X().StoreParameter().Name("postCode").Value("Ext.getCmp('AddressPostCode').getValue()").Mode(ParameterMode.Value));
                          p.Add(Html.X().StoreParameter().Name("building").Value("Ext.getCmp('BuildingName').getValue()").Mode(ParameterMode.Value));
                      }
                      )
                      .Model(Html.X()
                          .Model().Name("PostCodeModel")
                          .Fields(fields =>
                          {
                              fields.Add(new ModelField("FullAddress"));
                              fields.Add(new ModelField("Company"));
                              fields.Add(new ModelField("County"));
                              fields.Add(new ModelField("Department"));
                              fields.Add(new ModelField("BuildingName"));
                              fields.Add(new ModelField("Line1"));
                              fields.Add(new ModelField("Line2"));
                              fields.Add(new ModelField("Line3"));
                              fields.Add(new ModelField("PostCode"));
                              fields.Add(new ModelField("PostTown"));
                              fields.Add(new ModelField("PrimaryStreet"));
                          })
                          .Proxy(proxy => proxy.Add(Html.X()
                              .AjaxProxy()
                              .Url(Url.Action("GetPostCodeAddresses", "Address", new { area = "Component" }))
                              .Reader(reader => reader.Add(Html.X().JsonReader().Root("data")))))))
              )



)
)






