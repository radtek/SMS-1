@using System.Web.Caching
@using System.Web.Mvc
@using System.Web.UI.WebControls
@using Autofac
@using Autofac.Integration.Mvc
@using Bec.TargetFramework.Business.Infrastructure.Interfaces
@using Bec.TargetFramework.Entities
@using Bec.TargetFramework.UI.Web
@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net.MVC
@using Ext.Net
@using Fabrik.Common
@using ServiceStack.Text
@using Button = Ext.Net.Button
@using Image = Ext.Net.Image
@using Label = Ext.Net.Label
@using Parameter = Ext.Net.Parameter
@using LinkButton = Ext.Net.LinkButton

@functions
{
    public static Store CreateClassificationStore(string typeName, string url)
    {
        return new Store.Builder(new Store.Builder()

                             .AutoLoad(true)
                             .Model(new Ext.Net.Model.Builder()
                                        .IDProperty("ClassificationTypeID")
                                        .Fields(
                                                 new ModelField("ClassificationTypeID", ModelFieldType.Int),
                                                 new ModelField("Name", ModelFieldType.String)))
                             .Proxy(new AjaxProxy.Builder()
                                        .ExtraParams(e => e.Add(new Parameter("name", typeName, ParameterMode.Value)))
                                        .Url(url)
                                        .Reader(new JsonReader.Builder().Root("data"))));
    }

    public static Store CreateClassificationStore(string id,string typeName, string url)
    {
        return new Store.Builder(new Store.Builder()
                            .ID(id)
                             .AutoLoad(true)
                             .Model(new Ext.Net.Model.Builder()
                                        .IDProperty("ClassificationTypeID")
                                        .Fields(
                                                 new ModelField("ClassificationTypeID", ModelFieldType.Int),
                                                 new ModelField("Name", ModelFieldType.String)))
                             .Proxy(new AjaxProxy.Builder()
                                        .ExtraParams(e => e.Add(new Parameter("name", typeName, ParameterMode.Value)))
                                        .Url(url)
                                        .Reader(new JsonReader.Builder().Root("data"))));
    }

    public static Store CreateParentStateItemStore(string url, string id, string currentName)
    {
        return new Store.Builder(new Store.Builder()

                             .AutoLoad(true)
                             .Model(new Ext.Net.Model.Builder()
                                        .IDProperty("StateItemID")
                                        .Fields(
                                                 new ModelField("StateItemID", ModelFieldType.String),
                                                 new ModelField("StateItemName", ModelFieldType.String)))
                             .Proxy(new AjaxProxy.Builder()
   .ExtraParams(e => e.Add(new Parameter("id", id, ParameterMode.Value)))
   .ExtraParams(e => e.Add(new Parameter("currentName", currentName, ParameterMode.Value)))
                                        .Url(url)
                                        .Reader(new JsonReader.Builder().Root("data"))));
    }

    public static ComboBox.Builder ApplyComboBoxClassificationDefaults(ComboBox.Builder comboxBuilder)
    {
        return comboxBuilder
            .AutoDataBind(true)
            .LabelAlign(LabelAlign.Top)
            .DisplayField("Name")
            .ValueField("ClassificationTypeID")
            .QueryMode(DataLoadMode.Local)
            .TriggerAction(TriggerAction.All)
            .MsgTarget(MessageTarget.Under)
            .TypeAhead(true)
            .ForceSelection(true);
    }

    public static ComboBox.Builder ApplyComboBoxDefaults(ComboBox.Builder comboxBuilder)
    {
        return comboxBuilder
            .AutoDataBind(true)
            .LabelAlign(LabelAlign.Top)
            .QueryMode(DataLoadMode.Local)
            .TriggerAction(TriggerAction.All)
            .MsgTarget(MessageTarget.Under)
            .TypeAhead(true)
            .ForceSelection(true);
    }

    public static FormPanel.Builder ApplyFormPanelDefaults(FormPanel.Builder builder)
    {
        return builder
            .Layout(LayoutType.Form);
           
        //.Defaults(d =>
        //{
        //    d.Add(new Parameter("anchor", "95%", ParameterMode.Value));
        //    d.Add(new Parameter("allowBlank", "false", ParameterMode.Raw));
        //    d.Add(new Parameter("msgTarget", "side", ParameterMode.Value));
        //});
    }
    public static LinkButton.Builder ApplyLogOutLinkButtonDefaults(LinkButton.Builder builder)
    {
        bool hide = true;
        if (Session["wjdjwqd8u8wqhdjw9ejdwe8fejw9f9w"] != null) hide = false;
        return builder.Hidden(hide)
                .Cls("link-btn");
        
    }
    public static Button.Builder ApplyNextButtonDefaults(Button.Builder builder)
    {
        return builder.ID("NextButton")
                           .Text("Next")
                           .IconAlign(IconAlign.Right)
                           .IconCls("next-btn");
    }

    public static Button.Builder ApplyPreviousButtonDefaults(Button.Builder builder)
    {
        return builder.ID("PreviousButton")
                           .Text("Previous")
                           .IconAlign(IconAlign.Left)
                           .IconCls("prev-btn");
    }

    public static Button.Builder ApplySTSButtonDefaults(Button.Builder builder)
    {
        return builder.Text("Click").Cls("stsbtn");
    }
    public static Button.Builder ApplySTSGreyButtonDefaults(Button.Builder builder)
    {
        return builder.Cls("stsgreybtn");
    }
    
    public static Button.Builder ApplySaveButtonDefaults(Button.Builder builder)
    {
        return builder.ID("SaveButton")
                           .Text("Save")
                           .Icon(Icon.Disk)
                           .Disabled(false)
                           .CausesValidation(true);
    }

    public static Button.Builder ApplyCancelButtonDefaults(Button.Builder builder)
    {
        return builder.ID("CancelButton")
                           .Text("Cancel")
                           .Icon(Icon.Cancel);
    }

    public static Button.Builder ApplyResetButtonDefaults(Button.Builder builder)
    {
        return builder.ID("ResetButton")
                           .Text("Reset")
                           .Icon(Icon.ArrowUndo)
                          ;
    }

    public static TextField.Builder ApplyTextFieldDefaults(TextField.Builder builder)
    {
        var resolver = DependencyResolver.Current as AutofacDependencyResolver;

        IDataLogic logic = resolver.ApplicationContainer.Resolve<IDataLogic>();


        Ensure.Argument.NotNull(logic);
        
        return builder.LabelAlign(LabelAlign.Top)
                        .MsgTarget(MessageTarget.Under)
                          ;
    }

    public static TextField.Builder ApplyTextFieldDefaults(TextField.Builder builder,string ipName,string fdName)
    {
        var helper = new FieldDetailHelper<TextField.Builder>();

        return helper.ApplyFieldDefaults(builder, ipName, fdName);
    }

    public static Container.Builder CreateImageTextContainer(Container.Builder builder, string ipName, string fdName, bool hidden = false)
    {
        return builder.Layout(LayoutType.HBox).BorderSpec("1").Padding(5).Hidden(hidden).Border(true).Items(i =>
        {
            i.Add(new Image.Builder().ApplyFieldDefaults(ipName, fdName));
            i.Add(new Label.Builder().ApplyFieldDefaults(ipName, fdName));
        });
    }

    public static Checkbox.Builder ApplyCheckboxDefaults(Checkbox.Builder builder)
    {
        return builder.LabelAlign(LabelAlign.Right)
                        .MsgTarget(MessageTarget.Under)
                          ;
    }

    public static DateField.Builder ApplyDateFieldDefaults(DateField.Builder builder)
    {
        return builder.LabelAlign(LabelAlign.Top).Height(35)
                        .MsgTarget(MessageTarget.Under)
                          ;
    }

    public static TextArea.Builder ApplyTextAreaDefaults(TextArea.Builder builder)
    {
        return builder.LabelAlign(LabelAlign.Top)
                        .MsgTarget(MessageTarget.Under)
                          ;
    }

    public static System.Web.IHtmlString CreateReportTextContainer(Container.Builder builder, string htmlData) 
    {
        //System.Web.IHtmlString test = new System.Web.IHtmlString() { };
        //return builder.Html(htmlData);
        return new HtmlString(htmlData);
    }
}
