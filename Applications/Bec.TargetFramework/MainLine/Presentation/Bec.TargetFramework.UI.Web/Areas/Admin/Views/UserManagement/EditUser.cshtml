@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC
@model Bec.TargetFramework.Entities.ContactDTO

<script>
    var loadAddress = true;
   
    var comboSetter = function (comboBox, value) {
        var store = comboBox.store;
        var valueField = comboBox.valueField;
        var displayField = comboBox.displayField;

        var recordNumber = store.findExact(valueField, value, 0);

        if (recordNumber == -1)
            return -1;

        var displayValue = store.getAt(recordNumber).data[displayField];
        comboBox.setValue(value);
        comboBox.setRawValue(displayValue);
        comboBox.selectedIndex = recordNumber;
        return recordNumber;
    };

    var SearchForObject = function (results, searchField, searchValue) {

        var value = null;
        for (var i = 0; i < results.length; i++) {
            if (results[i][searchField] == searchValue) {

                value = results[i];

            }
        }

        return value;
    };

    var showFormItems = function (show) {
        if (show) {
            App.AddressForm.show();
            enableDisableFormFields(false);
        } else {
            App.AddressForm.hide();
            App.AddressForm.getForm().reset();
            resetPostcodeResults();
            App.AddressList.clearValue();
            enableDisableFormFields(true);
            App.DeleteAddress.hide();
        }
    };

    function enableDisableFormFields(enable) {
        var form = App.AddressForm.getForm();
        form.findField('Line1').setDisabled(enable);
        form.findField('Line2').setDisabled(enable);
        form.findField('Line3').setDisabled(enable);
        form.findField('City').setDisabled(enable);
        form.findField('County').setDisabled(enable);
        form.findField('BuildingName').setDisabled(enable);
        form.findField('AddressPostCode').setDisabled(enable);
        form.findField('AddressIsPrimaryAddressField').setDisabled(enable);
        form.findField('AddressNameField').setDisabled(enable);
        form.findField('AddressIDString').setDisabled(enable);
        form.findField('AddressTypeID').setDisabled(enable);
        form.findField('AddressCategoryID').setDisabled(enable);
    }

    String.prototype.replaceAll = function (search, replace) {
        if (replace === undefined) {
            return this.toString();
        }
        return this.split(search).join(replace);
    };

    var processSelectAddress = function () {
        var jsonString = App.AddressesJson.getValue();
        var results = JSON.parse(jsonString);
        var result = SearchForObject(results, 'AddressID', App.AddressList.getValue().replaceAll('-', ''));
        if (result != null) {

            showFormItems(true);
            var form = App.AddressForm.getForm();
            form.findField('Line1').setValue(result.Line1);
            form.findField('Line2').setValue(result.Line2);
            form.findField('Line3').setValue(result.Line3);
            form.findField('City').setValue(result.City);
            form.findField('County').setValue(result.County);
            form.findField('BuildingName').setValue(result.BuildingName);
            form.findField('AddressPostCode').setValue(result.PostalCode);
            form.findField('AddressIsPrimaryAddressField').setValue(result.IsPrimaryAddress);
            form.findField('AddressNameField').setValue(result.Name);
            form.findField('AddressIDString').setValue(result.AddressIDString);
            form.findField('AddressID').setValue(result.AddressID);
            comboSetter(form.findField('AddressTypeID'), result.AddressTypeID);
            comboSetter(form.findField('AddressCategoryID'), result.AddressCategoryID);
            App.PostCodeResults.hide();

        }
    };


    var selectFirstItem = function () {
        if (loadAddress) {
            if (App.AddressList.getStore() != null && App.AddressList.getStore().getCount() > 0) {
                App.AddressList.setValue(App.AddressList.getStore().getAt(App.AddressList.getStore().getCount() - 1).get('AddressIDString'));
                processSelectAddress();
            }
        }

        if (App.AddressList.getStore().count() > 1) {
            App.DeleteAddress.show();
        }

    };
    
    var resetPostcodeResults = function () {
        App.AddressForm.getForm().findField('PostCodeResults').getStore().removeAll();
        App.AddressForm.getForm().findField('PostCodeResults').hide();
    };


    var processAddAddress = function () {
        App.AddressForm.getForm().reset();
        resetPostcodeResults();
        showFormItems(true);
    };

    var processCancelAddress = function () {
        showFormItems(false);
    };


    var populateAddress = function (field, newValue, oldValue, eOpts) {
        
        var selectedItems = App.PostCodeResults.getSelected();
        var address = selectedItems[0];
        if (address) {
            var form = this.up('form').getForm();

            if (address.data.Company)
                form.findField('Line1').setValue(address.data.Company + ', ' + address.data.Line1);
            else
                form.findField('Line1').setValue(address.data.Line1);

            form.findField('Line2').setValue(address.data.Line2);
            form.findField('Line3').setValue(address.data.Line3);
            form.findField('City').setValue(address.data.PostTown);
            form.findField('County').setValue(address.data.County);

        }

    };

    var processPostCode = function (formName) {
        var postCode = App.AddressPostCode.getValue();

        var multiSelect = App.PostCodeResults;

        multiSelect.getStore().load();

        multiSelect.getStore().on('load', function (store, records, successful, eOpts) {
            if (store.getCount() > 0) {
                multiSelect.show();
            } else {
                multiSelect.hide();
                Ext.MessageBox.show({ title: 'Post Code', msg: 'No addresses exists for postCode ' + postCode, buttons: Ext.MessageBox.OK, width: 300 });
            }
        });

    };

   
    function emptyGuid() {
        return '00000000-0000-0000-0000-000000000000';
    }

    processAddAddress = function () {
        App.AddressForm.cascade(function (f) {
            if (f.clear) {
                f.clear();
                f.clearInvalid();
            }
            App.AddressNameField.focus();
            App.AddressID.setValue(emptyGuid());
            App.AddressList.clear();
            App.DeleteAddress.hide();
        });
    };

    function resetAddressForm() {
        App.AddressForm.cascade(function (f) {
            if (f.clear) {
                f.clear();
                f.clearInvalid();
                App.AddressNameField.focus();
                App.AddressID.setValue(emptyGuid());
            }
            App.AddressList.clear();
            resetPostcodeResults();
            showFormItems(true);
            
        });

    }
    var processSaveAddress = function () {
        App.AddressList.getStore().load();
        showFormItems(true);
        loadAddress = true;
    };
</script>


@(Html.X().FormPanel().ID("EditUserForm").Title("Edit User").ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
        .Items(
                Html.X().AntiForgeryField(),
                   Html.X().Container().Layout(LayoutType.Column)
                    .Items(

                        Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.25).Padding(5)
                        .Items(
                             Html.X().MultiSelect().ID("UserManagementFormErrors").Hidden(true),
                             Html.X().ComboBoxFor(m => m.OrganisationID)
                                    .FieldLabel("Organisation")
                                    .QueryMode(DataLoadMode.Local)
                                    .ID("organisationList")
                                    .DisplayField("Name")
                                    .ValueField("OrganisationID")
                                    .TypeAhead(true)
                                    .TriggerAction(TriggerAction.All)
                                    .ApplyComboxDefaults(Razor.ApplyComboBoxDefaults)
                                    .EmptyText("Select Organisation")
                                    .Plugins(Html.X().ClearButton())
                                    .Store(Html.X().Store()
                                        .AutoLoad(true)
                                        .Model(Html.X()
                                            .Model()
                                            .IDProperty("OrganisationID")
                                            .Fields(
                                                new ModelField("Name", ModelFieldType.String),
                                                new ModelField("OrganisationID", ModelFieldType.String)
                                            ))
                                            .Proxy(Html.X()
                                            .AjaxProxy()
                                                .Url(Url.Action("GetOrganisations", "Organisation", new { area = "Component" }))
                                                .Reader(new JsonReader.Builder().Root("data"))
                                                )
                                                )
                                                 .Listeners(l =>
                                                          l.Change.Handler = "App.orgUnitList.clearValue(); App.orgUnitList.getStore().load();App.branchList.clearValue(); App.branchList.getStore().load();"
                                                        ),
                                        Html.X().ComboBoxFor(m => m.OrganisationBranchID)
                                        .FieldLabel("Branch")
                                        .Plugins(Html.X().ClearButton())
                                        .QueryMode(DataLoadMode.Local)
                                        .ID("branchList")
                                        .DisplayField("BranchName")
                                        .ValueField("BranchOrganisationID")
                                        .EmptyText("Select Branch")
                                        .TypeAhead(true)
                                        .ApplyComboxDefaults(Razor.ApplyComboBoxDefaults)
                                        .Store(Html.X().Store()
                                            .AutoLoad(false)
                                            .Model(Html.X()
                                                .Model()
                                                    .IDProperty("BranchOrganisationID")
                                                .Fields(
                                                    new ModelField("BranchName", ModelFieldType.String),
                                                    new ModelField("BranchOrganisationID", ModelFieldType.String)
                                                ))
                                                .Proxy(Html.X()
                                                .AjaxProxy()
                                                        .Url(Url.Action("GetBranchesforOrg", "BranchOrganisation", new { area = "Component" }))
                                                    .Reader(new JsonReader.Builder().Root("data")))
                                                        .Parameters(p =>
                                                                            p.Add(new StoreParameter("id", "#{organisationList}.getValue()", ParameterMode.Raw))
                                                                )
                                                            )
                                                               ,
                                  Html.X().ComboBoxFor(m => m.OrganisationUnitID)
                                    .FieldLabel("Organisation Units")
                                    .Plugins(Html.X().ClearButton())
                                    .QueryMode(DataLoadMode.Remote)
                                    .ID("orgUnitList")
                                    .TypeAhead(true)
                                    .DisplayField("Name")
                                    .ValueField("OrganisationUnitID")
                                    .EmptyText("Select Unit")
                                    .ApplyComboxDefaults(Razor.ApplyComboBoxDefaults)
                                    .Store(Html.X().Store()
                                        .AutoLoad(false)
                                        .Model(Html.X()
                                            .Model()
                                            .IDProperty("OrganisationUnitID")
                                            .Fields(
                                                new ModelField("Name", ModelFieldType.String),
                                                new ModelField("OrganisationUnitID", ModelFieldType.Int)
                                            ))
                                            .Proxy(Html.X()
                                                .AjaxProxy()
                                                .Url(Url.Action("GeOrganisationUnits", "Organisation", new { area = "Component" }))
                                                .Reader(new JsonReader.Builder().Root("data"))
                                                )
                                                .Parameters(p =>
                                                                 p.Add(new StoreParameter("id", "#{organisationList}.getValue()", ParameterMode.Raw))
                                                    )

                                            ),
                                  Html.X().ComboBox()
                                    .ID("catTypeList")
                                    .EmptyText("Select Category Type")
                                    .Plugins(Html.X().ClearButton())
                                    .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                                    .FieldLabel("User Category Type")
                                    .AllowBlank(false).BlankText("Please select Category Type")
                                    .Store(Razor.CreateClassificationStore("UserCategory", Url.Action("ReadData", "Reference", new { area = "" }))),

                              Html.X().ComboBox()
                                .ID("usersTypeList")
                                .FieldLabel("User Type")
                                .EmptyText("Select User Type")
                                .AllowBlank(false).BlankText("Please select User Type")
                                .Plugins(Html.X().ClearButton())
                                .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                                .Store(Razor.CreateClassificationStore("UserType", Url.Action("ReadData", "Reference", new { area = "" }))),

                             Html.X().HiddenFor(model => model.ContactID),
                            Html.X().HiddenFor(model => model.ParentID),
                            Html.X().HiddenFor(model => model.ParentContactID),
                            Html.X().HiddenFor(model => model.ContactTypeID),
                           
                             
                             Html.X().TextFieldFor(model => model.ContactName).AllowBlank(false).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                 .Listeners(l => l.Change.Handler = "App.ContactName.setValue(this.value);")
                                 .Control(c =>
                                             {
                                                 c.IsRemoteValidation = true;
                                                 c.RemoteValidation.Url = Url.Action("IsUserExist");
                                                 c.RemoteValidation.ValidationEvent = "blur";
                                                 c.RemoteValidation.Method = HttpMethod.POST;
                                                 c.RemoteValidation.ShowBusy = true;
                                                 c.RemoteValidation.ErrorMessage = "User name already exists";
                                             }
                                 ),

                             Html.X().TextFieldFor(model => model.Salutation).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                             Html.X().TextFieldFor(model => model.FirstName).AllowBlank(false).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                     .Listeners(l => l.Change.Handler = "App.ContactFirstName.setValue(this.value);"),
                             Html.X().TextFieldFor(model => model.MiddleName).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                        .Listeners(l => l.Change.Handler = "App.ContactMiddleName.setValue(this.value);"),
                             Html.X().TextFieldFor(model => model.LastName).AllowBlank(false).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                     .Listeners(l => l.Change.Handler = "App.ContactLastName.setValue(this.value);"),
                             Html.X().TextFieldFor(model => model.NickName).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                             Html.X().ComboBoxFor(model => model.GenderTypeID).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .FieldLabel("Gender")
                              .Store(Razor.CreateClassificationStore("GenderType", Url.Action("ReadData", "Reference", new { area = "" }))),
                              Html.X().DateFieldFor(model => model.BirthDate).LabelAlign(LabelAlign.Top).MsgTarget(MessageTarget.Under)
                           ),

                             Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.25).Padding(5)
                        .Items(
                             Html.X().TextFieldFor(model => model.EmailAddress1).AllowBlank(false).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Email 1").ID("UserEmail")
                                        .Listeners(l => l.Change.Handler = "App.ContactEmailAddress1.setValue(this.value);")
                                        .Control(c =>
                                                {
                                                    c.IsRemoteValidation = true;
                                                    c.RemoteValidation.Url = Url.Action("IsEmailExist");
                                                    c.RemoteValidation.ValidationEvent = "blur";
                                                    c.RemoteValidation.Method = HttpMethod.POST;
                                                    c.RemoteValidation.ShowBusy = true;
                                                    c.RemoteValidation.ErrorMessage = "Email Address already exists";
                                                }
                                     ),
                            Html.X().TextFieldFor(model => model.EmailAddress2).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.EmailAddress3).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.JobTitle).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.Department).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.Telephone1).AllowBlank(false).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.Telephone2).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.Telephone3).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.MobileNumber1).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.MobileNumber2).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.MobileNumber3).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                            Html.X().TextFieldFor(model => model.WebSiteURL).AllowBlank(true).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                           
                            Html.X().ComboBoxFor(model => model.EducationTypeID).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .FieldLabel("Education")
                              .Store(Razor.CreateClassificationStore("EducationType", Url.Action("ReadData", "Reference", new { area = "" })))
                                
                        ),

                         Html.X().Panel().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5).Title("Address Management").Border(true)
                        .Items(

                                 Html.X().Container().Layout(LayoutType.Column).ColumnWidth(0.5).Padding(5).Border(true).ID("ExistingAddressContainer")
                                    .Items(
                                         Html.X().TextFieldFor(model => model.AddressesJson).ID("AddressesJson").Hidden(true),
                                         Html.X().ComboBox().ID("AddressList").TriggerAction(TriggerAction.All).ColumnWidth(0.75).ApplyComboxDefaults(Razor.ApplyComboBoxDefaults)
                                        .FieldLabel("").Editable(false).QueryMode(DataLoadMode.Local)
                                        .DisplayField("Name")
                                        .ValueField("AddressIDString")
                                        .EmptyText("Select an address or add a new address")
                                            .Plugins(Html.X().ClearButton().Listeners(l => l.Clear.Handler = "resetAddressForm();"
                                                            ))
                                        .Store(Html.X().Store()
                                            .AutoLoad(true)
                                                .Parameters(e => e.Add(Html.X().StoreParameter().Name("addressesJsonValue").Value("App.EditUserForm.getForm().findField('AddressesJson').getValue()").Mode(ParameterMode.Raw)))
                                            .Model(Html.X()
                                                .Model()
                                                .IDProperty("AddressIDString")
                                                .Fields(
                                                    new ModelField("Name", ModelFieldType.String),
                                                    new ModelField("AddressIDString", ModelFieldType.String)
                                                        )).Listeners(ls =>
                                                                           {
                                                                               ls.Load.Handler = "selectFirstItem();";
                                                                           })
                                            .Proxy(Html.X()
                                            .AjaxProxy()
                                            .Url(Url.Action("GetAddresses", "Address", new { area = "Component" }))
                                            .Reader(new JsonReader.Builder().Root("data"))))
                                            .Listeners(l => l.Select.Handler = "processSelectAddress();"),
                                        Html.X().Button().Text("Add New Address").ID("AddAddress").Hidden(false)
                                                  .Listeners(l => l.Click.Handler = "resetAddressForm();"),
                                        Html.X().Button().Text("Save Address").ID("SaveAddress").StyleSpec("margin-left:5px;").Icon(Icon.Disk)
                                        .DirectEvents(de =>
                                        {
                                            de.Click.Before = "return App.AddressForm.isValid();";
                                            de.Click.Url = Url.Action("AddAddressToContact", "Address", new { area = "component", jsonField = "AddressesJson"});
                                            de.Click.ExtraParams.Add(new Parameter("addressesJsonValue", "App.EditUserForm.getForm().findField('AddressesJson').getValue()", ParameterMode.Raw));
                                            de.Click.ExtraParams.Add(new Parameter("jsonField", "AddressesJson", ParameterMode.Value));
                                            de.Click.EventMask.ShowMask = true;
                                            de.Click.EventMask.Msg = "Please wait ...";
                                            de.Click.Success = "processSaveAddress();";
                                        }),

                                        Html.X().Button().Text("Delete").ID("DeleteAddress").Hidden(false).ToolTip("Delete selected address.").StyleSpec("margin-left:5px;").Icon(Icon.Delete).Hidden(true)
                                            .DirectEvents(de =>
                                            {
                                                de.Click.Method = HttpMethod.POST;
                                                de.Click.Url = Url.Action("DeleteAddressToContact", "UserManagement", new { area = "Admin" });
                                                de.Click.Confirmation.ConfirmRequest = true;
                                                de.Click.Confirmation.BeforeConfirm = "config.confirmation.message = 'Are you sure you want to delete selected address '+ App.AddressList.getRawValue() +'?'; config.confirmation.title = 'Delete Confirmation';";
                                                de.Click.ExtraParams.Add(new Parameter("addressId", " #{AddressID}.getValue()", ParameterMode.Raw));
                                                de.Click.ExtraParams.Add(new Parameter("userId", Model.ParentID.ToString(), ParameterMode.Value));
                                                de.Click.ExtraParams.Add(new Parameter("containerId", "AdministrationCenterPanel", ParameterMode.Value));
                                            })
                                        ),
                                           Html.X().FormPanel().ID("AddressForm").Border(false)
                                .ItemsFromPartial("_AddressPartial", Model.CurrentAddress)


                    )
                  )


    )
            .TopBar(Html.X().Toolbar()
            .Items(
                    Html.X().ToolbarFill(),
                    Html.X()
                    .Button()
                    .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults)
                    .DirectEvents(de =>
                            {
                                de.Click.Before = "return App.EditUserForm.isValid();";
                                de.Click.Url = Url.Action("UpdateUser", "UserManagement", new { area = "Admin", containerId = "AdministrationCenterPanel" });
                                de.Click.FormID = "EditUserForm";
                                de.Click.EventMask.ShowMask = true;
                                de.Click.EventMask.Msg = "Please wait ...";
                            }),

                                    Html.X().Button().ApplyButtonDefaults(Razor.ApplyResetButtonDefaults).OnClientClick("App.EditUserForm.getForm().reset(); App.PostCodeResults.hide();"),
                                    Html.X().Button().ApplyButtonDefaults(Razor.ApplyCancelButtonDefaults)
                                    .DirectEvents(d =>
                                            d.Click.Url = Url.Action("UserManagement", "UserManagement", new { area = "Admin", containerId = "AdministrationCenterPanel" })
                                    )
                                    )
                )
)
)               