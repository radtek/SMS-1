@using Bec.TargetFramework.Web.Framework.Extensions
@model Bec.TargetFramework.Entities.StateDTO


<script>


</script>

@(Html.X()
      .FormPanel()
      .ID("AddStateForm")
      .Title("Add State")
      .ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
      .Items(
          Html.X().AntiForgeryField(),
          Html.X().Container().Layout(LayoutType.Column)
              .Items
              (
                  Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
                      .Items
                      (
                          Html.X()
                              .TextFieldFor(model => model.StateName)
                              .AllowBlank(false)
                                 .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                       .Control(c =>
                                        {
                                            c.IsRemoteValidation = true;
                                            c.RemoteValidation.Url = Url.Action("DoesStateNameExist", "State", new { area = "Admin" });
                                            c.RemoteValidation.ValidationEvent = "change, blur";
                                            c.RemoteValidation.Method = Ext.Net.HttpMethod.POST;
                                            c.RemoteValidation.ShowBusy = false;
                                            c.RemoteValidation.ErrorMessage = "The state name already exists";
                                        }),
                          Html.X().TextAreaFor(model => model.StateDescription)
                              .AllowBlank(false)
                                  .ApplyTextAreaDefaults(Razor.ApplyTextAreaDefaults)
                      ),
                  Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
                      .Items
                      (
                          Html.X().ComboBoxFor(model => model.StateTypeID)
                              .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .FieldLabel("Type")
                              .Store(Razor.CreateClassificationStore("StateType", Url.Action("ReadData", "Reference", new {area = ""}))),
                          Html.X().ComboBoxFor(model => model.StateCategoryID)
                              .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .ValidateOnBlur(false)
                              .ValidateOnChange(false)
                              .FieldLabel("Category")
                              .Store(Razor.CreateClassificationStore("StateCategory", Url.Action("ReadData", "Reference", new {area = ""})))
                      )
              )
      )
      .TopBar(Html.X().Toolbar()
          .Items(
              Html.X().ToolbarFill(),
              Html.X()
                  .Button()
                  .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults)
                  .DirectEvents(de =>
                  {
                      de.Click.Before = "return #{AddStateForm}.isValid();";
                      de.Click.Url = Url.Action("Add", "State", new {area = "Admin", containerId = "AdministrationCenterPanel"});
                      de.Click.FormID = "AddStateForm";
                  }),
              Html.X().Button()
                  .ApplyButtonDefaults(Razor.ApplyResetButtonDefaults)
                  .OnClientClick("App.AddStateForm.getForm().reset();"),
              Html.X().Button()
                  .ApplyButtonDefaults(Razor.ApplyCancelButtonDefaults)
                  .DirectEvents(de => { de.Click.Url = Url.Action("StateManagement", "State", new {area = "Admin", containerId = "AdministrationCenterPanel"}); })
          ))                  
      )