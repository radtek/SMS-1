@using System.ServiceModel
@using Bec.TargetFramework.Entities
@using Bec.TargetFramework.Web.Framework.Extensions
@model Bec.TargetFramework.Entities.StateDTO

<script>

    var overrideValidate = function(field) {
        field.isValid(true);
    };



</script>

@(Html.X()
      .FormPanel()
      .ID("EditStateForm")
      .Title("Edit State")
      .ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
      .Items(
          Html.X().AntiForgeryField(),
          Html.X().Container().Layout(LayoutType.Column)
              .Items
              (
                  Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
                      .Items
                      (
                          Html.X()
                              .TextFieldFor(model => model.StateName)
                              .AllowBlank(false)
                              .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                                     .ReadOnly(true),
                          Html.X().TextAreaFor(model => model.StateDescription)
                              .AllowBlank(false)
                              .ApplyTextAreaDefaults(Razor.ApplyTextAreaDefaults)
                      ),
                  Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
                      .Items
                      (
                          Html.X().ComboBoxFor(model => model.StateTypeID)
                              .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .FieldLabel("Type")
                              .Store(Razor.CreateClassificationStore("StateType", Url.Action("ReadData", "Reference", new {area = ""}))),
                          Html.X().ComboBoxFor(model => model.StateCategoryID)
                              .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .ValidateOnBlur(false)
                              .ValidateOnChange(false)
                              .FieldLabel("Category")
                              .Store(Razor.CreateClassificationStore("StateCategory", Url.Action("ReadData", "Reference", new {area = ""})))
                      ),
                  Html.X().Container().Layout(LayoutType.Form).ColumnWidth(1.0).Padding(5)
                      .Items
                      (
                          Html.X()
                              .GridPanel()
                              .PaddingSpec("5 0 0 0")
                              .ID("AddStateItemGrid")
                              .Title("State Items")
                              .Flex(1)
                              .Store(Html.X()
                                  .Store()
                                  .AutoLoad(true)
                                  .RemoteSort(false)
                                  .Model(Html.X()
                                      .Model()
                                      .Fields(fields =>
                                      {
                                          fields.Add(new ModelField("ParentStateItemName"));
                                          fields.Add(new ModelField("StateItemName"));
                                          fields.Add(new ModelField("StateItemID"));
                                      }))
                                  .DataSource(Model.StateItems)
                                  .Proxy(proxy => proxy.Add(Html.X()
                                      .AjaxProxy()
                                      .Url(Url.Action("GetStateItems", "State", new {id = Model.StateID, area = "Admin"}))
                                      .Reader(reader => reader.Add(Html.X()
                                          .JsonReader()
                                          .Root("data")
                                          .IDProperty("StateItemID")))))
                                  .MessageBusListeners(ml =>
                                  {
                                      ml.Add(new MessageBusListener {Name = "AddStateItem", Handler = "App.StateItemAddWindow.close();  App.AddStateItemGrid.getStore().load();"});
                                      ml.Add(new MessageBusListener {Name = "DeleteStateItem", Handler = "App.AddStateItemGrid.getStore().load();"});
                                      ml.Add(new MessageBusListener {Name = "EditStateItem", Handler = "App.StateItemEditWindow.close();  App.AddStateItemGrid.getStore().load();"});
                                  }))
                              .ColumnModel(
                                  Html.X().Column().Text("Parent Item Name").DataIndex("ParentStateItemName").Width(200),
                                  Html.X().Column().Text("Item Name").DataIndex("StateItemName").Width(200),
                                  Html.X()
                                      .CommandColumn()
                                      .Text("Edit")
                                      .Commands(
                                          Html.X()
                                              .GridCommand()
                                              .CommandName("Edit")
                                              .Icon(Icon.ApplicationEdit)
                                              .ToolTip(tt => tt.Text = "Edit")
                                      )
                                      .DirectEvents(de =>
                                      {
                                          de.Command.Method = HttpMethod.GET;
                                          de.Command.Url = Url.Action("ShowEditWindow", "State", new {area = "Admin"});
                                          de.Command.ExtraParams.Add(new Parameter("id", "record.data.StateItemID", ParameterMode.Raw));
                                          de.Command.ExtraParams.Add(new Parameter("containerId", "AdministrationCenterPanel", ParameterMode.Value));
                                      })
                                     
                                      ,
                                  Html.X()
                                      .CommandColumn()
                                      .Text("Delete")
                                      .Commands(
                                          Html.X()
                                              .GridCommand()
                                              .CommandName("Delete")
                                              .Icon(Icon.ApplicationDelete)
                                              .ToolTip(tt => tt.Text = "Delete")
                                      ).DirectEvents(de =>
                                      {
                                          de.Command.Method = HttpMethod.GET;
                                          de.Command.Url = Url.Action("DeleteStateItem", "State", new {area = "Admin"});
                                          de.Command.Confirmation.ConfirmRequest = true;
                                          de.Command.Confirmation.Message = "Are you sure you want to delete this record?";
                                          de.Command.Confirmation.ConfirmRequest = true;
                                          de.Command.ExtraParams.Add(new Parameter("id", "record.data.StateItemID", ParameterMode.Raw));
                                          de.Command.Success = "App.AddStateItemGrid.getStore().load();";
                                      })
                              )
                              .DockedItems(
                                  Html.X().Toolbar()
                                      .Dock(Dock.Top)
                                      .Items(
                                          Html.X()
                                              .Button()
                                              .Text("Add State")
                                                              .OnClientClick("App.StateItemAddWindow.show();"),
                                          Html.X().ToolbarFill()))
                              .AutoDoLayout(true)
                      )
              ), Html.X().HiddenFor(model => model.StateID)
      )
      .TopBar(Html.X().Toolbar()
          .Items(
              Html.X().ToolbarFill(),
              Html.X()
                  .Button()
                  .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults)
                  .DirectEvents(de =>
                  {
                      de.Click.Before = "return #{EditStateForm}.isValid();";
                      de.Click.Url = Url.Action("Edit", "State", new {area = "Admin", containerId = "AdministrationCenterPanel"});
                      de.Click.FormID = "EditStateForm";
                  }),
              Html.X().Button().ApplyButtonDefaults(Razor.ApplyResetButtonDefaults).OnClientClick("App.EditStateForm.getForm().reset();"),
              Html.X().Button().ApplyButtonDefaults(Razor.ApplyCancelButtonDefaults)
                  .DirectEvents(de => { de.Click.Url = Url.Action("StateManagement", "State", new {area = "Admin", containerId = "AdministrationCenterPanel"}); })))
      )

@(Html.X()
      .Window()
      .ID("StateItemAddWindow")
      .Title("Add State Item")
      .Icon(Icon.Application)
      
      .AutoRender(false)
      .Hidden(true)
      .BodyPadding(5)
      .Width(500)
      .Height(500)
      .Modal(true)
      .Loader(Html.X()
          .ComponentLoader()
          .Url(Url.Action("AddStateItem", "State", new {area = "Admin",id = Model.StateID}))
          .Mode(LoadMode.Frame)
              
          )
)
