@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC

@model Bec.TargetFramework.Entities.TradingNameDTO

@{
    var X = Html.X();
    Layout = "~/Views/Shared/_BaseLayoutNoNotificationViewer.cshtml";


}

@section headTag
{
    <script>



    </script>

    <script type="text/javascript">

        function addTradingName ()
        {
            var grid = App.AddTradingName;

            grid.editingPlugin.cancelEdit();

            var r = Ext.ModelManager.create({
                AccountName: '',
                SortCode: '',
                AccountNumber: '',
                ID: ''}, 'TradingName');

            grid.store.insert(0,r);
            grid.editingPlugin.startEdit(0,0);
        }

        var removeTradingName = function (editor, e, eOpts) {
            var grid = App.AddTradingName;
            var sm = grid.getSelectionModel();
            var index = 0;

            for (var i = 0; i < grid.getStore().data.length; i++) {
                var record = grid.getStore().getAt(i);

                if (eOpts.data.TradingName == record.data.TradingName && eOpts.data.ID == record.data.ID)
                {
                    index = i;
                    break;
                } 
            }

            App.direct.SafeTransactionSearch.DeleteTradingName(eOpts.data, {
                success: function (result) {
                    if (!result.valid) {
                        Ext.Msg.alert("Delete Error", result.msg);
                        return;
                    }
                }
            });

            grid.editingPlugin.cancelEdit();
            grid.store.remove(grid.store.getAt(index));

            if (grid.store.getCount() > 0) {
                sm.select(0);
            }
        };

        var cancelEdit = function (editor, e, eOpts) {
            var grid = App.AddTradingName;
            var sm = grid.getSelectionModel();
            grid.editingPlugin.cancelEdit();

            // remove phantom row when cancelling
            grid.getStore().each(function (record, index) {
                if (record.phantom) {
                    
                    grid.getStore().remove(record);
                    return false;
                } else {
                    
                }

            });
        };

        var validateSave = function (editor, e, eOpts) {
            var grid = App.AddTradingName;
            var newModel = e.record.copy();
            newModel.set(e.newValues);
            if (newModel.data.TradingName == '')
            {
                Ext.Msg.alert("Error", 'Please enter a valid trading name');
                return false;
            }

            // run model validation
            var errors = newModel.validate();

            if (errors.isValid())
            {
                var match = false;

                // check if name exists
                for (var i = 0; i < grid.getStore().data.length; i++) {
                    var record = grid.getStore().getAt(i);
                        if (newModel.data.TradingName == record.data.TradingName && newModel.data.ID != record.data.ID) {
                            
                            match = true;
                        }
                            
                }

                if (match == false) {

                    // execute direct event validation
                    App.direct.SafeTransactionSearch.ValidateTradingNameOnSave(e.newValues, {
                        success: function (result) {
                            if (!result.valid) {
                                Ext.Msg.alert("Trading Name Error", result.msg);
                            }
                            else {
                                grid.editingPlugin.completeEdit();

                                App.direct.SafeTransactionSearch.SaveTradingName(e.newValues, {
                                    success: function (result) {
                                        if (!result.valid) {
                                            Ext.Msg.alert("Error", result.msg);
                                            return false;
                                        } else {
                                            
                                            return true;
                                        }

                                        // do we need to do something here
                                    }
                                });
                            }

                        }
                    });
                }
                else {
                    Ext.Msg.alert("Error", 'The trading name ' + newModel.data.TradingName + ' already exists!');

                    return false;
                }
            }
            else
               editor.editor.form.markInvalid(errors);
        };



 
        

    </script>

}

@section mainBody
{
    @(X.FormPanel().ID("TradingNameForm").ColumnWidth(1).ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
        .Items
        (
                    Html.X()
                    .GridPanel()
                    .Width(480)
                    .MinWidth(480)
                    .MinHeight(400)
                    .Height(400)
                    .Padding(5)
                    .ID("AddTradingName")
                    .MessageBusListeners(ml =>
                    {
                        ml.Add(new MessageBusListener { Name = "AddTradingNameGridLoad", Handler = "App.AddTradingName.getStore().load();" });
                    })
                    .Plugins(X.RowEditing().ClicksToMoveEditor(1).AutoCancel(false).Listeners(l => l.ValidateEdit.Fn = "validateSave").Listeners(l => l.BeforeEdit.Handler = "")
                    .Listeners(l => l.CancelEdit.Fn = "cancelEdit").ErrorSummary(false)
                        )
                    .Store(Html.X()
                        .Store()
                        .AutoLoad(true)
                        .RemoteSort(false)
                        .Model(Html.X()
                        .Model().Name("TradingName")
                            .Fields(fields =>
                            {
                                fields.Add(new ModelField("TradingName"));
                                fields.Add(new ModelField("ID"));
                            }))

                        .Proxy(proxy => proxy.Add(Html.X()
                            .AjaxProxy()
                                    .Url(Url.Action("GetTradingNames", "FirmDetail", new { area = "SafeTransactionSearch" }))
                            .Reader(reader => reader.Add(Html.X()
                                .JsonReader()
                                .Root("data")
                                                .IDProperty("ID"))))))
                    .ColumnModel(
                                Html.X().Column().Text("ID").DataIndex("ID").Hidden(true),
                                Html.X().Column().Text("Trading Name").DataIndex("TradingName").Width(400)
                        .Editor
                        (
                                                        X.TextField().AllowBlank(false)
                        ),
                        Html.X()
                            .CommandColumn().Width(30)
                            .Commands(
                                Html.X()
                                    .GridCommand()
                                    .CommandName("Delete")
                                    .Icon(Icon.ApplicationDelete)
                                    .ToolTip(tt => tt.Text = "Delete"))
                                    .Listeners(l => l.Command.Fn = "removeTradingName")
                                    


                    )
                    .DockedItems(
                        Html.X().Toolbar()
                            .Dock(Dock.Top)
                            .Items(
                                Html.X()
                                    .Button().Icon(Icon.Add).Text("Add Trading Name")
                                    .Listeners(l => l.Click.Fn = "addTradingName")
                                    ,
                                Html.X().ToolbarFill()))
                    .AutoDoLayout(true)
        )
        .TopBar(
           
            Html.X().Toolbar()
          .Items(
              Html.X().ToolbarFill(),
              Html.X()
                  .Button()
                  .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults)
                  .Text("Close")
                  .DirectEvents(de =>
                  {
                      //de.Click.Before = "return #{TradingNameForm}.isValid();";
                      de.Click.Url =  Url.Action("AddTradingName", "FirmDetail", new { area = "SafeTransactionSearch" });
                      de.Click.FormID = "TradingNameForm";
                      de.Click.EventMask.ShowMask = true;
                      de.Click.Method = HttpMethod.POST;
                        de.Click.EventMask.Msg = "Please wait ...";
                  }))
        )
    )
}