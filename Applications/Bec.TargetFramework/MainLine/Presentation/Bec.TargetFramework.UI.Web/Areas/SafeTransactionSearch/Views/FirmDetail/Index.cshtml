
@using Bec.TargetFramework.Entities
@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC
@model Bec.TargetFramework.Entities.FirmDetailsDTO

@{
    BuilderFactory<FirmDetailsDTO> X = Html.X();
    Layout = "~/Views/Shared/_BaseLayoutNoNotificationViewer.cshtml";
}



@section headTag
{
<script src="~/Scripts/TargetFramework/GridCRUD.js">


</script>
    <style>

        .x-tree-icon { display: none; }

        .x-tree-selected{
            text-decoration: line-through;
            color : greenyellow;
        }

    </style>

    <script type="text/javascript">

        function isFirmRegistered(obj, value) {

            var selectedValue = obj.getChecked()[0].inputValue;

            if (selectedValue == 1)
                App.RegisteredCompanyNumber.show();
            else
                App.RegisteredCompanyNumber.hide();

        }

        function isFirmVATRegistered(obj, value) {
            var selectedValue = obj.getChecked()[0].inputValue;

            if (selectedValue == 1)
                App.VATNumber.show();
            else
                App.VATNumber.hide();
        }

        function addClientAccount() {
            var grid = App.AddClientAccount;

            grid.editingPlugin.cancelEdit();

            var r = Ext.ModelManager.create({
                AccountName: '',
                SortCode: '',
                AccountNumber: '',
                ID: ''
            }, 'ClientAccount');

            grid.store.insert(0, r);
            grid.editingPlugin.startEdit(0, 0);
        }

        var removeClientAccount = function(editor, e, eOpts) {

            var grid = App.AddClientAccount;

            var index = 0;

            for (var i = 0; i < grid.getStore().data.length; i++) {
                var record = grid.getStore().getAt(i);

                if (eOpts.data.AccountName == record.data.AccountName && eOpts.data.ID == record.data.ID) {
                    index = i;
                    break;
                }
            }

            App.direct.SafeTransactionSearch.DeleteClientAccount(eOpts.data, {
                success: function(result) {
                    if (!result.valid) {
                        Ext.Msg.alert("Delete Error", result.msg);
                        return;
                    }
                }
            });

            grid.editingPlugin.cancelEdit();
            grid.store.remove(grid.store.getAt(index));

            if (grid.store.getCount() > 0) {
                sm.select(0);
            }
        };

        var cancelEdit = function(editor, e, eOpts) {
            var grid = App.AddClientAccount;
            var sm = grid.getSelectionModel();
            grid.editingPlugin.cancelEdit();

            // remove phantom row when cancelling
            grid.getStore().each(function(record, index) {
                if (record.phantom) {
                    grid.getStore().remove(record);
                    return false;
                }
            });
        };

        var validateSave = function(editor, e, eOpts) {
            var grid = App.AddClientAccount;
            var newModel = e.record.copy();

            newModel.set(e.newValues);

            if (newModel.data.AccountName == '' || newModel.data.SortCode == '' || newModel.data.AccountNumber == '')
            {
                Ext.Msg.alert("Error", 'Please enter valid account details');
                return false;
            }
            // run model validation
            var errors = newModel.validate();

            if (errors.isValid()) {
                var match = false;

                // check if name exists
                for (var i = 0; i < grid.getStore().data.length; i++) {
                    var record = grid.getStore().getAt(i);

                    if (newModel.data.AccountName == record.data.AccountName && newModel.data.ID != record.data.ID)
                        match = true;
                }

                if (match == false) {

                    // execute direct event validation
                    App.direct.SafeTransactionSearch.ValidateClientAccountOnSave(e.newValues, {
                        success: function(result) {
                            if (!result.valid) {
                                Ext.Msg.alert("Client Account Error", result.msg);
                            } else {
                                grid.editingPlugin.completeEdit();

                                App.direct.SafeTransactionSearch.SaveClientAccount(e.newValues, {
                                    success: function(result) {
                                        if (!result.valid) {
                                            Ext.Msg.alert("Error", result.msg);
                                            return;
                                        } else {
                                            return true;
                                        }
                                    }
                                });
                            }

                        }
                    });
                } else {
                    Ext.Msg.alert("Error", 'The account name ' + newModel.data.AccountName + ' already exists!');

                    return false;
                }

            } else
                editor.editor.form.markInvalid(errors);
        };

        function populateTradingName(data) {
            var cntrl = Ext.getCmp('TradingName');

            if (data != null)
                cntrl.setValue(data);
        }

        function populateHelp(editor, e, eOpts) {
            var cntrl = Ext.getCmp('HelpLabel');

            if (editor.tag != null)
                cntrl.setText(editor.tag);
        }

        function validateRenewalDate(date) {
            var date_regex = /(((((0[1-9])|(1\d)|(2[0-8]))\/((0[1-9])|(1[0-2])))|((31\/((0[13578])|(1[02])))|((29|30)\/((0[1,3-9])|(1[0-2])))))\/((20[0-9][0-9])|(19[0-9][0-9])))|((29\/02\/(19|20)(([02468][048])|([13579][26]))))$/;
            if (date_regex.test(date)) {
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth() + 1; //January is 0!

                var yyyy = today.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd
                }
                if (mm < 10) {
                    mm = '0' + mm
                }
                var today = dd + '/' + mm + '/' + yyyy;

                return (date > today);
            }
        }

        var HighlightCurrentNode = function () {

            "c3d168f0-2213-11e4-882b-0bc2f0f0e29e"

        };

    </script>

}

@section mainBody
{
@(Html.X().Viewport().ID("FirmViewPort").Layout(LayoutType.Border).AutoDoLayout(true)
          .Items(
                      Html.X().Panel().Region(Region.North).ItemsFromPage(this, "~/Views/Portal/_TopBar.cshtml"),
                                        Html.X().Panel().Region(Region.West).ID("WorkflowTree").Height(750).Width(250).AutoScroll(false)
                                      .ItemsFromPartial("_LeftPanel"),
                      Html.X().Container().Region(Region.Center).Layout(LayoutType.Column).AutoScroll(true).AutoDoLayout(true)
                  .Padding(2)
                  .Items
                  (

                       
                      X.FormPanel().ID("FirmDetailForm").ColumnWidth(1).ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
                          .Items
                          (
                              Html.X().AntiForgeryField(),
                              X.Container().Layout(LayoutType.Column).Padding(2).MinWidth(880)
                                  .Items
                                  (
                                      X.Container().ColumnWidth(0.5)
                                          .Items(
                                              X.Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.Start })
                                                  .Items
                                                  (
                                                      X.Button().ApplyButtonDefaults(Razor.ApplyPreviousButtonDefaults).Flat(true)
                                                              .DirectEvents(de =>
                                                                  {
                                                                      de.Click.Url = Url.Action("Previous", "FirmDetail", new { area = "SafeTransactionSearch" });
                                                                      de.Click.FormID = "FirmDetailForm";
                                                                      de.Click.EventMask.ShowMask = true;
                                                                      de.Click.Method = HttpMethod.POST;
                                                                      de.Click.EventMask.Msg = "Please wait ...";
                                                                  })
                                                  )
                                          ),
                                              X.Container().ColumnWidth(0.5)
                                          .Items(
                                              X.Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.End })
                                                  .Items
                                                  (
                                                          X.Button().ApplyButtonDefaults(Razor.ApplyNextButtonDefaults).Flat(true)
                                                          .DirectEvents(de =>
                                                          {
                                                             // de.Click.Before = "return #{FirmDetailForm}.isValid();";
                                                              de.Click.Url = Url.Action("Next", "FirmDetail", new { area = "SafeTransactionSearch" });
                                                              // de.Click.FormID = "FirmDetailForm";
                                                              de.Click.EventMask.ShowMask = true;
                                                              de.Click.Method = HttpMethod.POST;
                                                              de.Click.EventMask.Msg = "Please wait ...";
                                                          })
                                                  )
                                          )
                                  ),
                              X.Container().Layout(LayoutType.Column).Padding(2).MinWidth(880)
                                  .Items(
                                        X.Panel().ColumnWidth(0.5).Border(true)
                                          .Items(
                                              X.Panel().ApplyPanelDefaults("FirmContact").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.TextFieldFor(model => model.FirmName).ApplyFieldDefaults("FirmContact", "FirmName").MinWidth(200).Flex(1).Padding(2)
                                                                  .Control(c =>
                                                                  {
                                                                      c.IsRemoteValidation = true;
                                                                      c.RemoteValidation.Url = Url.Action("DoesFirmNameExist", "FirmDetail", new { area = "SafeTransactionSearch" });
                                                                      c.RemoteValidation.ValidationEvent = "change, blur";
                                                                      c.RemoteValidation.Method = HttpMethod.POST;
                                                                      c.RemoteValidation.ShowBusy = true;
                                                                      c.RemoteValidation.ErrorMessage = "The firm name already exists";
                                                                  })
                                                                  .Listeners(l => l.Focus.Fn = "populateHelp"),

                                                                  X.TextFieldFor(model => model.Website).ApplyFieldDefaults("FirmContact", "Website").Padding(2).Flex(1)
                                                          ),
                                                                              X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.TextFieldFor(model => model.TradingName).ApplyFieldDefaults("FirmContact", "TradingName").MinWidth(200).ReadOnly(true).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).Padding(2)
                                                              ,
                                                                  X.Button().Icon(Icon.Add).Text("Add Trading Name")
                                                                                  .OnClientClick("App.TradingNameAddWindow.show();").MinWidth(50).Flex(1).Flat(true)
                                                          )
                                                  ),
                                              X.Panel().ApplyPanelDefaults("FirmRegulator").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                              X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.ComboBoxFor(model => model.Regulator).ID("Regulator").ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                                  .FieldLabel("Who is your regulator").Editable(false)
                                                                  .Store(Razor.CreateClassificationStore("RegulatorID", Url.Action("ReadData", "Reference", new { area = "" })))
                                                          )
                                                             
                                                  ),
                                              X.Panel().ApplyPanelDefaults("FirmProfessionalIndemnityInsurance").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                                              X.TextFieldFor(model => model.PIIProvider).ApplyFieldDefaults("FirmProfessionalIndemnityInsurance", "PIIProvider").MinWidth(200).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1),
                                                                            X.DateFieldFor(model => model.RenewalDate).ApplyFieldDefaults("FirmProfessionalIndemnityInsurance", "RenewalDate").Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).Format("dd/MM/yyyy")
                                                                                                                .Validate().ValidateOnBlur(true).Validator(v => v.Fn = "validateRenewalDate").ValidatorText("Please enter a future date in the format dd/mm/yyyy").Flex(1)
                                                          ),
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.TextFieldFor(model => model.PolicyNumber).ApplyFieldDefaults("FirmProfessionalIndemnityInsurance", "PolicyNumber").MinWidth(200).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                          )
                                                  ),
                                                  X.Panel().ApplyPanelDefaults("FirmRegistration").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(0.5).Padding(2)
                                                          .Items
                                                          (
                                                              X.RadioGroupFor(model => model.IsCompaniesHouseRegistered, new List<Radio.Config> { new Radio.Config { BoxLabel = "Yes", InputValue = "1" }, new Radio.Config { BoxLabel = "No", InputValue = "0" } })
                                                                  .LabelAlign(LabelAlign.Top).Listeners(l => l.Focus.Fn = "populateHelp").AllowBlank(false).BlankText("Required").MsgTarget(MessageTarget.Under).MinHeight(65)
                                                                  .ApplyRadioGroupDefaults("FirmRegistration", "FirmCompaniesHouseRegistered")
                                                                  .Listeners(l => l.Change.Fn = "isFirmRegistered")
                                                                 .Flex(1)
                                                          ),
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                                      X.TextFieldFor(model => model.RegisteredCompanyNumber).ApplyFieldDefaults("FirmRegistration", "RegisteredCompanyNumber").MinWidth(200).Hidden(true).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                          )
                                                  ),
                                              X.Panel().ApplyPanelDefaults("FirmVATDetails").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                  X.Container().ColumnWidth(0.5).Padding(2)
                                                          .Items
                                                          (
                                                              X.RadioGroupFor(model => model.IsVATRegistered, new List<Radio.Config> { new Radio.Config { BoxLabel = "Yes", InputValue = "1", LabelAlign = LabelAlign.Left }, new Radio.Config { BoxLabel = "No", InputValue = "0", LabelAlign = LabelAlign.Left } })
                                                                              .LabelAlign(LabelAlign.Top).Listeners(l => l.Focus.Fn = "populateHelp").AllowBlank(false).BlankText("Required").MsgTarget(MessageTarget.Under).MinHeight(65)
                                                                  .ApplyRadioGroupDefaults("FirmVATDetails", "FirmVATRegistered")
                                                                  .Listeners(l => l.Change.Fn = "isFirmVATRegistered")
                                                                  .Flex(1)
                                                          ),
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.TextFieldFor(model => model.VATNumber).ApplyFieldDefaults("FirmVATDetails", "VATNumber").MinWidth(200).Hidden(true).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                          )
                                                  )
                                          ),
                                              X.Panel().ColumnWidth(0.5).Border(true)
                                          .Items(
                                              X.Panel().ApplyPanelDefaults("FirmOtherDetails").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                          X.Container().ColumnWidth(1).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                                            X.NumberFieldFor(model => model.DirectorsCount).ApplyFieldDefaults("FirmOtherDetails", "NoOfRegulatedPartners").LabelAlign(LabelAlign.Left).LabelWidth(380).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).AllowDecimals(false),
                                                                                    X.NumberFieldFor(model => model.RPCount).ApplyFieldDefaults("FirmOtherDetails", "NoOfRegulatedPractitioners").LabelAlign(LabelAlign.Left).LabelWidth(380).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).AllowDecimals(false),
                                                                                    X.NumberFieldFor(model => model.StaffCount).ApplyFieldDefaults("FirmOtherDetails", "NoOfStaff").LabelAlign(LabelAlign.Left).LabelWidth(380).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).AllowDecimals(false),
                                                                            X.NumberFieldFor(model => model.CompletionsCount).ApplyFieldDefaults("FirmOtherDetails", "NoOfCompletionsPerMonth").LabelAlign(LabelAlign.Left).LabelWidth(380).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1).AllowDecimals(true).DecimalPrecision(2)
                                                          )
                                                  ),
                                                      X.Panel().ApplyPanelDefaults("ContactDetails").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              X.TextFieldFor(model => model.OfficePhoneNumber).ApplyFieldDefaults("ContactDetails", "OfficePhoneNumber").MinWidth(200).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                          ),
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                                              X.TextFieldFor(model => model.DirectDialNumber).ApplyFieldDefaults("ContactDetails", "DirectDialPhoneNumber").MinWidth(200).Listeners(l => l.Focus.Fn = "populateHelp").Flex(1)
                                                          )
                                                  ),
                                                      X.Panel().ApplyPanelDefaults("FirmClientAccountDetails").Layout(LayoutType.Column).ColumnWidth(1).MinWidth(420)
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(1).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (
                                                              Html.X()
                                                                  .GridPanel()
                                                                  .Flex(1)

                                                                  .MinWidth(400)
                                                                  .Padding(5)
                                                                  .MessageBusListeners(ml => { ml.Add(new MessageBusListener { Name = "AddClientAccountGridLoad", Handler = "App.AddClientAccount.getStore().load();" }); })
                                                                  .ID("AddClientAccount")
                                                                  .Plugins(X.RowEditing().ID("ClientAccountEdit").ClicksToMoveEditor(1).AutoCancel(false).Listeners(l => l.ValidateEdit.Fn = "validateSave").Listeners(l => l.BeforeEdit.Fn = "beforeEdit")
                                                                      .Listeners(l => l.CancelEdit.Fn = "cancelEdit").Listeners(l => l.Edit.Fn = "completeEdit").ErrorSummary(false)
                                                                      
                                                                  )
                                                                  .Store(Html.X()
                                                                      .Store()
                                                                      .AutoLoad(true)
                                                                      .RemoteSort(false)
                                                                      .Model(Html.X()
                                                                          .Model().Name("ClientAccount")
                                                                          .Fields(fields =>
                                                                          {
                                                                              fields.Add(new ModelField("AccountName"));
                                                                              fields.Add(new ModelField("SortCode"));
                                                                              fields.Add(new ModelField("AccountNumber"));
                                                                              fields.Add(new ModelField("ID"));
                                                                          }))
                                                                      .Proxy(proxy => proxy.Add(Html.X()
                                                                          .AjaxProxy()
                                                                          .Url(Url.Action("GetClientAccounts", "FirmDetail", new { area = "SafeTransactionSearch" }))
                                                                          .Reader(reader => reader.Add(Html.X()
                                                                              .JsonReader()
                                                                              .Root("data")
                                                                              .IDProperty("ID"))))))
                                                                  .ColumnModel(
                                                                      Html.X().Column().Text("ID").DataIndex("ID").Hidden(true),
                                                                      Html.X().Column().Text("Account Name").DataIndex("AccountName").Width(120)
                                                                          .Editor
                                                                          (
                                                                              X.TextField().AllowBlank(false)
                                                                          ).Flex(1),
                                                                      Html.X().Column().Text("Sort Code").DataIndex("SortCode").Width(100)
                                                                          .Editor(
                                                                              X.TextField().AllowBlank(false)
                                                                                  .Plugins(
                                                                                      X.InputMask().Mask("XX-XX-XX")
                                                                                          .MaskSymbols(s => { s.Add(new MaskSymbol { Name = "X", Regex = "[0-9]", Placeholder = 'X' }); })
                                                                                  )
                                                                          )
                                                                      ,
                                                                      Html.X().Column().Text("Account Number").DataIndex("AccountNumber").Width(120).Editor(X.NumberField().AllowBlank(false)),
                                                                      Html.X()
                                                                          .CommandColumn().Width(30)
                                                                          .Commands(
                                                                              Html.X()
                                                                                  .GridCommand()
                                                                                  .CommandName("Delete")
                                                                                  .Icon(Icon.ApplicationDelete)
                                                                                  .ToolTip(tt => tt.Text = "Delete"))
                                                                          .Listeners(l => l.Command.Fn = "removeClientAccount")
                                                                  )
                                                                  .DockedItems(
                                                                      Html.X().Toolbar()
                                                                          .Dock(Dock.Top)
                                                                          .Items(
                                                                              Html.X()
                                                                                  .Button().Icon(Icon.Add).Text("Add Client Account")
                                                                                  .Listeners(l => l.Click.Fn = "addClientAccount")
                                                                              ,
                                                                              Html.X().ToolbarFill()))
                                                                  .AutoDoLayout(true)
                                                          )
                                                  ),
                                                      X.Panel().Layout(LayoutType.Column).ColumnWidth(1).ApplyPanelDefaults("FirmCOForFinanceAndAdministration")
                                                  .Items
                                                  (
                                                                      X.Container().ColumnWidth(0.5).Padding(2).Layout(LayoutType.Fit)
                                                          .Items
                                                          (

                                                                    X.RadioGroupFor(model => model.IsCOFinanceAndAdmin, new List<Radio.Config> { new Radio.Config { BoxLabel = "Yes", InputValue = "1" }, new Radio.Config { BoxLabel = "No", InputValue = "0" } })
                                                                                                .LabelAlign(LabelAlign.Top).Listeners(l => l.Focus.Fn = "populateHelp")
                                                                                                        .ApplyRadioGroupDefaults("FirmCOForFinanceAndAdministration", "FirmCOForFinanceAndAdministration").Flex(1)
                                                          ),
                                                              X.Container().ColumnWidth(0.5).Padding(2)
                                                          .Items
                                                          (
                                                          )
                                                  )
                                          )
                                  )
                          )
                  ).MessageBusListeners(l => { l.Add(new MessageBusListener { Name = "AddTradingName", Handler = "App.TradingNameAddWindow.close();populateTradingName(data);" }); })
          )



)
                  


    @(Html.X()
          .Window()
          .ID("TradingNameAddWindow")
          .Title("Add Trading Names")
          .Icon(Icon.Application)
          .AutoRender(false)
          .Hidden(true)
          .BodyPadding(5)
          .Width(500)
          .Height(500)
          .Modal(true)
          .Loader(Html.X()
              .ComponentLoader()
              .Url(Url.Action("AddTradingName", "FirmDetail", new {area = "SafeTransactionSearch"}))
              .Mode(LoadMode.Frame)
          )
          )
}