@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC

@model Bec.TargetFramework.Entities.FirmBranchDTO

@{
    var X = Html.X();
    ViewBag.Title = "AddEditBranch";
    Layout = "~/Views/Shared/_BaseLayoutNoNotificationViewer.cshtml";
}

@section headTag
{
    <script type="text/javascript">

    var BranchStatusChange = function (obj) {
        var selectedText = obj.displayTplData[0].Name;
        if (selectedText.toUpperCase() == 'REJECTED') {
            App.RejectionReason.show();

            App.direct.SafeTransactionSearch.CheckIfuserExistsOnRejection(e.newValues, {
                success: function (result) {
                    if (!result.valid) {
                        App.Notification.value = result.msg;
                        
                    } else {
                        return true;
                    }
                }
            });
        }
        else {
            App.RejectionReason.hide();
        }
    };

    var RejectionReasonChange = function (obj) {
        var selectedText = obj.displayTplData[0].Name;
        if (selectedText.toUpperCase() == 'OTHER') {
            App.RejectionReasonComments.show();
        }
        else {
            App.RejectionReasonComments.hide();
        }
    };

    var ValidateHeadOffice = function (obj) {


        App.direct.SafeTransactionSearch.ValidateHeadOffice(e.newValues, {
            success: function (result) {

                App.direct.SafeTransactionSearch.CheckHeadOffice(e.newValues, {
                    success: function (result) {
                        if (!result.valid) {

                            return;
                        } else {
                            return true;
                        }
                    }
                });
            }

        });
    };


    var Regulatornumbervalidation = function (field) {
        var Regulator = @{@Html.Raw(Json.Encode(Model.Regulator));};

        Regulator = "SRA";  //for testing
        if (Regulator != 'null') {
            if (Regulator == 'SRA') {
                return /^([0-9a-zA-Z]{3,6}|)$/.test(field);
            }
            else if (Regulator == 'CLC') {
                return /^([0-9]{5,6}|)$/.test(field);
            }
        }

        return true;
    };

        var DisplayNotification = function()
        {
            
        };


</script>
}

@section mainBody
{
  @(Html.X().Store().AutoLoad(true).ID("BranchStatusStore")
          .Model(Html.X().Model().Fields(fields =>
                      {
                          fields.Add(new ModelField("StatusTypeValueID"));
                          fields.Add(new ModelField("Name"));
                      })
                      .Proxy(p => p.Add(Html.X().AjaxProxy().Url(Url.Action("GetBranchStatus", "Reference", new { area = "" })).Reader(new JsonReader.Builder().Root("data"))))))  

  @(
         X.FormPanel().ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults).ID("AddEditBranchForm").AutoDoLayout(true).Items(

        X.Container().ID("Errors").Layout(LayoutType.Column).Padding(2).MinWidth(880)
        .Items
        (
            X.Container().ColumnWidth(0.5)
                .Items(

                ),
            X.Container().ColumnWidth(0.5)
                .Items(
                X.MultiSelect().ID("FormErrors").Hidden(true)
                )
        ),
          X.Container().Layout(LayoutType.Column).Items(
               X.Container().Layout(LayoutType.Column).ColumnWidth(1).Items(
                                      X.HiddenFor(model => model.ID),
                                      X.TextFieldFor(model => model.Name).ColumnWidth(0.5).Padding(2).ApplyFieldDefaults("AddBranch", "BranchName"),
                                      X.CheckboxFor(model => model.IsBranchHeadOffice).ColumnWidth(0.5).Padding(2).FieldLabel("Is Branch Head Office?").LabelAlign(LabelAlign.Top).Listeners(l => l.Change.Fn = "ValidateHeadOffice")
                                          
                                      ),
                                       X.Container().Layout(LayoutType.Column).ColumnWidth(1).Items(
                                      X.TextFieldFor(model => model.RegulatorNumber).ColumnWidth(0.5).Padding(2).ApplyFieldDefaults("AddBranch", "RegulatorNumber")
                                            .Validate().ValidateOnBlur(true).Validator(v => v.Fn = "Regulatornumbervalidation").ValidatorText("Please enter a valid number")
                                      ,
                                      X.TextFieldFor(model => model.DXNumber).ColumnWidth(0.5).Padding(2).ApplyFieldDefaults("AddBranch", "DXNumber")
                                      )
                                                
          ),
          X.Panel().Layout(LayoutType.Fit).Padding(2).MinWidth(300).ID("BranchAddress").ItemsFromPartial("_AddressPartial", Model.Address),
          X.Container().Layout(LayoutType.Column).Items(
           X.Container().Layout(LayoutType.Column).ColumnWidth(1).Items(
                                      X.ComboBoxFor(model => model.Status).ID("BranchStatus").ColumnWidth(0.5).Padding(2).ApplyFieldDefaults("AddBranch", "BranchStatus").StoreID("BranchStatusStore").DisplayField("Name").ValueField("StatusTypeValueID")
                                                                               .Listeners(l => l.Change.Fn = "BranchStatusChange")
                                                                                  
                                                                               ,
                                      X.ComboBoxFor(model => model.RejectionReason).ID("RejectionReason").ColumnWidth(0.5).Padding(2).ApplyFieldDefaults("AddBranch", "RejectionReason")
                                                                               .Store(Razor.CreateClassificationStore("BranchRejectionReason", Url.Action("ReadData", "Reference", new { area = "" }))).DisplayField("Name").ValueField("Name")
                                                                               .Listeners(l => l.Change.Fn = "RejectionReasonChange")
                                                                               ),
                                                                               
                                                                             
                                      X.TextFieldFor(model => model.OtherRejectionReason).ID("RejectionReasonComments").ColumnWidth(1).Padding(2).ApplyFieldDefaults("AddBranch", "RejectionReasonComments"),
                                          X.TextAreaFor(model => model.Notification).ID("Notifications").ColumnWidth(1).Padding(2).ApplyFieldDefaults("AddBranch", "Notifications")
                          
          )
         ).TopBar(Html.X().Toolbar().Items(
                                             Html.X().ToolbarFill(),
                                             Html.X()
                                                 .Button()
                                                 .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults)
                                                 .DirectEvents(de =>
                                                 {
                                                     de.Click.Method = HttpMethod.POST;
                                                     de.Click.Before = "return #{AddEditBranchForm}.isValid();";
                                                     de.Click.Url = Url.Action("SaveBranch", "FirmBranchesUsers", new { area = "SafeTransactionSearch" });
                                                     de.Click.FormID = "AddEditBranchForm";
                                                 })
                                                // ,Html.X().Button().ApplyButtonDefaults(Razor.ApplyResetButtonDefaults).OnClientClick("resetForm(OtherAddressForm.getForm().getId());"),
                                                //Html.X().Button().ApplyButtonDefaults(Razor.ApplyCancelButtonDefaults).Text("Close").OnClientClick("Ext.net.Bus.publish('AddOtherAddress','');")
       ))
    )
}

