@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC
@model Bec.TargetFramework.Entities.RegistrationDTO
@{
    Layout = null;
    var X = Html.X();
}
<script>
    var Complianceofficerregulatorlabel = function (field) {
        var regulatornumberlabel = "Compliance officer's" + field.displayTplData[0].Name + " Number";
        var fieldCORegulatorNumber = Ext.getCmp('CORegulatorNumber');
        fieldCORegulatorNumber.labelEl.update(regulatornumberlabel);
    };

    var branchregulatorlabel = function (field) {
        var regulatornumberlabel = "Branch " + field.displayTplData[0].Name + " Number";
        var fieldBranchRegulatorNumber = Ext.getCmp('BranchRegulatorNumber');
        fieldBranchRegulatorNumber.labelEl.update(regulatornumberlabel);
    };

    var FillMyDetails = function (field) {
        if(field.checked){
        Ext.getCmp('Title').setValue(Ext.getCmp('COTitle').value);
        Ext.getCmp('FirstName').setValue(Ext.getCmp('COFirstName').value);
        Ext.getCmp('LastName').setValue(Ext.getCmp('COLastName').value);
        Ext.getCmp('Email').setValue(Ext.getCmp('COEmail').value);
        }
    };

    var comboSetter = function (comboBox, value) {
        var store = comboBox.store;
        var valueField = comboBox.valueField;
        var displayField = comboBox.displayField;

        var recordNumber = store.findExact(valueField, value, 0);

        if (recordNumber == -1)
            return -1;

        var displayValue = store.getAt(recordNumber).data[displayField];
        comboBox.setValue(value);
        comboBox.setRawValue(displayValue);
        comboBox.selectedIndex = recordNumber;
        return recordNumber;
    };
    var showFormItems = function (show) {
        if (show) {
            App.AddressForm.show();
            App.SaveAddress.show();
            App.AddAddress.hide();
            App.CancelAddress.show();

            enableDisableFormFields(false);
        } else {
            App.AddressForm.hide();
            App.AddressForm.getForm().reset();
            resetPostcodeResults();
            App.SaveAddress.hide();
            App.AddAddress.show();
            App.CancelAddress.hide();
            App.AddressList.clearValue();
            enableDisableFormFields(true);
        }


    };
    function enableDisableFormFields(enable) {

        var form = App.AddressForm.getForm();
        form.findField('Line1').setDisabled(enable);
        form.findField('Line2').setDisabled(enable);
        form.findField('Line3').setDisabled(enable);
        form.findField('City').setDisabled(enable);
        form.findField('County').setDisabled(enable);
        form.findField('BuildingName').setDisabled(enable);
        form.findField('AddressPostCode').setDisabled(enable);
        form.findField('AddressIsPrimaryAddressField').setDisabled(enable);
        form.findField('AddressNameField').setDisabled(enable);
        form.findField('AddressIDString').setDisabled(enable);
        form.findField('AddressTypeID').setDisabled(enable);
        form.findField('AddressCategoryID').setDisabled(enable);

    }
    var processSelectAddress = function () {

        var jsonString = App.AddressesJson.getValue();

        var results = JSON.parse(jsonString);

        var result = SearchForObject(results, 'AddressIDString', App.AddressList.getValue());

        if (result != null) {

            showFormItems(true);

            var form = App.AddressForm.getForm();

            form.findField('Line1').setValue(result.Line1);
            form.findField('Line2').setValue(result.Line2);
            form.findField('Line3').setValue(result.Line3);
            form.findField('City').setValue(result.City);
            form.findField('County').setValue(result.County);
            form.findField('BuildingName').setValue(result.BuildingName);
            form.findField('AddressPostCode').setValue(result.PostalCode);
            form.findField('AddressIsPrimaryAddressField').setValue(result.IsPrimaryAddress);
            form.findField('AddressNameField').setValue(result.Name);
            form.findField('AddressIDString').setValue(result.AddressIDString);
            form.findField('AddressID').setValue(result.AddressID);
            comboSetter(form.findField('AddressTypeID'), result.AddressTypeID);
            comboSetter(form.findField('AddressCategoryID'), result.AddressCategoryID);
        }
    };
    function selectFirstItem() {
        if (App.AddressList.getStore() != null && App.AddressList.getStore().getCount() > 0) {
            App.AddressList.setValue(App.AddressList.getStore().getAt('0').get('AddressIDString'));
            processSelectAddress();
        }
    }
    var resetPostcodeResults = function () {
        App.AddressForm.getForm().findField('PostCodeResults').getStore().removeAll();
        App.AddressForm.getForm().findField('PostCodeResults').hide();
    };
    var processSaveAddress = function () {
        showFormItems(false);
        App.AddressList.getStore().load();
    };
    var processAddAddress = function () {
        App.AddressForm.getForm().reset();
        resetPostcodeResults();
        showFormItems(true);
    };
    var processCancelAddress = function () {
        showFormItems(false);
    };

</script>

@(X.FormPanel().Title("Registration").ID("RegistrationForm").ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults).Items(

                X.FieldSet().Title("Compliance Officer's Details").Border(true).Layout(LayoutType.Column).Padding(2).Margin(2).Items(
                        X.ComboBoxFor(model => model.COTitle).ID("COTitle").ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults).FieldLabel("Title")
                                      .Store(Razor.CreateClassificationStore("SalutationType", Url.Action("ReadData", "Reference", new { area = "" }))),
                        X.TextFieldFor(model => model.COFirstName).ID("COFirstName").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("First Name").BlankText("Please enter First Name"),
                        X.TextFieldFor(model => model.COLastName).ID("COLastName").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Last Name"),
                        X.TextFieldFor(model => model.COEmail).ID("COEmail").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Email"),
                X.CheckboxFor(model => model.AmIComplianceOfficer).ApplyCheckboxDefaults(Razor.ApplyCheckboxDefaults).FieldLabel("I am the Compliance Officer")
                .Listeners(l => l.Change.Fn ="FillMyDetails"),
                X.ComboBoxFor(model => model.CORegulator).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults).FieldLabel("Compliance Officer's Regulator?")
                                          .Store(Razor.CreateClassificationStore("RegulatorType", Url.Action("ReadData", "Reference", new { area = "" })))
                                          .Listeners(l => l.Change.Fn = "Complianceofficerregulatorlabel"),
                X.TextFieldFor(model => model.CORegulatorNumber).ID("CORegulatorNumber").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Compliance Officer's Regulator Number")
                ),
                        X.FieldSet().Title("My Details").Border(true).Layout(LayoutType.Column).Padding(2).Margin(2).Items(
                            X.ComboBoxFor(model => model.Title).ID("Title").ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults).FieldLabel("Title")
                                          .Store(Razor.CreateClassificationStore("SalutationType", Url.Action("ReadData", "Reference", new { area = "" }))),
                        X.TextFieldFor(model => model.FirstName).ID("FirstName").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("First Name"),
                                X.TextFieldFor(model => model.LastName).ID("LastName").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Last Name"),
                                X.TextFieldFor(model => model.Email).ID("Email").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Email")
                ),
                            X.FieldSet().Title("Firm Details").Border(true).Layout(LayoutType.Column).Padding(2).Margin(2).Items(
                    X.TextFieldFor(model => model.FirmRegisteredName).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Firm Name (registered name)"),
                    X.TextFieldFor(model => model.FirmTradingName).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Trading Name"),
                    X.ComboBoxFor(model => model.FirmRegulator).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults).FieldLabel("Firm's Regulator?")
                                              .Store(Razor.CreateClassificationStore("RegulatorType", Url.Action("ReadData", "Reference", new { area = "" })))
                                                  .Listeners(l => l.Change.Fn = "branchregulatorlabel")
                    ),
                X.FieldSet().Title("Compliance Officer's Office Address(Note: Please enter postcode)").Border(true).Layout(LayoutType.Column).Padding(2).Margin(2).Items(
                    X.CheckboxFor(model => model.IsCOOfficeHeadOffice).ApplyCheckboxDefaults(Razor.ApplyCheckboxDefaults).FieldLabel("The Compliance Officer's office address is the Head Office as listed on the Regulator database"),
                   @* add address partial X.FormPanel().ID("AddressForm").Border(false).ItemsFromPartial("_AddressPartial", Model.COOfficeAddress),*@
                    X.TextFieldFor(model => model.COOfficeBranchRegulatorNumber).ID("BranchRegulatorNumber").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Branch Regulator Number"),
                    X.TextFieldFor(model => model.COOfficeAddressAdditionalInformation).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel("Additional Address Information")
                ),
                X.FieldSet().Title("Captcha").Items()
                )
                .TopBar(Html.X().Toolbar()
                .Items(
                        Html.X().ToolbarFill(),
                        Html.X()
                        .Button()
                        .ApplyButtonDefaults(Razor.ApplySaveButtonDefaults).Text("Submit").Icon(Icon.NextGreen)
                        .DirectEvents(de =>
                                {
                                    de.Click.Before = "return App.RegistrationForm.isValid();";
                                    de.Click.Url = Url.Action("Thanks", "Register", new { area = "UserAccount", containerId = "AdministrationCenterPanel" });
                                    de.Click.FormID = "RegistrationForm";
                                    de.Click.EventMask.ShowMask = true;
                                    de.Click.EventMask.Msg = "Please wait ...";
                                })
                                )
                                )
)

