@using Ext.Net.MVC;
@using Ext.Net;
@using Bec.TargetFramework.Web.Framework.Extensions

@model Bec.TargetFramework.UI.Web.Areas.UserAccount.Models.LoginInputModel

@{
    ViewBag.Title = "Login";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

@section headTag
{
    <script>
        function checkLoginForm()
        {
            if (App.LoginForm.isValid()) {
                Ext.Msg.wait('Verifying....', 'Authentication');
            }
            else
                return false;
        }
    </script>
    
    @*<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <link href="http://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet" />

    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>

    <link href="http://cdn.kendostatic.com/2013.2.918/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="http://cdn.kendostatic.com/2013.2.918/styles/kendo.blueopal.min.css" rel="stylesheet" />

    <script src="http://cdn.kendostatic.com/2013.2.918/js/kendo.all.min.js"></script>
    


    <link href="~/ReportViewer/styles/ReportViewer-8.0.14.225.css" rel="stylesheet" />
    <script src="~/ReportViewer/js/ReportViewer-8.0.14.225.js"></script>*@
}

@section mainBody
{

@(Html.X().Window()
    .ID("LoginWindow")
    .Closable(false)
    .Resizable(false)
    .Height(150)
    .Width(440)
    .Icon(Icon.Lock)
    .Title("Login")
    .Layout(LayoutType.Fit)
    .Draggable(true)
    .Modal(true)
    .Padding(0)
    .Items
    (
        Html.X().FormPanel()
        .Padding(3)
        .Border(false)
        .Layout(LayoutType.Form)
        .ID("LoginForm")
        .Url(Url.Action("Index", "Login", new { area = "UserAccount" }))
        .BodyStyle("background:transparent;")
        .Items
        (
            Html.X().AntiForgeryField(),
            Html.X().TextFieldFor(m => m.Username)
                .MsgTarget(MessageTarget.Side)
                .LabelAlign(LabelAlign.Right)
                .LabelWidth(140)
                .AllowBlank(false)
                .BlankText("Username is required")
                .AnchorHorizontal("100%"),
            Html.X().TextFieldFor(m => m.Password)
                .MsgTarget(MessageTarget.Side)
                .LabelAlign(LabelAlign.Right)
                .LabelWidth(140)
                .InputType(Ext.Net.InputType.Password)
                .AllowBlank(false)
                .BlankText("Password is required")
                .AnchorHorizontal("100%"),
            Html.X().CheckboxFor(m => m.RememberMe)
                .FieldLabel("  ")
                .LabelWidth(140)
                .BoxLabel("Remember Me")
                 @*Html.X().Panel()
        .Content(
        @<text>
            <div id="reportViewer1" style="background-color:blue;height:400px;width:500px">
                loading...
            </div>

           <script type="text/javascript">
    $(document).ready(function () {
        $("#reportViewer1")
            .telerik_ReportViewer({
                serviceUrl: 'http://localhost:54000/api/notification',
                templateUrl: '@Url.Content("~/ReportViewer/templates/telerikReportViewerTemplate.html")',
                reportSource: { report: 1 },
                viewMode: telerikReportViewer.ViewModes.INTERACTIVE,
                scaleMode: telerikReportViewer.ScaleModes.SPECIFIC,
                scale: 1.0,
                ready: function () {
                    this.refreshReport();
                },
            });
    });
</script>



        </text>)*@
    )




        )

    .Buttons
    (
         Html.X().Button().Text("Forgot Username?")
            .Listeners(l => l.Click.Handler = "window.location = '" + Url.Action("Index", "SendUsernameReminder", new { area = "UserAccount" }) + "'"),
        Html.X().Button().Text("Forgot password?")
            .Listeners(l => l.Click.Handler = "window.location = '" + Url.Action("Index", "PasswordReset", new { area = "UserAccount" }) + "'"),
        Html.X().Button()
            .Text("Reset")
            .Icon(Icon.PageRefresh)
            .OnClientClick("App.LoginForm.getForm().reset();")
            ,
        Html.X().Button()
            .Text("Login")
            .Icon(Icon.Accept)
            .DirectEvents(de =>
            {
                de.Click.Timeout = 60000;
                de.Click.Url = Url.Action("Index", "Login", new { area = "UserAccount" });
                de.Click.FormID = "LoginForm";
                de.Click.CleanRequest = true;
                de.Click.Method = HttpMethod.POST;
                de.Click.Before = "return checkLoginForm();";
                de.Click.Failure = "Ext.Msg.show({" +
                           " title:   'Login Error'," +
                           " msg:     result.errorMessage," +
                           " buttons: Ext.Msg.OK," +
                           " icon:    Ext.MessageBox.ERROR" +
                           " });";

                de.Click.EventMask.MinDelay = 250;
            })
    )
)

}
