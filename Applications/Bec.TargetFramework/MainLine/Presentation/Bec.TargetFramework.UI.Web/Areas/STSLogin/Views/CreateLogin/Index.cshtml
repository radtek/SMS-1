@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC

@model Bec.TargetFramework.Entities.PermanentAccountDTO

@{
    var X = Html.X();
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}


@section headTag
{

    <script src="~/Scripts/TargetFramework/Grid.js"></script>
    <script src="~/Scripts/TargetFramework/Ext.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>

    <script type="text/javascript">




        var selectDifferentItem = function () {
                 var q1 = App.Question1.getValue();
                var q2 = App.Question2.getValue();
                if (App.Question1.value != null && App.Question2.value != null && q1 == q2) {
                    Ext.Msg.alert("Security Question Error", "Please select a different one");
                    App.Question1.clearValue();
                    App.Question2.clearValue();

                }
        }

    </script>


}

@section mainBody
{
    @(Html.X().Viewport().ID("CreateLoginViewPort").OverflowX(Overflow.Auto).OverflowY(Overflow.Auto)
        .Items(
                X.Panel().ItemsFromPage(this, "~/Views/Portal/_TopBar.cshtml"),
                X.Panel().ID("Errors")
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.Center }).Layout(LayoutType.HBox).BodyPadding(5).Region(Region.Center).Padding(5).Flex(1).Items(
                                    X.Panel().Layout(LayoutType.Column).ColumnWidth(0.5).Padding(2).PaddingSpec("0 10 0 0").MaxWidth(960).Items(
                                    X.MultiSelect().ID("CreateLoginFormErrors").Hidden(true)
                                    )),
                       X.Panel().LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.Center }).Layout(LayoutType.HBox).BodyPadding(5).Region(Region.Center).Padding(5).Flex(1)
                .Items(
                                        X.FormPanel().ID("CreateLogin").MaxWidth(960).Layout(LayoutType.Column).AutoDoLayout(true).AutoScroll(true)
                         .Items(
                                 //X.MultiSelect().ID("CreateLoginFormErrors").Hidden(true),
                              
                                              X.Panel().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig {Align = HBoxAlign.Middle, Pack = BoxPack.End}).ColumnWidth(1).MinHeight(30).MinWidth(100)
                                                  .Items
                                                  (
                                                              X.Button().ApplyButtonDefaults(Razor.ApplyNextButtonDefaults).Text("Log Off").PaddingSpec("0 10 0 0").MinHeight(30).MinWidth(100)
                                                          .DirectEvents(de =>
                                                          {
                                                               de.Click.Before = "return #{CreateLogin}.isValid();";
                                                              de.Click.Url = Url.Action("Index", "CreateLogin", new { area = "STSLogin" });
                                                              de.Click.FormID = "CreateLogin";
                                                              de.Click.Method = HttpMethod.POST;
                                                              de.Click.EventMask.ShowMask = true;
                                                              de.Click.EventMask.Msg = "Please wait ...";
                                                          })
                                                  ),
                                      
                                                X.Panel().ColumnWidth(0.48).PaddingSpec("0 10 0 0").Padding(2).Border(false).Width(460)
                                        .Items(
                                                X.Panel().ApplyPanelDefaults("CreateYourLogins").Border(false).ColumnWidth(1).Items(
                                                           X.Container().Layout(LayoutType.Column).ColumnWidth(1).Items(
                                                                X.Label().ID("CreateLoginInfoLabel").ApplyFieldDefaults("CreateLogin", "CreateLoginInfoLabel").PaddingSpec("10 0 24 2").Cls("paragraph-text"),
                                                                X.Label().ID("CreateLoginInfoLabel1").ApplyFieldDefaults("CreateLogin", "CreateLoginInfoLabel1").PaddingSpec("10 0 50 2").Cls("paragraph-text")
                                                                ),
                                                       X.Container().Layout(LayoutType.Column).ColumnWidth(1).Border(false).Items(
                                                              // X.Container().Layout(LayoutType.Column).Padding(2).Items(
                                                            X.TextFieldFor(model => model.EmailAddress).ApplyFieldDefaults("CreateYourLogins", "Email").ColumnWidth(1).Padding(2),//.PaddingSpec("0 50 0 0").Width(415),
                                                                            X.TextFieldFor(model => model.UserName).ApplyFieldDefaults("CreateYourLogins", "Username").ColumnWidth(1).Padding(2)//.ColumnWidth(1).PaddingSpec("0 50 0 0").Width(415)
                                                                    .Control(c =>
                                                                            {
                                                                                c.IsRemoteValidation = true;
                                                                                c.RemoteValidation.Url = Url.Action("IsUserExist", "CreateLogin", new { area = "STSLogin" });
                                                                                c.RemoteValidation.ValidationEvent = "change, blur";
                                                                                c.RemoteValidation.Method = HttpMethod.POST;
                                                                                c.RemoteValidation.ShowBusy = true;
                                                                                c.RemoteValidation.ErrorMessage = "This username already exists in the system";
                                                                            })),
                                                                X.Container().Layout(LayoutType.Column).ColumnWidth(1).Items(
                                                                        X.TextFieldFor(model => model.Password).ApplyFieldDefaults("CreateYourLogins", "Password").ColumnWidth(0.5).Padding(2),//.Width(180).PaddingSpec("0 55 0 0")
                                                                X.TextFieldFor(model => model.ConfirmPassword).ApplyFieldDefaults("CreateYourLogins", "CreateLoginConfirmPassword").ColumnWidth(0.5).Padding(2)),
                                                                                                        X.Panel().Border(true).PaddingSpec("10 0 0 0").Margin(2).Items(
                                                                                                        X.Container().ColumnWidth(1).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Top, Pack = BoxPack.End }).Layout(LayoutType.HBox).Region(Region.East).Items(
                                                                                                X.Image().Height(30).Width(20).PaddingSpec("10 2 2 2").ImageUrl("~/Content/resources/images/icons/info.png")),
                                                                                                X.Container().Border(true).ColumnWidth(1).Margin(2).Cls("paragraph-text")
                                                                                                        .Html("<p>Your password must contain the following: <br/><br/>Minimum of 10 characters &nbsp; &nbsp;&nbsp;&nbsp;At least 1 special character (!?>,-) <br/> At least 1 number &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  At least 1 upper case letter</p>")
                                                        ))
                                         ),
                                                  X.Panel().Border(true).MinHeight(450).Width(1).Padding(15).Layout(LayoutType.VBox).LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center, Pack = BoxPack.Center }).Items(

                                                                                                             ),
                                       X.Panel().ColumnWidth(0.47).Width(460).Border(false)
                               .Items(
                                                 X.Panel().ApplyPanelDefaults("SecurityQuestions").ColumnWidth(1).Items(
                                                  X.Container().Layout(LayoutType.Column).ColumnWidth(1).Padding(2).Items(
                                                                 X.ComboBoxFor(model => model.Question1).ID("Question1").ApplyFieldDefaults("SecurityQuestions", "SecurityQuestion1").Padding(2).ColumnWidth(1)//.Width(175)
                                                                 .Store(Razor.CreateClassificationStore("SecurityQuestions", Url.Action("ReadData", "Reference", new { area = "" }))).DisplayField("Name").ValueField("ClassificationTypeID")
                                                                                         //.Listeners(l => l.Select.Handler = "removeItemFromQuestion2();")
                                                                                         ,
                                                                         X.TextFieldFor(model => model.Answer1).ApplyFieldDefaults("SecurityQuestions", "AnswerToSecurityQuestion").Padding(2).ColumnWidth(1),//.PaddingSpec("0 50 0 0").Width(175)),
                                                                
                                                                        X.ComboBoxFor(model => model.Question2).ID("Question2").ApplyFieldDefaults("SecurityQuestions", "SecurityQuestion2").Padding(2).ColumnWidth(1)//.Width(175)
                                                                .Store(Razor.CreateClassificationStore("SecurityQuestions2", Url.Action("ReadData", "Reference", new { area = "" }))).DisplayField("Name").ValueField("ClassificationTypeID")
                                                                                       // .Listeners(l => l.Select.Handler = "removeItemFromQuestion1();")
                                                                                        ,
                                                                        X.TextFieldFor(model => model.Answer2).ApplyFieldDefaults("SecurityQuestions", "AnswerToSecurityQuestion2").Padding(2).ColumnWidth(1)//.PaddingSpec("0 50 0 0").Width(175)
                                                        )))
                                           
                                            )
                                            
                                  
                                          
                                          ))


    )


}




