@using Ext.Net;
@using Ext.Net.MVC;
@using Bec.TargetFramework.Web.Framework.Extensions

@model Bec.TargetFramework.Entities.ChangePasswordWithSecretDTO

@{
    ViewBag.Title = "Change Password";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

@section headtag
{
    <script src="~/Scripts/TargetFramework/Grid.js"></script>
    <script src="~/Scripts/TargetFramework/Ext.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script>

        var hideShowSecretQuestions = function () {
            if (App.questionID.value != null) {
            App.SQ.show();
        }
        else {
            App.SQ.hide();
        }
    };

    var clearErrorsOrMessages = function () {
        App.ChangePasswordFormErrors.hide();
        App.ChangePasswordFormMessages.hide();
    };

    var CreateCaptcha = function () {
        Recaptcha.create('@ViewData["PublicKey"]', 'divcaptcha1',
        {
            theme: "red",
            //callback: Recaptcha.focus_response_field
        });
    };
        var RefreshCaptcha = function () {
            if (App.Result.value == 'True') {
                App.CaptchaError.hide();
                if (App.ChangePasswordFormErrors.show())
                    CreateCaptcha();
            }
            else {
                CreateCaptcha();
                App.CaptchaError.show();
            }
            
        }

    $(document).ready(function () {
        $.ajax({
            url: 'http://www.google.com/recaptcha/api/js/recaptcha_ajax.js',
            dataType: 'script',
            success: function (result) {
                CreateCaptcha();
                var error = $('#error');
                error.hide();
            },
            error: function (xmlhttprequest, status, error) {
                $('#divcaptcha1').html('Cannot create captcha');
            }
        });
    });

    var afterrender = function (field) {
        Ext.defer(function () {
            field.focus(true, 100);
        }, 1);
    };

    </script>

<style>
    .my-panel {
        overflow: visible;
        width: 415px;
    }
</style>

}

@section mainBody
{
    @(Html.X().Viewport().OverflowX(Overflow.Auto).OverflowY(Overflow.Auto)
            .Items
              (
                       Html.X().Panel().ItemsFromPage(this, "~/Views/Portal/_TopBar.cshtml"),

                                Html.X().Panel().LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.Center }).Layout(LayoutType.HBox).BodyPadding(5).Region(Region.Center).Padding(5).Flex(1)
                .Items(
                        Html.X().Container().Html("<br/>"),
                         Html.X().Image()
                                .Frame(false)
                                .ImageUrl((@Url.Content("~/Content/resources/images/STS/MakingPropertyTransactionSaferResized.jpg"))).Height(225).Width(800)
                                      )
              ,
             Html.X().Panel().ID("ChangePassword").LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.Center }).Layout(LayoutType.HBox).BodyPadding(5).Region(Region.Center).Padding(5).Flex(1)
               .Items
              (
          Html.X().FormPanel()

           .Width(440)
           .PaddingSpec("5 5 5 5")
            .ID("ChangePasswordForm")
            .Border(true)
            .ApplyFormPanelDefaults(Razor.ApplyFormPanelDefaults)
            .Url(Url.Action("Index", "ChangePassword", new { area = "STSLogin" }))
            .BodyStyle("background:transparent;")
            
            .Items
            (
                Html.X().AntiForgeryField(),
                Html.X().MultiSelect().ID("ChangePasswordFormErrors").Hidden(true),
                                Html.X().MultiSelect().ID("ChangePasswordFormMessages").Hidden(true),
                                        Html.X().TextFieldFor(m => m.Password).ApplyFieldDefaults("ChangePassword", "Password").Listeners(l => l.AfterRender.Fn = "afterrender")
                        .Width(415)
                    .Padding(5),
                                Html.X().TextFieldFor(m => m.ConfirmPassword).ApplyFieldDefaults("ChangePassword", "CreateLoginConfirmPassword")
                                .Width(415)
                            .Padding(5),
                              Html.X().Panel().Border(true).PaddingSpec("0 8 0 5").Cls("my-panel").Items(Html.X().Container().Padding(2).Border(true).ColumnWidth(1)
                                 .Html("<p>Your password must contain the following: <br/><br/>Minimum of 10 characters &nbsp; &nbsp; At least 1 special character (!?>,-) <br/> At least 1 number &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;  At least 1 upper case letter</p>")
                                         ),
                                           Html.X().Panel().ID("SQ").Title("Please answer your security questions below:").ApplyPanelDefaults("SecurityQuestion").Hidden(true).Listeners(l => l.BeforeRender.Handler = "hideShowSecretQuestions()")
                            .Items
                                (
                                Html.X().HiddenFor(m => m.QuestionID).ID("questionID"),
                                        Html.X().Label().Text(Model.Question).ID("question").Width(415).Padding(5),
                                Html.X().TextFieldFor(m => m.Answer).ID("answer").ApplyFieldDefaults("SecurityQuestion", "AnswerToSecurityQuestion").Width(415).Padding(5)
                                         
                            ),
                                     Html.X().Container().Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.Center }).Items(
                                              Html.X().Container().ID("divcaptcha1").Width(320).Height(130)),
                                                Html.X().HiddenFor(data => ViewData["Challenge"]).ID("CaptchaChallenge"),
                                                Html.X().HiddenFor(data => ViewData["Response"]).ID("CaptchaResponse"),
                                                        Html.X().MultiSelect().ID("CaptchaError").Hidden(true),
                                                                Html.X().HiddenFor(m => m.Result).ID("Result"),
                                             Html.X().Container().PaddingSpec("10 10 10 10").Layout(LayoutType.HBox).LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle, Pack = BoxPack.End }).Items(

                                                Html.X().Button().ApplyButtonDefaults(Razor.ApplySTSGreyButtonDefaults).Flat(true)
                                                .Text("Next").ID("Next")
                                                .DirectEvents(de =>
                                                {
                                                    de.Click.Timeout = 60000;
                                                    de.Click.Url = Url.Action("Index", "ChangePassword", new { area = "STSLogin" });
                                                    de.Click.FormID = "ChangePasswordForm";
                                                    de.Click.CleanRequest = true;
                                                    de.Click.Method = HttpMethod.POST;
                                                    de.Click.Success = "RefreshCaptcha();";
                                                    de.Click.EventMask.ShowMask = true;
                                                    de.Click.EventMask.Msg = "Please wait ...";
                                                    de.Click.Before = "clearErrorsOrMessages();";
                                                    de.Click.ExtraParams.Add(new Parameter("CaptchaChallenge", "Recaptcha.get_challenge()", ParameterMode.Raw));
                                                    de.Click.ExtraParams.Add(new Parameter("CaptchaResponse", "Recaptcha.get_response()", ParameterMode.Raw));
                                                })
                                                    
                                     )
                        )
                )
      )
    )
}






















