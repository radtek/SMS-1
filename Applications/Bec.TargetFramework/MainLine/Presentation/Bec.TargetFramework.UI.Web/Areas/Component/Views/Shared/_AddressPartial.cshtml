@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC
@model Bec.TargetFramework.Entities.AddressDTO


<script>

    var populateAddress = function (field, newValue, oldValue, eOpts) {
        var selectedItems = App.PostCodeResults.getSelected();

        var address = selectedItems[0];
        if (address) {
            var form = this.up('form').getForm();

            if (address.data.Company)
                form.findField('Line1').setValue(address.data.Company + ', ' + address.data.Line1);
            else
                form.findField('Line1').setValue(address.data.Line1);

            form.findField('Line2').setValue(address.data.Line2);
            form.findField('Line3').setValue(address.data.Line3);
            form.findField('City').setValue(address.data.PostTown);
            form.findField('County').setValue(address.data.County);
            form.findField('BuildingName').setValue(address.data.BuildingName);
        }
    };

    var processPostCode = function (formName) {
        var postCode = App.AddressPostCode.getValue();

        var multiSelect = App.PostCodeResults;

        multiSelect.getStore().load();

        multiSelect.getStore().on('load', function (store, records, successful, eOpts) {
            if (store.getCount() > 0) {
                multiSelect.show();
            } else {
                multiSelect.hide();
                Ext.MessageBox.show({ title: 'Post Code', msg: 'No addresses exists for postCode ' + postCode, buttons: Ext.MessageBox.OK, width: 300 });
            }
        });

    };


</script>

@(Html.X().Container().Layout(LayoutType.Column)
      .Items
      (
          Html.X().HiddenFor(model => model.Longitude),
                                                    Html.X().HiddenFor(model => model.Latitude),
          Html.X().HiddenFor(model => model.AddressID),
          Html.X().HiddenFor(model => model.AddressIDString),
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
              .Items
              (
                  Html.X().TextFieldFor(model => model.Name).ID("AddressNameField").ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                  ,
                  Html.X().TextFieldFor(model => model.PrimaryContactName).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
                      .Hidden(!Model.ShowPrimaryContactName)
                  ,
                  Html.X().CheckboxFor(model => model.IsPrimaryAddress).ID("AddressIsPrimaryAddressField").ApplyCheckboxDefaults(Razor.ApplyCheckboxDefaults).Hidden(!Model.ShowIsPrimaryAddress),
                  
                    Html.X().TextFieldFor(model => model.BuildingName).ID("BuildingName").FieldLabel("Building Name or Number")
                      .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
              ),
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
              .Items
              (
                  Html.X().ComboBoxFor(model => model.AddressTypeID)
                      .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                      .FieldLabel("Type")
                      .Store(Razor.CreateClassificationStore("AddressType", Url.Action("ReadData", "Reference", new { area = "" }))),
                  Html.X().ComboBoxFor(model => model.AddressCategoryID)
                      .ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                      .FieldLabel("Category")
                      .Store(Razor.CreateClassificationStore("AddressCategory", Url.Action("ReadData", "Reference", new { area = "" }))),
                      Html.X().TextFieldFor(model => model.PostalCode).ID("AddressPostCode").AllowBlank(false)
                              .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).Listeners(l => l.Change.Handler = "#{AddressFindPostcode}.setDisabled(!#{AddressPostCode}.isValid()); App.AddressPostCode.setValue(this.value.toUpperCase());")
              )
          ,
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(1.0).Padding(5)
              .Items
              (
                  Html.X().Button().Text("Find Address").Disabled(true).ID("AddressFindPostcode").StyleSpec("text-transform:uppercase;")
                      .Listeners
                      (l => l.Click.Handler = "processPostCode();"),
                  Html.X().MultiSelect().ID("PostCodeResults")
                      .ValueField("FullAddress")
                      .DisplayField("FullAddress")
                      .Height(70)

                      .Hidden(true)
                      .Listeners(l => l.Change.Fn = "populateAddress")
                      .MultiSelect(true).Store(Html.X()
                          .Store()
                          .AutoLoad(false)
                               .Parameters(p =>
                                            {
                                                p.Add(Html.X().StoreParameter().Name("postCode").Value("Ext.getCmp('AddressPostCode').getValue()").Mode(ParameterMode.Value));
                                                p.Add(Html.X().StoreParameter().Name("building").Value("Ext.getCmp('BuildingName').getValue()").Mode(ParameterMode.Value));
                                            }
                                                )
                          .Model(Html.X()
                              .Model().Name("PostCodeModel")
                              .Fields(fields =>
                              {
                                  fields.Add(new ModelField("FullAddress"));
                                  fields.Add(new ModelField("Company"));
                                  fields.Add(new ModelField("County"));
                                  fields.Add(new ModelField("Department"));
                                  fields.Add(new ModelField("BuildingName"));
                                  fields.Add(new ModelField("Line1"));
                                  fields.Add(new ModelField("Line2"));
                                  fields.Add(new ModelField("Line3"));
                                  fields.Add(new ModelField("PostCode"));
                                  fields.Add(new ModelField("PostTown"));
                                  fields.Add(new ModelField("PrimaryStreet"));
                              })
                              .Proxy(proxy => proxy.Add(Html.X()
                                  .AjaxProxy()
                                  .Url(Url.Action("GetPostCodeAddresses", "Address", new { area = "Component" }))
                                  .Reader(reader => reader.Add(Html.X().JsonReader().Root("data")))))))
              ),
              
          Html.X().TextFieldFor(model => model.Line1).ColumnWidth(1.0)
                          .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
              .Items
              (
                  Html.X().TextFieldFor(model => model.Line2)
                      .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.Line3)
                      .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
              ),
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.5).Padding(5)
              .Items
              (
                  Html.X().TextFieldFor(model => model.City)
                      .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.County)
                      .ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
              ))
)