@using Bec.TargetFramework.Web.Framework.Extensions
@using Ext.Net
@using Ext.Net.MVC
@model Bec.TargetFramework.Entities.ContactDTO


<script>

    var loadAddress = true;
    var comboSetter = function (comboBox, value) {
        var store = comboBox.store;
        var valueField = comboBox.valueField;
        var displayField = comboBox.displayField;

        var recordNumber = store.findExact(valueField, value, 0);

        if (recordNumber == -1)
            return -1;

        var displayValue = store.getAt(recordNumber).data[displayField];
        comboBox.setValue(value);
        comboBox.setRawValue(displayValue);
        comboBox.selectedIndex = recordNumber;
        return recordNumber;
    };

    var SearchForObject = function (results, searchField, searchValue) {

        var value = null;
        for (var i = 0; i < results.length; i++) {
            if (results[i][searchField] == searchValue) {
                
                value = results[i];
         
            }
        }

        return value;
    };

    var showFormItems = function (show) {
        if (show) {
            App.AddressForm.show();
            App.SaveAddress.show();
            App.AddAddress.hide();
            App.CancelAddress.show();
            
            enableDisableFormFields(false);
        } else {
            App.AddressForm.hide();
            App.AddressForm.getForm().reset();
            resetPostcodeResults();
            App.SaveAddress.hide();
            App.AddAddress.show();
            App.CancelAddress.hide();
            App.AddressList.clearValue();
            enableDisableFormFields(true);
        }

        
    };

    function enableDisableFormFields(enable) {

        var form = App.AddressForm.getForm();
        form.findField('Line1').setDisabled(enable);
        form.findField('Line2').setDisabled(enable);
        form.findField('Line3').setDisabled(enable);
        form.findField('City').setDisabled(enable);
        form.findField('County').setDisabled(enable);
        form.findField('BuildingName').setDisabled(enable);
        form.findField('AddressPostCode').setDisabled(enable);
        form.findField('AddressIsPrimaryAddressField').setDisabled(enable);
        form.findField('AddressNameField').setDisabled(enable);
        form.findField('AddressIDString').setDisabled(enable);
        form.findField('AddressTypeID').setDisabled(enable);
        form.findField('AddressCategoryID').setDisabled(enable);

    }

    String.prototype.replaceAll = function (search, replace) {
        if (replace === undefined) {
            return this.toString();
        }
        return this.split(search).join(replace);
    }

    var processSelectAddress = function () {
        var jsonString = App.AddressesJson.getValue();
        var results = JSON.parse(jsonString);
        var result = SearchForObject(results, 'AddressID', App.AddressList.getValue().replaceAll('-', ''));
        
        if (result != null) {

            showFormItems(true);

            var form = App.AddressForm.getForm();

            form.findField('Line1').setValue(result.Line1);
            form.findField('Line2').setValue(result.Line2);
            form.findField('Line3').setValue(result.Line3);
            form.findField('City').setValue(result.City);
            form.findField('County').setValue(result.County);
            form.findField('BuildingName').setValue(result.BuildingName);
            form.findField('AddressPostCode').setValue(result.PostalCode);
            form.findField('AddressIsPrimaryAddressField').setValue(result.IsPrimaryAddress);
            form.findField('AddressNameField').setValue(result.Name);
            form.findField('AddressIDString').setValue(result.AddressIDString);
            form.findField('AddressID').setValue(result.AddressID);
            comboSetter(form.findField('AddressTypeID'), result.AddressTypeID);
            comboSetter(form.findField('AddressCategoryID'), result.AddressCategoryID);
        }
    };

    var selectFirstItem = function ()
    {
        if (loadAddress) {
            if (App.AddressList.getStore() != null && App.AddressList.getStore().getCount() > 0) {
                App.AddressList.setValue(App.AddressList.getStore().getAt('0').get('AddressIDString'));
                processSelectAddress();
            }
        }
    };

    var resetPostcodeResults = function () {
        App.AddressForm.getForm().findField('PostCodeResults').getStore().removeAll();
        App.AddressForm.getForm().findField('PostCodeResults').hide();
    };

    var processSaveAddress = function () {
        App.AddressList.getStore().load();
        showFormItems(false);
        loadAddress = false;
        
    };

    var processAddAddress = function () {
        App.AddressForm.getForm().reset();
        resetPostcodeResults();
        showFormItems(true);
    };

    var processCancelAddress = function () {
        showFormItems(false);
    };

 
</script>

@(Html.X().Panel().Layout(LayoutType.Column).AutoScroll(true).Title(ViewBag.partialTitle).Padding(5)
      .Items
      (
       Html.X()
              .Container()
              .Layout(LayoutType.Form)
              .ColumnWidth(1)
              .Padding(2)
              .Items(
                  Html.X().MultiSelect().ID("BranchFormErrors").Hidden(true)),
          Html.X().HiddenFor(model => model.ContactJson),
          Html.X().HiddenFor(model => model.AddressesJson),
          Html.X().HiddenFor(model => model.OrganisationID),
          Html.X().HiddenFor(model => model.ContactID),
          Html.X().HiddenFor(model => model.IsConcreteOrganisation),
          Html.X().Container().Layout(LayoutType.Form).ColumnWidth(0.25).Padding(5)
              .Items
              (
                  Html.X().CheckboxFor(model => model.IsHeadOffice).ApplyCheckboxDefaults(Razor.ApplyCheckboxDefaults),
                  Html.X().TextFieldFor(model => model.ContactName).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults).FieldLabel(ViewBag.ContactNameText),
                  Html.X().TextFieldFor(model => model.WebSiteURL).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.EmailAddress1).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.EmailAddress2).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.Telephone1).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.Telephone2).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.MobileNumber1).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults),
                  Html.X().TextFieldFor(model => model.MobileNumber2).ApplyTextFieldDefaults(Razor.ApplyTextFieldDefaults)
              )
              ,
                  Html.X().Container().Layout(LayoutType.Form).Border(true).ColumnWidth(0.25).Padding(5)
                  .Items(

                         Html.X().ComboBoxFor(model => model.ContactTypeID).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                              .FieldLabel("Type")
                              .Store(Razor.CreateClassificationStore("ContactType", Url.Action("ReadData", "Reference", new { area = "" }))),
                          Html.X().ComboBoxFor(model => model.ContactCategoryID).ApplyComboxDefaults(Razor.ApplyComboBoxClassificationDefaults)
                                  .FieldLabel("Category")
                              .Store(Razor.CreateClassificationStore("ContactCategory", Url.Action("ReadData", "Reference", new { area = "" })))
                      )
              , Html.X().Panel().ColumnWidth(0.5).Padding(5)
                      .Title("Address Management").Border(true)
                  .Items
                  (

                                  Html.X().FormPanel().ID("AddressForm").Border(false)
                                     .ItemsFromPartial("_AddressPartial", Model.CurrentAddress)
                                 )
                          .TopBar(Html.X().Toolbar()
                              .Items
                              (
                                       Html.X().ComboBoxFor(model => model.AddressListItems).ID("AddressList").TriggerAction(TriggerAction.All)
                                      .FieldLabel("").Editable(false).QueryMode(DataLoadMode.Local)
                                      .DisplayField("Name")
                                      .ValueField("AddressIDString")
                                      .Store(Html.X().Store()
                                          .AutoLoad(true)
                                                  .Parameters(e => e.Add(Html.X().StoreParameter().Name("addressesJsonValue").Value("App.ContactForm.getForm().findField('AddressesJson').getValue()").Mode(ParameterMode.Raw)))
                                          .Model(Html.X()
                                              .Model()
                                              .IDProperty("AddressIDString")
                                              .Fields(
                                                  new ModelField("Name", ModelFieldType.String),
                                                  new ModelField("AddressIDString", ModelFieldType.String)
                                                              )).Listeners(ls =>
                                                                   {
                                                                       ls.Load.Handler = "selectFirstItem();";
                                                                   })
                                          .Proxy(Html.X()
                                              .AjaxProxy()
                                                      .Url(Url.Action("GetAddresses", "Address", new { area = "Component"}))
                                              .Reader(new JsonReader.Builder().Root("data"))))
                                      .EmptyText("Select an Address or Add..")
                                      .Listeners(
                                          l =>
                                          {
                                              l.Select.Handler = "processSelectAddress();";
                                          })
                                  ,
                                  Html.X().Button().Text("Add").ID("AddAddress").Hidden(true)
                                      .Listeners(l => l.Click.Handler = "processAddAddress();"),
                                  Html.X().Button().Text("Save Address").Hidden(false).ID("SaveAddress")
                                      .DirectEvents(de =>
                                      {
                                          de.Click.Before = "return App.AddressForm.isValid();";
                                          de.Click.Url = Url.Action("AddAddressToContact", "Address", new { area = "component", jsonField = "AddressesJson" });
                                          de.Click.ExtraParams.Add(new Parameter("addressesJsonValue", "App.ContactForm.getForm().findField('AddressesJson').getValue()", ParameterMode.Raw));
                                          de.Click.ExtraParams.Add(new Parameter("jsonField", "AddressesJson", ParameterMode.Value));
                                          de.Click.Success = "processSaveAddress();";
                                      }),
                                  Html.X().Button().Text("Cancel").Hidden(false).ID("CancelAddress")
                                      .Listeners(l => l.Click.Handler = "processCancelAddress();")
                              )
                          )
                  )
)