@using Bec.TargetFramework.Entities
@using Bec.TargetFramework.Entities.Enums
@using Bec.TargetFramework.Infrastructure.Extensions
@model ContactDTO
@{
    List<SelectListItem> titles = new List<SelectListItem>
    {
        new SelectListItem{Text = "Mr.",Value="Mr."},
        new SelectListItem{Text = "Mrs.",Value="Mrs."},
        new SelectListItem{Text = "Miss",Value="Miss"},
        new SelectListItem{Text = "Ms.",Value="Ms."},
        new SelectListItem{Text = "Dr.",Value="Dr."}
    };
}
<div class="modal fade in" tabindex="-1" role="dialog" aria-labelledby="addUserLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="addUserLabel">Add User</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <form action="@Url.Action("AddUser", "Users", new { area = "ProOrganisation" })" method="POST" id="addUser-form" class="smart-form">
                            @Html.ValidationBootstrap()
                            @Html.AntiForgeryToken()
                            <fieldset>
                                <section>
                                    <label class="label">Title</label>
                                    <label class="select">
                                        @Html.DropDownListFor(m => m.Salutation, new SelectList(titles, "Value", "Text"), "Please Select", new { tabindex = "1" })
                                        <i></i>
                                    </label>
                                </section>
                                <section>
                                    <label class="label">First Name</label>
                                    <label class="input ">
                                        <i class="icon-append fa fa-asterisk" style="font-size:0.7em;"></i>
                                        @Html.TextBoxFor(m => m.FirstName, new { tabindex = "2", maxlength = 50 })
                                    </label>
                                </section>
                                <section>
                                    <label class="label">Last Name</label>
                                    <label class="input">
                                        <i class="icon-append fa fa-asterisk" style="font-size:0.7em;"></i>
                                        @Html.TextBoxFor(m => m.LastName, new { tabindex = "3", maxlength = 50 })
                                    </label>
                                </section>
                                <section>
                                    <label class="label">Email address</label>
                                    <label class="input ">
                                        <i class="icon-append fa fa-asterisk" style="font-size:0.7em;"></i>
                                        @Html.TextBoxFor(m => m.EmailAddress1, new { tabindex = "4" })
                                    </label>
                                </section>

                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancelAddUser" class="btn btn-default" data-dismiss="modal">
                    Cancel
                </button>
                <button type="button" id="submitAddUser" class="btn btn-primary" tabindex="5">
                    Send Invite
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    // submit from when Save button clicked
    $("#submitAddUser").click(function () {
        $("#addUser-form").submit();
    });

    $("#addUser-form").validate({
        ignore: '.skip',
        // Rules for form validation
        rules: {
            FirstName: {
                required: true
            },
            LastName: {
                required: true
            },
            EmailAddress1: {
                required: true,
                email: true
            }
        },

        // Do not change code below
        errorPlacement: function (error, element) {
            error.insertAfter(element.parent());
        },

        submitHandler: validateSubmit
    });

    function validateSubmit(form) {
        $("#submitAddUser").prop('disabled', true);
        form.submit();
    }
</script>
