@using Bec.TargetFramework.Entities.Enums
<!-- MAIN CONTENT -->
<div id="content">
    <div class="row">

        <h2 class="row-seperator-header inline-heading">View Credit</h2>
        <a data-href="@Url.Action("ViewTopUpCredit", "Credit", new { area  = "ProOrganisation" })" class="btn btn-primary btn-sm inline-heading" data-modallink="true">Top Up Credit</a>
        <br />

        <div class="col-sm-12">

            <div class="row">
                <div class="col-sm-12">
                    <input type="date" id="from" />
                    <input type="date" id="to" />
                    <button onclick="applyFilter()">Filter</button>

                    <div class="pull-right">
                        <span>Opening Balance: </span>
                        <span id="openingBal"></span>
                        <span>&nbsp;Closing Balance: </span>
                        <span id="closingBal" style="margin-right:8px;"></span>
                    </div>

                    <br />
                    <br />

                    <div class="well">
                        <div id="statementGrid"></div>
                    </div>
                </div>
            </div>

            <div class="row hidden" id="rPanel">
                <div class="col-sm-6">
                    <!-- well -->
                    <div class="well">

                        <h5>Selected Transaction</h5>
                        <dl class="dl-horizontal">
                            <dt>Reference:</dt>
                            <dd><p id="ddReference"></p></dd>
                            <dt>Amount:</dt>
                            <dd><p id="ddAmount"></p></dd>
                            <dt>Date:</dt>
                            <dd><p id="ddDate"></p></dd>
                            <dt>Created By:</dt>
                            <dd><p id="ddCreatedBy"></p></dd>
                        </dl>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript" src="~/Scripts/autoNumeric.js"></script>
    <script type="text/javascript">

        var shownMessage = false;
        //set up grid options for the three grids. most are passed straight on to kendo grid.
        var statementGrid = new gridItem(
            {
                gridElementId: 'statementGrid',
                url: '@Url.Action("GetStatement", "Credit", new { area = "ProOrganisation" })',
                schema: { data: "Items", total: "Count", model: { id: "TransactionOrderID" } },
                type: 'odata-v4',
                serverSorting: true,
                serverPaging: true,
                defaultSort: { field: "BalanceOn", dir: "asc" },
                panels: ['rPanel'],
                change: txChange,
                extraParameters: function () {
                    return "&from=" + $('#from').val() + "&to=" + $('#to').val();
                },
                columns: [
                        {
                            field: "InvoiceReference",
                            title: "Reference",
                            sortable: false
                        },
                        {
                            field: "Amount",
                            title: "Amount",
                            sortable: false
                        },
                        {
                            field: "Balance",
                            title: "Balance",
                            sortable: false
                        },
                        {
                            field: "BalanceOn",
                            title: "Date",
                            sortable: false,
                            template: function (dataItem) { return dateString(dataItem.BalanceOn); }
                        },
                        {
                            field: "CreatedByName",
                            title: "Created By"
                        }
                ]
            });

        $(document).ready(function () {
            findModalLinks();

            var now = new Date();

            $('#from').val(new Date(now.getFullYear() - 1, now.getMonth(), now.getDate()).toJSON().slice(0, 10)); //I wonder what happens about leap years
            $('#to').val(now.toJSON().slice(0, 10));

            statementGrid.makeGrid();
            updateBalances();
        });

        function applyFilter() {
            statementGrid.refreshGrid();
            updateBalances();
        }

        function updateBalances() {
            ajaxWrapper({ url: '@Url.Action("GetBalanceAsAt", "Credit", new { area = "ProOrganisation" })' + '?startOfDay=true&date=' + $('#from').val() })
                .done(function (res) {
                    $('#openingBal').text(res);
                });
            ajaxWrapper({ url: '@Url.Action("GetBalanceAsAt", "Credit", new { area = "ProOrganisation" })' + '?startOfDay=false&date=' + $('#to').val() })
                .done(function (res) {
                    $('#closingBal').text(res);
                });
        }

        //data binding for the panes beneath each grid
        function txChange(dataItem) {
            $("p#ddReference").text(dataItem.InvoiceReference || "");
            $("p#ddAmount").text(dataItem.Balance || "");
            $("p#ddDate").text(dateString(dataItem.Amount) || "");
            $("p#ddCreatedBy").text(dataItem.CreatedByName || "");
        }

    </script>
}
