@using Bec.TargetFramework.Entities
@using Bec.TargetFramework.Entities.Enums
@using Bec.TargetFramework.Infrastructure.Extensions
@using Bec.TargetFramework.Presentation.Web.Helpers;
@model Edit<UserAccountOrganisationDTO>
@{
    var titles = ((SalutationEnum[])Enum.GetValues(typeof(SalutationEnum)))
        .Select(s => new SelectListItem
        {
            Text = s.GetStringValue(),
            Value = s.GetStringValue()
        });
}
<div class="modal fade in" tabindex="-1" role="dialog" aria-labelledby="editSmsTransactionLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="editSmsTransactionLabel">Edit Primary Buyer</h4>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-12">
                        <form action="@Url.Action("EditSmsTransaction", "Transaction", new { area = "SmsTransaction" })" method="POST" id="editSmsTransaction-form" class="smart-form">
                            @Html.ValidationBootstrap()
                            @Html.AntiForgeryToken()
                            @Html.Hidden("txID", (object)ViewBag.txID)
                            @Html.Hidden("uaoID", (object)ViewBag.uaoID)
                            @Html.HiddenFor(m => m.Model.Contact.RowVersion)
                            @Html.HiddenFor(m => m.Model.UserAccount.RowVersion)
                            <fieldset>
                                <section>
                                    <label class="label">Title</label>
                                    <label class="select">
                                        @Html.DropDownListFor(m => m.Model.Contact.Salutation, new SelectList(titles, "Value", "Text"), new { tabindex = "1" })
                                    </label>
                                </section>
                                <section>
                                    <label class="label">First Name</label>
                                    <label class="input ">
                                        <i class="icon-append fa fa-asterisk" style="font-size:0.7em;"></i>
                                        @Html.TextBoxFor(m => m.Model.Contact.FirstName, new { tabindex = "2", maxlength = 50 })
                                    </label>
                                </section>
                                <section>
                                    <label class="label">Last Name</label>
                                    <label class="input">
                                        <i class="icon-append fa fa-asterisk" style="font-size: 0.7em;"></i>
                                        @Html.TextBoxFor(m => m.Model.Contact.LastName, new {tabindex = "3", maxlength = 50})
                                    </label>
                                </section>
                                @if (ViewBag.IsTemporaryUser)
                                {
                                    <section>
                                        <label class="label">Email Address</label>
                                        <label class="input ">
                                            <i class="icon-append fa fa-asterisk" style="font-size:0.7em;"></i>
                                            @Html.TextBoxFor(m => m.Model.UserAccount.Email, new { tabindex = "4", type = "email" })
                                        </label>
                                    </section>
                                }
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" id="cancelEditSmsTransaction" class="btn btn-default" data-dismiss="modal">
                    Cancel
                </button>
                <button type="button" id="submitEditSmsTransaction" class="btn btn-primary" tabindex="5">
                    Save
                </button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    function ignore(e) {
        if (e) e.preventDefault();
    }

    function countRoles() {
        var c = 0;
        $('.role-checkbox').each(function (i, item) {
            if ($(item).prop('checked')) c++;
        });
        $('#rolecheck').val(c);
    }

    // submit from when Save button clicked
    $("#submitEditSmsTransaction").click(function () {
        $("#editSmsTransaction-form").submit();
    });

    $("#editSmsTransaction-form").validate({
        ignore: '.skip',
        // Rules for form validation
        rules: {

            '@Html.NameFor(m => m.Model.Contact.FirstName)': {
                required: true
            },
            '@Html.NameFor(m => m.Model.Contact.LastName)': {
                required: true
            },
            '@Html.NameFor(m => m.Model.UserAccount.Email)': {
                required: true,
                email: true,
                remote: {
                    url: '@Url.Action("CheckEmail", "Home", new { Area = "" })',
                    data: {
                        email: function () { return $('#@Html.IdFor(m => m.Model.UserAccount.Email)').val(); },
                        uaoID: function () { return '@Model.Model.UserAccountOrganisationID' }
                    },
                    dataType: 'json',
                    error: function (xhr, status, error) { checkRedirect(xhr.responseJSON); }
                }
            }
        },

        // Do not change code below
        errorPlacement: function (error, element) {
            error.insertAfter(element.parent());
        },

        submitHandler: validateSubmit
    });

    function validateSubmit(form) {
        $("#submitEditSmsTransaction").prop('disabled', true);
        form.submit();
    }
</script>
