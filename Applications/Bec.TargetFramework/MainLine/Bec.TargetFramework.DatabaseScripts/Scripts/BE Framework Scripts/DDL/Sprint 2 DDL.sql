-- SQL Manager for PostgreSQL 5.5.1.45206
-- ---------------------------------------
-- Host      : bec-dev-01.bec.local:5433
-- Database  : TargetFramework
-- Version   : PostgreSQL 9.4.0, compiled by Visual C++ build 1800, 64-bit



CREATE SCHEMA legal AUTHORIZATION postgres;
CREATE SCHEMA public_audit AUTHORIZATION postgres;
CREATE SCHEMA sts AUTHORIZATION postgres;
CREATE SCHEMA audit AUTHORIZATION postgres;
--
-- Definition for function hstore_recv (OID = 16402) :
--
SET search_path = public, pg_catalog;
SET check_function_bodies = false;
CREATE FUNCTION public.hstore_recv (
  internal
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_recv'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_send (OID = 16403) :
--
CREATE FUNCTION public.hstore_send (
  hstore
)
RETURNS bytea
AS '$libdir/hstore', 'hstore_send'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_version_diag (OID = 16405) :
--
CREATE FUNCTION public.hstore_version_diag (
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_version_diag'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function slice_array (OID = 16408) :
--
CREATE FUNCTION public.slice_array (
  hstore,
  text[]
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_slice_to_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator -> (OID = 16409) :
--
CREATE OPERATOR -> (
    PROCEDURE = public.slice_array,
    LEFTARG = public.hstore,
    RIGHTARG = text[]
);
--
-- Definition for function slice (OID = 16410) :
--
CREATE FUNCTION public.slice (
  hstore,
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_slice_to_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function exists_any (OID = 16414) :
--
CREATE FUNCTION public.exists_any (
  hstore,
  text[]
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_exists_any'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator ?| (OID = 16415) :
--
CREATE OPERATOR ?| (
    PROCEDURE = public.exists_any,
    LEFTARG = public.hstore,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);
--
-- Definition for function exists_all (OID = 16416) :
--
CREATE FUNCTION public.exists_all (
  hstore,
  text[]
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_exists_all'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator ?& (OID = 16417) :
--
CREATE OPERATOR ?& (
    PROCEDURE = public.exists_all,
    LEFTARG = public.hstore,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);
--
-- Definition for function delete (OID = 16421) :
--
CREATE FUNCTION public.delete (
  hstore,
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_delete_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function delete (OID = 16422) :
--
CREATE FUNCTION public.delete (
  hstore,
  hstore
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_delete_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator - (OID = 16423) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = text
);
--
-- Definition for operator - (OID = 16424) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = text[]
);
--
-- Definition for operator - (OID = 16425) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore (OID = 16435) :
--
CREATE FUNCTION public.hstore (
  text,
  text
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_text'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore (OID = 16436) :
--
CREATE FUNCTION public.hstore (
  text[],
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_arrays'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore (OID = 16437) :
--
CREATE FUNCTION public.hstore (
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16438)
--
CREATE CAST (text[] AS hstore) WITH FUNCTION hstore (text[]);
--
-- Definition for function hstore_to_json (OID = 16439) :
--
CREATE FUNCTION public.hstore_to_json (
  hstore
)
RETURNS json
AS '$libdir/hstore', 'hstore_to_json'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16440)
--
CREATE CAST (hstore AS json) WITH FUNCTION hstore_to_json (hstore);
--
-- Definition for function hstore_to_json_loose (OID = 16441) :
--
CREATE FUNCTION public.hstore_to_json_loose (
  hstore
)
RETURNS json
AS '$libdir/hstore', 'hstore_to_json_loose'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_to_jsonb (OID = 16442) :
--
CREATE FUNCTION public.hstore_to_jsonb (
  hstore
)
RETURNS jsonb
AS '$libdir/hstore', 'hstore_to_jsonb'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16443)
--
CREATE CAST (hstore AS jsonb) WITH FUNCTION hstore_to_jsonb (hstore);
--
-- Definition for function hstore_to_jsonb_loose (OID = 16444) :
--
CREATE FUNCTION public.hstore_to_jsonb_loose (
  hstore
)
RETURNS jsonb
AS '$libdir/hstore', 'hstore_to_jsonb_loose'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore (OID = 16445) :
--
CREATE FUNCTION public.hstore (
  record
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_record'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore_to_array (OID = 16446) :
--
CREATE FUNCTION public.hstore_to_array (
  hstore
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_to_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator %% (OID = 16447) :
--
CREATE OPERATOR %% (
    PROCEDURE = public.hstore_to_array,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore_to_matrix (OID = 16448) :
--
CREATE FUNCTION public.hstore_to_matrix (
  hstore
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_to_matrix'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator %# (OID = 16449) :
--
CREATE OPERATOR %# (
    PROCEDURE = public.hstore_to_matrix,
    RIGHTARG = public.hstore
);
--
-- Definition for function populate_record (OID = 16455) :
--
CREATE FUNCTION public.populate_record (
  anyelement,
  hstore
)
RETURNS anyelement
AS '$libdir/hstore', 'hstore_populate_record'
LANGUAGE c
IMMUTABLE;
--
-- Definition for operator #= (OID = 16456) :
--
CREATE OPERATOR #= (
    PROCEDURE = public.populate_record,
    LEFTARG = anyelement,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore_eq (OID = 16457) :
--
CREATE FUNCTION public.hstore_eq (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_eq'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_ne (OID = 16458) :
--
CREATE FUNCTION public.hstore_ne (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_ne'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_gt (OID = 16459) :
--
CREATE FUNCTION public.hstore_gt (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_gt'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_ge (OID = 16460) :
--
CREATE FUNCTION public.hstore_ge (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_ge'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_lt (OID = 16461) :
--
CREATE FUNCTION public.hstore_lt (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_lt'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_le (OID = 16462) :
--
CREATE FUNCTION public.hstore_le (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_le'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_cmp (OID = 16463) :
--
CREATE FUNCTION public.hstore_cmp (
  hstore,
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_cmp'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator <> (OID = 16464) :
--
CREATE OPERATOR <> (
    PROCEDURE = public.hstore_ne,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.<>,
    NEGATOR = public.=,
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);
--
-- Definition for operator = (OID = 16465) :
--
CREATE OPERATOR = (
    PROCEDURE = public.hstore_eq,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.=,
    NEGATOR = public.<>,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);
--
-- Definition for operator #># (OID = 16466) :
--
CREATE OPERATOR #># (
    PROCEDURE = public.hstore_gt,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#<#,
    NEGATOR = public.#<=#,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);
--
-- Definition for operator #>=# (OID = 16467) :
--
CREATE OPERATOR #>=# (
    PROCEDURE = public.hstore_ge,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#<=#,
    NEGATOR = public.#<#,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);
--
-- Definition for operator #<# (OID = 16468) :
--
CREATE OPERATOR #<# (
    PROCEDURE = public.hstore_lt,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#>#,
    NEGATOR = public.#>=#,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);
--
-- Definition for operator #<=# (OID = 16469) :
--
CREATE OPERATOR #<=# (
    PROCEDURE = public.hstore_le,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#>=#,
    NEGATOR = public.#>#,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);
--
-- Definition for function hstore_hash (OID = 16478) :
--
CREATE FUNCTION public.hstore_hash (
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_hash'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function ghstore_consistent (OID = 16493) :
--
CREATE FUNCTION public.ghstore_consistent (
  internal,
  internal,
  integer,
  oid,
  internal
)
RETURNS boolean
AS '$libdir/hstore', 'ghstore_consistent'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function gin_extract_hstore_query (OID = 16509) :
--
CREATE FUNCTION public.gin_extract_hstore_query (
  internal,
  internal,
  smallint,
  internal,
  internal
)
RETURNS internal
AS '$libdir/hstore', 'gin_extract_hstore_query'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function gin_consistent_hstore (OID = 16510) :
--
CREATE FUNCTION public.gin_consistent_hstore (
  internal,
  smallint,
  internal,
  integer,
  internal,
  internal
)
RETURNS boolean
AS '$libdir/hstore', 'gin_consistent_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_nil (OID = 16522) :
--
CREATE FUNCTION public.uuid_nil (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_nil'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_dns (OID = 16523) :
--
CREATE FUNCTION public.uuid_ns_dns (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_dns'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_url (OID = 16524) :
--
CREATE FUNCTION public.uuid_ns_url (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_url'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_oid (OID = 16525) :
--
CREATE FUNCTION public.uuid_ns_oid (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_oid'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_x500 (OID = 16526) :
--
CREATE FUNCTION public.uuid_ns_x500 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_x500'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_generate_v1 (OID = 16527) :
--
CREATE FUNCTION public.uuid_generate_v1 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v1'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v1mc (OID = 16528) :
--
CREATE FUNCTION public.uuid_generate_v1mc (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v1mc'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v3 (OID = 16529) :
--
CREATE FUNCTION public.uuid_generate_v3 (
  namespace uuid,
  name text
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v3'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_generate_v4 (OID = 16530) :
--
CREATE FUNCTION public.uuid_generate_v4 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v4'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v5 (OID = 16531) :
--
CREATE FUNCTION public.uuid_generate_v5 (
  namespace uuid,
  name text
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v5'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function audit_table (OID = 16532) :
--
SET search_path = audit, pg_catalog;
CREATE FUNCTION audit.audit_table (
  target_table character varying
)
RETURNS void
AS
$body$
SELECT audit.audit_table($1, BOOLEAN 't', BOOLEAN 't');
$body$
LANGUAGE sql;
--
-- Definition for function audit_table (OID = 16533) :
--
CREATE FUNCTION audit.audit_table (
  target_table character varying,
  audit_rows boolean,
  audit_query_text boolean
)
RETURNS void
AS
$body$
SELECT audit.audit_table($1, $2, $3, ARRAY[]::text[]);
$body$
LANGUAGE sql;
--
-- Definition for function audit_table (OID = 16534) :
--
CREATE FUNCTION audit.audit_table (
  target_table character varying,
  audit_rows boolean,
  audit_query_text boolean,
  ignored_cols text[]
)
RETURNS void
AS
$body$
DECLARE
  stm_targets text = 'INSERT OR UPDATE OR DELETE OR TRUNCATE';
  _q_txt text;
  _ignored_cols_snip text = '';
BEGIN
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_row ON ' || target_table;
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_stm ON ' || target_table;

    IF audit_rows THEN
        IF array_length(ignored_cols,1) > 0 THEN
            _ignored_cols_snip = ', ' || quote_literal(ignored_cols);
        END IF;
        _q_txt = 'CREATE TRIGGER audit_trigger_row AFTER INSERT OR UPDATE OR DELETE ON ' ||
                 target_table ||
                 ' FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func(' ||
                 quote_literal(audit_query_text) || _ignored_cols_snip || ');';
        RAISE NOTICE '%',_q_txt;
        EXECUTE _q_txt;
        stm_targets = 'TRUNCATE';
    ELSE
    END IF;

    _q_txt = 'CREATE TRIGGER audit_trigger_stm AFTER ' || stm_targets || ' ON ' ||
             target_table ||
             ' FOR EACH STATEMENT EXECUTE PROCEDURE audit.if_modified_func('||
             quote_literal(audit_query_text) || ');';
    RAISE NOTICE '%',_q_txt;
    EXECUTE _q_txt;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function if_modified_func (OID = 16535) :
--
CREATE FUNCTION audit.if_modified_func (
)
RETURNS trigger
AS
$body$
DECLARE
    audit_row audit.logged_actions;
    include_values boolean;
    log_diffs boolean;
    h_old hstore;
    h_new hstore;
    excluded_cols text[] = ARRAY[]::text[];
BEGIN
    IF TG_WHEN <> 'AFTER' THEN
        RAISE EXCEPTION 'audit.if_modified_func() may only run as an AFTER trigger';
    END IF;

    audit_row = ROW(
        nextval('audit.logged_actions_event_id_seq'), -- event_id
        TG_TABLE_SCHEMA::text,                        -- schema_name
        TG_TABLE_NAME::text,                          -- table_name
        TG_RELID,                                     -- relation OID for much quicker searches
        session_user::text,                           -- session_user_name
        current_timestamp,                            -- action_tstamp_tx
        statement_timestamp(),                        -- action_tstamp_stm
        clock_timestamp(),                            -- action_tstamp_clk
        txid_current(),                               -- transaction ID
        (SELECT setting FROM pg_settings WHERE name = 'application_name'),
        inet_client_addr(),                           -- client_addr
        inet_client_port(),                           -- client_port
        current_query(),                              -- top-level query or queries (if multistatement) from client
        substring(TG_OP,1,1),                         -- action
        NULL, NULL,                                   -- row_data, changed_fields
        'f'                                           -- statement_only
        );

    IF NOT TG_ARGV[0]::boolean IS DISTINCT FROM 'f'::boolean THEN
        audit_row.client_query = NULL;
    END IF;

    IF TG_ARGV[1] IS NOT NULL THEN
        excluded_cols = TG_ARGV[1]::text[];
    END IF;

    IF (TG_OP = 'UPDATE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*);
        audit_row.changed_fields =  (hstore(NEW.*) - audit_row.row_data) - excluded_cols;
        IF audit_row.changed_fields = hstore('') THEN
            -- All changed fields are ignored. Skip this update.
            RETURN NULL;
        END IF;
    ELSIF (TG_OP = 'DELETE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*) - excluded_cols;
    ELSIF (TG_OP = 'INSERT' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(NEW.*) - excluded_cols;
    ELSIF (TG_LEVEL = 'STATEMENT' AND TG_OP IN ('INSERT','UPDATE','DELETE','TRUNCATE')) THEN
        audit_row.statement_only = 't';
    ELSE
        RAISE EXCEPTION '[audit.if_modified_func] - Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
        RETURN NULL;
    END IF;
    INSERT INTO audit.logged_actions VALUES (audit_row.*);
    RETURN NULL;
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public;
--
-- Definition for function create_audit (OID = 16536) :
--
SET search_path = public, pg_catalog;
CREATE FUNCTION public.create_audit (
  enable_replica boolean,
  tablename character varying,
  schemaname character varying
)
RETURNS SETOF text
AS
$body$
SELECT format('CREATE SCHEMA IF NOT EXISTS %I;', nspname || '_audit')
FROM pg_catalog.pg_namespace n
WHERE
    n.nspname NOT IN ('pg_catalog','information_schema') AND /* Leave out the stuff in the catalog */
    n.nspname !~ '(^(pg|)_|_audit$)' /* Also omit anything that looks like PostgreSQL, Slony or Audit owns it. */
UNION ALL
(
    WITH t0 AS (
        SELECT
            n.nspname AS "schema",
            c.relname AS "table",
            a.attname AS "column_name",
            pg_catalog.format_type(a.atttypid, a.atttypmod) AS "column_type"
        FROM
            pg_catalog.pg_attribute a
        JOIN
            pg_catalog.pg_class c
            ON (
                c.relkind = 'r' AND
                c.oid = a.attrelid
            )
        JOIN
            pg_catalog.pg_namespace n
            ON (
                c.relnamespace = n.oid AND
                n.nspname NOT IN ('pg_catalog','information_schema') AND /* Leave out the stuff in the catalog */
                n.nspname !~ '(^(pg|)_|_audit$)' /* Also omit anything that looks like PostgreSQL, Slony or Audit owns it. */
            )
        WHERE
            a.attnum > 0 AND
            NOT a.attisdropped
            AND lower(n.nspname) = lower(schemaname)
            AND lower(c.relname) = lower(tablename)

        ORDER BY c.relname, a.attnum
    )
    SELECT
        format(
            $q$CREATE TABLE IF NOT EXISTS %I.%I (
    %s,
    stamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT current_timestamp,
    "current_user" TEXT NOT NULL DEFAULT current_user,
    "session_user" TEXT NOT NULL DEFAULT session_user,
    operation TEXT NOT NULL
);

CREATE OR REPLACE FUNCTION %I.%I()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_old %I.%I%%ROWTYPE;
    v_new %I.%I%%ROWTYPE;
    v_ret %I.%I%%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO %I.%I (
        %s,
        operation
    )
    VALUES((v_old).*, TG_OP);
    RETURN v_ret;
END;
$$;

CREATE TRIGGER %I
AFTER INSERT OR UPDATE OR DELETE ON %I.%I
    FOR EACH ROW EXECUTE PROCEDURE %I.%I();
%s
INSERT INTO %I.%I (
    %s,
    operation
)
SELECT
    %s,
    'INSERT'
FROM %I.%I;

$q$,
        "schema" || '_audit', "table",
        string_agg(

            quote_ident("column_name") || ' ' || column_type, E',\n '
        ),
        "schema" || '_audit', "table",
        "schema", "table",
        "schema", "table",
        "schema", "table",
        "schema" || '_audit', "table",
        string_agg(quote_ident("column_name"), E',\n '),
        quote_ident("schema" || '_' || "table" || '_audit'),
        "schema", "table",
        "schema" || '_audit', "table",
        CASE
        WHEN enable_replica THEN
            format(
                '%sALTER TABLE %I.%I ENABLE REPLICA TRIGGER %I;%s',
                E'\n', "schema", "table", "schema" || '_' || "table" || '_audit', E'\n'
            )
        ELSE ''
        END,
        "schema" || '_audit', "table",
        string_agg(quote_ident("column_name"), E',\n '),
        string_agg(quote_ident("column_name"), E',\n '),
        "schema", "table"
        ) AS "table and trigger"
        FROM
            t0
        GROUP BY "schema", "table"
)
UNION ALL
/* Indexes for each unique key */
(
    WITH t1 AS (
        SELECT
            n.nspname::text,
            c.relname::text,
            array_agg(a.attname::text ORDER BY k.ord) AS "cols"
        FROM
            pg_catalog.pg_class c
        JOIN
            pg_catalog.pg_namespace n
            ON (
                c.relkind = 'r' AND
                c.relnamespace = n.oid AND
                n.nspname NOT IN ('pg_catalog','information_schema') AND
                n.nspname !~ '(^(pg|)_|_audit$)'
            )
        JOIN
            pg_catalog.pg_constraint co
            ON (
                c.oid = co.conrelid AND
                co.contype IN ('p','u')
            )
        CROSS JOIN LATERAL
            /*
* XXX In 9.4+, replace the hack below with
* UNNEST(co.conkey) WITH ORDINALITY AS k(col, ord)
*/
            (SELECT col, row_number() OVER () AS ord FROM UNNEST(co.conkey) AS u(col)) AS k
        JOIN
            pg_catalog.pg_attribute a
            ON (
                k.col = a.attnum AND
                c.oid = a.attrelid
            )
        WHERE lower(n.nspname) = lower(schemaname)
            AND lower(c.relname) = lower(tablename)
        GROUP BY n.nspname, c.relname, co.conname
    )
    SELECT
        format(
            'CREATE INDEX ON %I.%I (%s);',
            nspname || '_audit',
            relname,
            (SELECT string_agg(u || '_' || v, ', ') FROM UNNEST(cols) AS u(u))
        )
    FROM
        t1
    CROSS JOIN
        (VALUES('old'),('new')) AS o_n(v)
);
$body$
LANGUAGE sql
IMMUTABLE STRICT;
--
-- Definition for function fn_AddAudit (OID = 16538) :
--
CREATE FUNCTION public."fn_AddAudit" (
)
RETURNS void
AS
$body$
begin

  PERFORM public."fn_CreateAuditTableAndColumns"('Organisation','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('Plan','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('ProductDetail','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('UserAccounts','Public');
end
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddAuditColumnToTable (OID = 16539) :
--
CREATE FUNCTION public."fn_AddAuditColumnToTable" (
  tablename character varying,
  schemaname character varying
)
RETURNS void
AS
$body$
DECLARE my_row    RECORD;
begin
    FOR my_row IN
        SELECT t.table_name
        FROM   information_schema.tables t
        WHERE  lower(t.table_schema)  = lower(schemaname) and lower(t.table_name) = lower(tablename)
    LOOP

     IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'CreatedOn')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "CreatedOn" date NOT NULL DEFAULT CURRENT_DATE;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'CreatedBy')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "CreatedBy" varchar(200) NULL;');
    END IF;

     IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'ModifiedOn')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "ModifiedOn" date NULL;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'ModifiedBy')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "ModifiedBy" varchar(200) NULL;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'IsActive')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "IsActive" boolean NOT NULL DEFAULT true;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'IsDeleted')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "IsDeleted" boolean NOT NULL DEFAULT false;');
    END IF;

    END LOOP;

end
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddPlanSubscriptionToOrganisation (OID = 16540) :
--
CREATE FUNCTION public."fn_AddPlanSubscriptionToOrganisation" (
  organisationid uuid,
  planid uuid,
  planversionnumber integer,
  globalpaymentmethodid uuid,
  quantity integer,
  activate boolean,
  startimmediately boolean
)
RETURNS void
AS
$body$
DECLARE
  PlanSubscriptionID UUID;
  PlanSubscriptionVersionNumber integer;
  BillingID uuid;
  PlanHasTrial boolean;
BEGIN

PlanSubscriptionID := (select uuid_generate_v1());

PlanSubscriptionVersionNumber = 1;

BillingID := (select pb."BillingID" from "PlanBilling" pb where pb."PlanID" = planid and pb."PlanVersionNumber" = planversionnumber and pb."IsActive" = true and pb."IsDeleted" = false limit 1);

PlanHasTrial := (select (case when pb."TrialPeriod" > 0 then true else false end) from "Plan" pb where pb."PlanID" = planid and pb."PlanVersionNumber" = planversionnumber);

-- create subscription
INSERT INTO
  public."PlanSubscription"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "HasInfinitePeriods",
  "PlanQuantity",
  "CreatedOn",
  "CreatedBy",
  "ActivatedOn",
  "CountryCode",
  "IsFree",
  "PlanID",
  "PlanVersionNumber",
  "OrganisationID",
  "IsRenewal"
)
SELECT
   PlanSubscriptionID,
   PlanSubscriptionVersionNumber,
   p."HasInfinitePeriods",
   quantity,
   CURRENT_DATE,
   'system',
   (CASE WHEN activate = true then CURRENT_DATE else null end),
   p."CountryCode",
   p."IsFree",
   p."PlanID",
   p."PlanVersionNumber",
   organisationid,
   FALSE
FROM
  public."Plan" p

  where p."PlanID" = planid and p."PlanVersionNumber" = planversionnumber
  and not exists (select * from "PlanSubscription" ps where ps."PlanID" = planid and ps."PlanVersionNumber" = planversionnumber and ps."IsRenewal" = false limit 1);

-- first period
-- only supports month currently for period
INSERT INTO
  public."PlanSubscriptionPeriod"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "IsCancellationPeriod",
  "PeriodNumber",
  "IsTrialPeriod",
  "TrialPeriodNumber",
  "TrialStartDate",
  "TrialEndDate",
  "IsClosed"
)
SELECT
	PlanSubscriptionID,
    PlanSubscriptionVersionNumber,
    CURRENT_DATE,
   -- start date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    -- end date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    false,
    1,
    (CASE WHEN p."TrialPeriod" > 0 then true else false end),
    (CASE WHEN p."TrialPeriod" > 0 then 1 else null end),
    (CASE WHEN p."TrialPeriod" > 0 then CURRENT_DATE else NULL end),
    (CASE WHEN p."TrialPeriod" = 0 then null else
    	 (CASE WHEN tperiod."Name" = 'Month' then (current_date + interval '1 month' * p."TrialPeriod") end) end),
    false
FROM
   public."Plan" p

   left outer join "ClassificationType" period on period."ClassificationTypeID" = p."PeriodUnitID" and period."ClassificationTypeCategoryID" = 8006
   left outer join "ClassificationType" tperiod on tperiod."ClassificationTypeID" = p."TrialPeriodUnitID" and tperiod."ClassificationTypeCategoryID" = 8006

left outer join "GlobalAccountingPeriod" gap on gap."IsCurrentPeriod" = true

  where p."PlanID" = planid and p."PlanVersionNumber" = planversionnumber;

-- payment plan
INSERT INTO
  public."PlanSubscriptionPaymentPlan"
(
  "GlobalPaymentMethodID",
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "BillingID"
)
VALUES (
  globalpaymentmethodid,
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  BillingID
);

-- subscription process log, deal with trial status
IF (PlanHasTrial = true)
THEN


INSERT INTO
  public."PlanSubscriptionProcessLog"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "IsCancelled",
  "IsRenewed",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
VALUES (
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  CURRENT_DATE,
  false,
  false,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1)
);



ELSE



INSERT INTO
  public."PlanSubscriptionProcessLog"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "IsCancelled",
  "IsRenewed",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
VALUES (
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  CURRENT_DATE,
  false,
  false,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1)
);



END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddUserToOrganisation (OID = 16541) :
--
CREATE FUNCTION public."fn_AddUserToOrganisation" (
  useraccountid uuid,
  organisationid uuid,
  usertypeid uuid,
  organisationbranchid uuid
)
RETURNS void
AS
$body$
DECLARE
	DefaultOrganisationID UUID;
    DefaultOrganisationVersionNumber INTEGER;
    UserExists BOOLEAN;
    UserAccountOrganisationID UUID;
BEGIN

DefaultOrganisationID := (select "DefaultOrganisationID"
	from "Organisation" where "OrganisationID" = organisationid);

DefaultOrganisationVersionNumber := (select "DefaultOrganisationVersionNumber"
	from "Organisation" where "OrganisationID" = organisationid);

-- Get UserType default if null
if(usertypeid is null)
THEN
	usertypeid := (select u."UserTypeID" from "DefaultOrganisationUserTarget" u where u."DefaultOrganisationID" = DefaultOrganisationID
    	and u."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber and u."IsDefault" = true and u."IsActive" = true and u."IsDeleted" = FALSE);
END IF;

-- check user doesnt exist
IF(EXISTS(select u."UserID" from "UserAccountOrganisation" u where u."UserID" = useraccountid and u."OrganisationID" = organisationbranchid))
THEN
	UserExists := true;
ELSE
	UserExists := false;
END IF;

-- Create UAO if doesnt exist
IF(UserExists = false)
THEN
INSERT INTO
  public."UserAccountOrganisation"
(
  "UserID",
  "OrganisationID",
  "IsActive",
  "IsDeleted",
  "UserTypeID",
  "ParentID"
)
values
(
  useraccountid,
  organisationbranchid,
  true,
  false,
  usertypeid,
  organisationid
);
END IF;
UserAccountOrganisationID := (select ua."UserAccountOrganisationID" from "UserAccountOrganisation" ua where ua."UserID" = useraccountid and ua."OrganisationID" = organisationbranchid);



-- Create Roles  for User
INSERT INTO
  public."UserAccountOrganisationRole"
(
  "OrganisationRoleID",
  "IsActive",
  "IsDeleted",
  "UserAccountOrganisationID"
)
SELECT
  COALESCE(or1."OrganisationRoleID",or2."OrganisationRoleID"),
  wt."IsActive",
  wt."IsDeleted",
  UserAccountOrganisationID
FROM
  public."DefaultOrganisationRoleTarget" wt

  left outer join "DefaultOrganisationRole" dor on dor."DefaultOrganisationRoleID" = wt."DefaultOrganisationRoleID"

  left outer join "OrganisationRole" or1 on or1."OrganisationID" = organisationid and or1."ParentID" = dor."DefaultOrganisationRoleID"
  left outer join "OrganisationRole" or2 on or2."OrganisationID" = organisationid and or2."ParentID" = dor."RoleID"

  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid

  where wt."DefaultOrganisationUserTargetID" in (select d."DefaultOrganisationUserTargetID" from "DefaultOrganisationUserTarget" d where d."UserTypeID" = usertypeid and d."DefaultOrganisationID" = DefaultOrganisationID
  	and d."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber)
  	and (not exists(select u."OrganisationRoleID" from "UserAccountOrganisationRole" u where u."OrganisationRoleID" = or1."OrganisationRoleID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")
    or not exists(select u."OrganisationRoleID" from "UserAccountOrganisationRole" u where u."OrganisationRoleID" = or2."OrganisationRoleID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID"));

-- Create Groups  for User
INSERT INTO
  public."UserAccountOrganisationGroup"
(
  "OrganisationGroupID",
  "IsActive",
  "IsDeleted",
  "UserAccountOrganisationID"
)
SELECT
  COALESCE(or1."OrganisationGroupID",or2."OrganisationGroupID"),
  wt."IsActive",
  wt."IsDeleted",
  UserAccountOrganisationID
FROM
  public."DefaultOrganisationGroupTarget" wt

  left outer join "DefaultOrganisationGroup" dor on dor."DefaultOrganisationGroupID" = wt."DefaultOrganisationGroupID"

  left outer join "OrganisationGroup" or1 on or1."OrganisationID" = organisationid and or1."ParentID" = dor."DefaultOrganisationGroupID"
  left outer join "OrganisationGroup" or2 on or2."OrganisationID" = organisationid and or2."ParentID" = dor."GroupID"

  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid

  where wt."DefaultOrganisationUserTargetID" in (select d."DefaultOrganisationUserTargetID" from "DefaultOrganisationUserTarget" d where d."UserTypeID" = usertypeid and d."DefaultOrganisationID" = DefaultOrganisationID
  	and d."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber)
  	and (not exists(select u."OrganisationGroupID" from "UserAccountOrganisationGroup" u where u."OrganisationGroupID" = or1."OrganisationGroupID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")
    or not exists(select u."OrganisationGroupID" from "UserAccountOrganisationGroup" u where u."OrganisationGroupID" = or2."OrganisationGroupID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")) ;

-- Create Status for user if it doesnt exist
if(UserExists = false)
THEN
	INSERT INTO
  public."UserAccountOrganisationStatus"
(
  "UserAccountOrganisationID",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "StatusChangedOn",
  "StatusChangedBy",
  "ParentID"
)
SELECT
  uao."UserAccountOrganisationID",
  wt."StatusTypeID",
  wt."StatusTypeVersionNumber",
  st."StatusTypeValueID",
  CURRENT_DATE,
  'System',
  wt."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationUserTarget" wt
  left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."IsStart" = true
  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid
   where wt."DefaultOrganisationID" = DefaultOrganisationID and wt."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
   and not exists(select * from "UserAccountOrganisationStatus" us where us."UserAccountOrganisationID" = uao."UserAccountOrganisationID" and us."StatusTypeID" = wt."StatusTypeID"
   	and us."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and us."StatusTypeValueID" = st."StatusTypeValueID");


END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddUserToTemporaryOrganisation (OID = 16542) :
--
CREATE FUNCTION public."fn_AddUserToTemporaryOrganisation" (
  useraccountid uuid
)
RETURNS void
AS
$body$
DECLARE
  OrgID UUID;
  OrgBranchID UUID;
  UserTypeID UUID;
BEGIN
  UserTypeID := (select  "UserTypeID" from "UserType" where "Name" = 'Temporary');
  if(UserTypeID IS NOT NULL)
  THEN
  BEGIN
      SELECT   INTO  OrgID, OrgBranchID  "OrganisationID",  "organisationbranchid"
      FROM   public."vOrganisationUserType"  WHERE "UserTypeID" = UserTypeID and "Name" = 'Temporary' ;

      PERFORM public."fn_AddUserToOrganisation"(useraccountid, OrgID, UserTypeID, OrgBranchID);
  END;
  END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_CreateAuditTableAndColumns (OID = 16543) :
--
CREATE FUNCTION public."fn_CreateAuditTableAndColumns" (
  tablename character varying,
  schemaname character varying
)
RETURNS void
AS
$body$
Declare
	DefaultOrganisationID uuid;
	audit_row    RECORD;
	index_row    RECORD;
begin
     -- Create Columns on target table
     PERFORM "fn_AddAuditColumnToTable"(tablename,schemaname);
     -- execute history tables

     FOR audit_row IN
         SELECT * FROM public.create_audit(false, tablename, schemaname)  where lower(create_audit ) like '%create table%'
     LOOP

     EXECUTE(audit_row.create_audit);

     END LOOP;

end;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_CreateOrganisationFromDefault (OID = 16544) :
--
CREATE FUNCTION public."fn_CreateOrganisationFromDefault" (
  organisationtypeid integer,
  defaultorganisationid uuid,
  organisationversionnumber integer,
  organisationname character varying = 'Organisation'::character varying,
  organisationdescription character varying = 'Organisation Description'::character varying
)
RETURNS uuid
AS
$body$
Declare
  OrganisationID uuid;
  LoopRow RECORD;
begin
  OrganisationID := uuid_generate_v1();

  -- If no defaultorgid then determine from orgtypeid
  if(defaultorganisationid is null) then
    Begin
      defaultorganisationid := (
      select
        DOrg."DefaultOrganisationID"
      from
        "DefaultOrganisation" DOrg
        inner join "DefaultOrganisationTarget" DOT on DOrg."DefaultOrganisationVersionNumber" = DOT."DefaultOrganisationVersionNumber" and DOrg."DefaultOrganisationID" = DOT."DefaultOrganisationID"
          and DOT."OrganisationTypeID" = organisationtypeid
      limit
        1);
    End;
  End if;

  -- create new organisation

  INSERT INTO
    "Organisation"("OrganisationID", "IsBranch", "IsHeadOffice", "IsActive", "IsDeleted", "IsUserOrganisation", "DefaultOrganisationID", "DefaultOrganisationVersionNumber", "OrganisationTypeID")
  SELECT
    OrganisationID,
    False,
    False,
    True,
    False,
    False,
    defaultorganisationid,
    organisationversionnumber,
    wt."OrganisationTypeID"
  FROM
    public."DefaultOrganisation" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;

  -- add org default

  INSERT INTO
    public."OrganisationDetail"("OrganisationID", "Name", "Description")
  VALUES
    (OrganisationID, organisationname, organisationdescription);

  -- add payment methods
  INSERT INTO
  public."OrganisationPaymentMethod"
(
  "OrganisationID",
  "GlobalPaymentMethodID",
  "OrganisationBankAccountId",
  "IsActive",
  "IsDeleted",
  "IsDirectDebit",
  "IsBACS",
  "OrganisationDirectDebitMandateID",
  "IsPrimary",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "DirectDebitMonthCollectionPeriodNumber",
  "BACSMonthPaymentDay",
  "DirectDebitNumberOfNotificationDaysBeforeCollection",
  "BACSNumberOfNotificationDaysBeforeExpectationOfPayment"
)
SELECT
  OrganisationID,
  wt."GlobalPaymentMethodID",
  null,
  true,
  false,
  pm."IsDirectDebit",
  (case when pm."IsDirectDebit" = false and pm."Name" <> 'BACS' then false else true end),
  null,
  (case when pm."Name" = 'BACS' then true else false end),
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  st."StatusTypeValueID",
  pm."DirectDebitDefaultMonthlyPeriodNumber",
  pm."BACSDefaultMonthlyPaymentDay",
  pm."DirectDebitDefaultNumberOfNotificationDaysBeforeCollection",
  pm."BACSDefaultNumberOfNotificationDaysBeforeExpectationOfPayment"
FROM
  public."DefaultOrganisationPaymentMethod" wt

  left outer join "GlobalPaymentMethod" pm on pm."GlobalPaymentMethodID" = wt."GlobalPaymentMethodID"
  left outer join "vStatusType" st on st."StatusTypeName" = 'OrganisationPaymentMethod Status' and st."IsStart" = true


  where wt."DefaultOrganisationID" = defaultorganisationid and wt."DefaultOrganisationVersionNumber" = organisationversionnumber
  and not exists (select * from "OrganisationPaymentMethod" dd where dd."OrganisationID" = OrganisationID and dd."GlobalPaymentMethodID" = wt."GlobalPaymentMethodID" limit 1)
  ;

-- add base financials
INSERT INTO
  public."OrganisationFinancialDetail"
(
  "OrganisationID",
  "FinancialStatusTypeID",
  "FinancialStatusTypeVersionNumber",
  "FinancialStatusTypeValueID",
  "HasACreditLimit",
  "CreditLimit",
  "NumberOfLatePayments",
  "HasLatePayments"
)
VALUES (
  OrganisationID,
  (select "StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  (select "StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  (select "StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  false,
  0,
  0,
  false
);


-- add accounting periods
INSERT INTO
  public."OrganisationAccountingPeriod"
(
  "OrganisationID",
  "GlobalAccountingPeriodID"
)
SELECT
  OrganisationID,
  wt."GlobalAccountingPeriodID"
FROM
  public."GlobalAccountingPeriod" wt

  where not exists (select * from "OrganisationAccountingPeriod" gp where gp."OrganisationID" = OrganisatioNID and gp."GlobalAccountingPeriodID" = wt."GlobalAccountingPeriodID" limit 1)
  ;

INSERT INTO
  public."OrganisationLedgerAccount"
(
  "LedgerAccountTypeID",
  "LedgerAccountCategoryID",
  "Name",
  "Description",
  "ParentID",
  "CreatedOn",
  "CreatedBy",
  "Balance",
  "HandlesCredit",
  "HandlesDebit",
  "ClosedOn",
  "IsActive",
  "IsDeleted",
  "OrganisationID",
  "AccountingTypeID"
)
SELECT
  wt."LedgerAccountTypeID",
  null,
  wt."LedgerAccountName",
  '',
  null,
  CURRENT_DATE,
  'System',
  0,
  wt."HandlesCredit",
  wt."HandlesDebit",
  CURRENT_DATE,
  true,
  false,
  OrganisationID,
  0
FROM
  public."DefaultOrganisationLedger" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber

    and not exists(select * from "OrganisationLedgerAccount" le where le."LedgerAccountTypeID" = wt."LedgerAccountTypeID" and le."OrganisationID" = OrganisationID limit 1);



  -- create organisationroles which are not default organisation specific nad global, could be duplicates

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  from
    "Role" r
  where
    r."RoleID" in (
                    select
                      dor."RoleID"
                    from
                      "DefaultOrganisationRole" dor
                    where
                      dor."DefaultOrganisationID" = defaultorganisationid and
                      dor."IsActive" = true and
                      dor."IsDeleted" = false and
                      COALESCE(dor."IsDefaultOrganisationSpecific", false) = false
    ) and
    r."RoleID" not in (
                        select
                          org."ParentID"
                        from
                          "OrganisationRole" org
                        where
                          org."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    r."IsGlobal" = true;

  -- add roleclaims which are not default organisation specific, parentID is RoleID, and are global roles

  insert into
    "OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  select
    org."OrganisationRoleID",
    rc."ResourceID",
    rc."OperationID",
    rc."StateID",
    rc."StateItemID",
    true,
    false,
    OrganisationID
  from
    "RoleClaim" rc
    inner join "OrganisationRole" org on org."OrganisationID" = OrganisationID and org."IsActive" = true and org."IsDeleted" = false and org."ParentID" = rc."RoleID"
  where
    rc."RoleID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationRole" orgr
      where
        orgr."OrganisationRoleID" = org."OrganisationRoleID"
    ) and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = org."OrganisationRoleID" and
                   orc."OperationID" = rc."OperationID" and
                   orc."ResourceID" = rc."ResourceID" and
                   orc."StateID" = rc."StateID" and
                   orc."StateItemID" = rc."StateItemID"
    );

  -- add do specific roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    dor."RoleName",
    true,
    dor."RoleTypeID",
    true,
    false,
    dor."DefaultOrganisationRoleID"
  from
    "DefaultOrganisationRole" dor
  where
    dor."IsActive" = true and
    dor."IsDeleted" = false and
    dor."IsDefaultOrganisationSpecific" = true and
    dor."DefaultOrganisationID" = defaultorganisationid and
    dor."DefaultOrganisationRoleID" not in (
                                             select
                                               dor1."ParentID"
                                             from
                                               "OrganisationRole" dor1
                                             where
                                               dor1."OrganisationID" = OrganisationID
    );

  -- add do specific claims

  insert into
    "OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  select
    org."OrganisationRoleID",
    rc."ResourceID",
    rc."OperationID",
    rc."StateID",
    rc."StateItemID",
    true,
    false,
    OrganisationID
  from
    "DefaultOrganisationRoleClaim" rc
    inner join "OrganisationRole" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."DefaultOrganisationRoleID" and org."IsActive" = true and org."IsDeleted" = FALSE
  where
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = org."OrganisationRoleID" and
                   orc."OperationID" = rc."OperationID" and
                   orc."ResourceID" = rc."ResourceID" and
                   orc."StateID" = rc."StateID" and
                   orc."StateItemID" = rc."StateItemID"
    );

  -- add global groups
  -- create organisationroles which are not default organisation specific and global

  insert into
    public."OrganisationGroup"("OrganisationID", "GroupName", "IsManaged", "GroupTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    r."GroupName",
    true,
    r."GroupTypeID",
    true,
    false,
    r."GroupID"
  from
    "Group" r
  where
    r."GroupID" in (
                     select
                       dor."GroupID"
                     from
                       "DefaultOrganisationGroup" dor
                     where
                       dor."DefaultOrganisationID" = defaultorganisationid and
                       dor."IsActive" = true and
                       dor."IsDeleted" = false and
                       COALESCE(dor."IsDefaultOrganisationSpecific", false) = false
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    r."IsGlobal" = true and
    r."GroupID" not in (
                         select
                           rg."ParentID"
                         from
                           "OrganisationGroup" rg
                         where
                           rg."OrganisationID" = OrganisationID
    );

  -- add global group roles

  insert into
    "OrganisationGroupRole"("OrganisationGroupID", "OrganisationRoleID", "IsActive", "IsDeleted")
  select
    org."OrganisationGroupID",
    orgr."OrganisationRoleID",
    true,
    false
  from
    "GroupRole" rc
    inner join "OrganisationGroup" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."GroupID" and org."IsActive" = true and org."IsDeleted" = false
    inner join "OrganisationRole" orgr on orgr."OrganisationID" = OrganisationID and orgr."ParentID" = rc."RoleID" and orgr."IsActive" = true and orgr."IsDeleted" = false
  where
    rc."GroupID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationGroup" orgr
      where
        orgr."OrganisationGroupID" = org."OrganisationGroupID"
    );

  -- add do specific groups

  insert into
    public."OrganisationGroup"("OrganisationID", "GroupName", "IsManaged", "GroupTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    dor."GroupName",
    true,
    dor."GroupTypeID",
    true,
    false,
    dor."DefaultOrganisationGroupID"
  from
    "DefaultOrganisationGroup" dor
  where
    dor."IsActive" = true and
    dor."IsDeleted" = false and
    dor."IsDefaultOrganisationSpecific" = true and
    dor."DefaultOrganisationID" = defaultorganisationid and
    dor."DefaultOrganisationGroupID" not in (
                                              select
                                                dor1."ParentID"
                                              from
                                                "OrganisationGroup" dor1
                                              where
                                                dor1."OrganisationID" = OrganisationID
    );

  -- add do specific group roles

  insert into
    "OrganisationGroupRole"("OrganisationGroupID", "OrganisationRoleID", "IsActive", "IsDeleted")
  select
    org."OrganisationGroupID",
    orr."OrganisationRoleID",
    true,
    false
  from
    "DefaultOrganisationGroupRole" rc
    inner join "OrganisationGroup" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."DefaultOrganisationGroupID" and org."IsActive" = true and org."IsDeleted" = false
    left join "OrganisationRole" orr on orr."ParentID" = rc."DefaultOrganisationRoleID" and orr."IsActive" = true and orr."IsDeleted" = false and orr."OrganisationID" = OrganisationID
  where
    rc."DefaultOrganisationGroupID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationGroup" orgr
      where
        orgr."OrganisationGroupID" = org."OrganisationGroupID"
    );

  -- Organisation NC /  ROLE / CLAIM

/*  INSERT INTO
    public."OrganisationNotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber", "IsActive", "IsDeleted", "OrganisationID", "ParentID")
  SELECT
    "NotificationConstructID",
    "NotificationConstructVersionNumber",
    true,
    false,
    OrganisationID,
    "DefaultOrganisationNotificationConstructID"
  FROM
    public."DefaultOrganisationNotificationConstruct"
  where
    "DefaultOrganisationID" = defaultorganisationid;*/

  -- NC Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleSubTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."NotificationConstructRole" ncr
    inner join "DefaultOrganisationNotificationConstruct" donc on donc."NotificationConstructID" = ncr."NotificationConstructID" and donc."NotificationConstructVersionNumber" =
      ncr."NotificationConstructVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationNotificationConstruct" donc on donc."NotificationConstructID" = ncc."NotificationConstructID" and donc."NotificationConstructVersionNumber" =
      ncc."NotificationConstructVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."NotificationRoleConstructID" is null;

  -- NC CLAIMS THAT ARE DIRECT FROM NC ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false and
      ncc."IsActive" = true and ncc."IsDeleted" = false and ncc."RoleID" is null and not exists (
                                                                                                  select
                                                                                                    orc."OrganisationRoleClaimID"
                                                                                                  from
                                                                                                    "OrganisationRoleClaim" orc
                                                                                                  where
                                                                                                    orc."OrganisationID" = OrganisationID and
                                                                                                    orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                                                                                                    orc."OperationID" = ncc."OperationID" and
                                                                                                    orc."ResourceID" = ncc."ResourceID" and
                                                                                                    orc."StateID" = ncc."StateID" and
                                                                                                    orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;

  ----------------------- Artefact
  -- Org Artefact

  INSERT INTO
    public."OrganisationArtefact"("OrganisationID", "ArtefactID", "ArtefactVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "ArtefactID",
    "ArtefactVersionNumber",
    "IsActive",
    "IsDeleted",
    "ArtefactID"
  FROM
    public."DefaultOrganisationArtefact"
  where
    "DefaultOrganisationID" = defaultorganisationid and
    "IsActive" = true and
    "IsDeleted" = false;

  -- Artefact Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."ArtefactRoleID"
  FROM
    public."ArtefactRole" ncr
    inner join "DefaultOrganisationArtefact" donc on donc."ArtefactID" = ncr."ArtefactID" and donc."ArtefactVersionNumber" = ncr."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."ArtefactRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ArtefactClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationArtefact" donc on donc."ArtefactID" = ncc."ArtefactID" and donc."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ArtefactRoleID" is null;

  -- ARTEFACT CLAIMS THAT ARE DIRECT FROM ARTEFACT ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ArtefactRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ArtefactRoleID" is null;

  -------------------------- MODULE

  -- Module Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."RoleID"
  FROM
    public."ModuleRole" ncr
    inner join "DefaultOrganisationModule" donc on donc."ModuleID" = ncr."ModuleID" and donc."ModuleVersionNumber" = ncr."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."RoleID" not in (
                          select
                            orn."ParentID"
                          from
                            "OrganisationRole" orn
                          where
                            orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA MODULE CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ModuleClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationModule" donc on donc."ModuleID" = ncc."ModuleID" and donc."ModuleVersionNumber" = ncc."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ModuleRoleID" is null;

  -- Module CLAIMS THAT ARE DIRECT FROM Module ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ModuleClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ModuleRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA MODULE CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ModuleClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ModuleRoleID" is null;

  ----------------------------------- WORKFLOW

  INSERT INTO
    public."OrganisationWorkflow"("OrganisationID", "WorkflowID", "VersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "WorkflowID",
    "WorkflowVersionNumber",
    "IsActive",
    "IsDeleted",
    dow . "DefaultOrganisationID"
  FROM
    public."DefaultOrganisationWorkflow" dow
  where
    dow . "DefaultOrganisationID" = defaultorganisationid and
    dow . "IsActive" = true and
    dow . "IsDeleted" = FALSE and
    not exists (
                 select
                   dow1."OrganisationWorkflowID"
                 from
                   "OrganisationWorkflow" dow1
                 where
                   dow1."OrganisationID" = OrganisationID and
                   dow1."IsActive" = true and
                   dow1."IsDeleted" = false and
                   dow1."WorkflowID" = dow . "WorkflowID" and
                   dow1."VersionNumber" = dow . "WorkflowVersionNumber" and
                   dow1."ParentID" = dow . "DefaultOrganisationID"
    );

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."WorkflowRoleID"
  FROM
    public."WorkflowRole" ncr
    inner join "DefaultOrganisationWorkflow" donc on donc."WorkflowID" = ncr."WorkflowID" and donc."WorkflowVersionNumber" = ncr."WorkflowVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."WorkflowRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "DefaultOrganisationWorkflow" donc on donc."WorkflowID" = ncc."WorkflowID" and donc."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  ------------------------ MODULE WORKFLOW ROLECLAIMS

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

/*  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;*/

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );*/

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;*/

  --------------------------------    MODULE NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ModuleNotificationConstruct" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ModuleNotificationConstructID" and wr."NotificationConstructVersionNumber" = mw."NotificationConstructVersionNumber"
      and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

/*  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;*/

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );
*/
  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/

  ---------------------------------------------- ARTEFACT WORKFLOW AND NC ---------------
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  --------------------------------    Artefact NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ArtefactNotificationConstruct" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ArtefactNotificationConstructID" and wr."NotificationConstructVersionNumber" =
      mw."NotificationConstructVersionNumber" and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;

  ------------------------------------ ORGANISATION WORKFLOW NC ROLE / CLAIMS ---------------------------

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );
*/
  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;
*/
  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );*/

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/
  -------------------------------------------------------
  ------------------------------------------------------- ARTEFACEWORKFLOW NC
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;
  -------------------------------------------------------
  ------------------------------------------------------- ORGANISATION WORKFLOW NC ROLE / CLAIMS
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."OrganisationWorkflow" mw
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    ) and
    mw."OrganisationID" = OrganisationID;

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;
  -------------------------------------------------------
  ------------------------------------------------------- MODULE ARTEFACT
/*
  INSERT INTO
    public."OrganisationArtefact"("OrganisationID", "ArtefactID", "ArtefactVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "ArtefactID",
    "ArtefactVersionNumber",
    ma."IsActive",
    ma."IsDeleted",
    "ArtefactID"
  FROM
    public."ModuleArtefact" ma
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    ma."IsActive" = true and
    ma."IsDeleted" = FALSE and
    not exists (
                 select
                   ma1."ArtefactID"
                 from
                   "OrganisationArtefact" ma1
                 where
                   ma1."OrganisationID" = OrganisationID and
                   ma1."ArtefactID" = ma."ArtefactID" and
                   ma1."ArtefactVersionNumber" = ma."ArtefactVersionNumber"
    );

  -- Artefact Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."ArtefactRoleID"
  FROM
    public."ArtefactRole" ncr
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncr."ArtefactID" and ma."ArtefactVersionNumber" = ncr."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."ArtefactRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ArtefactClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ArtefactRoleID" is null;

  -- ARTEFACT CLAIMS THAT ARE DIRECT FROM ARTEFACT ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ArtefactRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ArtefactRoleID" is null;

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;
*/
  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  --------------------------------    Artefact NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ArtefactNotificationConstruct" mw
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ArtefactNotificationConstructID" and wr."NotificationConstructVersionNumber" =
      mw."NotificationConstructVersionNumber" and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/

  ----------------------------------------------------------------------------
  -------------------------------------- ORG STATUS TYPE
  -- Org StatusType

  INSERT INTO
    public."OrganisationStatusType"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "StatusTypeID",
    "StatusTypeVersionNumber",
    "IsActive",
    "IsDeleted",
    "DefaultOrganisationID"
  FROM
    public."DefaultOrganisationStatusType"
  where
    "DefaultOrganisationID" = defaultorganisationid and
    "IsActive" = true and
    "IsDeleted" = false;

  -- StatusType Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."StatusTypeRole" ncr
    inner join "DefaultOrganisationStatusType" donc on donc."StatusTypeID" = ncr."StatusTypeID" and donc."StatusTypeVersionNumber" = ncr."StatusTypeVersionNumber" and donc."IsActive" = true and
      donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationStatusType" donc on donc."StatusTypeID" = ncc."StatusTypeID" and donc."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and donc."IsActive" = true and
      donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."StatusTypeRoleID" is null;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  -----------------------------------------------------------------
  ---------------- DO-WF
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    mw."RoleName",
    true,
    mw."RoleTypeID",
    true,
    false,
    mw."StatusTypeRoleID"
  FROM
    public."StatusTypeRole" mw
    inner join "ModuleStatusType" mst on mst."StatusTypeID" = mw."StatusTypeID" and mst."StatusTypeVersionNumber" = mw."StatusTypeVersionNumber" and mst."IsActive" = true and mst."IsDeleted" = false
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mst."ModuleID" and donc."ModuleVersionNumber" = mst."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    mw."StatusTypeRoleID" not in (
                                   select
                                     orn."ParentID"
                                   from
                                     "OrganisationRole" orn
                                   where
                                     orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."StatusTypeRoleID" is null
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;*/
  ----------------------------------------------------
  -------------------- DO - AR - STR
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."StatusTypeRoleID"
  FROM
    public."ArtefactStatusType" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "StatusTypeRole" wr on wr."StatusTypeID" = mw."StatusTypeID" and wr."StatusTypeVersionNumber" = mw."StatusTypeVersionNumber"
  where
    wr."StatusTypeRoleID" not in (
                                   select
                                     orn."ParentID"
                                   from
                                     "OrganisationRole" orn
                                   where
                                     orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."StatusTypeRoleID" is null
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;
  -----------------------------------------------------
  --------------------- DO - M - WF - STR
  -- Workflow Specific Roles

 /* insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;*/
  -----------------------------------------------------
  ---------------------------------- DO - AR -WF - STR

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  ----------------------------------------
  -------------------------- DO - WF - STR
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."OrganisationWorkflow" mw
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    ) and
    mw."OrganisationID" = OrganisationID;

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  -------------------------------
  ---------------------------------- INTERFACE PANEL
  -- IP Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."InterfacePanelRoleID"
  FROM
    public."InterfacePanelRole" ncr
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncr."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncr."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncr."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncr."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncr."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncr."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."InterfacePanelRoleID" not in (
                                        select
                                          orn."ParentID"
                                        from
                                          "OrganisationRole" orn
                                        where
                                          orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA IP CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "InterfacePanelClaim" ipc on ipc."RoleID" = r."RoleID" and ipc."IsActive" = true and ipc."IsDeleted" = false
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ipc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ipc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ipc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ipc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ipc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ipc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ipc."InterfacePanelRoleID" is null;

  -- Module CLAIMS THAT ARE DIRECT FROM IP ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."InterfacePanelClaim" ncc
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."InterfacePanelRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA MODULE CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."InterfacePanelClaim" ncc
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."InterfacePanelRoleID" is null;

  ------------------------ Branch

  -- create branches as needed

  INSERT INTO
    public."Organisation"("OrganisationID", "OrganisationTypeID", "IsBranch", "IsHeadOffice", "CreatedOn", "CreatedBy", "DefaultOrganisationID", "DefaultOrganisationVersionNumber",
      "ParentOrganisationID", "ParentID")
  SELECT
    uuid_generate_v1(),
    (
      select
        "OrganisationTypeID"
      from
        "OrganisationType"
      where
        "Name" = 'Branch'
      limit
        1
    ),
    true,
    false,
    CURRENT_DATE,
    'System',
    defaultorganisationid,
    organisationversionnumber,
    OrganisationID,
    wt."DefaultOrganisationBranchID"
  FROM
    public."DefaultOrganisationBranch" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;
  INSERT INTO
    public."OrganisationDetail"("OrganisationID", "Name", "Description")
  SELECT
    org."OrganisationID",
    dob."BranchName",
    'Branch'
  FROM
    public."Organisation" org
    left outer join "DefaultOrganisationBranch" dob on dob."DefaultOrganisationBranchID" = org."ParentID"
  where
    org."ParentOrganisationID" = OrganisationID;

  -- User Type

  INSERT INTO
    public."OrganisationUserType"("OrganisationID", "UserTypeID", "IsActive", "IsDeleted", "IsForDefaultUser")
  SELECT
    OrganisationID,
    wt."UserTypeID",
    wt."IsActive",
    wt."IsDeleted",
    wt."IsForDefaultUser"
  FROM
    public."DefaultOrganisationUserType" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;

  -- Organisation Default Status

  INSERT INTO
    public."OrganisationStatus"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StatusChangedOn", "StatusChangedBy", "ParentID")
  SELECT
    OrganisationID,
    wt."StatusTypeID",
    wt."StatusTypeVersionNumber",
    st."StatusTypeValueID",
    CURRENT_DATE,
    'System',
    null
  FROM
    public."DefaultOrganisationTarget" wt
    left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."StatusTypeName" = 'Organisation Status' and
      st."IsStart" = true
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber and
    st."StatusTypeValueID" is not null;

  -- Organisation Branch Default Status, same as parent
  FOR LoopRow IN
  SELECT
    *
  FROM
    "Organisation"
  where
    "ParentOrganisationID" = OrganisationID
  LOOP
    INSERT INTO
      public."OrganisationStatus"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StatusChangedOn", "StatusChangedBy", "ParentID")
    SELECT
      loopRow."OrganisationID",
      wt."StatusTypeID",
      wt."StatusTypeVersionNumber",
      st."StatusTypeValueID",
      CURRENT_DATE,
      'System',
      null
    FROM
      public."DefaultOrganisationTarget" wt
      left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."StatusTypeName" = 'Branch Status' and
        st."IsStart" = true
    where
      wt."DefaultOrganisationID" = defaultorganisationid and
      wt."DefaultOrganisationVersionNumber" = organisationversionnumber and
      st."StatusTypeValueID" is not null;

  END LOOP;

  RETURN OrganisationId;
end;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_GetLastDayOfMonth (OID = 16546) :
--
CREATE FUNCTION public."fn_GetLastDayOfMonth" (
  date
)
RETURNS date
AS
$body$
        SELECT (date_trunc('MONTH', $1) + INTERVAL '1 MONTH - 1 day')::date;
        $body$
LANGUAGE sql
IMMUTABLE STRICT;
--
-- Definition for function fn_GetUserClaims (OID = 16547) :
--
CREATE FUNCTION public."fn_GetUserClaims" (
  userid uuid,
  organisationid uuid
)
RETURNS TABLE (
  "ClaimType" character varying,
  "ClaimName" character varying
)
AS
$body$
BEGIN

if(organisationid is null)
THEN
	-- get default but check if temp or not
    IF((select ua."IsTemporaryAccount" from "UserAccounts" ua where ua."ID" = userid limit 1) = TRUE)
    THEN
    	organisationid := (select org."OrganisationID" from "Organisation" org where org."OrganisationTypeID" = (select "OrganisationTypeID" from "OrganisationType" where "Name" = 'Temporary' limit 1));
    ELSE
    	organisationid := (select org."ParentID" from "UserAccountOrganisation" org where org."UserID" = userid limit 1);
    END IF;

END IF;


return query SELECT

  orc."ClaimName",
  orc."ClaimSubName"

FROM
  public."vOrgansiationClaim" orc
  inner join public."UserAccountOrganisation" uao on uao."ParentID" = orc."OrganisationID"
  inner join public."UserAccountOrganisationRole" uaor on uaor."OrganisationRoleID" = orc."OrganisationRoleID" and uaor."UserAccountOrganisationID" = uao."UserAccountOrganisationID"
  where orc."OrganisationID" = organisationid and uao."UserID" = userid
 union

 SELECT

  orc."ClaimName",
  orc."ClaimSubName"

FROM
  public."vOrgansiationClaim" orc
  inner join public."UserAccountOrganisation" uao on uao."ParentID" = orc."OrganisationID"
  inner join public."UserAccountOrganisationGroup" uaog on uaog."UserAccountOrganisationID" = uao."UserAccountOrganisationID"
  inner join "OrganisationGroupRole" ogr on ogr."OrganisationGroupID" = uaog."OrganisationGroupID"
  where orc."OrganisationID" = organisationid and uao."UserID" = userid;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_GetWeekOfMonth (OID = 16548) :
--
CREATE FUNCTION public."fn_GetWeekOfMonth" (
  p_date date,
  p_direction integer
)
RETURNS integer
AS
$body$
  SELECT CASE WHEN $2 >= 0 THEN
    CEIL(EXTRACT(DAY FROM $1) / 7)::int
  ELSE
    0 - CEIL(
      (EXTRACT(DAY FROM fn_GetLastDayOfMonth($1)) - EXTRACT(DAY FROM $1) + 1) / 7
    )::int
  END
$body$
LANGUAGE sql
IMMUTABLE;
--
-- Definition for function fn_GetWorkFlowTreeStructure (OID = 16549) :
--
CREATE FUNCTION public."fn_GetWorkFlowTreeStructure" (
)
RETURNS void
AS
$body$
DECLARE
  WorkflowID uuid;
  WorkflowVersionNumber integer;
BEGIN
  SELECT
Level1."Name" Level1, Level1."ItemOrder", Level1."WorkflowTreeStructureID",Level1."WorkflowActionID",
Level2."Name" level2, Level2."ItemOrder" , Level2."WorkflowTreeStructureID",Level2."WorkflowActionID",
Level3."Name" level3 , Level3."ItemOrder" , Level3."WorkflowTreeStructureID", Level3."WorkflowActionID",
Level4."Name" level4 , Level4."ItemOrder", Level4."WorkflowTreeStructureID",  Level4."WorkflowActionID"
FROM  "WorkflowTreeStructure"  Level4
  LEFT JOIN "WorkflowTreeStructure"  Level3 ON Level4."ParentID" =  Level3."WorkflowTreeStructureID"
  and Level3."WorkflowID" =   WorkflowID and Level3."WorkflowVersionNumber" = WorkflowVersionNumber
  LEFT JOIN "WorkflowTreeStructure"  Level2 ON Level3."ParentID" =  Level2."WorkflowTreeStructureID"
  and Level2."WorkflowID" =   WorkflowID and Level2."WorkflowVersionNumber" = WorkflowVersionNumber
  LEFT JOIN "WorkflowTreeStructure"  Level1 ON  Level1."WorkflowTreeStructureID" = Level2."ParentID"
  and Level1."WorkflowID" =   WorkflowID and Level1."WorkflowVersionNumber" = WorkflowVersionNumber
where Level4."WorkflowID" =   WorkflowID  and Level4."WorkflowVersionNumber" = WorkflowVersionNumber
Order by Level1."ItemOrder", Level2."ItemOrder", Level3."ItemOrder" , Level4."ItemOrder" ;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_ProcessBillingAndPeriodForPlanSubscription (OID = 16550) :
--
CREATE FUNCTION public."fn_ProcessBillingAndPeriodForPlanSubscription" (
  plansubscriptionid uuid,
  plansubscriptionversionnumber integer,
  globalaccountingperiodidthatisclosing integer
)
RETURNS void
AS
$body$
DECLARE
  NumberOfBillingPeriods integer;
  BillingID uuid;
  PlanHasTrial boolean;
  AccountingPeriodStartDate date;
  AccountingPeriodEndDate date;
  GlobalPaymentMethodID uuid;
  OrganisationID uuid;
  BillingPeriodStartDate date;
  BillingPeriodEndDate date;
  PlanSubscriptionBillingPeriodID uuid;
  NextAccountingPeriod integer;
BEGIN

NextAccountingPeriod := (select "GlobalAccountingPeriodID" from "GlobalAccountingPeriod" gap where gap."GlobalAccountingPeriodID" = ( globalaccountingperiodidthatisclosing + 1) limit 1);

-- get current accounting period range
select to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
      to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text)

into AccountingPeriodStartDate,AccountingPeriodEndDate

from "GlobalAccountingPeriod" gap where gap."GlobalAccountingPeriodID" =  globalaccountingperiodidthatisclosing;

NumberOfBillingPeriods := (select (count(*)+1) from "PlanSubscriptionBillingProcessLog" pl where pl."PlanSubscriptionID" = plansubscriptionid and pl."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
	and pl."StatusTypeValueID" = (select "StatusTypeValueID" from "vStatusType" where "StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and "Name" = 'Paid' ) limit 1);

GlobalPaymentMethodID := (select pp."GlobalPaymentMethodID" from "PlanSubscriptionPaymentPlan" pp where pp."PlanSubscriptionID" = plansubscriptionid and pp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber limit 1);

OrganisationID := (select pp."OrganisationID" from "PlanSubscription" pp where pp."PlanSubscriptionID" = plansubscriptionid and pp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber limit 1);

-- set billing period dates
select
-- create billing period start date from existing period start date and add 1 if month
	(case when b."BillingPeriodUnitID" = 800501 then
		(AccountingPeriodStartDate + interval '1 month' * 1) else (AccountingPeriodStartDate + interval '1 month' * b."BillingPeriod") END),
    (case when b."BillingPeriodUnitID" = 800501 then
		(AccountingPeriodEndDate + interval '1 month' * 1) else (AccountingPeriodEndDate + interval '1 month' * b."BillingPeriod") END)

into

 BillingPeriodStartDate, BillingPeriodEndDate

 from

"OrganisationPaymentMethod" opm

left join "PlanSubscriptionPeriod" psp on psp."PlanSubscriptionID" = plansubscriptionid and psp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and psp."StartDate" >=  AccountingPeriodStartDate and psp."EndDate" = AccountingPeriodEndDate and psp."IsClosed" = false and psp."IsActive" = true

left outer join "PlanSubscription" ps on ps."PlanSubscriptionID" = plansubscriptionid and ps."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber

left join "Billing" b on b."BillingID" = (select p."BillingID" from "PlanBilling" p where p."PlanID" = ps."PlanID" and p."PlanVersionNumber" = ps."PlanVersionNumber" limit 1)

where opm."GlobalPaymentMethodID" = GlobalPaymentMethodID and opm."OrganisationID" = OrganisationID;

PlanSubscriptionBillingPeriodID := (select uuid_generate_v1());

-- create billing process log entry
INSERT INTO
  public."PlanSubscriptionBillingProcessLog"
(
  "PlanSubscriptionBillingPeriodID",
  "BillingPeriodNumber",
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"

)
VALUES(
  PlanSubscriptionBillingPeriodID,
  NumberOfBillingPeriods,
  plansubscriptionid,
  plansubscriptionversionnumber,
  CURRENT_DATE,
  BillingPeriodStartDate,
  BillingPeriodEndDate,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1)
);


-- mark the current subscription period as closed for current account period add new billing period
UPDATE
  public."PlanSubscriptionPeriod"
SET
  "IsClosed" = true,
  "ClosedOn" = CURRENT_DATE,
  "PlanSubscriptionBillingPeriodID" = PlanSubscriptionBillingPeriodID

WHERE
  "PlanSubscriptionID" = plansubscriptionid and "PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and "StartDate" >=  AccountingPeriodStartDate and "EndDate" = AccountingPeriodEndDate
;

-- create next period
INSERT INTO
  public."PlanSubscriptionPeriod"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "IsCancellationPeriod",
  "PeriodNumber",
  "IsTrialPeriod",
  "TrialPeriodNumber",
  "IsClosed"
)
SELECT
	plansubscriptionid,
    plansubscriptionversionnumber,
    CURRENT_DATE,

    -- start date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    -- end date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    false,
    (select count(*) from "PlanSubscriptionPeriod" psp where psp."PlanSubscriptionID" = ps."PlanSubscriptionID" and psp."PlanSubscriptionVersionNumber" = ps."PlanSubscriptionVersionNumber"),
    (CASE WHEN ps."TrialEndDate" > BillingPeriodStartDate then true else false END),
    (CASE WHEN ps."TrialEndDate" > BillingPeriodStartDate THEN ps."TrialPeriodNumber" + 1 else null END),
    false
FROM
   public."PlanSubscriptionPeriod" ps

   left outer join "PlanSubscription" ps2 on ps2."PlanSubscriptionID" = plansubscriptionid and ps2."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber

   left outer join "Plan" p on p."PlanID" = ps2."PlanID" and p."PlanVersionNumber" = ps2."PlanVersionNumber"

   left outer join "ClassificationType" period on period."ClassificationTypeID" = p."PeriodUnitID" and period."ClassificationTypeCategoryID" = 8006
   left outer join "ClassificationType" tperiod on tperiod."ClassificationTypeID" = p."TrialPeriodUnitID" and tperiod."ClassificationTypeCategoryID" = 8006

   left outer join "GlobalAccountingPeriod" gap on gap."GlobalAccountingPeriodID" = NextAccountingPeriod

  where ps."PlanSubscriptionID" = plansubscriptionid and ps."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and ps."CreatedOn" = (select max(psp1."CreatedOn") from "PlanSubscriptionPeriod" psp1  where psp1."PlanSubscriptionID" = plansubscriptionid and psp1."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber);





END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_PromoteArtefactTemplate (OID = 16552) :
--
CREATE FUNCTION public."fn_PromoteArtefactTemplate" (
  artefacttemplateid uuid,
  artefacttemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  ArtefactID UUID;
  ArtefactVersionNumber integer;
  LoopRow RECORD;
BEGIN

ArtefactID := (select dorg."ArtefactID" from "Artefact" dorg
	where dorg."ArtefactTemplateID" = artefacttemplateid limit 1);

ArtefactVersionNumber := (select dorg."ArtefactVersionNumber" from "Artefact" dorg
	where dorg."ArtefactTemplateID" = artefacttemplateid order by dorg."ArtefactVersionNumber" desc limit 1);

-- create DO entry
BEGIN

IF(ArtefactID is null)
THEN
BEGIN
	ArtefactID := uuid_generate_v1();
END;
END IF;

ArtefactVersionNumber := artefacttemplateversionnumber;


INSERT INTO
  public."Artefact"
(
  "ArtefactID",
  "ArtefactVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "ArtefactTemplateID",
  "ArtefactTemplateVersionNumber"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  artefacttemplateid,
  artefacttemplateversionnumber
FROM
  public."ArtefactTemplate" wt where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber;


-- WF ROLE
INSERT INTO
  public."ArtefactRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ArtefactID",
  "ArtefactVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ArtefactID,
  ArtefactVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ArtefactRoleTemplate" wt where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber ;


-- WF CLAIM
  INSERT INTO
  public."ArtefactClaim"
(
"ArtefactID",
  "ArtefactVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "NotificationRoleConstructID"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
 mr."ArtefactRoleID"
FROM
  public."ArtefactClaimTemplate" wt

  inner join "ArtefactRoleTemplate" wrr on wrr."ArtefactRoleID" = wt."ArtefactRoleID" and wrr."ArtefactID" = ArtefactID and wrr."ArtefactVersionNumber" = ArtefactVersionNumber

  left outer join "ArtefactRole" mr on mr."ArtefactID" = ArtefactID and mr."ArtefactVersionNumber" = ArtefactVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber

  	and wrr."ArtefactRoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ArtefactClaim"
(
"ArtefactID",
  "ArtefactVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ArtefactID,
  ArtefactVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ArtefactClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber

  	and wt."ArtefactRoleID" is null and wt."RoleID" is not null;

INSERT INTO
  public."ArtefactDependency"
(
  "ArtefactID",
  "ArtefactVersionNumber",
  "DependencyID",
  "DependencyVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  md."ArtefactID",
  md."ArtefactVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ArtefactDependencyTemplate" wt

  left outer join "ArtefactTemplate" mt on mt."ArtefactTemplateID" = wt."DependencyTemplateID" and mt."ArtefactTemplateVersionNumber" = wt."DependencyTemplateVersionNumber"

  left outer join "Artefact" md on md."ArtefactID" = ArtefactID and md."ArtefactVersionNumber" = ArtefactVersionNumber and md."Name" = mt."Name" and md."IsActive" = true and md."IsDeleted" = false

  where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber ;

-- ST Promotion
FOR LoopRow IN
	select * from "ArtefactStatusTypeTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."StatusTypeTemplateID" not in (select "StatusTypeTemplateID" from "StatusType" w where w."StatusTypeTemplateID"= aw."StatusTypeTemplateID" and w."StatusTypeTemplateVersionNumber" = aw."StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."ArtefactTemplateID", aw."ArtefactTemplateVersionNumber");
    END;
END LOOP;

-- NC Promotion
FOR LoopRow IN
	select * from "ArtefactNotificationConstructTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."NotificationConstructTemplateID" not in (select "NotificationConstructTemplateID" from "NotificationConstruct" w where w."NotificationConstructTemplateID"= aw."NotificationConstructTemplateID" and w."NotificationConstructTemplateVersionNumber" = aw."NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- WF Promotion
FOR LoopRow IN
	select * from "ArtefactWorkflowTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."WorkflowTemplateID" not in (select "WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID"= aw."WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = aw."WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;



END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteDefaultOrganisationTemplate (OID = 16553) :
--
CREATE FUNCTION public."fn_PromoteDefaultOrganisationTemplate" (
  defaultorganisationtemplateid uuid,
  defaultorganisationtemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  DefaultOrganisationID UUID;
  DefaultOrganisationVersionNumber integer;
  LoopRow RECORD;
  LoopUUID UUID;
BEGIN

DefaultOrganisationID := (select dorg."DefaultOrganisationID" from "DefaultOrganisation" dorg
	where dorg."DefaultOrganisationTemplateID" =  defaultorganisationtemplateid limit 1);

DefaultOrganisationVersionNumber := (select dorg."DefaultOrganisationVersionNumber" from "DefaultOrganisation" dorg
	where dorg."DefaultOrganisationTemplateID" = defaultorganisationtemplateid order by dorg."DefaultOrganisationVersionNumber" desc limit 1);

if(DefaultOrganisationID is null or (DefaultOrganisationID is not null and defaultorganisationtemplateversionnumber is null))
THEN
BEGIN

-- populate variables
IF(DefaultOrganisationID is null)
THEN
BEGIN
	DefaultOrganisationID := uuid_generate_v1();
END;
END IF;


	DefaultOrganisationVersionNumber := defaultorganisationtemplateversionnumber;


-- insert DO
INSERT INTO
  public."DefaultOrganisation"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationTemplateID",
  "DefaultOrganisationTemplateVersionNumber",
  "OrganisationTypeID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  defaultorganisationtemplateid,
  defaultorganisationtemplateversionnumber,
  wt."OrganisationTypeID"
FROM
  public."DefaultOrganisationTemplate" wt where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- DOT ART
-- Check ART version exists
FOR LoopRow IN
	select * from "DefaultOrganisationArtefactTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        	and "ArtefactTemplateID" not in (select ar."ArtefactTemplateID" from "Artefact" ar where ar."ArtefactTemplateID" = "ArtefactTemplateID" and ar."ArtefactTemplateVersionNumber" = "ArtefactTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteArtefactTemplate"(LoopRow."ArtefactTemplateID",LoopRow."ArtefactTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT ARTS to DO
INSERT INTO
  public."DefaultOrganisationArtefact"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "ArtefactID",
  "ArtefactVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  ar."ArtefactID",
  ar."ArtefactVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationArtefactTemplate"  wt

  left outer join "Artefact" ar on ar."ArtefactTemplateID" = wt."ArtefactTemplateID" and ar."ArtefactTemplateVersionNumber" = wt."ArtefactTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

---------------- END DOT ART
-- DOT MT
-- Check MT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationModuleTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "ModuleTemplateID" not in (select mt."ModuleTemplateID" from "Module" mt where mt."ModuleTemplateID" = "ModuleTemplateID" and mt."ModuleTemplateVersionNumber" = "ModuleTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteModuleTemplate"(LoopRow."ModuleTemplateID",LoopRow."ModuleTemplateVersionNumber");
	END;
END LOOP;

-- Add DOT MT to DO
INSERT INTO
  public."DefaultOrganisationModule"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "ModuleID",
  "ModuleVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  m."ModuleID",
  m."ModuleVersionNumber",
  null,
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationModuleTemplate"  wt

  left outer join "Module" m on m."ModuleTemplateID" = wt."ModuleTemplateID" and m."ModuleTemplateVersionNumber" = wt."ModuleTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT MT
---------------- END DOT ART
-- DOT STT
-- Check STT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationStatusTypeTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "StatusTypeTemplateID" not in (select st."StatusTypeTemplateID" from "StatusType" st where st."StatusTypeTemplateID" = "StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = "StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."StatusTypeTemplateID",LoopRow."StatusTypeTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT STT to DO
INSERT INTO
  public."DefaultOrganisationStatusType"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "DefaultStatusTypeValueID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted",
  stv."StatusTypeValueID"
FROM
  public."DefaultOrganisationStatusTypeTemplate" wt

  left outer join "StatusType" st on st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  left outer join "StatusTypeValueTemplate" stvt on stvt."StatusTypeValueTemplateID" = wt."DefaultStatusTypeValueTemplateID"

  left outer join "StatusTypeValue" stv on stv."StatusTypeID" = st."StatusTypeID" and stv."StatusTypeVersionNumber" = st."StatusTypeVersionNumber"
  	and stv."Name" = stvt."Name"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

------ End DOT STT

-- DOT NCT
-- Check NCT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationNotificationConstructTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "NotificationConstructTemplateID" not in (select nc."NotificationConstructTemplateID" from "NotificationConstruct" nc where nc."NotificationConstructTemplateID" = "NotificationConstructTemplateID"
        	and nc."NotificationConstructTemplateVersionNumber" = "NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT NCT to DO
INSERT INTO
  public."DefaultOrganisationNotificationConstruct"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."NotificationConstructID",
  st."NotificationConstructVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationNotificationConstructTemplate" wt

  left outer join "NotificationConstruct" st on st."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and st."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT NCT

-- DOT WT
-- Check WT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationWorkflowTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "WorkflowTemplateID" not in (select w."WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID" = "WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = "WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT WT to DO
INSERT INTO
  public."DefaultOrganisationWorkflow"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "WorkflowID",
  "WorkflowVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."WorkflowID",
  st."WorkflowVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
FROM
  public."DefaultOrganisationWorkflowTemplate"  wt

  left outer join "Workflow" st on st."WorkflowTemplateID" = wt."WorkflowTemplateID" and st."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT WT

END;
END IF;
------ End MT

-- Branch
INSERT INTO
  public."DefaultOrganisationBranch"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "OrganisationTypeID",
  "BranchName",
  "BranchSubType"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."OrganisationTypeID",
  wt."BranchName",
  wt."BranchSubType"
FROM
  public."DefaultOrganisationBranchTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- INSERT BUCKETS
INSERT INTO
  public."Bucket"
(
  "BucketName",
  "BucketDescription",
  "BucketTypeID",
  "BucketSubTypeID",
  "BucketCategoryID",
  "BucketSubCategoryID",
  "IsGlobal",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."BucketName",
  wt."BucketDescription",
  wt."BucketTypeID",
  wt."BucketSubTypeID",
  wt."BucketCategoryID",
  wt."BucketSubCategoryID",
  wt."IsGlobal",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."BucketTemplate" wt

  inner join "DefaultOrganisationBucketTemplate" dt on dt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and dt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber
  	and dt."BucketTemplateID" = wt."BucketTemplateID"

  where wt."BucketName" not in (select "BucketName" from "Bucket");

-- Bucket
INSERT INTO
  public."DefaultOrganisationBucket"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "BucketTemplateID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  b."BucketID"
FROM
  public."DefaultOrganisationBucketTemplate" wt

  left outer join "BucketTemplate" bt on bt."BucketTemplateID" = wt."BucketTemplateID"
  left outer join "Bucket" b on b."BucketName" = bt."BucketName"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ROLE
INSERT INTO
  public."DefaultOrganisationRole"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "ParentID",
  "RoleID",
  "IsActive",
  "IsDeleted",
  "IsDefaultOrganisationSpecific"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."DefaultOrganisationRoleTemplateID",
  wt."RoleID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultOrganisationSpecific"
FROM
  public."DefaultOrganisationRoleTemplate"  wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ROLE CLAIM
INSERT INTO
  public."DefaultOrganisationRoleClaim"
(
  "DefaultOrganisationRoleID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted"
)
SELECT
  dor."DefaultOrganisationRoleID",
  dd."ResourceID",
  dd."OperationID",
  dd."StateID",
  dd."StateItemID",
  dd."IsActive",
  dd."IsDeleted"
FROM
  public."DefaultOrganisationRoleClaimTemplate" dd

  left outer join "DefaultOrganisationRoleTemplate" dort on dort."DefaultOrganisationRoleTemplateID" = dd."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationRole" dor on dor."RoleName" = dort."RoleName" and dor."DefaultOrganisationID" = DefaultOrganisationID and dor."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber

  where dort."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and dort."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;


-- GROUP
INSERT INTO
  public."DefaultOrganisationGroup"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "GroupName",
  "GroupDescription",
  "GroupTypeID",
  "GroupSubTypeID",
  "GroupCategoryID",
  "GroupSubCategoryID",
  "ParentID",
  "GroupID",
  "IsActive",
  "IsDeleted",
  "IsDefaultOrganisationSpecific"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."GroupName",
  wt."GroupDescription",
  wt."GroupTypeID",
  wt."GroupSubTypeID",
  wt."GroupCategoryID",
  wt."GroupSubCategoryID",
  wt."DefaultOrganisationGroupTemplateID",
  wt."GroupID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultOrganisationSpecific"
FROM
  public."DefaultOrganisationGroupTemplate"   wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- GROUPROLE
INSERT INTO
  public."DefaultOrganisationGroupRole"
(
  "DefaultOrganisationGroupID",
  "DefaultOrganisationRoleID"
)
SELECT
  dor1."DefaultOrganisationGroupID",
  dor."DefaultOrganisationRoleID"
FROM
  public."DefaultOrganisationGroupRoleTemplate" ddtt

  left outer join "DefaultOrganisationRoleTemplate" dort on dort."DefaultOrganisationRoleTemplateID" = ddtt."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationRole" dor on dor."RoleName" = dort."RoleName" and dor."ParentID" = dort."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationGroupTemplate" dort1 on dort1."DefaultOrganisationGroupTemplateID" = ddtt."DefaultOrganisationGroupTemplateID"

  left outer join "DefaultOrganisationGroup" dor1 on dor1."GroupName" = dort1."GroupName" and dor1."ParentID" = dort1."DefaultOrganisationGroupTemplateID"

  where dor1."DefaultOrganisationGroupID" is not null and dor."DefaultOrganisationRoleID" is not null;

-- TARGETS

INSERT INTO
  public."DefaultOrganisationUserTarget"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "UserSubTypeID",
  "UserCategoryID",
  "UserSubCategoryID",
  "IsActive",
  "IsDeleted",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "UserTypeID",
  "ParentID",
  "IsDefault"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."UserSubTypeID",
  wt."UserCategoryID",
  wt."UserSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  wt."UserTypeID",
  wt."DefaultOrganisationUserTargetTemplateID",
  wt."IsDefault"
FROM
  public."DefaultOrganisationUserTargetTemplate"  wt

  left outer join "StatusType" st on st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

INSERT INTO
  public."DefaultOrganisationUserType"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "UserTypeID",
  "IsActive",
  "IsDeleted",
  "IsForDefaultUser"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."UserTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsForDefaultUser"
FROM
  public."DefaultOrganisationUserTypeTemplate"  wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

INSERT INTO
  public."DefaultOrganisationRoleTarget"
(
  "DefaultOrganisationRoleID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationUserTargetID"
)
SELECT
  COALESCE(rg."DefaultOrganisationRoleID" ,rg1."DefaultOrganisationRoleID"),
  wt."IsActive",
  wt."IsDeleted",
  dut."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationRoleTargetTemplate" wt
  left outer join "DefaultOrganisationUserTargetTemplate" ut on ut."DefaultOrganisationUserTargetTemplateID" = wt."DefaultOrganisationUserTargetTemplateID"
  left outer join "DefaultOrganisationRoleTemplate" dor on dor."DefaultOrganisationRoleTemplateID" = wt."DefaultOrganisationRoleTemplateID"
  left outer join "DefaultOrganisationRole" rg on rg."RoleName" = dor."RoleName" and rg."DefaultOrganisationID" = DefaultOrganisationID and rg."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
  left outer join "DefaultOrganisationRole" rg1 on rg1."RoleID" = dor."RoleID" and rg1."DefaultOrganisationID" = DefaultOrganisationID and rg1."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
   left outer join "DefaultOrganisationUserTarget" dut on dut."ParentID" = ut."DefaultOrganisationUserTargetTemplateID"
  where ut."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and ut."DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
  	and ut."DefaultOrganisationUserTargetTemplateID" is not null and COALESCE(rg."DefaultOrganisationRoleID" ,rg1."DefaultOrganisationRoleID") is not null
  ;

INSERT INTO
  public."DefaultOrganisationGroupTarget"
(
  "DefaultOrganisationGroupID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationUserTargetID"
)
SELECT
  dor."DefaultOrganisationGroupID",
  wt."IsActive",
  wt."IsDeleted",
  dut."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationGroupTargetTemplate" wt
  left outer join "DefaultOrganisationUserTargetTemplate" ut on ut."DefaultOrganisationUserTargetTemplateID" = wt."DefaultOrganisationUserTargetTemplateID"
  left outer join "DefaultOrganisationGroupTemplate" dorr on dorr."DefaultOrganisationGroupTemplateID" = wt."DefaultOrganisationGroupTemplateID"
  left outer join "DefaultOrganisationGroup" dor on dor."GroupName" = dorr."GroupName" and dor."DefaultOrganisationID" = DefaultOrganisationID and dor."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
 left outer join "DefaultOrganisationUserTarget" dut on dut."ParentID" = ut."DefaultOrganisationUserTargetTemplateID"
  where ut."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and ut."DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
  	and ut."DefaultOrganisationUserTargetTemplateID" is not null and dor."DefaultOrganisationGroupID" is not null
;

-- DO ORganisationtarget
INSERT INTO
  public."DefaultOrganisationTarget"
(
  "OrganisationTypeID",
  "DefaultOrganisationID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
SELECT
  "OrganisationTypeID",
  DefaultOrganisationID,
  wt."IsActive",
  wt."IsDeleted",
  DefaultOrganisationVersionNumber,
  stt."StatusTypeID",
  stt."StatusTypeVersionNumber"
FROM
  public."DefaultOrganisationTargetTemplate" wt

  left outer join "StatusType" stt on stt."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and stt."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ledger accounts
INSERT INTO
  public."DefaultOrganisationLedger"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "LedgerAccountTypeID",
  "LedgerAccountName",
  "HandlesCredit",
  "HandlesDebit",
  "IsActive",
  "IsDeleted",
  "ParentID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."LedgerAccountTypeID",
  wt."LedgerAccountName",
  wt."HandlesCredit",
  wt."HandlesDebit",
  wt."IsActive",
  wt."IsDeleted",
  wt."DefaultOrganisationLedgerTemplateID"
FROM
  public."DefaultOrganisationLedgerTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber
  and not exists(select * from "DefaultOrganisationLedger" dol where dol."ParentID" = wt."DefaultOrganisationLedgerTemplateID" limit 1);

-- payment method
INSERT INTO
  public."DefaultOrganisationPaymentMethod"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "GlobalPaymentMethodID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."GlobalPaymentMethodID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationPaymentMethodTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber

  ;


--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_PromoteInterfacePanelTemplate (OID = 16555) :
--
CREATE FUNCTION public."fn_PromoteInterfacePanelTemplate" (
  interfacepaneltemplateid uuid,
  interfacepaneltemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  InterfacePanelID UUID;
  InterfacePanelVersionNumber integer;
BEGIN

InterfacePanelID := (select dorg."InterfacePanelID" from "InterfacePanel" dorg
	where dorg."InterfacePanelTemplateID" = interfacepaneltemplateid limit 1);

InterfacePanelVersionNumber := (select dorg."InterfacePanelVersionNumber" from "InterfacePanel" dorg
	where dorg."InterfacePanelTemplateID" = interfacepaneltemplateid order by dorg."InterfacePanelVersionNumber" desc limit 1);

-- create DO entry
BEGIN


-- copy WF
IF(InterfacePanelID is null)
THEN
BEGIN
	InterfacePanelID := (select "InterfacePanelTemplateID" from "InterfacePanelTemplate" where "InterfacePanelTemplateID" = interfacepaneltemplateid limit 1);
END;
END IF;


InterfacePanelVersionNumber := interfacepaneltemplateversionnumber;


END;

INSERT INTO
  public."InterfacePanel"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Name",
  "Description",
  "InterfacePanelTypeID",
  "InterfacePanelSubTypeID",
  "InterfacePanelCategoryID",
  "InterfacePanelSubCategoryID",
  "IsActive",
  "IsDeleted",
  "ParentIPID",
  "ParentIPVersionNumber",
  "IsSecuredByClaim",
  "IsGridPanel",
  "IsGlobal",
  "InterfacePanelTemplateID",
  "InterfacePanelTemplateVersionNumber",
  "InterfacePanelLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."Name",
  wt."Description",
  wt."InterfacePanelTypeID",
  wt."InterfacePanelSubTypeID",
  wt."InterfacePanelCategoryID",
  wt."InterfacePanelSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  wt."ParentIPTemplateID",
  wt."ParentIPTemplateVersionNumber",
  wt."IsSecuredByClaim",
  wt."IsGridPanel",
  wt."IsGlobal",
  interfacepaneltemplateid,
  interfacepaneltemplateversionnumber,
  "InterfacePanelTemplateLabel"
FROM
  public."InterfacePanelTemplate"  wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
  --and wt."ParentIPTemplateID" is null

  ;

 /* INSERT INTO
  public."InterfacePanel"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Name",
  "Description",
  "InterfacePanelTypeID",
  "InterfacePanelSubTypeID",
  "InterfacePanelCategoryID",
  "InterfacePanelSubCategoryID",
  "IsActive",
  "IsDeleted",
  "ParentIPID",
  "ParentIPVersionNumber",
  "IsSecuredByClaim",
  "IsGridPanel",
  "IsGlobal",
  "InterfacePanelTemplateID",
  "InterfacePanelTemplateVersionNumber"
)
SELECT
  wt."InterfacePanelTemplateID",
  wt."InterfacePanelTemplateVersionNumber",
  wt."Name",
  wt."Description",
  wt."InterfacePanelTypeID",
  wt."InterfacePanelSubTypeID",
  wt."InterfacePanelCategoryID",
  wt."InterfacePanelSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."IsSecuredByClaim",
  wt."IsGridPanel",
  wt."IsGlobal",
  wt."InterfacePanelTemplateID",
  wt."InterfacePanelTemplateVersionNumber"
FROM
  public."InterfacePanelTemplate"  wt

  left outer join "InterfacePanel" ip on ip."Name" = wt."Name" and ip."InterfacePanelTemplateID" =  wt."InterfacePanelTemplateID"
  	and ip."InterfacePanelTemplateVersionNumber" = wt."ParentIPTemplateVersionNumber"

  where wt."ParentIPTemplateID" = interfacepaneltemplateid and wt."ParentIPTemplateVersionNumber" = interfacepaneltemplateversionnumber
  and wt."ParentIPTemplateID" is not null;*/


INSERT INTO
  public."InterfacePanelRole"
(
  "InterfacePanelRoleID",
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."InterfacePanelRoleTemplateID",
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."InterfacePanelRoleTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;


  INSERT INTO
  public."InterfacePanelClaim"
(
"InterfacePanelID",
  "InterfacePanelVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "InterfacePanelRoleID"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."InterfacePanelRoleID"
FROM
  public."InterfacePanelClaimTemplate" wt

  inner join "InterfacePanelRoleTemplate" wrr on wrr."InterfacePanelRoleTemplateID" = wt."InterfacePanelRoleTemplateID" and wrr."InterfacePanelTemplateID" = interfacepaneltemplateid and wrr."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  left outer join "InterfacePanelRole" mr on mr."InterfacePanelID" = InterfacePanelID and mr."InterfacePanelVersionNumber" = InterfacePanelVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  	and wrr."InterfacePanelRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."InterfacePanelClaim"
(
"InterfacePanelID",
  "InterfacePanelVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID",
  "ClaimID",
  "InterfacePanelRoleID"
)
SELECT
InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID",
  wt."ClaimID",
  wt."InterfacePanelRoleTemplateID"
FROM
  public."InterfacePanelClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  	and wt."InterfacePanelRoleTemplateID" is null and wt."RoleID" is not null;
INSERT INTO
  public."InterfacePanelOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "OrganisationTypeID",
  "IsActive",
  "IsDeleted",
  "IsVisible",
  "ParentID",
  "InterfacePanelOrganisationTypeLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."OrganisationTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsVisible",
  wt."ParentID",
  wt."InterfacePanelOrganisationTypeTemplateLabel"
FROM
  public."InterfacePanelOrganisationTypeTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

INSERT INTO
  public."InterfacePanelOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "OrganisationTypeID",
  "UserTypeID",
  "IsActive",
  "IsDeleted",
  "IsVisible",
  "ParentID",
  "InterfacePanelOrganisationTypeUserTypeLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsVisible",
  wt."ParentID",
  wt."InterfacePanelOrganisationTypeUserTypeTemplateLabel"
FROM
  public."InterfacePanelOrganisationTypeUserTypeTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

INSERT INTO
  public."InterfacePanelSetting"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "IsVisible",
  "IsActive",
  "IsDeleted"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."InterfacePanelSettingTemplate"  wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

-- DEAL WITH FIELD DETAILS
INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  --inner join "InterfacePanelFieldDetailTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");

/*INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  inner join public."InterfacePanelFDOrganaisationTypeUserTypeTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");

INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  inner join public."InterfacePanelFieldDetailOrganaisationTypeTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");*/

INSERT INTO
  public."InterfacePanelFieldDetail"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFieldDetailTemplate" wt

  --left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");




INSERT INTO
  public."InterfacePanelFDOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "OrganisationTypeID",
  "UserTypeID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFDOrganisationTypeUserTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
INSERT INTO
  public."InterfacePanelFieldDetailOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "OrganisationTypeID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFieldDetailOrganisationTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
-- Validations related tables


   INSERT INTO
  public."InterfacePanelFieldDetailValidation"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFieldDetailValidationID",
  "InterfacePanelFieldDetailValidationVersion",
  "FieldDetailID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFieldDetailValidationName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFieldDetailValidationTemplateID",
  wt."InterfacePanelFieldDetailValidationTemplateVersion",
  wt."FieldDetailTemplateID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFieldDetailValidationTemplateName"
FROM
  public."InterfacePanelFieldDetailValidationTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");


INSERT INTO
public."InterfacePanelFDValidationOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFDValidationOrganisationTypeUserTypeID",
  "InterfacePanelFDValidationOrganisationTypeUserTypeVersion",
  "FieldDetailID",
  "OrganisationTypeID",
  "UserTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFDValidationOrganisationTypeUserTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateID",
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion",
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateName"
FROM
  public."InterfacePanelFDValidationOrgTypeUserTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
INSERT INTO
  public."InterfacePanelFieldDetailValidationOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFieldDetailValidationOrganisationTypeID",
  "InterfacePanelFieldDetailValidationOrganisationTypeVersion",
  "FieldDetailID",
  "OrganisationTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFieldDetailValidationOrganisationTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateID",
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers",
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateName"
FROM
  public."InterfacePanelFieldDetailValidationOrganisationTypeTemplate" wt

  --left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");

   --InterfacePanelValidation

      INSERT INTO
 public."InterfacePanelValidation"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationID",
  "InterfacePanelValidationVersionNumber",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationTemplateID",
  wt."InterfacePanelValidationTemplateVersionNumber",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationTemplateName"
FROM
  public."InterfacePanelValidationTemplate" wt
  where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
  and wt."InterfacePanelValidationTemplateID" not in (Select "InterfacePanelValidationID" from "InterfacePanelValidation");

INSERT INTO
  public."InterfacePanelValidationOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationOrganisationTypeUserTypeID",
  "InterfacePanelValidationOrganisationTypeUserTypeVersion",
  "OrganisationTypeID",
  "UserTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationOrganisationTypeUserTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateID",
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateName"
FROM
  public."InterfacePanelValidationOrganisationTypeUserTypeTemplate" wt
   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
    and wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateID" not in (Select "InterfacePanelValidationOrganisationTypeUserTypeID" from "InterfacePanelValidationOrganisationTypeUserType");
INSERT INTO
   public."InterfacePanelValidationOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationOrganisationTypeID",
  "InterfacePanelValidationOrganisationTypeVersion",
  "OrganisationTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationOrganisationTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationOrganisationTypeTemplateID",
  wt."InterfacePanelValidationOrganisationTypeTemplateVers",
  wt."OrganisationTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationOrganisationTypeTemplateName"
FROM
  public."InterfacePanelValidationOrganisationTypeTemplate" wt
   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."InterfacePanelValidationOrganisationTypeTemplateID" not in (Select "InterfacePanelValidationOrganisationTypeID" from "InterfacePanelValidationOrganisationType");

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteModuleTemplate (OID = 16557) :
--
CREATE FUNCTION public."fn_PromoteModuleTemplate" (
  moduletemplateid uuid,
  moduletemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  ModuleID UUID;
  ModuleVersionNumber integer;
  LoopRow RECORD;
BEGIN

ModuleID := (select dorg."ModuleID" from "Module" dorg
	where dorg."ModuleTemplateID" = moduletemplateid limit 1);

ModuleVersionNumber := (select dorg."ModuleVersionNumber" from "Module" dorg
	where dorg."ModuleTemplateID" = moduletemplateid order by dorg."ModuleVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(ModuleID is null)
THEN
BEGIN
	ModuleID := uuid_generate_v1();
END;
END IF;


ModuleVersionNumber := moduletemplateversionnumber;


INSERT INTO
  public."Module"
(
  "ModuleID",
  "ModuleVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "ModuleTemplateID",
  "ModuleTemplateVersionNumber"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  moduletemplateid,
  moduletemplateversionnumber
FROM
  public."ModuleTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;


-- WF ROLE
INSERT INTO
  public."ModuleRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ModuleID",
  "ModuleVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ModuleID,
  ModuleVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ModuleRoleTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-------------- Claim
INSERT INTO
  public."ModuleClaim"
(
"ModuleID",
  "ModuleVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "ModuleRoleID"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."RoleID"
FROM
  public."ModuleClaimTemplate" wt

  inner join "ModuleRoleTemplate" wrr on wrr."RoleID" = wt."ModuleRoleID" and wrr."ModuleTemplateID" = wt."ModuleTemplateID"
  and wrr."ModuleTemplateVersionNumber" = wt."ModuleTemplateVersionNumber"

  left outer join "ModuleRole" mr on mr."ModuleID" = ModuleID and mr."ModuleVersionNumber" = ModuleVersionNumber and mr."RoleName" = wrr."RoleName"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber
  	and wrr."RoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ModuleClaim"
(
"ModuleID",
  "ModuleVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ModuleID,
  ModuleVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ModuleClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber
  	and wt."ModuleRoleID" is null and wt."RoleID" is not null
    and not exists(select dd."ClaimID" from "ModuleClaim" dd where dd."RoleID" = wt."RoleID" and dd."ModuleID" = ModuleID and dd."ModuleVersionNumber" =  ModuleVersionNumber);

----



INSERT INTO
  public."ModuleDependency"
(
  "ModuleID",
  "ModuleVersionNumber",
  "DependencyID",
  "DependencyVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
   ModuleID,
  ModuleVersionNumber,
  md."ModuleID",
  md."ModuleVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ModuleDependencyTemplate" wt

  left outer join "ModuleTemplate" mt on mt."ModuleTemplateID" = wt."DependencyID" and mt."ModuleTemplateVersionNumber" = wt."DependencyVersionNumber"

  left outer join "Module" md on md."ModuleID" = ModuleID and md."ModuleVersionNumber" = ModuleVersionNumber and md."Name" = mt."Name" and md."IsActive" = true and md."IsDeleted" = false

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-- deal with plugins

INSERT INTO
  public."Plugin"
(
  "PluginVersionNumber",
  "Name",
  "Description",
  "Version",
  "VersionNumber",
  "Author",
  "SystemName",
  "DisplayOrder",
  "PluginFileName",
  "PluginTemplateID",
  "PluginTemplateVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  pt."PluginTemplateVersionNumber",
  pt."Name",
  pt."Description",
  pt."Version",
  pt."VersionNumber",
  pt."Author",
  pt."SystemName",
  pt."DisplayOrder",
  pt."PluginFileName",
  pt."PluginTemplateID",
  pt."PluginTemplateVersionNumber",
  pt."IsActive",
  pt."IsDeleted"
FROM
  public."PluginTemplate" pt

  inner join "ModulePluginTemplate" mt on mt."ModuleTemplateID" = moduletemplateid and mt."ModuleTemplateVersionNumber" = moduletemplateversionnumber and mt."PluginTemplateID" = pt."PluginTemplateID" and mt."PluginVersionNumber" = pt."PluginTemplateVersionNumber"

  where pt."PluginTemplateID" not in (select ptt."PluginTemplateID" from "Plugin" ptt where ptt."PluginTemplateID" = pt."PluginTemplateID" and ptt."PluginTemplateVersionNumber" = pt."PluginTemplateVersionNumber");


INSERT INTO
  public."ModulePlugin"
(
  "ModuleID",
  "ModuleVersionNumber",
  "PluginID",
  "PluginVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  pg."PluginID",
  pg."PluginVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ModulePluginTemplate" wt

  left outer join "Plugin" pg on pg."PluginTemplateID" = wt."PluginTemplateID" and pg."PluginTemplateVersionNumber" = wt."PluginVersionNumber"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

/*INSERT INTO
  public."ModuleSubscription"
(
  "ModuleID",
  "ModuleVersionNumber",
  "RegularPeriodLength",
  "RegularPeriodRecurringPrice",
  "IsFixedPrice",
  "FixedPrice",
  "FirstPeriodLength",
  "FirstPeriodPrice",
  "TotalNumberOfPeriods",
  "HasInfinitePeriods",
  "IsActive",
  "IsDeleted",
  "IsModuleFree"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."RegularPeriodLength",
  wt."RegularPeriodRecurringPrice",
  wt."IsFixedPrice",
  wt."FixedPrice",
  wt."FirstPeriodLength",
  wt."FirstPeriodPrice",
  wt."TotalNumberOfPeriods",
  wt."HasInfinitePeriods",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsModuleFree"
FROM
  public."ModuleSubscriptionTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;
  */
INSERT INTO
  public."ModuleSetting"
(
  "Name",
  "Value",
  "IsActive",
  "IsDeleted",
  "CanOrganisationChange",
  "CanUserChange",
  "ModuleID",
  "ModuleVersionNumber"
)
SELECT
  wt."Name",
  wt."Value",
  wt."IsActive",
  wt."IsDeleted",
  wt."CanOrganisationChange",
  wt."CanUserChange",
  ModuleID,
  ModuleVersionNumber
FROM
  public."ModuleSettingTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-- ST Promotion
FOR LoopRow IN
	select * from "ModuleStatusTypeTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."StatusTypeTemplateID" not in (select "StatusTypeTemplateID" from "StatusType" w where w."StatusTypeTemplateID"= aw."StatusTypeTemplateID" and w."StatusTypeTemplateVersionNumber" = aw."StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."ModuleTemplateID", aw."ModuleTemplateVersionNumber");
    END;
END LOOP;

-- NC Promotion
FOR LoopRow IN
	select * from "ModuleNotificationConstructTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."NotificationConstructTemplateID" not in (select "NotificationConstructTemplateID" from "NotificationConstruct" w where w."NotificationConstructTemplateID"= aw."NotificationConstructTemplateID" and w."NotificationConstructTemplateVersionNumber" = aw."NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- WF Promotion
FOR LoopRow IN
	select * from "ModuleWorkflowTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."WorkflowTemplateID" not in (select "WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID"= aw."WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = aw."WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;

-- AR Promotion
FOR LoopRow IN
	select * from "ModuleArtefactTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."ArtefactTemplateID" not in (select "ArtefactTemplateID" from "Artefact" w where w."ArtefactTemplateID"= aw."ArtefactTemplateID" and w."ArtefactTemplateVersionNumber" = aw."ArtefactTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteArtefactTemplate"(LoopRow."ArtefactTemplateID",LoopRow."ArtefactTemplateVersionNumber");
    END;
END LOOP;


END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteNotificationConstructTemplate (OID = 16559) :
--
CREATE FUNCTION public."fn_PromoteNotificationConstructTemplate" (
  notificationconstructtemplateid uuid,
  notificationconstructtemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  NotificationConstructID UUID;
  NotificationConstructVersionNumber integer;
BEGIN

NotificationConstructID := (select dorg."NotificationConstructID" from "NotificationConstruct" dorg
	where dorg."NotificationConstructTemplateID" = notificationconstructtemplateid limit 1);

NotificationConstructVersionNumber := (select dorg."NotificationConstructVersionNumber" from "NotificationConstruct" dorg
	where dorg."NotificationConstructTemplateID" = notificationconstructtemplateid order by dorg."NotificationConstructVersionNumber" desc limit 1);

-- create DO entry
BEGIN


-- copy WF
IF(NotificationConstructID is null)
THEN
BEGIN
	NotificationConstructID := uuid_generate_v1();
END;
END IF;


NotificationConstructVersionNumber := notificationconstructtemplateversionnumber;


END;

INSERT INTO
  public."NotificationConstruct"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "NotificationConstructTemplateID",
  "NotificationConstructTemplateVersionNumber",
  "NotificationConstructTypeID",
  "NotificationConstructSubTypeID",
  "NotificationConstructCategoryID",
  "NotificationConstructSubCategoryID",
  "DefaultNotificationExportFormatID",
  "ExternalRelatedNotificationConstructID",
  "ExternalRelatedNotificationConstructVersionNumber",
  "DefaultNotificationDeliveryMethodID",
  "NotificationSubject",
  "NotificationTitle",
  "NotificationDetails",
  "NotificationConstructMutatorObjectType",
  "NotificationReference",
  "NotificationAdditionalDetails",
  "ParentID",
  "OwnerOrganisationID",
  "CanBeIncludedInBatchNotification"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  notificationconstructtemplateid,
  notificationconstructtemplateversionnumber,
  wt."NotificationConstructTypeID",
  wt."NotificationConstructSubTypeID",
  wt."NotificationConstructCategoryID",
  wt."NotificationConstructSubCategoryID",
  wt."DefaultNotificationExportFormatID",
  einc."NotificationConstructID",
  einc."NotificationConstructVersionNumber",
  wt."DefaultNotificationDeliveryMethodID",
  wt."NotificationSubject",
  wt."NotificationTitle",
  wt."NotificationDetails",
  wt."NotificationConstructMutatorObjectType",
  wt."NotificationReference",
  wt."NotificationAdditionalDetails",
  wt."ParentID",
  wt."OwnerOrganisationID",
  wt."CanBeIncludedInBatchNotification"
FROM
  public."NotificationConstructTemplate"  wt

  left outer join "NotificationConstruct" einc on einc."NotificationConstructTemplateID" = wt."ExternalRelatedNotificationConstructTemplateID" and einc."NotificationConstructTemplateVersionNumber" = wt."ExternalRelatedNotificationConstructTemplateVersionNumber"

  where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructData"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "NotificationData",
  "NotificationDataLength",
  "NotificationDataMimeType",
  "NotificationDataFileName",
  "IsActive",
  "IsDeleted",
  "CreatedOn" ,
  "UsesBusinessObjects",
  "UsesDataSources"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."NotificationData",
  wt."NotificationDataLength",
  wt."NotificationDataMimeType",
  wt."NotificationDataFileName",
  wt."IsActive",
  wt."IsDeleted",
  CURRENT_DATE ,
  wt."UsesBusinessObjects",
  wt."UsesDataSources"
FROM
  public."NotificationConstructDataTemplate"  wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructParameter"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ParameterOrBusinessObjectName",
  "DefaultValue",
  "ObjectType",
  "ObjectName",
  "ObjectNameSpace",
  "ObjectAssembly",
  "ObjectParentName",
  "ObjectParentNameSpace",
  "ObjectParentAssembly",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "ObjectParentType",
  "IsBusinessObject",
  "BusinessObjectCategoryName"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ParameterOrBusinessObjectName",
  wt."DefaultValue",
  wt."ObjectType",
  wt."ObjectName",
  wt."ObjectNameSpace",
  wt."ObjectAssembly",
  wt."ObjectParentName",
  wt."ObjectParentNameSpace",
  wt."ObjectParentAssembly",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  wt."ObjectParentType",
  wt."IsBusinessObject",
  wt."BusinessObjectCategoryName"
FROM
  public."NotificationConstructParameterTemplate"  wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;


INSERT INTO
  public."NotificationConstructRole"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."NotificationConstructRoleTemplate" wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructClaim"
(
"NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "NotificationRoleConstructID"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."NotificationRoleConstructID"
FROM
  public."NotificationConstructClaimTemplate" wt

  inner join "NotificationConstructRoleTemplate" wrr on wrr."NotificationConstructRoleID" = wt."NotificationConstructRoleID" and wrr."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and wrr."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"

  left outer join "NotificationConstructRole" mr on mr."NotificationConstructID" = NotificationConstructID and mr."NotificationConstructVersionNumber" = NotificationConstructVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

  	and wrr."NotificationConstructRoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."NotificationConstructClaim"
(
"NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."NotificationConstructClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

  	and wt."NotificationConstructRoleID" is null and wt."RoleID" is not null;

----

INSERT INTO
  public."NotificationConstructTarget"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "OrganisationTypeID",
  "UserTypeID",
  "IsSingleUser",
  "IsOrganisationBranchOnly",
  "IsDefaultTarget",
  "IsActive",
  "IsDeleted"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsSingleUser",
  wt."IsOrganisationBranchOnly",
  wt."IsDefaultTarget",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."NotificationConstructTargetTemplate" wt

   where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

   and not exists (select * from "NotificationConstructTarget" nct where nct."OrganisationTypeID" = wt."OrganisationTypeID" and nct."UserTypeID" = wt."UserTypeID"
   	and nct."NotificationConstructID" = NotificationConstructID and nct."NotificationConstructVersionNumber" = NotificationConstructVersionNumber limit 1)
  ;


--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteProductTemplate (OID = 16561) :
--
CREATE FUNCTION public."fn_PromoteProductTemplate" (
  producttemplateid uuid,
  producttemplateversionnumber integer,
  processpackage boolean,
  processrelationship boolean,
  processfamily boolean
)
RETURNS void
AS
$body$
DECLARE
  ProductID UUID;
  ProductVersionNumber integer;
  LoopRow RECORD;
BEGIN


ProductID := (select dorg."ProductID" from "Product" dorg
	where dorg."ProductTemplateID" = producttemplateid limit 1);

ProductVersionNumber := (select dorg."ProductVersionID" from "Product" dorg
	where dorg."ProductTemplateID" = producttemplateid order by dorg."ProductVersionID" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(ProductID is null)
THEN
BEGIN
	ProductID := uuid_generate_v1();
END;
END IF;

IF((ProductVersionNumber is null) or (ProductVersionNumber <> producttemplateversionnumber))
THEN
BEGIN

ProductVersionNumber := producttemplateversionnumber;

-- PRODUCT DEFAULTS
-- Attribute make sure unique
INSERT INTO
  public."ProductAttribute"
(
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductAttributeTemplate" wt
  where not exists(select pt."Name" from "ProductAttribute" pt where pt."Name" = wt."Name" limit 1);


-- spec
INSERT INTO
  public."SpecificationAttribute"
(
  "SpecificationAttributeTemplateID",
  "Name",
  "Description",
  "DisplayOrder",
  "IsActive",
  "IsDeleted",
  "SpecificationAttributeTypeID",
  "SpecificationAttributeCategoryID",
  "SpecificationAttributeSubTypeID",
  "SpecificationAttributeSubCategoryID"
)
SELECT
  wt."SpecificationAttributeTemplateID",
  wt."Name",
  wt."Description",
  wt."DisplayOrder",
  wt."IsActive",
  wt."IsDeleted",
  wt."SpecificationAttributeTypeID",
  wt."SpecificationAttributeCategoryID",
  wt."SpecificationAttributeSubTypeID",
  wt."SpecificationAttributeSubCategoryID"
FROM
  public."SpecificationAttributeTemplate" wt
   where not exists(select pt."SpecificationAttributeTemplateID" from "SpecificationAttribute" pt where pt."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID" limit 1);

-- spec option
INSERT INTO
  public."SpecificiationAttributeOption"
(
  "SpecificationAttributeOptionTemplateID",
  "SpecificationAttributeID",
  "DisplayOrder",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."SpecificationAttributeOptionTemplateID",
  (select sa1."SpecificationAttributeID" from "SpecificationAttribute" sa1 where sa1."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID" limit 1),
  wt."DisplayOrder",
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"

FROM
  public."SpecificationAttributeOptionTemplate"  wt
   where not exists(select pt."SpecificationAttributeOptionTemplateID" from "SpecificiationAttributeOption" pt where pt."SpecificationAttributeOptionTemplateID" = wt."SpecificationAttributeOptionTemplateID" limit 1);

-- spec relationship
INSERT INTO
  public."SpecificationAttributeRelationship"
(
  "SpecificationAttributeID",
  "ParentSpecificationAttributeID",
  "IsMandatory",
  "IsInverse",
  "IsActive",
  "IsDeleted"
)
SELECT
  sp."SpecificationAttributeID",
  spp."SpecificationAttributeID",
  wt."IsMandatory",
  wt."IsInverse",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."SpecificationAttributeRelationshipTemplate" wt

  left outer join "SpecificationAttribute" sp on sp."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID"
  left outer join "SpecificationAttribute" spp on spp."SpecificationAttributeTemplateID" = wt."ParentSpecificationAttributeTemplateID"

  where sp."SpecificationAttributeID" is not null and spp."SpecificationAttributeID" is not null

  and not exists(select * from "SpecificationAttributeRelationship" ss where ss."SpecificationAttributeID" = sp."SpecificationAttributeID" and ss."ParentSpecificationAttributeID" = spp."SpecificationAttributeID" limit 1)
 ;




-- Product
INSERT INTO
  public."Product"
(
  "ProductID",
  "ProductTemplateID",
  "IsActive",
  "IsDeleted",
  "IsPackage",
  "IsDeposit",
  "ProductVersionID",
  "ProductTemplateVersionID",
  "ParentID",
  "OwnerOrganisationID",
  "CanBeResold",
  "IsDeductionProduct"
)
SELECT
 ProductID,
  wt."ProductTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsPackage",
  false,
  ProductVersionNumber,
  wt."ProductVersionID",
  wt."ParentID",
  wt."OwnerOrganisationID",
  wt."CanBeResold",
  wt."IsDeductionProduct"
FROM
  public."ProductTemplate" wt
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-- PRoduct Attri
INSERT INTO
  public."ProductProductAttribute"
(
  "ProductID",
  "ProductAttributeID",
  "IsRequired",
  "DisplayOrder",
  "ProductVersionID",
  "IsActive",
  "IsDeleted"
)
SELECT
  ProductID,
  pa."ProductAttributeID",
  wt."IsRequired",
  wt."DisplayOrder",
  ProductVersionNumber,
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductProductAttributeTemplate" wt
  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = wt."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pa on pa."Name" = pat."Name"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber and pa."ProductAttributeID" is not null;

-- tag
INSERT INTO
  public."ProductTag"
(
  "Name",
  "ProductID",
  "ProductVersionID"
)
SELECT
  wt."Name",
  ProductID,
  ProductVersionNumber
FROM
  public."ProductTagTemplate" wt
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

-- deduction
INSERT INTO
  public."ProductDeduction"
(
  "ProductID",
  "ProductVersionID",
  "DeductionID",
  "DeductionPercentage",
  "DeductionValue",
  "IsActive",
  "IsDeleted",
  "DeductionVersionNumber"
)
SELECT
  ProductID,
  ProductVersionNumber,
  de."DeductionID",
  wt."DeductionPercentage",
  wt."DeductionValue",
  wt."IsActive",
  wt."IsDeleted",
  de."DeductionVersionNumber"
FROM
  public."ProductDeductionTemplate" wt
  left outer join "DeductionTemplate" dt on dt."DeductionTemplateID" = wt."DeductionTemplateID" and dt."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"
  left outer join "Deduction" de on de."Name" = dt."Name"
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

-- WF ROLE
INSERT INTO
  public."ProductRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ProductID",
  "ProductVersionID",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ProductID,
  ProductVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ProductRoleTemplate" wt where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-------------- Claim
INSERT INTO
  public."ProductClaim"
(
"ProductID",
  "ProductVersionID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "ProductRoleID"
)
SELECT
  ProductID,
  ProductVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."ProductRoleID"
FROM
  public."ProductClaimTemplate" wt

  inner join "ProductRoleTemplate" wrr on wrr."ProductRoleTemplateID" = wt."ProductRoleTemplateID" and wrr."ProductTemplateID" = wt."ProductTemplateID"
  and wrr."ProductVersionID" = wt."ProductVersionID"

  left outer join "ProductRole" mr on mr."ProductID" = ProductID and mr."ProductVersionID" = ProductVersionNumber and mr."RoleName" = wrr."RoleName"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  	and wrr."ProductRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ProductClaim"
(
"ProductID",
  "ProductVersionID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ProductID,
  ProductVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ProductClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  	and wt."ProductRoleTemplateID" is null and wt."RoleID" is not null
    and not exists(select dd."ProductClaimID" from "ProductClaim" dd where dd."RoleID" = wt."RoleID" and dd."ProductID" = ProductID and dd."ProductVersionID" =  ProductVersionNumber);

----
INSERT INTO
  public."ProductDetail"
(
  "Name",
  "Description",
  "ProductID",
  "IsActive",
  "IsDeleted",
  "ShortDescription",
  "LongDescription",
  "MetaKeywords",
  "MetaDescription",
  "MetaTitle",
  "RequireOtherProducts",
  "AutomaticallyAddRequiredProducts",
  "HasUserAgreement",
  "UserAgreementText",
  "IsRecurring",
  "RecurringCycleLength",
  "RecurringCyclePeriodID",
  "RecurringTotalCycle",
  "IsTaxExempt",
  "TaxCategoryID",
  "OrderMinimumQuantity",
  "OrderMaximumQuantity",
  "CallForPrice",
  "Price",
  "ProductCost",
  "CustomerEntersPrice",
  "HasTierPrices",
  "HasDiscountsApplied",
  "MinimumCustomerEnteredPrice",
  "MaximumCustomerEnteredPrice",
  "DisplayOrder",
  "AvailableStartDate",
  "AvailableEndDate",
  "ProductTypeID",
  "ProductSubTypeID",
  "ProductCategoryID",
  "ProductSubCategoryID",
  "ProductVersionID",
  "CurrencyCode",
  "CurrencyRate",
  "CurrencyRateDate",
  "CurrencyRateToGBP",
  "CurrencyRateToUSD",
  "InvoiceName",
  "IsDepositProduct"
)
SELECT
  wt."Name",
  wt."Description",
  ProductID,
  wt."IsActive",
  wt."IsDeleted",
  wt."ShortDescription",
  wt."LongDescription",
  wt."MetaKeywords",
  wt."MetaDescription",
  wt."MetaTitle",
  wt."RequireOtherProducts",
  wt."AutomaticallyAddRequiredProducts",
  wt."HasUserAgreement",
  wt."UserAgreementText",
  wt."IsRecurring",
  wt."RecurringCycleLength",
  wt."RecurringCyclePeriodID",
  wt."RecurringTotalCycles",
  wt."IsTaxExempt",
  wt."TaxCategoryID",
  wt."OrderMinimumQuantity",
  wt."OrderMaximumQuantity",
  wt."CallForPrice",
  wt."Price",
  wt."ProductCost",
  wt."CustomerEntersPrice",
  wt."HasTierPrices",
  wt."HasDiscountsApplied",
  wt."MinimumCustomerEnteredPrice",
  wt."MaximumCustomerEnteredPrice",
  wt."DisplayOrder",
  wt."AvailableStartDate",
  wt."AvailableEndDate",
  wt."ProductTypeID",
  wt."ProductSubTypeID",
  wt."ProductCategoryID",
  wt."ProductSubCategoryID",
  ProductVersionNumber,
  wt."CurrencyCode",
  wt."CurrencyRate",
  wt."CurrencyRateDate",
  wt."CurrencyRateToGBP",
  wt."CurrencyRateToUSD",
  wt."InvoiceName",
  wt."IsDepositProduct"
FROM
  public."ProductDetailTemplate" wt where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-- spec attrs
INSERT INTO
  public."ProductSpecificationAttribute"
(
  "ProductID",
  "IsMandatory",
  "IsMultiSelect",
  "DisplayOrder",
  "IsPreSelected",
  "MinimumSelectionLimit",
  "MaximumSelectionLimit",
  "IsUserDefined",
  "IsPriceDriven",
  "SpecificationAttributeID",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  wt."IsMandatory",
  wt."IsMultiSelect",
  wt."DisplayOrder",
  wt."IsPreSelected",
  wt."MinimumSelectionLimit",
  wt."MaximumSelectionLimit",
  wt."IsUserDefined",
  wt."IsPriceDriven",
  sp."SpecificationAttributeID",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductSpecificationAttributeTemplate" wt

  left outer join "SpecificationAttribute" sp on sp."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

INSERT INTO
  public."ProductSpecificationAttributeOption"
(
  "ProductSpecificationAttributeID",
  "SpecficiationAttributeOptionID",
  "PriceAdjustment",
  "WeightAdjustment",
  "Cost",
  "DefaultValue",
  "DefaultQuantity",
  "DisplayOrder",
  "IsActive",
  "IsDeleted"
)
SELECT
  psa."ProductSpecificationAttributeID",
  sao."SpecficiationAttributeOptionID",
  wt."PriceAdjustement",
  wt."WeightAdjustment",
  wt."Cost",
  wt."DefaultValue",
  wt."DefaultQuantity",
  wt."DisplayOrder",
  wt. "IsActive",
  wt."IsDeleted"
FROM
  public."ProductSpecificationAttributeOptionTemplate" wt

  left outer join "SpecificiationAttributeOption" sao on sao."SpecificationAttributeOptionTemplateID" = wt."SpecificationAttributeOptionTemplateID"

  left outer join "ProductSpecificationAttributeTemplate" psat on psat."ProductSpecificationAttributeTemplateID" = wt."ProductSpecificationAttributeTemplateID"

  left outer join "ProductSpecificationAttribute" psa on psa."ProductID" = ProductID and psa."ProductVersionID" = ProductVersionNumber
  	and psa."SpecificationAttributeID" = sao."SpecificationAttributeID"

  where psat."ProductTemplateID" = producttemplateid and psat."ProductVersionID" = producttemplateversionnumber
  and psa."ProductSpecificationAttributeID" is not null
  ;

INSERT INTO
  public."ProductSpecificationBlueprint"
(
  "ProductID",
  "ProductSpecificationAttributeID",
  "DefaultProductSpecificationAttributeOptionID",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  psa."ProductSpecificationAttributeID",
  psao."ProductSpecificationAttributeOptionID",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductSpecificationBlueprintTemplate" wt
  left outer join "ProductSpecificationAttributeOptionTemplate" sao on sao."ProductSpecificationAttributeOptionTemplateID" = wt."DefaultProductSpecificationAttributeOptionTemplateID"
  left outer join "SpecificiationAttributeOption" saa on saa."SpecificationAttributeOptionTemplateID" = sao."SpecificationAttributeOptionTemplateID"

  left outer join "ProductSpecificationAttributeTemplate" psat on psat."ProductSpecificationAttributeTemplateID" = wt."ProductSpecificationAttributeTemplateID"

  left outer join "ProductSpecificationAttribute" psa on psa."ProductID" = ProductID and psa."ProductVersionID" = ProductVersionNumber
  	and psa."SpecificationAttributeID" = saa."SpecificationAttributeID"
  left outer join "ProductSpecificationAttributeOption" psao on psao."ProductSpecificationAttributeID" = psa."ProductSpecificationAttributeID" and psao."SpecficiationAttributeOptionID" = saa."SpecficiationAttributeOptionID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."ProductVariantAttributeValue"
(
  "ProductProductAttributeID",
  "AttributeValueTypeID",
  "Name",
  "PriceAdjustment",
  "WeightAdjustement",
  "Cost",
  "Quantity",
  "IsPreSelected",
  "DisplayOrder",
  "IsActive",
  "IsDeleted"
)
SELECT
  ppa."ProductProductAttributeID",
  wt."AttributeValueTypeID",
  wt."Name",
  wt."PriceAdjustment",
  wt."WeightAdjustment",
  wt."Cost",
  wt."Quantity",
  wt."IsPreSelected",
  wt."DisplayOrder",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductVariantAttributeValueTemplate" wt

  left outer join "ProductProductAttributeTemplate" ppt on ppt."ProductProductAttributeTemplateID" = wt."ProductProductAttributeTemplateID"

  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = ppt."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pa on pa."Name" = pat."Name"

  left outer join "ProductProductAttribute" ppa on ppa."ProductID" =ProductID and ppa."ProductVersionID" = ProductVersionNumber
  	and ppa."ProductAttributeID" = pa."ProductAttributeID"

   where ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."ProductVariantAttributeCombination"
(
  "ProductID",
  "AllowOutOfStockOrders",
  "StockQuantity",
  "Sku",
  "ManufacturerPartNumber",
  "Gtin",
  "OverridenPrice",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  wt."AllowOutOfStockOrders",
  wt."StockQuantity",
  wt."Sku",
  wt."ManufacturerPartNumber",
  wt."Gtin",
  wt."OverriddenPrice",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductVariantAttributeCombinationTemplate" wt

   where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

-- Plan
INSERT INTO
  public."Plan"
(
  "PlanVersionNumber",
  "Name",
  "Description",
  "InvoiceName",
  "Price",
  "Period",
  "TrialPeriod",
  "PeriodUnitID",
  "TrialPeriodUnitID",
  "FreeQuantity",
  "SetupCost",
  "DowngradePenalty",
  "CreatedOn",
  "CreatedBy",
  "IsActive",
  "IsDeleted",
  "CountryCode",
  "CurrencyCode",
  "CancellationPeriod",
  "CancellationPeriodUnitID",
  "IsFree",
  "HasInfinitePeriods",
  "ParentID",
  "PlanStatusID",
  "IsTransactionBased",
  "PlanTemplateID",
  "PlanTemplateVersionNumber",
  "PlanGroupID",
  "PlanCategoryID"
)
SELECT
 	1,
  wt."Name",
  wt."Description",
  wt."InvoiceName",
  wt."Price",
  wt."Period",
  wt."TrialPeriod",
  wt."PeriodUnitID",
  wt."TrialPeriodUnitID",
  wt."FreeQuantity",
  wt."SetupCost",
  wt."DowngradePenalty",
  wt."CreatedOn",
  wt."CreatedBy",
  wt."IsActive",
  wt."IsDeleted",
  wt."CountryCode",
  wt."CurrencyCode",
  wt."CancellationPeriod",
  wt."CancellationPeriodUnitID",
  wt."IsFree",
  wt."HasInfinitePeriods",
  wt."ParentID",
  wt."PlanStatusID",
  wt."IsTransactionBased",
  wt."PlanTemplateID",
  wt."PlanTemplateVersionNumber",
  wt."PlanGroupID",
  wt."PlanCategoryID"
FROM
  public."PlanTemplate" wt

  left outer join "PlanProductTemplate" ppt on ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  	and ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"

  where not exists(select pt."PlanTemplateID" from "Plan" pt where pt."PlanTemplateID" = wt."PlanTemplateID" and pt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber")
  and ppt."ProductTemplateID" =  producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."PlanProduct"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "Period",
  "PeriodUnitID",
  "IsActive",
  "IsDeleted",
  "PlanProductStatusID"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  pr."ProductID",
  pr."ProductVersionID",
  wt."Period",
  wt."PeriodUnitID",
  wt."IsActive",
  wt."IsDeleted",
  wt."PlanProductStatusID"
FROM
  public."PlanProductTemplate" wt

   left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductVersionID" = wt."ProductVersionID"

  where wt."ProductTemplateID" = producttemplateid and wt."PlanTemplateVersionNumber" = producttemplateversionnumber

  and not exists(select pt."PlanID" from "PlanProduct" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber" = p."PlanVersionNumber"
  	and pt."ProductID" = pr."ProductID" and pt."ProductVersionID" = pr."ProductVersionID")

  and wt."ProductTemplateID" is not null;


-- plan transaction
INSERT INTO
  public."PlanTransaction"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "IsTotalValuePricingBound",
  "IsTransactionCountPricingBound",
  "IsActive",
  "IsDeleted",
  "ParentID",
  "ApplyTransactionTierPricingPerTransaction"
)
SELECT
   p."PlanID",
 p."PlanVersionNumber",
   pr."ProductID",
  pr."ProductVersionID",
 ptt. "IsTotalValuePricingBound",
  ptt."IsTransactionCountPricingBound",
  ptt."IsActive",
  ptt."IsDeleted",
  ptt."PlanTransactionTemplateID",
  ptt."ApplyTransactionTierPricingPerTransaction"
FROM
  public."PlanTransactionTemplate" ptt

  left outer join "Plan" p on p."PlanTemplateID" = ptt."PlanTemplateID" and p."PlanTemplateVersionNumber" = ptt."PlanTemplateVersionNumber"
  left outer join "PlanProductTemplate" ppt on ptt."PlanTemplateID" = ptt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = ptt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber

  left outer join "Product" pr on pr."ProductTemplateID" = ptt."ProductTemplateID" and pr."ProductVersionID" = ptt."ProductVersionID"

   where not exists(select pt."PlanTransactionID" from "PlanTransaction" pt where pt."ParentID" = ptt."PlanTransactionTemplateID")

   and p."PlanID" is not null and pr."ProductID" is not null and ppt."ProductTemplateID" is not null;

-- deal with component tiers

-- component tiers missing
INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "PlanTransactionComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"
   left outer join "PlanTransactionTemplate" tran on tran."PlanTransactionTemplateID" = tem."PlanTransactionTemplateID"
   left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = tran."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = tran."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber

  left outer join "PlanTransaction" p on p."ParentID" = tran."PlanTransactionTemplateID"

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and p."PlanTransactionID" is not null and tran."PlanTransactionTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."PlanTransactionComponentTier"
(
  "ComponentTierID",
  "PlanTransactionID"
)
SELECT
  ct."ComponentTierID",
  p."PlanTransactionID"
FROM
  public."PlanTransactionComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "PlanTransaction" p on p."ParentID" = wt."PlanTransactionTemplateID"

  where not exists (select * from "PlanTransactionComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."PlanTransactionID" = p."PlanTransactionID" limit 1)
    and ct."ComponentTierID" is not null and p."PlanTransactionID" is not null
  ;

-- billing
INSERT INTO
  public."Billing"
(
  "BillingPeriod",
  "BillingPeriodUnitID",
  "BillingLagPeriod",
  "BillingLagPeriodUnitID",
  "BillingPeriodDayOfMonth",
  "DelayedBillingPeriod",
  "DelayedBillingPeriodUnitID",
  "HasDelayedBilling",
  "BillingTemplateID",
  "NumberOfBillingPeriods",
  "InvoiceToProcessingDelayPeriod",
  "InvoiceToProcessingDelayPeriodUnitID",
  "InvoiceNotificationConstructID",
  "InvoiceNotificationConstructVersionNumber",
  "EstimatedProcessingPeriod",
  "EstimatedProcessingPeriodUnitID",
  "IsActive",
  "IsDeleted"
)
SELECT
  bt."BillingPeriod",
  bt."BillingPeriodUnitID",
  bt."BillingLagPeriod",
  bt."BillingLagPeriodUnitID",
  bt."BillingPeriodDayOfMonth",
  bt."DelayedBillingPeriod",
  bt."DelayedBillingPeriodUnitID",
  bt."HasDelayedBilling",
  bt."BillingTemplateID",
  bt."NumberOfBillingPeriods",
  bt."InvoiceToProcessingDelayPeriod",
  bt."InvoiceToProcessingDelayPeriodUnitID",
  nc."NotificationConstructID",
  nc."NotificationConstructVersionNumber",
  bt."EstimatedProcessingPeriod",
  bt."EstimatedProcessingPeriodUnitID",
  bt."IsActive",
  bt."IsDeleted"
FROM
  public."BillingTemplate" bt

  left outer join "NotificationConstruct" nc on nc."NotificationConstructTemplateID" = "InvoiceNotificationConstructTemplateID"
  	and nc."NotificationConstructTemplateVersionNumber" = "InvoiceNotificationConstructTemplateVersionNumber"

  where not exists(select * from "Billing" pt where pt."BillingTemplateID" = bt."BillingTemplateID")
  ;

INSERT INTO
  public."PlanBilling"
(
  "PlanID",
  "PlanVersionNumber",
  "BillingID",
  "IsActive",
  "IsDeleted",
  "IsDefaultBilling"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  b."BillingID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultBilling"
FROM
  public."PlanBillingTemplate" wt
 left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
  left outer join "Billing" b on b."BillingTemplateID" = wt."BillingTemplateID"


   where not exists(select * from "PlanBilling" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber"= p."PlanVersionNumber" and pt."BillingID" = b."BillingID")

   and ppt."ProductTemplateID" is not null
  ;

INSERT INTO
  public."PlanProduct"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "Period",
  "PeriodUnitID",
  "IsActive",
  "IsDeleted",
  "PlanProductStatusID"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  pr."ProductID",
  pr."ProductVersionID",
  wt."Period",
  wt."PeriodUnitID",
  wt."IsActive",
  wt."IsDeleted",
  wt."PlanProductStatusID"
FROM
  public."PlanProductTemplate" wt
left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
  left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

   where not exists(select * from "PlanProduct" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber"= p."PlanVersionNumber" and pt."ProductID" = pr."ProductID"
   	and pt."ProductVersionID" = pr."ProductVersionID")
    and ppt."ProductTemplateID" is not null
    and p."PlanID" is not null and pr."ProductID" is not null
  ;

-- product tiers
INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "ProductComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"
   left outer join "ProductTemplate" ppt on ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber and ppt."ProductTemplateID" = tem."ProductTemplateID" and ppt."ProductVersionID" = tem."ProductVersionID"


  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and ppt."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."ProductComponentTier"
(
  "ComponentTierID",
  "ProductID",
  "ProductVersionID"
)
SELECT
  ct."ComponentTierID",
  p."ProductID",
  p."ProductVersionID"
FROM
  public."ProductComponentTierTemplate" wt
  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."ProductID" = p."ProductID" and tt."ProductVersionID" = p."ProductVersionID" limit 1)
    and ct."ComponentTierID" is not null and p."ProductID" is not null
    and wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

-- product discount
INSERT INTO
  public."Discount"
(
  "DiscountVersionNumber",
  "Name",
  "Description",
  "InvoiceName",
  "DiscountTypeID",
  "DiscountPercentage",
  "DiscountAmount",
  "DiscountQuantity",
  "DiscountPeriod",
  "DisocuntPeriodUnitID",
  "ValidTill",
  "MaxRedemptions",
  "DiscountApplyOnID",
  "CreatedOn",
  "IsActive",
  "IsDeleted",
  "IsRecurring",
  "IsPercentage",
  "DiscountStatusID",
  "IsSingleProductDiscount",
  "IsCheckoutDiscount",
  "IsSingleProductQuantityDiscount",
  "SingleProductQuantityDiscountDivisor",
  "IsSingleProductQuantityDiscountPercentageBased",
  "IsSingleProductQuantityDiscountAdditionalQuantityBased",
  "SingleProductQuantityDiscountAdditionalQuantity",
  "IsMultipleProductCombinationDiscount",
  "IsMultipleProductCombinationDiscountPercentageBased",
  "IsMultipleProductCombinationDiscountCheapestFreeBased",
  "HasTiers",
  "OrganisationTypeID",
  "UserTypeID",
  "ParentID",
  "ParentVersionNumber"
)
SELECT
  1,
  wt."Name",
  wt."Description",
  wt."InvoiceName",
  wt."DiscountTypeID",
  wt."DiscountPercentage",
  wt."DiscountAmount",
  wt."DiscountQuantity",
  wt."DiscountDurationTypeID",
  wt."DiscountDurationMonth",
  wt."ValidTill",
  wt."MaxRedemptions",
  wt."DiscountApplyOnID",
  wt."CreatedOn",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsRecurring",
  wt."IsPercentage",
  wt."DiscountStatusID",
  wt."IsSingleProductDiscount",
  wt."IsCheckoutDiscount",
  wt."IsSingleProductQuantityDiscount",
  wt."SingleProductQuantityDiscountDivisor",
  wt."IsSingleProductQuantityDiscountPercentageBased",
  wt."IsSingleProductQuantityDiscountAdditionalQuantityBased",
  wt."SingleProductQuantityDiscountAdditionalQuantity",
  wt."IsMultipleProductCombinationDiscount",
  wt."IsMultipleProductCombinationDiscountPercentageBased",
  wt."IsMultipleProductCombinationDiscountCheapestFreeBased",
  wt."HasTiers",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."DiscountTemplateID",
  wt."DiscountTemplateVersionNumber"
FROM
  public."DiscountTemplate" wt

   inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = wt."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= wt."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "Discount" d where d."ParentID" = wt."DiscountTemplateID" and d."ParentVersionNumber" =
  	wt."DiscountTemplateVersionNumber" limit 1) and pd."ProductTemplateID" is not null
  ;

INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "DiscountComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"

  inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = tem."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= tem."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and pd."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."DiscountComponentTier"
(
  "ComponentTierID",
  "DiscountID",
  "DiscountVersionNumber"
)
SELECT
  ct."ComponentTierID",
  p."DiscountID",
  p."DiscountVersionNumber"
FROM
  public."DiscountComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Discount" p on p."ParentID" = wt."DiscountTemplateID" and p."ParentVersionNumber" = wt."DiscountTemplateVersionNumber"

  inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = wt."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= wt."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "DiscountComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."DiscountID" = p."DiscountID" and tt."DiscountVersionNumber" = p."DiscountVersionNumber" limit 1)
    and ct."ComponentTierID" is not null and p."DiscountID" is not null
  ;

-- product discount
INSERT INTO
  public."ProductDiscount"
(
  "ProductID",
  "ProductVersionID",
  "DiscountID",
  "DiscountVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  pr."ProductID",
  pr."ProductVersionID",
  p."DiscountID",
  p."DiscountVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductDiscountTemplate" wt

   left outer join "Discount" p on p."ParentID" = wt."DiscountTemplateID" and p."ParentVersionNumber" = wt."DiscountTemplateVersionNumber"

   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductDiscount" pd where pd."DiscountID" = p."DiscountID" and pd."DiscountVersionNumber" = p."DiscountVersionNumber"
  	and pd."ProductID" = pr."ProductID" and pd."ProductVersionID"  = pr."ProductVersionID" limit 1)
    and pr."ProductID" is not null
    and  wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;


-- product deduction
INSERT INTO
  public."Deduction"
(
  "DeductionVersionNumber",
  "DeductionTypeID",
  "DeductionSubTypeID",
  "DeductionCategoryID",
  "DeductionSubCategoryID",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "IsPercentageBased",
  "OrganisationTypeID",
  "UserTypeID",
  "IsTierDeduction",
  "IsCheckoutDeduction",
  "ParentID",
  "DeductionTemplateID",
  "DeductionTemplateVersionNumber"
)
SELECT
  1,
  wt."DeductionTypeID",
  wt."DeductionSubTypeID",
  wt."DeductionCategoryID",
  wt."DeductionSubCategoryID",
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsPercentageBased",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsTierDeduction",
  wt."IsCheckoutDeduction",
  wt."ParentID",
  wt."DeductionTemplateID",
  wt."DeductionTemplateVersionNumber"
FROM
  public."DeductionTemplate" wt


   inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = wt."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= wt."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "Deduction" d where d."DeductionTemplateID" = wt."DeductionTemplateID" and d."DeductionTemplateVersionNumber" =
  	wt."DeductionTemplateVersionNumber" limit 1) and pd."ProductTemplateID" is not null
  ;

INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "DeductionComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"

  inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = tem."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= tem."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and pd."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."DeductionComponentTier"
(
  "ComponentTierID",
  "DeductionID",
  "DeductionVersionNumber"
)
SELECT
  ct."ComponentTierID",
  p."DeductionID",
  p."DeductionVersionNumber"
FROM
  public."DeductionComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Deduction" p on p."DeductionTemplateID" = wt."DeductionTemplateID" and p."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"

  inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = wt."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= wt."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "DeductionComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."DeductionID" = p."DeductionID" and tt."DeductionVersionNumber" = p."DeductionVersionNumber" limit 1)
    and ct."ComponentTierID" is not null and p."DeductionID" is not null
  ;

-- product discount
INSERT INTO
  public."ProductDeduction"
(
  "ProductID",
  "ProductVersionID",
  "DeductionID",
  "DeductionPercentage",
  "DeductionValue",
  "IsActive",
  "IsDeleted",
  "DeductionVersionNumber"
)
SELECT
  pr."ProductID",
  pr."ProductVersionID",
  p."DeductionID",
  wt."DeductionPercentage",
  wt."DeductionValue",
  wt."IsActive",
  wt."IsDeleted",
  p."DeductionVersionNumber"
FROM
  public."ProductDeductionTemplate" wt

    left outer join "Deduction" p on p."DeductionTemplateID" = wt."DeductionTemplateID" and p."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"

   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductDeduction" pd where pd."DeductionID" = p."DeductionID" and pd."DeductionVersionNumber" = p."DeductionVersionNumber"
  	and pd."ProductID" = pr."ProductID" and pd."ProductVersionID"  = pr."ProductVersionID" limit 1)
    and pr."ProductID" is not null
    and  wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;














IF(ProcessRelationship = true)
THEN
BEGIN

-- first promote all parent products
FOR LoopRow IN
	select aw."ParentProductTemplateID",aw."ParentProductVersionID" from "ProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ParentProductTemplateID" and p."ProductTemplateVersionID" = aw."ParentProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ParentProductTemplateID",LoopRow."ParentProductVersionID",false,false,false);
    END;
END LOOP;
-- first promote all child products
FOR LoopRow IN
	select aw."ChildProductTemplateID",aw."ChildProductVersionID" from "ProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ChildProductTemplateID" and p."ProductTemplateVersionID" = aw."ChildProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ChildProductTemplateID",LoopRow."ChildProductVersionID",false,false,false);
    END;
END LOOP;


INSERT INTO
  public."ProductRelationship"
(
  "ParentProductID",
  "ChildProductID",
  "ProductRelationshipTypeID",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "ParentProductVersionID",
  "ChildProductVersionID"
)
SELECT
  pr."ProductID",
  cpr."ProductID",
  wt."ProductRelationshipTypeID",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  pr."ProductVersionID",
  cpr."ProductVersionID"
FROM
  public."ProductRelationshipTemplate" wt

  left outer join "Product" pr on pr."ProductTemplateID" = wt."ParentProductTemplateID" and pr."ProductTemplateVersionID" = wt."ParentProductVersionID"
  left outer join "Product" cpr on cpr."ProductTemplateID" = wt."ChildProductTemplateID" and cpr."ProductTemplateVersionID" = wt."ChildProductVersionID"

   where wt."ParentProductTemplateID" = producttemplateid and wt."ParentProductVersionID" = producttemplateversionnumber
   and pr."ProductID" is not null and cpr."ProductID" is not null
   and not exists(select * from "ProductRelationship" prr where prr."ParentProductID" = pr."ProductID" and prr."ParentProductVersionID" = pr."ProductVersionID"
   	and prr."ChildProductID" = cpr."ProductID" and prr."ChildProductVersionID" = cpr."ProductVersionID" limit 1)
  ;

INSERT INTO
  public."ProductRelationshipBlueprint"
(
  "ProductRelationshipID",
  "DefaultQuantity",
  "IsActive",
  "IsDeleted"
)
SELECT
  prr."ProductRelationshipID",
  wt."DefaultQuantity",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductRelationshipBlueprintTemplate" wt

  left outer join "ProductRelationshipTemplate" rt on rt."ProductRelationshipTemplateID" = wt."ProductRelationshipTemplateID"

   left outer join "Product" pr on pr."ProductTemplateID" = rt."ParentProductTemplateID" and pr."ProductTemplateVersionID" = rt."ParentProductVersionID"
  left outer join "Product" cpr on cpr."ProductTemplateID" = rt."ChildProductTemplateID" and cpr."ProductTemplateVersionID" = rt."ChildProductVersionID"

  left outer join "ProductRelationship" prr on prr."ChildProductID" = cpr."ProductID" and prr."ChildProductVersionID" = cpr."ProductVersionID"
  	and prr."ParentProductID" = pr."ProductID" and prr."ParentProductVersionID" = pr."ProductVersionID"

   where rt."ParentProductTemplateID" = producttemplateid and rt."ParentProductVersionID" = producttemplateversionnumber
   and not exists(select * from "ProductRelationshipBlueprint" prr1 WHERE prr1."ProductRelationshipID" = prr."ProductRelationshipID" limit 1)
   ;





END;
END IF;

-- Package
IF(ProcessPackage = true)
THEN
BEGIN

-- first promote all package related products
FOR LoopRow IN
	select aw."ProductTemplateID",aw."ProductVersionID" from "PackageTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ProductTemplateID" and p."ProductTemplateVersionID" = aw."ProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ProductTemplateID",LoopRow."ProductVersionID",false,false,false);
    END;
END LOOP;
-- product all package child products
FOR LoopRow IN
	select aw."ProductTemplateID",aw."ProductVersionID" from "PackageProductTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ProductTemplateID" and p."ProductTemplateVersionID" = aw."ProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ProductTemplateID",LoopRow."ProductVersionID",false,false,false);
    END;
END LOOP;
-- package relationship products
FOR LoopRow IN
	select aw."ParentProductTemplateID",aw."ParentProductVersionID" from "PackageProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ParentProductTemplateID" and p."ProductTemplateVersionID" = aw."ParentProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ParentProductTemplateID",LoopRow."ParentProductVersionID",false,false,false);
    END;
END LOOP;
-- first promote all child products
FOR LoopRow IN
	select aw."ChildProductTemplateID",aw."ChildProductVersionID" from "PackageProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ChildProductTemplateID" and p."ProductTemplateVersionID" = aw."ChildProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ChildProductTemplateID",LoopRow."ChildProductVersionID",false,false,false);
    END;
END LOOP;

INSERT INTO
  public."Package"
(
  "ProductID",
  "ProductVersionID",
  "IsActive",
  "IsDeleted",
  "PackageVersionNumber",
  "PackageTemplateID",
  "PackageTemplateVersionNumber"
)
SELECT
  p."ProductID",
  p."ProductVersionID",
  wt."IsActive",
  wt."IsDeleted",
  1,
  wt."PackageTemplateID",
  wt."PackageTemplateVersionNumber"
FROM
  public."PackageTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists(select * from "Package" p1 where p1."PackageTemplateID" = wt."PackageTemplateID" and p1."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber" limit 1)
  ;

INSERT INTO
  public."PackageProduct"
(
  "PackageID",
  "UseProductDefaultBlueprint",
  "UseDefaultProductPricing",
  "IsFixedPrice",
  "ProductPriceModifierPercentage",
  "ProductPriceModifierValue",
  "DefaultQuantity",
  "UserDefinableQuantity",
  "IsActive",
  "IsDeleted",
  "ProductID",
  "ProductVersionID",
  "PackageVersionNumber",
  "RelatedProductProductAttributeID"
)
SELECT
  pa."PackageID",
  wt."UseProductDefaultBlueprint",
  wt."UseDefaultProductPricing",
  wt."IsFixedPrice",
  wt."ProductPriceModifierPercentage",
  wt."ProductPriceModifierValue",
  wt."DefaultQuantity",
  wt."UserDefinableQuantity",
  wt."IsActive",
  wt."IsDeleted",
  p."ProductID",
  p."ProductVersionID",
  pa."PackageVersionNumber",
  wt."RelatedProductProductAttributeTemplateID"
FROM
  public."PackageProductTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =wt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber"
  left outer join "ProductProductAttributeTemplate" ppat on ppat."ProductProductAttributeTemplateID" = wt."RelatedProductProductAttributeTemplateID"
  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = ppat."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pt on pt."Name" = pat."Name"
  left outer join "ProductProductAttribute" ppa on ppa."ProductID" = p."ProductID" and ppa."ProductVersionID" = p."ProductVersionID" and ppa."ProductAttributeID" = pt."ProductAttributeID"

  where not exists(select * from "PackageProduct" p1 where p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ProductID" = p."ProductID" and p1."ProductVersionID" = p."ProductVersionID" limit 1)
  ;

INSERT INTO
  public."PackageProductRelationship"
(
  "ParentProductID",
  "ChildProductID",
  "ProductRelationshipTypeID",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "PackageProductID",
  "ParentProductVersionID",
  "ChildProductVersionID",
  "PackageID",
  "PackageVersionNumber"
)
SELECT
  p."ProductID",
  xp."ProductID",
  wt."ProductRelationshipTypeID",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  pp."PackageProductID",
  p."ProductVersionID",
  xp."ProductVersionID",
  pa."PackageID",
  pa."PackageVersionNumber"
FROM
  public."PackageProductRelationshipTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ParentProductTemplateID" and p."ProductTemplateVersionID" = wt."ParentProductVersionID"
  left outer join "Product" xp on xp."ProductTemplateID" = wt."ChildProductTemplateID" and xp."ProductTemplateVersionID" = wt."ChildProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =wt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber"
  left outer join "PackageProductTemplate" ppt on ppt."PackageProductTemplateID" = wt."PackageProductTemplateID"
  left outer join "Product" xp1 on xp1."ProductTemplateID" = ppt."ProductTemplateID" and xp1."ProductTemplateVersionID" =ppt."ProductVersionID"
  left outer join "PackageProduct" pp on pp."PackageID" = pa."PackageID" and pp."PackageVersionNumber" = pa."PackageVersionNumber"
  	and pp."ProductID" = xp1."ProductID" and pp."ProductVersionID" = xp1."ProductVersionID"

   where not exists(select * from "PackageProductRelationship" p1 where p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ChildProductID" = p."ProductID" and p1."ChildProductVersionID" = p."ProductVersionID" and p1."ParentProductID" = xp."ProductID" and p1."ParentProductVersionID" = xp."ProductVersionID"
    and p1."PackageProductID" = pp."PackageProductID"  limit 1)
  ;

INSERT INTO
  public."PackageProductRelationshipBlueprint"
(
  "PackageProductRelationshipID",
  "DefaultQuantity",
  "IsActive",
  "IsDeleted"
)
SELECT
  p1."PackageProductRelationshipID",
  wt."DefaultQuantity",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."PackageProductRelationshipBlueprintTemplate" wt

  left outer join "PackageProductRelationshipTemplate" pprt on  pprt."PackageProductRelationshipTemplateID" = wt."PackageProductRelationshipTemplateID"
  left outer join "PackageProductTemplate" ppt on ppt."PackageProductTemplateID" =  pprt."PackageProductTemplateID"
   left outer join "Product" p on p."ProductTemplateID" = pprt."ParentProductTemplateID" and p."ProductTemplateVersionID" = pprt."ParentProductVersionID"
  left outer join "Product" xp on xp."ProductTemplateID" = pprt."ChildProductTemplateID" and xp."ProductTemplateVersionID" = pprt."ChildProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =ppt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = ppt."PackageTemplateVersionNumber"
  left outer join "Product" xp1 on xp1."ProductTemplateID" = ppt."ProductTemplateID" and xp1."ProductTemplateVersionID" =ppt."ProductVersionID"
  left outer join "PackageProduct" pp on pp."PackageID" = pa."PackageID" and pp."PackageVersionNumber" = pa."PackageVersionNumber"
  	and pp."ProductID" = xp1."ProductID" and pp."ProductVersionID" = xp1."ProductVersionID"

  left outer join "PackageProductRelationship" p1 on p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ChildProductID" = p."ProductID" and p1."ChildProductVersionID" = p."ProductVersionID" and p1."ParentProductID" = xp."ProductID" and p1."ParentProductVersionID" = xp."ProductVersionID"
    and p1."PackageProductID" = pp."PackageProductID"

  where not exists(select * from "PackageProductRelationshipBlueprint" pps where pps."PackageProductRelationshipID" = p1."PackageProductRelationshipID" limit 1)

  ;

END;
END IF;

END;
END IF;

END;



END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteShoppingCartBlueprintTemplate (OID = 16563) :
--
CREATE FUNCTION public."fn_PromoteShoppingCartBlueprintTemplate" (
  shoppingcartblueprinttemplateid uuid
)
RETURNS void
AS
$body$
DECLARE
  ShoppingCartBlueprintID UUID;
BEGIN

ShoppingCartBlueprintID := (select dorg."ShoppingCartBlueprintID" from "ShoppingCartBlueprint" dorg
	where dorg."ParentID" = shoppingcartblueprinttemplateid limit 1);

-- create DO entry
BEGIN

IF(ShoppingCartBlueprintID is null)
THEN
BEGIN
	ShoppingCartBlueprintID := uuid_generate_v1();

    INSERT INTO
        public."ShoppingCartBlueprint"
      (
        "ShoppingCartBlueprintID",
        "ParentID",
        "IsActive",
        "IsDeleted",
        "Name"
      )
      SELECT
      ShoppingCartBlueprintID,
      shoppingcartblueprinttemplateid,
      bt."IsActive",
      bt."IsDeleted",
      bt."Name"
		FROM
  		public."ShoppingCartBlueprintTemplate" bt

        where not exists (select * from "ShoppingCartBlueprint" where "ParentID" = shoppingcartblueprinttemplateid limit 1)
        ;

      INSERT INTO
        public."ShoppingCartBlueprintProduct"
      (
        "ShoppingCartBlueprintID",
        "ProductID",
        "ProductVersionID",
        "Quantity",
        "IsActive",
        "IsDeleted"
      )
      SELECT
        cb."ShoppingCartBlueprintID",
        p."ProductID",
        p."ProductVersionID",
        dt."Quantity",
        dt."IsActive",
        dt."IsDeleted"
      FROM
        public."ShoppingCartBlueprintProductTemplate" dt

      left outer join "Product" p on p."ProductTemplateID" = dt."ProductTemplateID" and p."ProductTemplateVersionID" = dt."ProductVersionID"
      left outer join "ShoppingCartBlueprint" cb on cb."ParentID" = dt."ShoppingCartBlueprintTemplateID"

        where not exists (select * from "ShoppingCartBlueprintProduct" sb where sb."ProductID" = p."ProductID" and sb."ProductVersionID" = p."ProductVersionID" and sb."ShoppingCartBlueprintID" = sb."ShoppingCartBlueprintID" limit 1)

        and p."ProductID" is not null and cb."ShoppingCartBlueprintID" is not null
        ;

END;
END IF;





END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteStatusTypeTemplate (OID = 16564) :
--
CREATE FUNCTION public."fn_PromoteStatusTypeTemplate" (
  statustypetemplateid uuid,
  statustypetemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  StatusTypeID UUID;
  StatusTypeVersionNumber integer;

BEGIN

StatusTypeID := (select dorg."StatusTypeID" from "StatusType" dorg
	where dorg."StatusTypeTemplateID" = statustypetemplateid limit 1);

StatusTypeVersionNumber := (select dorg."StatusTypeVersionNumber" from "StatusType" dorg
	where dorg."StatusTypeTemplateID" = statustypetemplateid order by dorg."StatusTypeVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(StatusTypeID is null)
THEN
BEGIN
	StatusTypeID := uuid_generate_v1();
END;
END IF;


StatusTypeVersionNumber := statustypetemplateversionnumber;


INSERT INTO
  public."StatusType"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "StatusTypeTemplateID",
  "StatusTypeTemplateVersionNumber"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  statustypetemplateid,
  statustypetemplateversionnumber
FROM
  public."StatusTypeTemplate" wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

INSERT INTO
  public."StatusTypeValue"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."StatusTypeValueTemplate" wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

INSERT INTO
  public."StatusTypeStructure"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "StatusOrder",
  "IsStart",
  "IsEnd"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  stv."StatusTypeValueID",
  wt."StatusOrder",
  wt."IsStart",
  wt."IsEnd"
FROM
  public."StatusTypeStructureTemplate" wt

  left outer join "StatusTypeValueTemplate" stt on stt."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and stt."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and stt."StatusTypeTemplateVersionNumber" = stt."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv on stv."StatusTypeID" = StatusTypeID and stv."StatusTypeVersionNumber" = StatusTypeVersionNumber
  	and stv."Name" = stt."Name"

  where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

/*INSERT INTO
  public."StatusTypeStructureTransition"
(
  "CurrentStatusTypeStructureID",
  "NextStatusTypeStructureID"
)
SELECT
  sts."StatusTypeStructureID",
  sts1."StatusTypeStructureID"
FROM
  public."StatusTypeStructureTransitionTemplate" wt


  left outer join "StatusTypeStructureTemplate" stt on stt."StatusTypeStructureTemplateID" = wt."CurrentStatusTypeStructureTemplateID"
  left outer join "StatusTypeStructureTemplate" stt1 on stt1."StatusTypeStructureTemplateID" = wt."NextStatusTypeStructureTemplateID"

left outer join "StatusTypeValueTemplate" st on st."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and st."StatusTypeTemplateID" = stt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = stt."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv on stv."Name" = st."Name" and stv."StatusTypeVersionNumber" = StatusTypeVersionNumber and stv."StatusTypeValueID" = StatusTypeValueID

  left outer join "StatusTypeStructure" sts on sts."StatusTypeValueID" = stv."StatusTypeValueID" and sts."StatusTypeID" = StatusTypeID and sts."StatusTypeVersionNumber" = StatusTypeVersionNumber

    left outer join "StatusTypeValueTemplate" st1 on st1."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and st."StatusTypeTemplateID" = st1."StatusTypeTemplateID" and st1."StatusTypeTemplateVersionNumber" = stt1."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv1 on stv1."Name" = st1."Name" and stv1."StatusTypeVersionNumber" = StatusTypeVersionNumber and stv1."StatusTypeValueID" = StatusTypeValueID

    left outer join "StatusTypeStructure" sts on sts."StatusTypeValueID" = stv."StatusTypeValueID" and sts."StatusTypeID" = StatusTypeID and sts."StatusTypeVersionNumber" = StatusTypeVersionNumber


    left outer join "StatusTypeStructure" sts1 on sts1."StatusTypeValueID" = stv1."StatusTypeValueID" and sts1."StatusTypeID" = StatusTypeID and sts1."StatusTypeVersionNumber" = StatusTypeVersionNumber

where stt."StatusTypeTemplateID" = statustypetemplateid
	and stt1."StatusTypeTemplateID" = statustypetemplateid
    and stt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber
    and stt1."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;*/

INSERT INTO
  public."StatusTypeRole"
(
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
   StatusTypeID,
  StatusTypeVersionNumber
FROM
  public."StatusTypeRoleTemplate"  wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;


  INSERT INTO
  public."StatusTypeClaim"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "StatusTypeRoleID"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
 mr."StatusTypeRoleID"
FROM
  public."StatusTypeClaimTemplate" wt

  inner join "StatusTypeRoleTemplate" wrr on wrr."StatusTypeRoleTemplateID" = wt."StatusTypeRoleTemplateID" and wrr."StatusTypeTemplateID" = statustypetemplateid and wrr."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  left outer join "StatusTypeRole" mr on mr."StatusTypeID" = StatusTypeID and mr."StatusTypeVersionNumber" = StatusTypeVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  	and wt."StatusTypeRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."StatusTypeClaim"
(
"StatusTypeID",
  "StatusTypeVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
StatusTypeID,
  StatusTypeVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."StatusTypeClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."StatusTypeTemplateID" = StatusTypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  	and wt."StatusTypeRoleTemplateID" is null and wt."RoleID" is not null;


END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteWorkflowTemplate (OID = 16565) :
--
CREATE FUNCTION public."fn_PromoteWorkflowTemplate" (
  "WorkflowTemplateID" uuid,
  "WorkflowTemplateVersionNumber" integer
)
RETURNS void
AS
$body$
DECLARE
  WorkflowID UUID;
  WorkflowVersionNumber integer;
  WorkflowTemplateID uuid;
  WorkflowTemplateVersionNumber integer;
BEGIN

WorkflowTemplateID := "WorkflowTemplateID";
WorkflowTemplateVersionNumber := "WorkflowTemplateVersionNumber";

WorkflowID := (select dorg."WorkflowID" from "Workflow" dorg
	where dorg."WorkflowTemplateID" = WorkflowTemplateID limit 1);

WorkflowVersionNumber := (select dorg."WorkflowVersionNumber" from "Workflow" dorg
	where dorg."WorkflowTemplateID" = WorkflowTemplateID order by dorg."WorkflowVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(WorkflowID is null)
THEN
BEGIN
	WorkflowID := uuid_generate_v1();
END;
END IF;

WorkflowVersionNumber := WorkflowTemplateVersionNumber;


-- INSERT WF
INSERT INTO
  public."Workflow"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "WorkflowTypeID",
  "WorkflowSubTypeID",
  "WorkflowCategoryID",
  "WorkflowSubCategoryID",
  "WorkflowTemplateID",
  "WorkflowTemplateVersionNumber"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."WorkflowTypeID",
  wt."WorkflowSubTypeID",
  wt."WorkflowCategoryID",
  wt."WorkflowSubCategoryID",
  WorkflowTemplateID,
  WorkflowTemplateVersionNumber
FROM
  public."WorkflowTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ROLE
INSERT INTO
  public."WorkflowRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "WorkflowID",
  "WorkflowVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  WorkflowID,
  WorkflowVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."WorkflowRoleTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


-- WF CLAIM
  INSERT INTO
  public."WorkflowClaim"
(
"WorkflowClaimID",
"WorkflowID",
  "WorkflowVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "WorkflowRoleID"
)
SELECT
  wt."WorkflowClaimTemplateID",
  WorkflowID,
  WorkflowVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."WorkflowRoleID"
FROM
  public."WorkflowClaimTemplate" wt

  inner join "WorkflowRoleTemplate" wrr on wrr."WorkflowRoleTemplateID" = wt."WorkflowRoleTemplateID" and wrr."WorkflowTemplateID" = WorkflowID and wrr."WorkflowTemplateVersionNumber" = WorkflowVersionNumber

  left outer join "WorkflowRole" mr on mr."WorkflowID" = WorkflowID and mr."WorkflowVersionNumber" = WorkflowVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber

  	and wrr."WorkflowRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."WorkflowClaim"
(
"WorkflowClaimID",
"WorkflowID",
  "WorkflowVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
wt."WorkflowClaimTemplateID",
WorkflowID,
  WorkflowVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."WorkflowClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber

  	and wt."WorkflowRoleTemplateID" is null and wt."RoleID" is not null;

-- WF OT
INSERT INTO
  public."WorkflowObjectType"
(
  "Name",
  "Description",
  "ObjectTypeName",
  "ObjectTypeNameSpace",
  "ObjectTypeAssembly",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wt."ObjectTypeName",
  wt."ObjectTypeNameSpace",
  wt."ObjectTypeAssembly",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowObjectTypeTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ST
INSERT INTO
  public."WorkflowStatusType"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  (select st."StatusTypeID" from "StatusType" st where st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber" limit 1),
   (select st."StatusTypeVersionNumber" from "StatusType" st where st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber" and st."IsActive" = true and st."IsDeleted" =false order by st."StatusTypeTemplateVersionNumber" desc limit 1),
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."WorkflowStatusTypeTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

END;

-- WF NC
INSERT INTO
  public."WorkflowNotificationConstruct"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "NotificationConstructID",
  "NotificationConstructVersionNumber",

  "IsActive",
  "IsDeleted"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  nc."NotificationConstructID",
  nc."NotificationConstructVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."WorkflowNotificationConstructTemplate" wt
  inner join "NotificationConstruct" nc on nc."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and nc."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"
   where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF WP
INSERT INTO
  public."WorkflowParameter"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "ObjectType",
  "ObjectValue"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."ObjectType",
  wt."ObjectValue"
FROM
  public."WorkflowParameterTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF TRANS
INSERT INTO
  public."WorkflowTransistion"
(
  "Name",
  "Description",
  "IsWorkflowStart",
  "IsWorkflowEnd",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsWorkflowStart",
  wt."IsWorkflowEnd",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionTemplate" wt  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ACTION
INSERT INTO
  public."WorkflowAction"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "IsTransistionStart",
  "IsTransistionEnd",
  "WorkflowActionTypeID",
  "IsManual",
  "WorkflowObjectTypeID"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsTransistionStart",
  wt."IsTransistionEnd",
  wt."WorkflowActionTypeTemplateID",
  wt."IsManual",
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowActionTemplate" wt

  inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF DECISION
INSERT INTO
  public."WorkflowDecision"
(
  "Name",
  "Description",
  "IsTransistionStart",
  "IsTransistionEnd",
  "WorkflowDecisionTypeID",
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowObjectTypeID"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsTransistionStart",
  wt."IsTransistionEnd",
  wt."WorkflowDecisionTypeTemplateID",
  WorkflowID,
  WorkflowVersionNumber,
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowDecisionTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF COND
INSERT INTO
  public."WorkflowCondition"
(
  "Name",
  "Description",
  "WorkflowObjectTypeID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wot."WorkflowObjectTypeID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowConditionTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF COMMAND
INSERT INTO
  public."WorkflowCommand"
(
  "Name",
  "Description",
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowObjectTypeID"
)
SELECT
  wt."Name",
  wt."Description",
   WorkflowID,
  WorkflowVersionNumber,
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowCommandTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

---------------- PARAMETER
INSERT INTO
  public."WorkflowCommandParameter"
(
  "WorkflowCommandID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowCommandID",
  wp."WorkflowParameterID",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowCommandParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
    and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowCommand" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowCommandTemplate" wptc where wptc."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowActionParameter"
(
  "WorkflowActionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
    and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowConditionParameter"
(
  "WorkflowConditionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowConditionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowConditionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowCondition" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowConditionTemplate" wptc where wptc."WorkflowConditionTemplateID"= wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionParameter"
(
  "WorkflowDecisionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowDecisionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowDecisionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainParameter"
(
 "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowParameterID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowParameterID"
FROM
  public."WorkflowMainParameterTemplate" wt

    left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

   where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionParameter"
(
  "WorkflowTransistionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
 wp."WorkflowParameterID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

------------- CONDITIONS
INSERT INTO
  public."WorkflowActionCompleteCondition"
(
  "WorkflowActionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowConditionID",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionStartCondition"
(
  "WorkflowActionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowConditionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowCommandCondition"
(
  "WorkflowCommandID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowCommandID",
  wp."WorkflowConditionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowCommandConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowCommand" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowCommandTemplate" wptc where wptc."WorkflowCommandTemplateID"= wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowMainCompleteCondition"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowConditionID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowConditionID"
FROM
  public."WorkflowMainCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainStartCondition"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowConditionID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowConditionID"
FROM
  public."WorkflowMainStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionCompleteCondition"
(
  "WorkflowTransistionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
  wp."WorkflowConditionID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionStartCondition"
(
  "WorkflowTransistionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
  wp."WorkflowConditionID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- COMMANDS
INSERT INTO
  public."WorkflowActionExecuteCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionPostCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionPostCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionPreCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionPreCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionExecuteCommand"
(
  "WorkflowDecisionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowDecisionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowDecisionExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowMainExecuteCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainPostCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainPostCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainPreCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainPreCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- DECISION ETC
INSERT INTO
  public."WorkflowDecisionError"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionErrorTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionFailure"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionFailureTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionSuccess"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionSuccessTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

------ End DO

INSERT INTO
  public."WorkflowTransistionWorkflowAction"
(
  "WorkflowTransistionID",
  "WorkflowActionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
 wpc."WorkflowTransistionID",
  wp."WorkflowActionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionWorkflowActionTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."WorkflowActionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionWorkflowDecision"
(
  "WorkflowTransistionID",
  "WorkflowDecisionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
 wpc."WorkflowTransistionID",
  wp."WorkflowDecisionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionWorkflowDecisionTemplate" wt

  left outer join "WorkflowDecision" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."WorkflowDecisionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


----------- HIERARCY
INSERT INTO
  public."WorkflowTransistionHierarchy"
(
  "ChildComponentID",
  "ParentComponentID",
  "IsWorkflowStart",
  "IsWorkflowEnd",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  ct."WorkflowTransistionID",
  pt."WorkflowTransistionID",
  wt."IsWorkflowStart",
  wt."IsWorkflowEnd",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionHierarchyTemplate" wt

  left outer join "WorkflowTransistion" pt on pt."WorkflowID" = WorkflowID and pt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowTransistion" ct on ct."WorkflowID" = WorkflowID and ct."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."ChildComponentID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowHierarchy"
(
  "WorkflowTransistionID",
  "ChildComponentID",
  "ParentComponentID",
  "IsTransistionStart",
  "IsTranistionEnd",
  "IsChildDependentOnParent",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wtt."WorkflowTransistionID",
	COALESCE(ct."WorkflowActionID",ct1."WorkflowDecisionID"),
  COALESCE(pt."WorkflowActionID",pt1."WorkflowDecisionID"),
  wt."IsTransistionStart",
  wt."IsTranistionEnd",
  wt."IsChildDependentOnParent",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowHierarchyTemplate" wt

left outer join "WorkflowTransistion" wtt on wtt."WorkflowID" = WorkflowID and wtt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wtt."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."WorkflowTransistionTemplateID" limit 1)


  left outer join "WorkflowAction" pt on pt."WorkflowID" = WorkflowID and pt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowAction" ct on ct."WorkflowID" = WorkflowID and ct."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."ChildComponentID" limit 1)

     left outer join "WorkflowDecision" pt1 on pt1."WorkflowID" = WorkflowID and pt1."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt1."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowDecision" ct1 on ct1."WorkflowID" = WorkflowID and ct1."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct1."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."ChildComponentID" limit 1)


  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

--Tree Structure


INSERT INTO
  public."WorkflowTreeStructure"
  (
  "WorkflowTreeStructureID",
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "ItemOrder",
  "IsLeafNode",
  "IsActive" ,
  "IsDeleted",
  "ParentID" ,
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Level"
  )
  select
  wt."WorkflowTreeStructureTemplateID",
   WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."ItemOrder",
  wt."IsLeafNode",
  wt."IsActive" ,
  wt."IsDeleted",
  wt."ParentID",
  ip."InterfacePanelID",
  ip."InterfacePanelVersionNumber",
  wt."Level"
   from "WorkflowTreeStructureTemplate" wt

  left outer join "InterfacePanel" ip on ip."InterfacePanelTemplateID" = wt."InterfacePanelTemplateID" and ip."InterfacePanelTemplateVersionNumber" = wt."InterfacePanelTemplateVersionNumber"
  	and ip."Name" = (select ipt."Name" from "InterfacePanelTemplate" ipt where ipt."InterfacePanelTemplateID" = wt."InterfacePanelTemplateID" and ip."InterfacePanelTemplateVersionNumber" = wt."InterfacePanelTemplateVersionNumber" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber;

  --Tree Structure Action mapping
  INSERT INTO
  public."WorkflowTreeStructureAction"
  (
  "WorkflowTreeStructureActionID",
  "WorkflowTreeStructureID",
  "IsVisible" ,
  "IsActive" ,
  "IsDeleted",
  "WorkflowActionID",
  "ConditionString"
  )
  select
  wt."WorkflowTreeStructureActionTemplateID",
  wtst."WorkflowTreeStructureTemplateID",
  wt."IsVisible",
  wt."IsActive" ,
  wt."IsDeleted",
  wa."WorkflowActionID",
  wt."ConditionString"
  from "WorkflowTreeStructureActionTemplate" wt
  Left JOIN "WorkflowTreeStructureTemplate" wtst on wt."WorkflowTreeStructureTemplateID" = wtst."WorkflowTreeStructureTemplateID"
  Left Join "WorkflowTreeStructure" wts on wtst."WorkflowTreeStructureTemplateID" = wts."WorkflowTreeStructureID"
  left outer join "WorkflowAction" wa on wa."WorkflowID" = WorkflowID   and wa."WorkflowVersionNumber" = WorkflowVersionNumber
  and wa."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."WorkflowActionTemplateID" limit 1)
  where wtst."WorkflowTemplateID" = WorkflowTemplateID and wtst."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber;

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_newid (OID = 16567) :
--
CREATE FUNCTION public.fn_newid (
)
RETURNS varchar
AS
$body$
	SELECT LOWER(
        REPLACE(
        CAST(uuid_generate_v1() As varchar(50))
            , '-','')
    );

$body$
LANGUAGE sql;
--
-- Definition for function truncate_tables (OID = 16568) :
--
CREATE FUNCTION public.truncate_tables (
  username character varying
)
RETURNS void
AS
$body$
DECLARE
    statements CURSOR FOR
        SELECT tablename FROM pg_tables
        WHERE tableowner = username AND schemaname = 'public';
BEGIN
    FOR stmt IN statements LOOP
        EXECUTE 'TRUNCATE TABLE ' || quote_ident(stmt.tablename) || ' CASCADE;';
    END LOOP;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function Plan (OID = 16569) :
--
SET search_path = public_audit, pg_catalog;
CREATE FUNCTION public_audit."Plan" (
)
RETURNS trigger
AS
$body$
DECLARE
    v_old public."Plan"%ROWTYPE;
    v_new public."Plan"%ROWTYPE;
    v_ret public."Plan"%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO public_audit."Plan" (
        "PlanID",
 "PlanVersionNumber",
 "Name",
 "Description",
 "InvoiceName",
 "Price",
 "Period",
 "TrialPeriod",
 "PeriodUnitID",
 "TrialPeriodUnitID",
 "FreeQuantity",
 "SetupCost",
 "DowngradePenalty",
 "CreatedOn",
 "CreatedBy",
 "IsActive",
 "IsDeleted",
 "CountryCode",
 "CurrencyCode",
 "CancellationPeriod",
 "CancellationPeriodUnitID",
 "IsFree",
 "HasInfinitePeriods",
 "ParentID",
 "PlanTemplateID",
 "PlanTemplateVersionNumber",
 "PlanStatusID",
 "IsTransactionBased",
 "CoolOffPeriod",
 "CoolOffPeriodUnitID",
 "RenewalPrice",
 "RenewalPercentage",
 "RenewalIsPercentageOfOriginalPrice",
 "HasForwardCycleFee",
 "ForwardCycleFee",
 "ForwardCycleFreeIsSameAsPrice",
 "RenewalOfferPeriod",
 "RenewalOfferPeriodUnitID",
 "ForwardCycleFeePeriod",
 "ForwardCycleFeePeriodUnitID",
 "HasRenewalOffer",
 "PriceDailyProRata",
 "IsAutoRenew",
 "AutoRenewDecisionPeriod",
 "AutoRenewDecisionUnitID",
 "AutoRenewPeriod",
 "AutoRenewPeriodUnitID",
 "PlanGroupID",
 "PlanTypeID",
 "PlanCategoryID",
 "ModifiedOn",
 "ModifiedBy",
        operation
    )
    VALUES((v_old).*, TG_OP);
    RETURN v_ret;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function ProductDetail (OID = 16570) :
--
CREATE FUNCTION public_audit."ProductDetail" (
)
RETURNS trigger
AS
$body$
DECLARE
    v_old public."ProductDetail"%ROWTYPE;
    v_new public."ProductDetail"%ROWTYPE;
    v_ret public."ProductDetail"%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO public_audit."ProductDetail" (

        "ProductDetailID",
 "Name",
 "Description",
 "ProductID",
 "IsActive",
 "IsDeleted",
 "ShortDescription",
 "LongDescription",
 "MetaKeywords",
 "MetaDescription",
 "MetaTitle",
 "RequireOtherProducts",
 "AutomaticallyAddRequiredProducts",
 "HasUserAgreement",
 "UserAgreementText",
 "IsRecurring",
 "RecurringCycleLength",
 "RecurringCyclePeriodID",
 "RecurringTotalCycle",
 "IsTaxExempt",
 "TaxCategoryID",
 "OrderMinimumQuantity",
 "OrderMaximumQuantity",
 "CallForPrice",
 "Price",
 "ProductCost",
 "CustomerEntersPrice",
 "HasTierPrices",
 "HasDiscountsApplied",
 "MinimumCustomerEnteredPrice",
 "MaximumCustomerEnteredPrice",
 "DisplayOrder",
 "AvailableStartDate",
 "AvailableEndDate",
 "ProductTypeID",
 "ProductSubTypeID",
 "ProductCategoryID",
 "ProductSubCategoryID",
 "ProductVersionID",
 "CurrencyCode",
 "CurrencyRate",
 "CurrencyRateDate",
 "CurrencyRateToGBP",
 "CurrencyRateToUSD",
 "InvoiceName",
 "IsDepositProduct",
        operation
    )
    VALUES( (v_old).*, TG_OP);
    RETURN v_ret;
END;
$body$
LANGUAGE plpgsql;
--
-- Structure for table logged_actions (OID = 16571) :
--
SET search_path = audit, pg_catalog;
CREATE TABLE audit.logged_actions (
    event_id bigserial NOT NULL,
    schema_name text NOT NULL,
    table_name text NOT NULL,
    relid oid NOT NULL,
    session_user_name text,
    action_tstamp_tx timestamp with time zone NOT NULL,
    action_tstamp_stm timestamp with time zone NOT NULL,
    action_tstamp_clk timestamp with time zone NOT NULL,
    transaction_id bigint,
    application_name text,
    client_addr inet,
    client_port integer,
    client_query text NOT NULL,
    action text NOT NULL,
    row_data public.hstore,
    changed_fields public.hstore,
    statement_only boolean NOT NULL,
    CONSTRAINT logged_actions_action_check CHECK ((action = ANY (ARRAY['I'::text, 'D'::text, 'U'::text, 'T'::text])))
)
WITH (oids = false);
--
-- Structure for table LegalOrganisationDetails (OID = 16580) :
--
SET search_path = legal, pg_catalog;
CREATE TABLE legal."LegalOrganisationDetails" (
    "OrganisationID" uuid NOT NULL,
    "IsVATRegistered" boolean DEFAULT false NOT NULL,
    "VATNumber" varchar(50) NOT NULL,
    "IsCompanyHouseRegistered" boolean DEFAULT false NOT NULL,
    "RegisteredCompanyNumber" varchar(100),
    "PartnersCount" integer,
    "RegisteredPractitionersCount" integer,
    "StaffCount" integer,
    "MonthlyCompletionsCount" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Account (OID = 16587) :
--
SET search_path = public, pg_catalog;
CREATE TABLE public."Account" (
    "AccountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "AccountName" varchar(100) NOT NULL,
    "CountryTypeID" integer NOT NULL,
    "AccountClassificationTypeID" integer,
    "CustomerTypeID" integer,
    "BusinessTypeID" integer,
    "PreferredContactMethodID" integer,
    "IndustryTypeID" integer,
    "AccountTypeID" integer NOT NULL,
    "AccountSubTypeID" integer,
    "Description" varchar,
    "EmailAddress1" varchar,
    "EmailAddress2" varchar,
    "EmailAddress3" varchar,
    "DoNotPhone" boolean DEFAULT false,
    "DoNotEmail" boolean DEFAULT false,
    "Fax" varchar(100),
    "IsPrivate" boolean DEFAULT false NOT NULL,
    "Telephone1" varchar(100),
    "Telephone2" varchar(100),
    "Telephone3" varchar(100),
    "StateTypeID" integer NOT NULL,
    "OwnerID" uuid NOT NULL,
    "ContactID" uuid,
    "ParentAccountID" uuid,
    "MasterID" uuid,
    "DoNotTelephone" boolean DEFAULT false,
    "MobileNumber1" varchar(100),
    "MobileNumber2" varchar(100),
    "MobileNumber3" varchar(100),
    "ParentID" uuid,
    "AccountCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AccountRelationshipTypeID" integer,
    "ContactOrganisationID" uuid,
    "ParentOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table Actor (OID = 16600) :
--
CREATE TABLE public."Actor" (
    "ActorID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ActorName" varchar(300) NOT NULL,
    "ActorDescription" varchar(2000),
    "ActorTypeID" integer,
    "ActorSubTypeID" integer,
    "ActorCategoryID" integer,
    "ActorSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table ActorClaimRoleMapping (OID = 16610) :
--
CREATE TABLE public."ActorClaimRoleMapping" (
    "ActorClaimRoleMappingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ActorID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Address (OID = 16616) :
--
CREATE TABLE public."Address" (
    "AddressID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(100) NOT NULL,
    "PrimaryContactName" varchar(100),
    "Line1" varchar(500) NOT NULL,
    "Line2" varchar(500),
    "Line3" varchar(500),
    "City" varchar(200),
    "StateOrProvince" varchar(200),
    "County" varchar(200),
    "Country" varchar(200),
    "PostOfficeBox" varchar(200),
    "PostalCode" varchar(200),
    "UTCOffSet" varchar(200),
    "Latitude" double precision,
    "Longitude" double precision,
    "Telephone1" varchar(200),
    "Telephone2" varchar(200),
    "Telephone3" varchar(200),
    "Fax" varchar(200),
    "ParentID" uuid NOT NULL,
    "AddressTypeID" integer NOT NULL,
    "AddressNumber" integer DEFAULT 0 NOT NULL,
    "IsPrimaryAddress" boolean DEFAULT false,
    "AddressCategoryID" integer,
    "AddressSubTypeID" integer,
    "BuildingName" varchar(500),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Order" integer,
    "CountryCode" varchar(300),
    "AdditionalAddressInformation" varchar(1000),
    "Town" varchar(200)
)
WITH (oids = false);
--
-- Structure for table AddressChronology (OID = 16627) :
--
CREATE TABLE public."AddressChronology" (
    "AddressChronologyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid NOT NULL,
    "DataFrom" timestamp without time zone NOT NULL,
    "DateTo" timestamp without time zone,
    "IsCurrentAddress" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ApplicationStage (OID = 16634) :
--
CREATE TABLE public."ApplicationStage" (
    "ApplicationStageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(50) NOT NULL,
    "Description" varchar(500),
    "Order" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ApplicationStageWorkflow (OID = 16644) :
--
CREATE TABLE public."ApplicationStageWorkflow" (
    "ApplicationStageWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ApplicationStageID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "VersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Artefact (OID = 16648) :
--
CREATE TABLE public."Artefact" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactClaim (OID = 16657) :
--
CREATE TABLE public."ArtefactClaim" (
    "ArtefactClaimID" uuid NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactRoleID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ArtefactClaimTemplate (OID = 16662) :
--
CREATE TABLE public."ArtefactClaimTemplate" (
    "ArtefactClaimTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid,
    "ArtefactTemplateVersionNumber" integer,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactRoleTemplateID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ArtefactDependency (OID = 16667) :
--
CREATE TABLE public."ArtefactDependency" (
    "ArtefactDependencyID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "DependencyArtefactID" uuid NOT NULL,
    "DependencyArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactDependencyTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyStatusType (OID = 16672) :
--
CREATE TABLE public."ArtefactDependencyStatusType" (
    "ArtefactDependencyStatusTypeID" uuid NOT NULL,
    "ArtefactDependencyID" uuid,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "DependencyCanBeCreated" boolean DEFAULT false,
    "DependencyCanBeEdited" boolean DEFAULT false NOT NULL,
    "DependencyCanBeDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyStatusTypeTemplate (OID = 16680) :
--
CREATE TABLE public."ArtefactDependencyStatusTypeTemplate" (
    "ArtefactDependencyStatusTypeTemplate" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ArtefactDependencyTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "StatusTypeValueTemplateID" uuid,
    "DependencyCanBeCreated" boolean DEFAULT true NOT NULL,
    "DependencyCanBeEdited" boolean DEFAULT false NOT NULL,
    "DependencyCanBeDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyTemplate (OID = 16689) :
--
CREATE TABLE public."ArtefactDependencyTemplate" (
    "ArtefactDependencyTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "DependencyArtefactTemplateID" uuid NOT NULL,
    "DependencyArtefactTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactNotificationConstruct (OID = 16694) :
--
CREATE TABLE public."ArtefactNotificationConstruct" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ArtefactNotificationConstructID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactNotificationConstructTemplate (OID = 16699) :
--
CREATE TABLE public."ArtefactNotificationConstructTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ArtefactNotificationConstructTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactProduct (OID = 16704) :
--
CREATE TABLE public."ArtefactProduct" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactProductTemplate (OID = 16709) :
--
CREATE TABLE public."ArtefactProductTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactRole (OID = 16714) :
--
CREATE TABLE public."ArtefactRole" (
    "ArtefactRoleID" uuid NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactRoleTemplate (OID = 16722) :
--
CREATE TABLE public."ArtefactRoleTemplate" (
    "ArtefactRoleTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid,
    "ArtefactTemplateVersionNumber" integer,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactStatusType (OID = 16730) :
--
CREATE TABLE public."ArtefactStatusType" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactStatusTypeTemplate (OID = 16733) :
--
CREATE TABLE public."ArtefactStatusTypeTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactSubscription (OID = 16736) :
--
CREATE TABLE public."ArtefactSubscription" (
    "ArtefactSubscriptionID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactSubscriptionTemplate (OID = 16741) :
--
CREATE TABLE public."ArtefactSubscriptionTemplate" (
    "ArtefactSubscriptionTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionTemplateID" uuid NOT NULL,
    "PlanSubscriptionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactTemplate (OID = 16746) :
--
CREATE TABLE public."ArtefactTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactWorkflow (OID = 16755) :
--
CREATE TABLE public."ArtefactWorkflow" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ArtefactWorkflowID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactWorkflowTemplate (OID = 16760) :
--
CREATE TABLE public."ArtefactWorkflowTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ArtefactWorkflowTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Attachment (OID = 16765) :
--
CREATE TABLE public."Attachment" (
    "AttachmentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "MimeType" varchar(256),
    "Body" bytea,
    "Subject" varchar(2000),
    "FileName" varchar(2000),
    "FileSize" integer,
    "AttachmentDetailID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table AttachmentDetail (OID = 16774) :
--
CREATE TABLE public."AttachmentDetail" (
    "AttachmentDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid,
    "AttachmentTypeID" integer NOT NULL,
    "AttachmentSubTypeID" integer,
    "AttachmentCategoryID" integer,
    "RepositoryStructureID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table AttachmentDetailGroup (OID = 16780) :
--
CREATE TABLE public."AttachmentDetailGroup" (
    "AttachmentDetailGroupID" serial NOT NULL,
    "AttachmentDetailID" uuid NOT NULL,
    "OrganisationGroupID" uuid,
    "OrganisationExternalGroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table AttachmentDetailRole (OID = 16787) :
--
CREATE TABLE public."AttachmentDetailRole" (
    "AttachmentDetailID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "OrganisationExternalRoleID" uuid,
    "AttachmentDetailRoleID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BankSortCode (OID = 16794) :
--
CREATE TABLE public."BankSortCode" (
    "SortCode" varchar NOT NULL,
    "Address" varchar(2000) NOT NULL,
    "BankName" varchar(300) NOT NULL
)
WITH (oids = false);
--
-- Structure for table Billing (OID = 16800) :
--
CREATE TABLE public."Billing" (
    "BillingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BillingPeriod" integer NOT NULL,
    "BillingPeriodUnitID" integer NOT NULL,
    "BillingLagPeriod" integer,
    "BillingLagPeriodUnitID" integer,
    "BillingPeriodDayOfMonth" integer,
    "DelayedBillingPeriod" integer,
    "DelayedBillingPeriodUnitID" integer,
    "HasDelayedBilling" boolean DEFAULT false,
    "BillingTemplateID" uuid,
    "NumberOfBillingPeriods" integer,
    "InvoiceToProcessingDelayPeriod" integer,
    "InvoiceToProcessingDelayPeriodUnitID" integer,
    "InvoiceNotificationConstructID" uuid,
    "InvoiceNotificationConstructVersionNumber" integer,
    "EstimatedProcessingPeriod" integer,
    "EstimatedProcessingPeriodUnitID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BillingTemplate (OID = 16807) :
--
CREATE TABLE public."BillingTemplate" (
    "BillingTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BillingPeriod" integer NOT NULL,
    "BillingPeriodUnitID" integer NOT NULL,
    "ParentID" uuid,
    "BillingLagPeriod" integer,
    "BillingLagPeriodUnitID" integer,
    "BillingPeriodDayOfMonth" integer,
    "DelayedBillingPeriod" integer,
    "DelayedBillingPeriodUnitID" integer,
    "HasDelayedBilling" boolean DEFAULT false,
    "NumberOfBillingPeriods" integer,
    "InvoiceToProcessingDelayPeriod" integer,
    "InvoiceToProcessingDelayPeriodUnitID" integer,
    "InvoiceNotificationConstructTemplateID" uuid,
    "InvoiceNotificationConstructTemplateVersionNumber" integer,
    "EstimatedProcessingPeriod" integer,
    "EstimatedProcessingPeriodUnitID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Bucket (OID = 16814) :
--
CREATE TABLE public."Bucket" (
    "BucketID" uuid NOT NULL,
    "BucketName" varchar(500) NOT NULL,
    "BucketDescription" varchar(5000),
    "BucketTypeID" integer,
    "BucketSubTypeID" integer,
    "BucketCategoryID" integer,
    "BucketSubCategoryID" integer,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BucketTemplate (OID = 16823) :
--
CREATE TABLE public."BucketTemplate" (
    "BucketTemplateID" uuid NOT NULL,
    "BucketName" varchar(500) NOT NULL,
    "BucketDescription" varchar(5000),
    "BucketTypeID" integer,
    "BucketSubTypeID" integer,
    "BucketCategoryID" integer,
    "BucketSubCategoryID" integer,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusMessage (OID = 16832) :
--
CREATE TABLE public."BusMessage" (
    "MessageId" uuid NOT NULL,
    "CorrelationId" uuid NOT NULL,
    "BusMessageID" uuid NOT NULL,
    "ConversationId" uuid NOT NULL,
    "TimeSent" timestamp without time zone,
    "EnclosedMessageTypes" varchar NOT NULL,
    "WinIdName" varchar NOT NULL,
    "ProcessingMachine" varchar NOT NULL,
    "ProcessingStarted" timestamp without time zone,
    "BusMessageTypeID" integer NOT NULL,
    "MessageSentFrom" varchar(300),
    "Source" varchar(300),
    "ParentID" uuid,
    "EventReference" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table BusMessageContent (OID = 16838) :
--
CREATE TABLE public."BusMessageContent" (
    "BusMessageContentID" integer DEFAULT nextval(('public.busmessagecontent_busmessagecontentid_seq'::text)::regclass) NOT NULL,
    "BusMessageContent" bytea NOT NULL,
    "BusMessageID" uuid NOT NULL,
    "BusMessageContentType" varchar(500) NOT NULL,
    "BusMessageHeader" json
)
WITH (oids = false);
--
-- Structure for table BusMessageProcessLog (OID = 16845) :
--
CREATE TABLE public."BusMessageProcessLog" (
    "BusMessageID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "BusMessageProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProcessDetail" json,
    "ProcessMessage" varchar(2000),
    "ParentID" uuid,
    "BusMessageSubscriber" varchar(300) NOT NULL,
    "BusMessageHandler" varchar(300) NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "HasError" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTask (OID = 16856) :
--
CREATE TABLE public."BusTask" (
    "BusTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskHandlerID" uuid NOT NULL,
    "BusTaskVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTaskHandler (OID = 16866) :
--
CREATE TABLE public."BusTaskHandler" (
    "BusTaskHandlerID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "ObjectTypeName" varchar(500) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectTypeAssembly" varchar(300),
    "MessageTypeName" varchar(300),
    "MessageTypeAssembly" varchar(300),
    "HandlerMessageTypeName" varchar(500),
    "HandlerMessageTypeAssembly" varchar(500),
    "IsHandlerBasedTask" boolean DEFAULT false,
    "NumberOfRetries" integer DEFAULT 1,
    "TaskDataHasExpiry" boolean DEFAULT false NOT NULL,
    "TaskDataExpiryPeriodUnitID" integer,
    "TaskDataExpiryPeriod" integer,
    "DefaultProcessDataTypeID" integer,
    "DefaultProcessDataCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table BusTaskSchedule (OID = 16878) :
--
CREATE TABLE public."BusTaskSchedule" (
    "BusTaskScheduleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BusTaskID" uuid NOT NULL,
    "IntervalInMinutes" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTaskScheduleProcessLog (OID = 16885) :
--
CREATE TABLE public."BusTaskScheduleProcessLog" (
    "CreatedOn" timestamp without time zone NOT NULL,
    "HasError" boolean DEFAULT false NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "ProcessMessage" varchar(2000),
    "ProcessDetail" json,
    "BusTaskScheduleID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "BusTaskScheduleProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ClassificationType (OID = 16895) :
--
CREATE TABLE public."ClassificationType" (
    "ClassificationTypeID" serial NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar,
    "ClassificationTypeCategoryID" integer NOT NULL,
    "ParentClassificationTypeCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ClassificationTypeCategory (OID = 16903) :
--
CREATE TABLE public."ClassificationTypeCategory" (
    "ClassificationTypeCategoryID" serial NOT NULL,
    "Name" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table CompanyHouse (OID = 16912) :
--
CREATE TABLE public."CompanyHouse" (
    companyname varchar(250) NOT NULL,
    companynumber varchar(25),
    "regaddress.careof" varchar(50),
    "regaddress.pobox" varchar(25),
    "regaddress.addressline1" varchar(100),
    " regaddress.addressline2" varchar(50),
    "regaddress.posttown" varchar(50),
    "regaddress.county" varchar(50),
    "regaddress.country" varchar(25),
    "regaddress.postcode" varchar(25),
    companycategory varchar(100),
    companystatus varchar(50),
    countryoforigin varchar(25),
    dissolutiondate varchar(25),
    incorporationdate varchar(25),
    "accounts.accountrefday" varchar(25),
    "accounts.accountrefmonth" varchar(25),
    "accounts.nextduedate" varchar(25),
    "accounts.lastmadeupdate" varchar(25),
    "accounts.accountcategory" varchar(50),
    "returns.nextduedate" varchar(25),
    "returns.lastmadeupdate" varchar(25),
    "mortgages.nummortcharges" integer,
    "mortgages.nummortoutstanding" integer,
    "mortgages.nummortpartsatisfied" integer,
    "mortgages.nummortsatisfied" integer,
    "siccode.sictext_1" varchar(250),
    "siccode.sictext_2" varchar(250),
    "siccode.sictext_3" varchar(100),
    "siccode.sictext_4" varchar(100),
    "limitedpartnerships.numgenpartners" integer,
    "limitedpartnerships.numlimpartners" integer,
    uri varchar(50),
    "previousname_1.condate" varchar(25),
    " previousname_1.companyname" varchar(100),
    " previousname_2.condate" varchar(25),
    " previousname_2.companyname" varchar(50),
    "previousname_3.condate" varchar(25),
    " previousname_3.companyname" varchar(50),
    "previousname_4.condate" varchar(25),
    " previousname_4.companyname" varchar(25),
    "previousname_5.condate" varchar(25),
    " previousname_5.companyname" varchar(50),
    "previousname_6.condate" varchar(25),
    " previousname_6.companyname" varchar(25),
    "previousname_7.condate" varchar(25),
    " previousname_7.companyname" varchar(25),
    "previousname_8.condate" varchar(25),
    " previousname_8.companyname" varchar(25),
    "previousname_9.condate" varchar(25),
    " previousname_9.companyname" varchar(25),
    "previousname_10.condate" varchar(25),
    " previousname_10.companyname" varchar(25)
)
WITH (oids = false);
--
-- Structure for table ComponentTier (OID = 16918) :
--
CREATE TABLE public."ComponentTier" (
    "ComponentTierID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TotalValueLowerBound" numeric(30,8),
    "TotalValueUpperBound" numeric(30,8),
    "QuantityCountLowerBound" integer,
    "QuantityCountUpperBound" integer,
    "IsPercentageBased" boolean DEFAULT false NOT NULL,
    "TierPrice" numeric(30,8),
    "TierPercentage" numeric(30,8),
    "ApplyToTotal" boolean DEFAULT false NOT NULL,
    "ApplyOnPaymentMethodTypeID" integer,
    "ApplyPerTransaction" boolean DEFAULT false NOT NULL,
    "Name" varchar(400),
    "Description" varchar(2000),
    "Order" integer NOT NULL,
    "TierOrder" integer,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "HasNoUpperBound" boolean DEFAULT false NOT NULL,
    "ParentVersionNumber" integer,
    "ApplyOnPaymentCardTypeID" integer
)
WITH (oids = false);
--
-- Structure for table ComponentTierTemplate (OID = 16931) :
--
CREATE TABLE public."ComponentTierTemplate" (
    "ComponentTierTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TotalValueLowerBound" numeric(30,8),
    "TotalValueUpperBound" numeric(30,8),
    "QuantityCountLowerBound" integer,
    "QuantityCountUpperBound" integer,
    "IsPercentageBased" boolean DEFAULT false NOT NULL,
    "TierPrice" numeric(30,8),
    "TierPercentage" numeric(30,8),
    "ApplyToTotal" boolean DEFAULT false NOT NULL,
    "ApplyOnPaymentMethodTypeID" integer,
    "ApplyPerTransaction" boolean DEFAULT false NOT NULL,
    "Name" varchar(400),
    "Description" varchar(2000),
    "Order" integer NOT NULL,
    "TierOrder" integer,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "HasNoUpperBound" boolean DEFAULT false NOT NULL,
    "ParentVersionNumber" integer,
    "ApplyOnPaymentCardTypeID" integer
)
WITH (oids = false);
--
-- Structure for table Contact (OID = 16944) :
--
CREATE TABLE public."Contact" (
    "ContactID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ContactName" varchar(100) NOT NULL,
    "MasterContactID" uuid,
    "ParentID" uuid NOT NULL,
    "OwnerID" uuid,
    "CustomerTypeID" varchar,
    "PreferredContactMethodID" integer,
    "IsBackOfficeCustomer" boolean DEFAULT false,
    "Salutation" varchar(100),
    "JobTitle" varchar(100),
    "FirstName" varchar(100),
    "Department" varchar(100),
    "NickName" varchar(100),
    "MiddleName" varchar(100),
    "LastName" varchar(100),
    "BirthDate" timestamp without time zone,
    "Description" varchar,
    "GenderTypeID" integer,
    "HasChildren" boolean,
    "EducationTypeID" integer,
    "WebSiteURL" varchar,
    "EmailAddress1" varchar(200),
    "EmailAddress2" varchar(200),
    "EmailAddress3" varchar(200),
    "AssistantName" varchar(200),
    "AssistantPhone" varchar(200),
    "ManagerName" varchar(200),
    "ManagerPhone" varchar(200),
    "CountryTypeID" integer,
    "DoNotFax" boolean,
    "DoNotEmail" boolean DEFAULT false,
    "DoNotTelephone" boolean DEFAULT false,
    "IsPrivate" boolean DEFAULT false,
    "Telephone1" varchar(50),
    "Telephone2" varchar(50),
    "Telephone3" varchar(50),
    "Fax" varchar(50),
    "MobileNumber1" varchar(50),
    "MobileNumber2" varchar(50),
    "MobileNumber3" varchar(50),
    "OrganisationUnitID" integer,
    "ParentContactID" uuid,
    "IsPrimaryContact" boolean DEFAULT false NOT NULL,
    "ContactTypeID" integer,
    "ContactSubTypeID" integer,
    "ContactCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "FirmName" varchar(500)
)
WITH (oids = false);
--
-- Structure for table ContactName (OID = 16958) :
--
CREATE TABLE public."ContactName" (
    "ContactNameID" uuid NOT NULL,
    "ContactID" uuid NOT NULL,
    "SalutationTypeID" integer NOT NULL,
    "FirstName" varchar(200) NOT NULL,
    "MiddleName" varchar(200) NOT NULL,
    "LastName" varchar(200) NOT NULL,
    "NickName" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ContactPhone (OID = 16966) :
--
CREATE TABLE public."ContactPhone" (
    "ContactPhoneId" integer NOT NULL,
    "ContactID" uuid,
    "PhoneTypeID" integer NOT NULL,
    "PhoneNumber" integer NOT NULL,
    "CountryCode" varchar(15),
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ContactRegulator (OID = 16972) :
--
CREATE TABLE public."ContactRegulator" (
    "ContactID" uuid NOT NULL,
    "RegulatorID" integer DEFAULT nextval(('public.contactregulator_regulatorid_seq'::text)::regclass) NOT NULL,
    "RegulatorNumber" varchar(50),
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "DateQualified" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RegulatorName" varchar(500) NOT NULL,
    "RegulatorOtherName" varchar(500)
)
WITH (oids = false);
--
-- Structure for table CountryCode (OID = 16978) :
--
CREATE TABLE public."CountryCode" (
    "CountryCode" varchar(300) NOT NULL,
    "CountryName" varchar(400) NOT NULL,
    "CurrencyCode" varchar(30)
)
WITH (oids = false);
--
-- Structure for table CountryDeduction (OID = 16984) :
--
CREATE TABLE public."CountryDeduction" (
    "CountryCode" varchar(300) NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsAppliedToAllOrders" boolean DEFAULT true NOT NULL,
    "DeductionID" uuid NOT NULL,
    "CountryDeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table CountryDeductionTemplate (OID = 16991) :
--
CREATE TABLE public."CountryDeductionTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsAppliedToAllOrders" boolean DEFAULT true NOT NULL,
    "CountryDeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table CurrencyCode (OID = 16998) :
--
CREATE TABLE public."CurrencyCode" (
    "CurrencyCode" varchar(150) NOT NULL,
    "CurrencyName" varchar(400) NOT NULL
)
WITH (oids = false);
--
-- Structure for table CurrencyRate (OID = 17004) :
--
CREATE TABLE public."CurrencyRate" (
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric(30,8) NOT NULL,
    "CurrencyRateToGBP" numeric(30,8),
    "CurrencyRateToUSD" numeric(30,8) NOT NULL,
    "CurrencyRateID" integer DEFAULT nextval('"CurrencyRate_currencyrateid_seq"'::regclass) NOT NULL
)
WITH (oids = false);
--
-- Structure for table Deduction (OID = 17009) :
--
CREATE TABLE public."Deduction" (
    "DeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTypeID" integer,
    "DeductionSubTypeID" integer,
    "DeductionCategoryID" integer,
    "DeductionSubCategoryID" integer,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPercentageBased" boolean DEFAULT true NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsTierDeduction" boolean DEFAULT false NOT NULL,
    "IsCheckoutDeduction" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "DeductionTemplateID" uuid,
    "DeductionTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table DeductionComponentTier (OID = 17021) :
--
CREATE TABLE public."DeductionComponentTier" (
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionComponentTierTemplate (OID = 17024) :
--
CREATE TABLE public."DeductionComponentTierTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionProduct (OID = 17027) :
--
CREATE TABLE public."DeductionProduct" (
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionProductTemplate (OID = 17030) :
--
CREATE TABLE public."DeductionProductTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionTemplate (OID = 17033) :
--
CREATE TABLE public."DeductionTemplate" (
    "DeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTypeID" integer,
    "DeductionSubTypeID" integer,
    "DeductionCategoryID" integer,
    "DeductionSubCategoryID" integer,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPercentageBased" boolean DEFAULT true NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsTierDeduction" boolean DEFAULT false NOT NULL,
    "IsCheckoutDeduction" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisation (OID = 17045) :
--
CREATE TABLE public."DefaultOrganisation" (
    "DefaultOrganisationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "DefaultOrganisationTemplateID" uuid,
    "DefaultOrganisationTemplateVersionNumber" integer,
    "OrganisationTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationArtefact (OID = 17054) :
--
CREATE TABLE public."DefaultOrganisationArtefact" (
    "DefaultOrganisationID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationArtefactTemplate (OID = 17059) :
--
CREATE TABLE public."DefaultOrganisationArtefactTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBranch (OID = 17064) :
--
CREATE TABLE public."DefaultOrganisationBranch" (
    "DefaultOrganisationBranchID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "BranchName" varchar(30),
    "BranchSubType" integer,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBranchTemplate (OID = 17068) :
--
CREATE TABLE public."DefaultOrganisationBranchTemplate" (
    "DefaultOrganisationBranchTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "BranchName" varchar(200),
    "BranchSubType" integer NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBucket (OID = 17072) :
--
CREATE TABLE public."DefaultOrganisationBucket" (
    "DefaultOrganisationID" uuid NOT NULL,
    "BucketTemplateID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBucketTemplate (OID = 17075) :
--
CREATE TABLE public."DefaultOrganisationBucketTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "BucketTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroup (OID = 17078) :
--
CREATE TABLE public."DefaultOrganisationGroup" (
    "DefaultOrganisationGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "GroupName" varchar(300),
    "GroupDescription" varchar(2000),
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "ParentID" uuid,
    "GroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupRole (OID = 17088) :
--
CREATE TABLE public."DefaultOrganisationGroupRole" (
    "DefaultOrganisationGroupID" uuid NOT NULL,
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupRoleTemplate (OID = 17093) :
--
CREATE TABLE public."DefaultOrganisationGroupRoleTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid NOT NULL,
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTarget (OID = 17098) :
--
CREATE TABLE public."DefaultOrganisationGroupTarget" (
    "DefaultOrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTargetTemplate (OID = 17103) :
--
CREATE TABLE public."DefaultOrganisationGroupTargetTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTemplate (OID = 17108) :
--
CREATE TABLE public."DefaultOrganisationGroupTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "GroupName" varchar(300),
    "GroupDescription" varchar(2000),
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "ParentID" uuid,
    "GroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationLedger (OID = 17118) :
--
CREATE TABLE public."DefaultOrganisationLedger" (
    "DefaultOrganisationLedgerID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountName" varchar(200) NOT NULL,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationLedgerTemplate (OID = 17126) :
--
CREATE TABLE public."DefaultOrganisationLedgerTemplate" (
    "DefaultOrganisationLedgerTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountName" varchar(200) NOT NULL,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationModule (OID = 17134) :
--
CREATE TABLE public."DefaultOrganisationModule" (
    "DefaultOrganisationID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationModuleTemplate (OID = 17139) :
--
CREATE TABLE public."DefaultOrganisationModuleTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationNotificationConstruct (OID = 17144) :
--
CREATE TABLE public."DefaultOrganisationNotificationConstruct" (
    "DefaultOrganisationNotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationNotificationConstructTemplate (OID = 17150) :
--
CREATE TABLE public."DefaultOrganisationNotificationConstructTemplate" (
    "DefaultOrganisationNotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationPaymentMethod (OID = 17156) :
--
CREATE TABLE public."DefaultOrganisationPaymentMethod" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationPaymentMethodTemplate (OID = 17161) :
--
CREATE TABLE public."DefaultOrganisationPaymentMethodTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationProduct (OID = 17166) :
--
CREATE TABLE public."DefaultOrganisationProduct" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationProductTemplate (OID = 17171) :
--
CREATE TABLE public."DefaultOrganisationProductTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRole (OID = 17176) :
--
CREATE TABLE public."DefaultOrganisationRole" (
    "DefaultOrganisationRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "RoleName" varchar(300),
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ParentID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleClaim (OID = 17186) :
--
CREATE TABLE public."DefaultOrganisationRoleClaim" (
    "DefaultOrganisationRoleClaimID" serial NOT NULL,
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleClaimTemplate (OID = 17191) :
--
CREATE TABLE public."DefaultOrganisationRoleClaimTemplate" (
    "DefaultOrganisationRoleClaimTemplateID" integer DEFAULT nextval('"DefaultOrganisationRoleClaimT_DefaultOrganisationRoleClaimT_seq"'::regclass) NOT NULL,
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTarget (OID = 17200) :
--
CREATE TABLE public."DefaultOrganisationRoleTarget" (
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTargetTemplate (OID = 17205) :
--
CREATE TABLE public."DefaultOrganisationRoleTargetTemplate" (
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTemplate (OID = 17210) :
--
CREATE TABLE public."DefaultOrganisationRoleTemplate" (
    "DefaultOrganisationRoleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "RoleName" varchar(300),
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ParentID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationShoppingCartBlueprint (OID = 17220) :
--
CREATE TABLE public."DefaultOrganisationShoppingCartBlueprint" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ShoppingCartBlueprintID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationShoppingCartBlueprintTemplate (OID = 17225) :
--
CREATE TABLE public."DefaultOrganisationShoppingCartBlueprintTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "ShoppingCartBlueprintTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationStatusType (OID = 17230) :
--
CREATE TABLE public."DefaultOrganisationStatusType" (
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "DefaultStatusTypeValueID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationStatusTypeTemplate (OID = 17235) :
--
CREATE TABLE public."DefaultOrganisationStatusTypeTemplate" (
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "DefaultStatusTypeValueTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTarget (OID = 17240) :
--
CREATE TABLE public."DefaultOrganisationTarget" (
    "DefaultOrganisationTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTargetTemplate (OID = 17246) :
--
CREATE TABLE public."DefaultOrganisationTargetTemplate" (
    "DefaultOrganisationTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTemplate (OID = 17252) :
--
CREATE TABLE public."DefaultOrganisationTemplate" (
    "DefaultOrganisationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTarget (OID = 17261) :
--
CREATE TABLE public."DefaultOrganisationUserTarget" (
    "DefaultOrganisationUserTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "ParentID" uuid,
    "IsDefault" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTargetTemplate (OID = 17268) :
--
CREATE TABLE public."DefaultOrganisationUserTargetTemplate" (
    "DefaultOrganisationUserTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsDefault" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserType (OID = 17275) :
--
CREATE TABLE public."DefaultOrganisationUserType" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTypeTemplate (OID = 17281) :
--
CREATE TABLE public."DefaultOrganisationUserTypeTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationWorkflow (OID = 17287) :
--
CREATE TABLE public."DefaultOrganisationWorkflow" (
    "DefaultOrganisationID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationWorkflowTemplate (OID = 17292) :
--
CREATE TABLE public."DefaultOrganisationWorkflowTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitMandate (OID = 17297) :
--
CREATE TABLE public."DirectDebitMandate" (
    "DirectDebitMandateID" uuid NOT NULL,
    "DirectDebitMandateVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DirectDebitMandateTemplateID" uuid NOT NULL,
    "DirectDebitMandateTemplateVersionNumber" integer NOT NULL,
    "IsDefaultMandate" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitMandateTemplate (OID = 17306) :
--
CREATE TABLE public."DirectDebitMandateTemplate" (
    "DirectDebitMandateTemplateID" uuid NOT NULL,
    "DirectDebitMandateTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "IsDefaultMandate" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitSchedule (OID = 17315) :
--
CREATE TABLE public."DirectDebitSchedule" (
    "DirectDebitScheduleID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table Discount (OID = 17318) :
--
CREATE TABLE public."Discount" (
    "DiscountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "DiscountTypeID" integer NOT NULL,
    "DiscountPercentage" numeric(30,8),
    "DiscountAmount" numeric(30,8),
    "DiscountQuantity" integer,
    "DiscountPeriod" integer,
    "DisocuntPeriodUnitID" integer,
    "ValidTill" timestamp without time zone,
    "MaxRedemptions" integer DEFAULT 1,
    "DiscountApplyOnID" integer,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsRecurring" boolean DEFAULT false,
    "IsPercentage" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "DiscountStatusID" integer NOT NULL,
    "IsSingleProductDiscount" boolean DEFAULT false NOT NULL,
    "IsCheckoutDiscount" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscount" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountDivisor" integer DEFAULT 0 NOT NULL,
    "IsSingleProductQuantityDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscountAdditionalQuantityBased" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountAdditionalQuantity" integer DEFAULT 0 NOT NULL,
    "IsMultipleProductCombinationDiscount" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountCheapestFreeBased" boolean DEFAULT false NOT NULL,
    "HasTiers" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "ParentVersionNumber" integer,
    "OwnerOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table DiscountComponentTier (OID = 17342) :
--
CREATE TABLE public."DiscountComponentTier" (
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountComponentTierTemplate (OID = 17345) :
--
CREATE TABLE public."DiscountComponentTierTemplate" (
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountRelatedProduct (OID = 17348) :
--
CREATE TABLE public."DiscountRelatedProduct" (
    "DiscountRelatedProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountRelatedProductTemplate (OID = 17354) :
--
CREATE TABLE public."DiscountRelatedProductTemplate" (
    "DiscountRelatedProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountTemplate (OID = 17360) :
--
CREATE TABLE public."DiscountTemplate" (
    "DiscountTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "DiscountTypeID" integer NOT NULL,
    "DiscountPercentage" numeric(30,8),
    "DiscountAmount" numeric(30,8),
    "DiscountQuantity" integer,
    "DiscountDurationTypeID" integer,
    "DiscountDurationMonth" integer,
    "ValidTill" timestamp without time zone,
    "MaxRedemptions" integer DEFAULT 1,
    "DiscountApplyOnID" integer,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsRecurring" boolean DEFAULT false,
    "IsPercentage" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "DiscountStatusID" integer NOT NULL,
    "IsSingleProductDiscount" boolean DEFAULT false NOT NULL,
    "IsCheckoutDiscount" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscount" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountDivisor" integer DEFAULT 0 NOT NULL,
    "IsSingleProductQuantityDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscountAdditionalQuantityBased" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountAdditionalQuantity" integer DEFAULT 0 NOT NULL,
    "IsMultipleProductCombinationDiscount" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountCheapestFreeBased" boolean DEFAULT false NOT NULL,
    "HasTiers" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid
)
WITH (oids = false);
--
-- Structure for table ErrorCode (OID = 17384) :
--
CREATE TABLE public."ErrorCode" (
    "ErrorCodeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ErrorCode" varchar(50) NOT NULL,
    "Explanation" varchar(1000),
    "ErrorMessage" varchar(2000),
    "ErrorMapping" varchar(200),
    "Notes" varchar(2000),
    "ErrorCodeTypeID" integer,
    "ErrorCodeCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table FieldDetail (OID = 17391) :
--
CREATE TABLE public."FieldDetail" (
    "FieldDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "FieldLabelValue" varchar(2000),
    "DefaultValue" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ToolTipValue" varchar(5000),
    "ToolTipHTML" varchar(10000),
    "ToolTipIsHTML" boolean DEFAULT false NOT NULL,
    "InformationValue" varchar(5000),
    "InformationHTML" varchar(10000),
    "InformationIsHTML" boolean DEFAULT false NOT NULL,
    "HelpValue" varchar(5000),
    "HelpHTML" varchar(10000),
    "HelpIsHTML" boolean DEFAULT false NOT NULL,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "FieldTypeID" integer,
    "IconAlignmentTypeID" integer,
    "IconFileName" varchar(100),
    "IsGridColumn" boolean DEFAULT false,
    "FieldMask" varchar(10000)
)
WITH (oids = false);
--
-- Structure for table FieldDetailTemplate (OID = 17406) :
--
CREATE TABLE public."FieldDetailTemplate" (
    "FieldDetailTemplateID" uuid NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "FieldLabelValue" varchar(2000),
    "DefaultValue" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ToolTipValue" varchar(5000),
    "ToolTipHTML" varchar(10000),
    "ToolTipIsHTML" boolean DEFAULT false NOT NULL,
    "InformationValue" varchar(5000),
    "InformationHTML" varchar(10000),
    "InformationIsHTML" boolean DEFAULT false NOT NULL,
    "HelpValue" varchar(5000),
    "HelpHTML" varchar(10000),
    "HelpIsHTML" boolean DEFAULT false NOT NULL,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "FieldTypeID" integer,
    "IconAlignmentTypeID" integer,
    "IconFileName" varchar(100),
    "IsGridColumn" boolean DEFAULT false,
    "FieldMask" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table GlobalAccountingPeriod (OID = 17420) :
--
CREATE TABLE public."GlobalAccountingPeriod" (
    "GlobalAccountingPeriodID" integer DEFAULT nextval(('public.globalaccountingperiod_globalaccountingperiodid_seq'::text)::regclass) NOT NULL,
    "PeriodNumber" integer NOT NULL,
    "StartDay" integer NOT NULL,
    "EndDay" integer NOT NULL,
    "Month" integer NOT NULL,
    "Year" integer NOT NULL,
    "IsFinancialClosePeriod" boolean DEFAULT false NOT NULL,
    "IsCurrentPeriod" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table GlobalDirectDebitCollectionPeriod (OID = 17427) :
--
CREATE TABLE public."GlobalDirectDebitCollectionPeriod" (
    "GlobalDirectDebitCollectionPeriodID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PeriodNumber" integer NOT NULL,
    "CollectionDay" integer NOT NULL,
    "CollectionMonth" integer NOT NULL,
    "CollectionYear" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsCurrentPeriod" boolean DEFAULT false NOT NULL,
    "IsManuallyDrivenOnly" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table GlobalPaymentMethod (OID = 17436) :
--
CREATE TABLE public."GlobalPaymentMethod" (
    "GlobalPaymentMethodID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "PaymentMethodID" integer NOT NULL,
    "IsDefaultForOnlinePayments" boolean DEFAULT false NOT NULL,
    "Description" varchar(2000),
    "IsDefaultForOfflinePayments" boolean DEFAULT true NOT NULL,
    "DirectDebitMandateID" uuid,
    "DirectDebitMandateVersionNumber" integer,
    "IsDirectDebit" boolean DEFAULT false NOT NULL,
    "DirectDebitDefaultMonthlyPeriodNumber" integer DEFAULT 3,
    "DirectDebitMaxDaysAwaitingCollectionFromMonthPeriodNumber" integer,
    "BACSDefaultMonthlyPaymentDay" integer,
    "BACSMaxDaysAwaitingPaymentFromMonthlyPaymentDay" integer,
    "DirectDebitDefaultNumberOfNotificationDaysBeforeCollection" integer,
    "BACSDefaultNumberOfNotificationDaysBeforeExpectationOfPayment" integer
)
WITH (oids = false);
--
-- Structure for table Group (OID = 17447) :
--
CREATE TABLE public."Group" (
    "GroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "GroupName" varchar(300) NOT NULL,
    "GroupDescription" varchar(500) NOT NULL,
    "GroupTypeID" integer NOT NULL,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table GroupRole (OID = 17457) :
--
CREATE TABLE public."GroupRole" (
    "GroupID" uuid NOT NULL,
    "RoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table InterfacePanel (OID = 17463) :
--
CREATE TABLE public."InterfacePanel" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(500),
    "InterfacePanelTypeID" integer,
    "InterfacePanelSubTypeID" integer,
    "InterfacePanelCategoryID" integer,
    "InterfacePanelSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentIPID" uuid,
    "ParentIPVersionNumber" integer,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGridPanel" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "InterfacePanelLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelClaim (OID = 17474) :
--
CREATE TABLE public."InterfacePanelClaim" (
    "ClaimID" uuid NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer DEFAULT 0 NOT NULL,
    "InterfacePanelRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table InterfacePanelClaimTemplate (OID = 17480) :
--
CREATE TABLE public."InterfacePanelClaimTemplate" (
    "ClaimID" uuid NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "InterfacePanelRoleTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDOrganisationTypeUserType (OID = 17486) :
--
CREATE TABLE public."InterfacePanelFDOrganisationTypeUserType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDOrganisationTypeUserTypeTemplate (OID = 17500) :
--
CREATE TABLE public."InterfacePanelFDOrganisationTypeUserTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDValidationOrgTypeUserTypeTemplate (OID = 17514) :
--
CREATE TABLE public."InterfacePanelFDValidationOrgTypeUserTypeTemplate" (
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateID" uuid NOT NULL,
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDValidationOrganisationTypeUserType (OID = 17520) :
--
CREATE TABLE public."InterfacePanelFDValidationOrganisationTypeUserType" (
    "InterfacePanelFDValidationOrganisationTypeUserTypeID" uuid NOT NULL,
    "InterfacePanelFDValidationOrganisationTypeUserTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFDValidationOrganisationTypeUserTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetail (OID = 17526) :
--
CREATE TABLE public."InterfacePanelFieldDetail" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(2000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailOrganisationType (OID = 17540) :
--
CREATE TABLE public."InterfacePanelFieldDetailOrganisationType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailOrganisationTypeTemplate (OID = 17554) :
--
CREATE TABLE public."InterfacePanelFieldDetailOrganisationTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailTemplate (OID = 17568) :
--
CREATE TABLE public."InterfacePanelFieldDetailTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(2000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidation (OID = 17582) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidation" (
    "InterfacePanelFieldDetailValidationID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "InterfacePanelFieldDetailValidationVersion" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "InterfacePanelID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "InterfacePanelVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "FieldDetailID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
--
-- Structure for table InterfacePanelFieldDetailValidationOrganisationType (OID = 17588) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationOrganisationType" (
    "InterfacePanelFieldDetailValidationOrganisationTypeID" uuid NOT NULL,
    "InterfacePanelFieldDetailValidationOrganisationTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationOrganisationTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidationOrganisationTypeTemplate (OID = 17594) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationOrganisationTypeTemplate" (
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateID" uuid NOT NULL,
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidationTemplate (OID = 17600) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "InterfacePanelFieldDetailValidationTemplateVersion" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationTemplateID" uuid NOT NULL,
    "ValidationSubCategory" integer,
    "InterfacePanelFieldDetailValidationTemplateName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "InterfacePanelTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "InterfacePanelTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "FieldDetailTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
--
-- Structure for table InterfacePanelOrganisationType (OID = 17606) :
--
CREATE TABLE public."InterfacePanelOrganisationType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeTemplate (OID = 17612) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeUserType (OID = 17618) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeUserType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeUserTypeLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeUserTypeTemplate (OID = 17624) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeUserTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeUserTypeTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelRole (OID = 17630) :
--
CREATE TABLE public."InterfacePanelRole" (
    "InterfacePanelRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table InterfacePanelRoleTemplate (OID = 17639) :
--
CREATE TABLE public."InterfacePanelRoleTemplate" (
    "InterfacePanelRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table InterfacePanelSetting (OID = 17648) :
--
CREATE TABLE public."InterfacePanelSetting" (
    "InterfacePanelSettingID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "IsVisible" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table InterfacePanelSettingTemplate (OID = 17654) :
--
CREATE TABLE public."InterfacePanelSettingTemplate" (
    "InterfacePanelSettingTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "IsVisible" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table InterfacePanelTemplate (OID = 17660) :
--
CREATE TABLE public."InterfacePanelTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(500),
    "InterfacePanelTypeID" integer,
    "InterfacePanelSubTypeID" integer,
    "InterfacePanelCategoryID" integer,
    "InterfacePanelSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentIPTemplateID" uuid,
    "ParentIPTemplateVersionNumber" integer,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGridPanel" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "InterfacePanelTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidation (OID = 17671) :
--
CREATE TABLE public."InterfacePanelValidation" (
    "InterfacePanelValidationID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "InterfacePanelValidationVersionNumber" integer,
    "OverrideValidationMessage" varchar(1000),
    "OverrideValidationMessageHTML" varchar(1000),
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "OverrideValidationIsHTML" boolean,
    "InterfacePanelValidationName" varchar(200)
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelValidationID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelValidationVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "OverrideValidationMessage" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "OverrideValidationMessageHTML" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationSubCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "SourceErrorCodes" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "IsActive" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "IsDeleted" SET STATISTICS 0;
--
-- Structure for table InterfacePanelValidationOrganisationType (OID = 17677) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationType" (
    "InterfacePanelValidationOrganisationTypeID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeTemplate (OID = 17683) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeTemplate" (
    "InterfacePanelValidationOrganisationTypeTemplateID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeTemplateVers" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeUserType (OID = 17689) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeUserType" (
    "InterfacePanelValidationOrganisationTypeUserTypeID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeUserTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeUserTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeUserTypeTemplate (OID = 17695) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeUserTypeTemplate" (
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationTemplate (OID = 17701) :
--
CREATE TABLE public."InterfacePanelValidationTemplate" (
    "InterfacePanelValidationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer,
    "InterfacePanelValidationTemplateVersionNumber" integer NOT NULL,
    "OverrideValidationMessage" varchar(1000),
    "OverrideValidationMessageHTML" varchar(1000),
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "OverrideValidationIsHTML" boolean,
    "InterfacePanelValidationTemplateName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelValidationTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "OverrideValidationMessage" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "OverrideValidationMessageHTML" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationSubCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "SourceErrorCodes" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "IsActive" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "IsDeleted" SET STATISTICS 0;
--
-- Structure for table Invoice (OID = 17708) :
--
CREATE TABLE public."Invoice" (
    "InvoiceID" uuid NOT NULL,
    "VatNumber" varchar(200),
    "StartDate" timestamp without time zone,
    "EndDate" timestamp without time zone NOT NULL,
    "Total" numeric(30,8) NOT NULL,
    "LastReminder" timestamp without time zone,
    "Balance" numeric(30,8),
    "ParentID" uuid,
    "DueDate" timestamp without time zone,
    "CountryCode" varchar(300) NOT NULL,
    "NumberOfPaymentAttempts" integer DEFAULT 0 NOT NULL,
    "CarriedBalance" numeric(30,8),
    "InvoiceTypeID" integer,
    "InvoiceNumber" integer,
    "InvoiceName" varchar(200),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" timestamp without time zone NOT NULL,
    "CurrencyRate" numeric(30,8) DEFAULT 0 NOT NULL,
    "CurrencyRateToGBP" numeric(30,8),
    "CurrencyRateToUSD" numeric(30,8),
    "InvoiceSubTotalInclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalDiscountsInclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalDiscountsExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "PaymentMethodAdditionalFeesInclTax" numeric(30,8) NOT NULL,
    "PaymentMethodAdditionalFeesExclTax" numeric(30,8) NOT NULL,
    "TaxTotal" numeric(30,8),
    "DiscountTotal" numeric(30,8),
    "OrganisationID" uuid,
    "ShoppingCartID" uuid,
    "OrganisationAccountingPeriodID" integer,
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "InvoiceReference" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "IsFrozenPendingPayment" boolean DEFAULT false NOT NULL,
    "GlobalPaymentMethodID" uuid,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table InvoiceLineItem (OID = 17720) :
--
CREATE TABLE public."InvoiceLineItem" (
    "InvoiceLineItemID" uuid NOT NULL,
    "InvoiceID" uuid,
    "DateFrom" timestamp without time zone NOT NULL,
    "DateTo" timestamp without time zone NOT NULL,
    "SingleProductPrice" numeric(30,8) NOT NULL,
    "Quantity" numeric(30,8) NOT NULL,
    "TaxTotal" numeric(30,8),
    "Price" numeric(30,8) NOT NULL,
    "Description" varchar(2000) NOT NULL,
    "InvoiceLineItemTypeID" integer NOT NULL,
    "ParentID" uuid,
    "PriceInclTax" numeric(30,8) NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "IsCredit" boolean DEFAULT false NOT NULL,
    "IsDebit" boolean DEFAULT false NOT NULL,
    "ProductID" uuid,
    "ProductVersionID" integer,
    "PriceExclTax" numeric(30,8) NOT NULL,
    "SingleProductPriceInclTaxAndDeduct" numeric(30,8),
    "SingleProductPriceExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "DiscountTotal" numeric(30,8),
    "IsDepositProduct" boolean DEFAULT false NOT NULL,
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionPeriodID" uuid,
    "IsFrozenPendingPayment" boolean DEFAULT false NOT NULL,
    "AccountID" uuid
)
WITH (oids = false);
--
-- Structure for table InvoiceProcessLog (OID = 17733) :
--
CREATE TABLE public."InvoiceProcessLog" (
    "InvoiceID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "NotificationID" uuid,
    "InvoiceStatusDetail" varchar(2000),
    "PaidOn" timestamp without time zone,
    "IsInvoiceProcessed" boolean DEFAULT false NOT NULL,
    "IsPaid" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "ClosedOn" timestamp without time zone,
    "InvoiceAccountingStatusID" integer
)
WITH (oids = false);
--
-- Structure for table LedgerAccountBalance (OID = 17742) :
--
CREATE TABLE public."LedgerAccountBalance" (
    "LedgerAccountID" uuid NOT NULL,
    "BalanceOn" timestamp without time zone NOT NULL,
    "Balance" numeric(30,8) NOT NULL,
    "BalanceAvailableAdjusted" numeric(30,8),
    "BalanceAvailableClosing" numeric(30,8),
    "BalanceBookAdjusted" numeric(30,8),
    "BalanceBookClosing" numeric(30,8),
    "BalanceCollectedAdjusted" numeric(30,8),
    "BalanceCollectedClosing" numeric(30,8),
    "IsDebit" boolean DEFAULT false NOT NULL,
    "IsCredit" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table LedgerAccountTransaction (OID = 17747) :
--
CREATE TABLE public."LedgerAccountTransaction" (
    "LedgerAccountID" uuid NOT NULL,
    "TransactionOrderID" uuid NOT NULL,
    "BalanceOn" timestamp without time zone NOT NULL
)
WITH (oids = false);
--
-- Structure for table LinkedAccountClaims (OID = 17750) :
--
CREATE TABLE public."LinkedAccountClaims" (
    "LinkedAccount_ProviderName" varchar(30) NOT NULL,
    "LinkedAccount_ProviderAccountID" varchar(100) NOT NULL,
    "Type" varchar(150) NOT NULL,
    "Value" varchar(150) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table LinkedAccounts (OID = 17755) :
--
CREATE TABLE public."LinkedAccounts" (
    "UserAccount_ID" uuid NOT NULL,
    "ProviderName" varchar(30) NOT NULL,
    "ProviderAccountID" varchar(100) NOT NULL,
    "LastLogin" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Module (OID = 17760) :
--
CREATE TABLE public."Module" (
    "ModuleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleArtefact (OID = 17770) :
--
CREATE TABLE public."ModuleArtefact" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleArtefactTemplate (OID = 17775) :
--
CREATE TABLE public."ModuleArtefactTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleClaim (OID = 17780) :
--
CREATE TABLE public."ModuleClaim" (
    "ClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "ModuleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "ModuleRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ModuleClaimTemplate (OID = 17787) :
--
CREATE TABLE public."ModuleClaimTemplate" (
    "ClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "ModuleRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ModuleDependency (OID = 17794) :
--
CREATE TABLE public."ModuleDependency" (
    "ModuleDependencyID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "DependencyID" uuid NOT NULL,
    "DependencyVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleDependencyTemplate (OID = 17799) :
--
CREATE TABLE public."ModuleDependencyTemplate" (
    "ModuleDependencyTemplateID" uuid NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "DependencyID" uuid NOT NULL,
    "DependencyVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleNotificationConstruct (OID = 17804) :
--
CREATE TABLE public."ModuleNotificationConstruct" (
    "ModuleNotificationConstructID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleNotificationConstructTemplate (OID = 17809) :
--
CREATE TABLE public."ModuleNotificationConstructTemplate" (
    "ModuleNotificationConstructTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModulePlugin (OID = 17814) :
--
CREATE TABLE public."ModulePlugin" (
    "ModulePluginID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "PluginID" uuid NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModulePluginTemplate (OID = 17820) :
--
CREATE TABLE public."ModulePluginTemplate" (
    "ModulePluginTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "PluginTemplateID" uuid NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleProduct (OID = 17826) :
--
CREATE TABLE public."ModuleProduct" (
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleProductTemplate (OID = 17831) :
--
CREATE TABLE public."ModuleProductTemplate" (
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleRole (OID = 17836) :
--
CREATE TABLE public."ModuleRole" (
    "RoleID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleRoleTemplate (OID = 17845) :
--
CREATE TABLE public."ModuleRoleTemplate" (
    "RoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleSetting (OID = 17854) :
--
CREATE TABLE public."ModuleSetting" (
    "ModuleSettingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Value" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CanOrganisationChange" boolean DEFAULT false NOT NULL,
    "CanUserChange" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSettingTemplate (OID = 17866) :
--
CREATE TABLE public."ModuleSettingTemplate" (
    "ModuleSettingTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Value" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CanOrganisationChange" boolean DEFAULT false NOT NULL,
    "CanUserChange" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleStatusType (OID = 17878) :
--
CREATE TABLE public."ModuleStatusType" (
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleStatusTypeTemplate (OID = 17883) :
--
CREATE TABLE public."ModuleStatusTypeTemplate" (
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSubscription (OID = 17888) :
--
CREATE TABLE public."ModuleSubscription" (
    "ModuleSubscriptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSubscriptionTemplate (OID = 17895) :
--
CREATE TABLE public."ModuleSubscriptionTemplate" (
    "ModuleSubscriptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionTemplateID" uuid NOT NULL,
    "PlanSubscriptionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleTemplate (OID = 17901) :
--
CREATE TABLE public."ModuleTemplate" (
    "ModuleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflow (OID = 17911) :
--
CREATE TABLE public."ModuleWorkflow" (
    "ModuleWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ModuleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AppliesToAllOrganisations" boolean DEFAULT false NOT NULL,
    "AppliesToAllUsers" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTarget (OID = 17919) :
--
CREATE TABLE public."ModuleWorkflowTarget" (
    "ModuleWorkflowTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleWorkflowID" uuid NOT NULL,
    "OrganisationTypeID" integer,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "UserTypeID" integer,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTargetTemplate (OID = 17923) :
--
CREATE TABLE public."ModuleWorkflowTargetTemplate" (
    "ModuleWorkflowTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleWorkflowTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "UserTypeID" integer,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTemplate (OID = 17927) :
--
CREATE TABLE public."ModuleWorkflowTemplate" (
    "ModuleWorkflowTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AppliesToAllOrganisations" boolean DEFAULT false NOT NULL,
    "AppliesToAllUsers" boolean DEFAULT false NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Notification (OID = 17936) :
--
CREATE TABLE public."Notification" (
    "NotificationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "FromParentID" uuid,
    "DateSent" date NOT NULL,
    "ParentID" uuid,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ModuleNotificationConstructID" uuid,
    "ModuleNotificationConstructVersionNumber" integer,
    "IsSent" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsInternal" boolean DEFAULT false NOT NULL,
    "IsExternal" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "NotificationData" json NOT NULL,
    "NotificationStatusID" integer
)
WITH (oids = false);
--
-- Structure for table NotificationConstruct (OID = 17949) :
--
CREATE TABLE public."NotificationConstruct" (
    "NotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTypeID" integer,
    "NotificationConstructSubTypeID" integer,
    "NotificationConstructCategoryID" integer,
    "NotificationConstructSubCategoryID" integer,
    "DefaultNotificationExportFormatID" integer,
    "ExternalRelatedNotificationConstructID" uuid,
    "ExternalRelatedNotificationConstructVersionNumber" integer,
    "DefaultNotificationDeliveryMethodID" integer,
    "NotificationSubject" varchar(200),
    "NotificationTitle" varchar(300),
    "NotificationDetails" varchar(2000),
    "NotificationConstructMutatorObjectType" varchar(500),
    "NotificationReference" varchar(200),
    "NotificationAdditionalDetails" varchar(2000),
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeIncludedInBatchNotification" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructClaim (OID = 17959) :
--
CREATE TABLE public."NotificationConstructClaim" (
    "NotificationConstructClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "NotificationRoleConstructID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationConstructClaimTemplate (OID = 17965) :
--
CREATE TABLE public."NotificationConstructClaimTemplate" (
    "NotificationConstructClaimTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationConstructData (OID = 17971) :
--
CREATE TABLE public."NotificationConstructData" (
    "NotificationConstructDataID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "NotificationData" bytea,
    "NotificationDataLength" integer,
    "NotificationDataMimeType" varchar(100),
    "NotificationDataFileName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date,
    "UsesBusinessObjects" boolean DEFAULT true,
    "UsesDataSources" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table NotificationConstructDataTemplate (OID = 17983) :
--
CREATE TABLE public."NotificationConstructDataTemplate" (
    "NotificationConstructDataTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationData" bytea,
    "NotificationDataLength" integer,
    "NotificationDataMimeType" varchar(100),
    "NotificationDataFileName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date,
    "UsesBusinessObjects" boolean DEFAULT true,
    "UsesDataSources" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table NotificationConstructGroup (OID = 17995) :
--
CREATE TABLE public."NotificationConstructGroup" (
    "NotificationConstructGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupVersion" integer NOT NULL,
    "Name" varchar(200),
    "Description" varchar(200),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "NotificationConstructGroupTemplateID" uuid,
    "NotificationConstructGroupTemplateVersion" integer,
    "NotificationConstructGroupTypeID" integer,
    "NotificationConstructGroupCategoryID" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "NotificationConstructGroupID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "NotificationConstructGroupVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "Name" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "Description" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "ParentID" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupNotificationConstruct (OID = 18001) :
--
CREATE TABLE public."NotificationConstructGroupNotificationConstruct" (
    "NotificationConstructGroupNotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupNotificationConstructVersion" integer NOT NULL,
    "NotificationConstructGroupID" uuid,
    "NotificationConstructGroupVersion" integer,
    "UserTypeID" uuid,
    "NotificationConstructID" uuid NOT NULL,
    "WorkflowID" uuid,
    "WorkflowVersionNumber" integer,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(200),
    "OrganisationTypeID" integer,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupNotificationConstructID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupNotificationConstructVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "WorkflowID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "WorkflowVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "ConditionString" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupNotificationConstructTemplate (OID = 18007) :
--
CREATE TABLE public."NotificationConstructGroupNotificationConstructTemplate" (
    "NotificationConstructGroupNotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructGroupTemplateID" uuid,
    "NotificationConstructGroupTemplateVersion" integer,
    "UserTypeID" uuid,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(200),
    "OrganisationTypeID" integer,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupNotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupNotificationConstructTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "ConditionString" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupTemplate (OID = 18013) :
--
CREATE TABLE public."NotificationConstructGroupTemplate" (
    "NotificationConstructGroupTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupTemplateVersion" integer NOT NULL,
    "Name" varchar(200),
    "Description" varchar(200),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "NotificationConstructGroupTypeID" integer,
    "NotificationConstructGroupCategoryID" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "NotificationConstructGroupTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "NotificationConstructGroupTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "Name" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "Description" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "ParentID" SET STATISTICS 0;
--
-- Structure for table NotificationConstructParameter (OID = 18019) :
--
CREATE TABLE public."NotificationConstructParameter" (
    "NotificationConstructParameterID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ParameterOrBusinessObjectName" varchar(300) NOT NULL,
    "DefaultValue" varchar(2000),
    "ObjectType" varchar(300),
    "ObjectName" varchar(300),
    "ObjectNameSpace" varchar(300),
    "ObjectAssembly" varchar(300),
    "ObjectParentName" varchar(300),
    "ObjectParentNameSpace" varchar(300),
    "ObjectParentAssembly" varchar(300),
    "IsMandatory" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectParentType" varchar(300),
    "IsBusinessObject" boolean DEFAULT true,
    "BusinessObjectCategoryName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table NotificationConstructParameterTemplate (OID = 18030) :
--
CREATE TABLE public."NotificationConstructParameterTemplate" (
    "NotificationConstructParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ParameterOrBusinessObjectName" varchar(300) NOT NULL,
    "DefaultValue" varchar(2000),
    "ObjectType" varchar(300),
    "ObjectName" varchar(300),
    "ObjectNameSpace" varchar(300),
    "ObjectAssembly" varchar(300),
    "ObjectParentName" varchar(300),
    "ObjectParentNameSpace" varchar(300),
    "ObjectParentAssembly" varchar(300),
    "IsMandatory" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectParentType" varchar(300),
    "IsBusinessObject" boolean DEFAULT true,
    "BusinessObjectCategoryName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table NotificationConstructRole (OID = 18041) :
--
CREATE TABLE public."NotificationConstructRole" (
    "NotificationRoleConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructRoleTemplate (OID = 18050) :
--
CREATE TABLE public."NotificationConstructRoleTemplate" (
    "NotificationConstructRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTarget (OID = 18059) :
--
CREATE TABLE public."NotificationConstructTarget" (
    "NotificationConstructTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsSingleUser" boolean DEFAULT false NOT NULL,
    "IsOrganisationBranchOnly" boolean DEFAULT false NOT NULL,
    "IsDefaultTarget" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTargetTemplate (OID = 18068) :
--
CREATE TABLE public."NotificationConstructTargetTemplate" (
    "NotificationConstructTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsSingleUser" boolean DEFAULT false NOT NULL,
    "IsOrganisationBranchOnly" boolean DEFAULT false NOT NULL,
    "IsDefaultTarget" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTemplate (OID = 18077) :
--
CREATE TABLE public."NotificationConstructTemplate" (
    "NotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTypeID" integer,
    "NotificationConstructSubTypeID" integer,
    "NotificationConstructCategoryID" integer,
    "NotificationConstructSubCategoryID" integer,
    "DefaultNotificationExportFormatID" integer,
    "ExternalRelatedNotificationConstructTemplateID" uuid,
    "ExternalRelatedNotificationConstructTemplateVersionNumber" integer,
    "DefaultNotificationDeliveryMethodID" integer,
    "NotificationSubject" varchar(200) DEFAULT 200,
    "NotificationAdditionalDetails" varchar(2000),
    "NotificationConstructMutatorObjectType" varchar(500),
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeIncludedInBatchNotification" boolean DEFAULT false NOT NULL,
    "NotificationDetails" varchar(2000),
    "NotificationReference" varchar(200),
    "NotificationTitle" varchar(300)
)
WITH (oids = false);
--
-- Structure for table NotificationRecipient (OID = 18088) :
--
CREATE TABLE public."NotificationRecipient" (
    "NotificationRecipientID" uuid NOT NULL,
    "NotificationID" uuid NOT NULL,
    "ToParentID" uuid,
    "OrganisationID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "IsAccepted" boolean,
    "AcceptedDate" date,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationRecipientLog (OID = 18093) :
--
CREATE TABLE public."NotificationRecipientLog" (
    "NotificationRecipientID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "SentOn" timestamp without time zone,
    "NotificationExportFormatID" integer,
    "IsSent" boolean DEFAULT false,
    "IsRead" boolean DEFAULT false,
    "ErrorOccured" boolean DEFAULT false,
    "DateRead" timestamp without time zone,
    "NotificationDeliveryMethodID" integer,
    "NotificationRecipientLogID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table Operation (OID = 18100) :
--
CREATE TABLE public."Operation" (
    "OperationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OperationName" varchar(150) NOT NULL,
    "OperationDescription" varchar(500),
    "SourceID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table Organisation (OID = 18109) :
--
CREATE TABLE public."Organisation" (
    "OrganisationID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "IsBranch" boolean DEFAULT false NOT NULL,
    "IsHeadOffice" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsUserOrganisation" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "ParentOrganisationID" uuid,
    "IsPaymentProvider" boolean DEFAULT false,
    "PrimaryContactID" uuid,
    "CompanyPinCode" varchar(40) DEFAULT ''::character varying,
    "CompanyPinCreated" date DEFAULT ('now'::text)::date,
    "IsCompanyVerified" boolean DEFAULT false,
    "IsCompanyPinCreated" boolean DEFAULT false,
    "ReturnUrl" varchar(250) DEFAULT ''::character varying
)
WITH (oids = false);
--
-- Structure for table OrganisationAccountingPeriod (OID = 18119) :
--
CREATE TABLE public."OrganisationAccountingPeriod" (
    "OrganisationAccountingPeriodID" integer DEFAULT nextval(('public.organisationaccountingperiod_organisationaccountingperiodid_seq'::text)::regclass) NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "GlobalAccountingPeriodID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationArtefact (OID = 18123) :
--
CREATE TABLE public."OrganisationArtefact" (
    "OrganisationID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationBankAccount (OID = 18128) :
--
CREATE TABLE public."OrganisationBankAccount" (
    "OrganisationBankAccountId" integer NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "BankAccountTypeID" integer NOT NULL,
    "SortCode" varchar(10),
    "BankAccountNumber" varchar(20) NOT NULL,
    "IBANNumber" varchar(20),
    "SwiftCode" varchar(20),
    "BankAccountDurationTypeID" integer NOT NULL,
    "BankAccountOpeningYear" integer,
    "BankAccountOpeningMonth" integer,
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDirectDebtAccount" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDetail (OID = 18135) :
--
CREATE TABLE public."OrganisationDetail" (
    "OrganisationDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "Name" varchar(2000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationDefaultLogoID" uuid,
    "OrganisationLegalBlurb" varchar
)
WITH (oids = false);
--
-- Structure for table OrganisationDirectDebitMandate (OID = 18144) :
--
CREATE TABLE public."OrganisationDirectDebitMandate" (
    "OrganisationID" uuid NOT NULL,
    "DirectDebitMandateID" uuid NOT NULL,
    "DirectDebitMandateVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "DirectDebitMandateStatusID" integer NOT NULL,
    "IsSigned" boolean DEFAULT false NOT NULL,
    "SignedOn" timestamp without time zone,
    "NotificationID" uuid,
    "OrganisationDirectDebitMandateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDirectDebitMandateProcessLog (OID = 18149) :
--
CREATE TABLE public."OrganisationDirectDebitMandateProcessLog" (
    "OrganisationDirectDebitMandateID" uuid NOT NULL,
    "NotificationRecipientID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDiscount (OID = 18152) :
--
CREATE TABLE public."OrganisationDiscount" (
    "OrganisationID" uuid NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationFinancialDetail (OID = 18157) :
--
CREATE TABLE public."OrganisationFinancialDetail" (
    "OrganisationFinancialDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "FinancialStatusTypeID" uuid,
    "FinancialStatusTypeVersionNumber" integer,
    "FinancialStatusTypeValueID" uuid,
    "HasACreditLimit" boolean DEFAULT false NOT NULL,
    "CreditLimit" numeric(30,8),
    "NumberOfLatePayments" integer DEFAULT 0 NOT NULL,
    "HasLatePayments" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationGroup (OID = 18164) :
--
CREATE TABLE public."OrganisationGroup" (
    "OrganisationGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "GroupName" varchar(300) NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "ParentID" uuid,
    "ParentOrganisationGroupID" uuid,
    "ParentRootGroupID" uuid,
    "IsManaged" boolean DEFAULT false NOT NULL,
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "GroupDescription" varchar(2000),
    "GroupSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table OrganisationGroupRole (OID = 18174) :
--
CREATE TABLE public."OrganisationGroupRole" (
    "OrganisationGroupID" uuid NOT NULL,
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationInsuranceDetails (OID = 18179) :
--
CREATE TABLE public."OrganisationInsuranceDetails" (
    "OrganisationID" uuid,
    "InsuranceProviderID" integer,
    "InsuranceProviderName" varchar(500),
    "InsuranceTypeID" integer,
    "PolicyNumber" varchar(100),
    "PolicyRenewalDate" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationLedgerAccount (OID = 18187) :
--
CREATE TABLE public."OrganisationLedgerAccount" (
    "OrganisationLedgerAccountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountCategoryID" integer,
    "Name" varchar(3000),
    "Description" varchar(3000),
    "ParentID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(150) NOT NULL,
    "Balance" numeric(30,8) DEFAULT 0 NOT NULL,
    "UpdatedOn" timestamp without time zone,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "OpenedOn" timestamp without time zone,
    "ClosedOn" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "AccountingTypeID" integer NOT NULL,
    "IsPrimaryAccount" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationPaymentMethod (OID = 18200) :
--
CREATE TABLE public."OrganisationPaymentMethod" (
    "OrganisationID" uuid NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrganisationBankAccountId" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDirectDebit" boolean DEFAULT true NOT NULL,
    "IsBACS" boolean DEFAULT false NOT NULL,
    "OrganisationDirectDebitMandateID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "DirectDebitMonthCollectionPeriodNumber" integer,
    "BACSMonthPaymentDay" integer,
    "DirectDebitNumberOfNotificationDaysBeforeCollection" integer,
    "BACSNumberOfNotificationDaysBeforeExpectationOfPayment" integer
)
WITH (oids = false);
--
-- Structure for table OrganisationPlanSubscription (OID = 18208) :
--
CREATE TABLE public."OrganisationPlanSubscription" (
    "OrganisationID" uuid NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationProductPurchase (OID = 18213) :
--
CREATE TABLE public."OrganisationProductPurchase" (
    "OrganisationID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationRole (OID = 18216) :
--
CREATE TABLE public."OrganisationRole" (
    "OrganisationRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "ParentOrganisationRoleID" uuid,
    "RoleName" varchar(300) NOT NULL,
    "ParentRootRoleID" uuid,
    "IsManaged" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleSubCategoryID" integer,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationRoleClaim (OID = 18226) :
--
CREATE TABLE public."OrganisationRoleClaim" (
    "OrganisationRoleClaimID" serial NOT NULL,
    "OrganisationRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationSetting (OID = 18233) :
--
CREATE TABLE public."OrganisationSetting" (
    "OrganisationSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationSettingTemplate (OID = 18241) :
--
CREATE TABLE public."OrganisationSettingTemplate" (
    "OrganisationSettingTemplateID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationShoppingCartBlueprint (OID = 18249) :
--
CREATE TABLE public."OrganisationShoppingCartBlueprint" (
    "OrganisationID" uuid,
    "ShoppingCartBlueprintID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationStatus (OID = 18254) :
--
CREATE TABLE public."OrganisationStatus" (
    "OrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "StatusChangedOn" timestamp without time zone NOT NULL,
    "StatusChangedBy" varchar(200) NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationStatusType (OID = 18257) :
--
CREATE TABLE public."OrganisationStatusType" (
    "OrganisationStatusTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationStructure (OID = 18263) :
--
CREATE TABLE public."OrganisationStructure" (
    "OrganisationStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentOrganisationStructureID" uuid,
    "Name" varchar(100),
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeam (OID = 18270) :
--
CREATE TABLE public."OrganisationTeam" (
    "OrganisationTeamID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar,
    "EmailAddress" varchar,
    "IsDefault" boolean DEFAULT false NOT NULL,
    "TeamTypeID" integer,
    "TeamSubTypeID" integer,
    "TeamCategoryID" integer,
    "TeamSubCategoryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeamSetting (OID = 18280) :
--
CREATE TABLE public."OrganisationTeamSetting" (
    "OrganisationTeamSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTeamID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeamSettingTemplate (OID = 18288) :
--
CREATE TABLE public."OrganisationTeamSettingTemplate" (
    "OrganisationTeamSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence OrganisationTeam_OrganisationTeamID_seq (OID = 18296) :
--
CREATE SEQUENCE public."OrganisationTeam_OrganisationTeamID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Structure for table OrganisationTradingName (OID = 18298) :
--
CREATE TABLE public."OrganisationTradingName" (
    "OrganisationTradingNameID" integer NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationType (OID = 18303) :
--
CREATE TABLE public."OrganisationType" (
    "OrganisationTypeID" integer DEFAULT nextval(('public.organisationtype_organisationtypeid_seq'::text)::regclass) NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnit (OID = 18312) :
--
CREATE TABLE public."OrganisationUnit" (
    "OrganisationUnitID" serial NOT NULL,
    "Name" varchar(50) NOT NULL,
    "Description" varchar(500),
    "DivisionName" varchar(500),
    "OrganisationID" uuid,
    "OrganisationUnitTypeID" integer,
    "OrganisationUnitCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitOrganisationGroup (OID = 18320) :
--
CREATE TABLE public."OrganisationUnitOrganisationGroup" (
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitOrganisationRole (OID = 18325) :
--
CREATE TABLE public."OrganisationUnitOrganisationRole" (
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitStructure (OID = 18330) :
--
CREATE TABLE public."OrganisationUnitStructure" (
    "OrganisationUnitStructureID" serial NOT NULL,
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationID" uuid,
    "ParentOrganisationUnitStructureID" integer,
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "Name" varchar(100) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUserType (OID = 18340) :
--
CREATE TABLE public."OrganisationUserType" (
    "OrganisationID" uuid NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationWorkflow (OID = 18346) :
--
CREATE TABLE public."OrganisationWorkflow" (
    "OrganisationWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "VersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table Package (OID = 18352) :
--
CREATE TABLE public."Package" (
    "PackageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageVersionNumber" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProduct (OID = 18358) :
--
CREATE TABLE public."PackageProduct" (
    "PackageProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageID" uuid NOT NULL,
    "UseProductDefaultBlueprint" boolean DEFAULT false NOT NULL,
    "UseDefaultProductPricing" boolean DEFAULT false NOT NULL,
    "IsFixedPrice" boolean DEFAULT false NOT NULL,
    "ProductPriceModifierPercentage" numeric NOT NULL,
    "ProductPriceModifierValue" numeric NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "UserDefinableQuantity" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageVersionNumber" integer NOT NULL,
    "RelatedProductProductAttributeID" uuid
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationship (OID = 18372) :
--
CREATE TABLE public."PackageProductRelationship" (
    "PackageProductRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductID" uuid NOT NULL,
    "ChildProductID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipBlueprint (OID = 18379) :
--
CREATE TABLE public."PackageProductRelationshipBlueprint" (
    "PackageProductRelationshipBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductRelationshipID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipBlueprintTemplate (OID = 18386) :
--
CREATE TABLE public."PackageProductRelationshipBlueprintTemplate" (
    "PackageProductRelationshipBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductRelationshipTemplateID" uuid,
    "DefaultQuantity" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipTemplate (OID = 18392) :
--
CREATE TABLE public."PackageProductRelationshipTemplate" (
    "PackageProductRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductTemplateID" uuid NOT NULL,
    "ChildProductTemplateID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductSpecificationBlueprint (OID = 18399) :
--
CREATE TABLE public."PackageProductSpecificationBlueprint" (
    "PackageProductSpecificationBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultProductSpecificationAttributeOptionID" uuid NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductSpecificationBlueprintTemplate (OID = 18405) :
--
CREATE TABLE public."PackageProductSpecificationBlueprintTemplate" (
    "PackageProductSpecificationBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeTemplate" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductTemplate (OID = 18411) :
--
CREATE TABLE public."PackageProductTemplate" (
    "PackageProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "UseProductDefaultBlueprint" boolean DEFAULT true NOT NULL,
    "UseDefaultProductPricing" boolean DEFAULT true NOT NULL,
    "IsFixedPrice" boolean DEFAULT false NOT NULL,
    "ProductPriceModifierPercentage" numeric NOT NULL,
    "ProductPriceModifierValue" numeric NOT NULL,
    "DefaultQuantity" integer NOT NULL,
    "UserDefinableQuantity" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL,
    "RelatedProductProductAttributeTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table PackageTemplate (OID = 18424) :
--
CREATE TABLE public."PackageTemplate" (
    "PackageTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PasswordResetSecrets (OID = 18430) :
--
CREATE TABLE public."PasswordResetSecrets" (
    "PasswordResetSecretID" uuid NOT NULL,
    "QuestionID" integer NOT NULL,
    "Answer" varchar(150) NOT NULL,
    "UserAccount_ID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Plan (OID = 18435) :
--
CREATE TABLE public."Plan" (
    "PlanID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8) DEFAULT 0 NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "TrialPeriod" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer DEFAULT 0 NOT NULL,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean DEFAULT false NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "PlanStatusID" integer NOT NULL,
    "IsTransactionBased" boolean DEFAULT false NOT NULL,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean DEFAULT false,
    "HasForwardCycleFee" boolean DEFAULT false,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFreeIsSameAsPrice" numeric(30,8),
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean DEFAULT false,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean DEFAULT false,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer NOT NULL,
    "PlanTypeID" integer,
    "PlanCategoryID" integer NOT NULL,
    "ModifiedOn" date,
    "ModifiedBy" varchar(200)
)
WITH (oids = false);
--
-- Structure for table PlanBilling (OID = 18455) :
--
CREATE TABLE public."PlanBilling" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "BillingID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultBilling" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanBillingTemplate (OID = 18461) :
--
CREATE TABLE public."PlanBillingTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "BillingTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultBilling" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanDiscount (OID = 18467) :
--
CREATE TABLE public."PlanDiscount" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanDiscountTemplate (OID = 18472) :
--
CREATE TABLE public."PlanDiscountTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanGlobalPaymentMethod (OID = 18477) :
--
CREATE TABLE public."PlanGlobalPaymentMethod" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsDefaultPaymentMethod" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BillingID" uuid
)
WITH (oids = false);
--
-- Structure for table PlanGlobalPaymentMethodTemplate (OID = 18483) :
--
CREATE TABLE public."PlanGlobalPaymentMethodTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsDefaultPaymentMethod" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BillingTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table PlanGroup (OID = 18489) :
--
CREATE TABLE public."PlanGroup" (
    "PlanGroupID" integer DEFAULT nextval(('public.plangroup_plangroupid_seq'::text)::regclass) NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ParentID" uuid,
    "HasSameGlobalPaymentMethodForAllPlans" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanProduct (OID = 18497) :
--
CREATE TABLE public."PlanProduct" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanProductStatusID" integer
)
WITH (oids = false);
--
-- Structure for table PlanProductTemplate (OID = 18503) :
--
CREATE TABLE public."PlanProductTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanProductStatusID" integer
)
WITH (oids = false);
--
-- Structure for table PlanSubscription (OID = 18509) :
--
CREATE TABLE public."PlanSubscription" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "PlanQuantity" integer DEFAULT 1 NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200),
    "ActivatedOn" timestamp without time zone,
    "CancelledOn" timestamp without time zone,
    "CancelReasonID" integer,
    "DueInvoicesCount" integer,
    "DueSince" timestamp without time zone,
    "DueAmount" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "CountryCode" varchar(300) NOT NULL,
    "IsFree" boolean DEFAULT false NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ParentVersionNumber" integer,
    "OrganisationID" uuid NOT NULL,
    "IsRenewal" boolean DEFAULT false NOT NULL,
    "RenewedOn" timestamp without time zone,
    "PlanSubscriptionReference" varchar(50)
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionBillingProcessLog (OID = 18521) :
--
CREATE TABLE public."PlanSubscriptionBillingProcessLog" (
    "BillingPeriodNumber" integer NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "PlanSubscriptionBillingPeriodID" uuid NOT NULL,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "ClosedOn" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionPaymentPlan (OID = 18527) :
--
CREATE TABLE public."PlanSubscriptionPaymentPlan" (
    "PlanSubscriptionPaymentPlanID" uuid NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "BillingID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionPeriod (OID = 18532) :
--
CREATE TABLE public."PlanSubscriptionPeriod" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone NOT NULL,
    "IsCancellationPeriod" boolean DEFAULT false NOT NULL,
    "CancellationPeriodNumber" integer,
    "PeriodNumber" integer NOT NULL,
    "IsTrialPeriod" boolean DEFAULT false NOT NULL,
    "TrialPeriodNumber" integer,
    "TrialStartDate" timestamp without time zone,
    "TrialEndDate" timestamp without time zone,
    "CancellationStartDate" timestamp without time zone,
    "CancellationEndDate" timestamp without time zone,
    "PlanSubscriptionPeriodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionBillingPeriodID" uuid,
    "ClosedOn" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionProcessLog (OID = 18540) :
--
CREATE TABLE public."PlanSubscriptionProcessLog" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsRenewed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionStatusDetail" varchar(2000),
    "StatusTypeValueID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTemplate (OID = 18548) :
--
CREATE TABLE public."PlanTemplate" (
    "PlanTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8) DEFAULT 0 NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "TrialPeriod" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer DEFAULT 0 NOT NULL,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean DEFAULT false NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "PlanStatusID" integer NOT NULL,
    "IsTransactionBased" boolean DEFAULT false NOT NULL,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean DEFAULT false,
    "HasForwardCycleFee" boolean DEFAULT false,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFeeIsSameAsPrice" boolean DEFAULT false,
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean DEFAULT false,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean DEFAULT false,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionPeriodUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer,
    "PlanTypeID" integer,
    "PlanCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table PlanTransaction (OID = 18569) :
--
CREATE TABLE public."PlanTransaction" (
    "PlanTransactionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsTotalValuePricingBound" boolean DEFAULT false,
    "IsTransactionCountPricingBound" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "ApplyTransactionTierPricingPerTransaction" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionComponentTier (OID = 18578) :
--
CREATE TABLE public."PlanTransactionComponentTier" (
    "ComponentTierID" uuid NOT NULL,
    "PlanTransactionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionComponentTierTemplate (OID = 18581) :
--
CREATE TABLE public."PlanTransactionComponentTierTemplate" (
    "ComponentTierTemplateID" uuid NOT NULL,
    "PlanTransactionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionTemplate (OID = 18584) :
--
CREATE TABLE public."PlanTransactionTemplate" (
    "PlanTransactionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsTotalValuePricingBound" boolean DEFAULT false,
    "IsTransactionCountPricingBound" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "ApplyTransactionTierPricingPerTransaction" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Plugin (OID = 18593) :
--
CREATE TABLE public."Plugin" (
    "PluginID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar,
    "Version" varchar(50),
    "VersionNumber" integer NOT NULL,
    "Author" varchar(200),
    "SystemName" varchar(2000),
    "DisplayOrder" integer NOT NULL,
    "PluginFileName" varchar(2000) NOT NULL,
    "PluginTemplateID" uuid NOT NULL,
    "PluginTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PluginTemplate (OID = 18602) :
--
CREATE TABLE public."PluginTemplate" (
    "PluginTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PluginTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar,
    "Version" varchar(50),
    "VersionNumber" integer NOT NULL,
    "Author" varchar(200),
    "SystemName" varchar(2000),
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "PluginFileName" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Product (OID = 18613) :
--
CREATE TABLE public."Product" (
    "ProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPackage" boolean DEFAULT false NOT NULL,
    "IsDeposit" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ProductTemplateVersionID" integer NOT NULL,
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeResold" boolean DEFAULT false NOT NULL,
    "IsDeductionProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductAttribute (OID = 18623) :
--
CREATE TABLE public."ProductAttribute" (
    "ProductAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductAttributeTemplate (OID = 18632) :
--
CREATE TABLE public."ProductAttributeTemplate" (
    "ProductAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductBusTask (OID = 18641) :
--
CREATE TABLE public."ProductBusTask" (
    "ProductBusTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskID" uuid,
    "Order" bigint DEFAULT 0 NOT NULL,
    "BusTaskVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table ProductBusTaskTemplate (OID = 18648) :
--
CREATE TABLE public."ProductBusTaskTemplate" (
    "ProductBusTaskTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskID" uuid,
    "Order" integer DEFAULT 0 NOT NULL,
    "BusTaskVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table ProductClaim (OID = 18655) :
--
CREATE TABLE public."ProductClaim" (
    "ProductClaimID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "RoleID" uuid,
    "ProductRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductClaimTemplate (OID = 18660) :
--
CREATE TABLE public."ProductClaimTemplate" (
    "ProductClaimTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "RoleID" uuid,
    "ProductRoleTemplateID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductComponentTier (OID = 18665) :
--
CREATE TABLE public."ProductComponentTier" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductComponentTierTemplate (OID = 18668) :
--
CREATE TABLE public."ProductComponentTierTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDeduction (OID = 18671) :
--
CREATE TABLE public."ProductDeduction" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DeductionID" uuid NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductDeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDeductionTemplate (OID = 18677) :
--
CREATE TABLE public."ProductDeductionTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductDeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetail (OID = 18683) :
--
CREATE TABLE public."ProductDetail" (
    "ProductDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "ProductID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "RequireOtherProducts" boolean DEFAULT false NOT NULL,
    "AutomaticallyAddRequiredProducts" boolean DEFAULT false NOT NULL,
    "HasUserAgreement" boolean DEFAULT false NOT NULL,
    "UserAgreementText" varchar,
    "IsRecurring" boolean DEFAULT false NOT NULL,
    "RecurringCycleLength" integer NOT NULL,
    "RecurringCyclePeriodID" integer NOT NULL,
    "RecurringTotalCycle" integer NOT NULL,
    "IsTaxExempt" boolean DEFAULT false,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer DEFAULT 0 NOT NULL,
    "OrderMaximumQuantity" integer DEFAULT 0 NOT NULL,
    "CallForPrice" boolean DEFAULT false NOT NULL,
    "Price" numeric NOT NULL,
    "ProductCost" numeric NOT NULL,
    "CustomerEntersPrice" boolean DEFAULT false NOT NULL,
    "HasTierPrices" boolean DEFAULT false NOT NULL,
    "HasDiscountsApplied" boolean DEFAULT false NOT NULL,
    "MinimumCustomerEnteredPrice" numeric NOT NULL,
    "MaximumCustomerEnteredPrice" numeric NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer NOT NULL,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "ProductVersionID" integer NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRate" numeric,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetailTemplate (OID = 18704) :
--
CREATE TABLE public."ProductDetailTemplate" (
    "ProductDetailTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "AutomaticallyAddRequiredProducts" boolean DEFAULT false NOT NULL,
    "HasUserAgreement" boolean DEFAULT false NOT NULL,
    "UserAgreementText" varchar,
    "IsRecurring" boolean DEFAULT false NOT NULL,
    "RecurringCycleLength" integer DEFAULT 0 NOT NULL,
    "RecurringCyclePeriodID" integer DEFAULT 0 NOT NULL,
    "RecurringTotalCycles" integer DEFAULT 0 NOT NULL,
    "IsTaxExempt" boolean DEFAULT false NOT NULL,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer DEFAULT 0 NOT NULL,
    "OrderMaximumQuantity" integer DEFAULT 0 NOT NULL,
    "CallForPrice" boolean DEFAULT false NOT NULL,
    "Price" numeric NOT NULL,
    "ProductCost" numeric NOT NULL,
    "CustomerEntersPrice" boolean DEFAULT false NOT NULL,
    "HasTierPrices" boolean DEFAULT false NOT NULL,
    "HasDiscountsApplied" boolean DEFAULT false NOT NULL,
    "MinimumCustomerEnteredPrice" numeric DEFAULT 0 NOT NULL,
    "MaximumCustomerEnteredPrice" numeric DEFAULT 0 NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer NOT NULL,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "RequireOtherProducts" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "CurrencyCode" varchar(30),
    "CurrencyRate" numeric NOT NULL,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDiscount (OID = 18730) :
--
CREATE TABLE public."ProductDiscount" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDiscountTemplate (OID = 18735) :
--
CREATE TABLE public."ProductDiscountTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamily (OID = 18740) :
--
CREATE TABLE public."ProductFamily" (
    "ProductFamilyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyProductPackage (OID = 18749) :
--
CREATE TABLE public."ProductFamilyProductPackage" (
    "ProductFamilyProductPackageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductFamilyID" uuid NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyProductPackageTemplate (OID = 18753) :
--
CREATE TABLE public."ProductFamilyProductPackageTemplate" (
    "ProductFamilyProductPackageTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductFamilyTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyTemplate (OID = 18757) :
--
CREATE TABLE public."ProductFamilyTemplate" (
    "ProductFamilyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPlan (OID = 18766) :
--
CREATE TABLE public."ProductPlan" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPlanTemplate (OID = 18771) :
--
CREATE TABLE public."ProductPlanTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductProductAttribute (OID = 18776) :
--
CREATE TABLE public."ProductProductAttribute" (
    "ProductProductAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductAttributeID" uuid NOT NULL,
    "IsRequired" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductProductAttributeTemplate (OID = 18783) :
--
CREATE TABLE public."ProductProductAttributeTemplate" (
    "ProductProductAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductAttributeTemplateID" uuid NOT NULL,
    "IsRequired" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPurchase (OID = 18791) :
--
CREATE TABLE public."ProductPurchase" (
    "ProductPurchaseID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL,
    "PurchaseDate" timestamp without time zone NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseBusTaskProcessDetail (OID = 18795) :
--
CREATE TABLE public."ProductPurchaseBusTaskProcessDetail" (
    "ProductPurchaseBusTaskProcessDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseProductTaskID" uuid,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone,
    "CreatedBy" varchar DEFAULT 200,
    "MessageDetail" varchar,
    "MessageJsonDetail" json,
    "MessageAdditionalDetail" varchar,
    "MessageJsonAdditionalDetail" json,
    "TaskDataHasExpiry" boolean DEFAULT false NOT NULL,
    "TaskDataExpiryDate" timestamp without time zone,
    "ProcessDataTypeID" integer,
    "ProcessDataCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseBusTaskProcessLog (OID = 18806) :
--
CREATE TABLE public."ProductPurchaseBusTaskProcessLog" (
    "ProductPurchaseProductTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "ProcessMessage" varchar(2000) NOT NULL,
    "ProcessDetail" json NOT NULL,
    "ProductBusTaskID" uuid,
    "HasError" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseProcessLog (OID = 18816) :
--
CREATE TABLE public."ProductPurchaseProcessLog" (
    "ProductPurchaseProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "ProductPurchaseID" uuid NOT NULL,
    "ProcessMessage" varchar(2000),
    "ProcessDetail" json,
    "HasError" boolean DEFAULT false NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseReference (OID = 18826) :
--
CREATE TABLE public."ProductPurchaseReference" (
    "ProductPurchaseReferenceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseReferenceTypeID" integer NOT NULL,
    "ProductPurchaseReferenceValue" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationship (OID = 18832) :
--
CREATE TABLE public."ProductRelationship" (
    "ProductRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductID" uuid NOT NULL,
    "ChildProductID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipBlueprint (OID = 18839) :
--
CREATE TABLE public."ProductRelationshipBlueprint" (
    "ProductRelationshipBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductRelationshipID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipBlueprintTemplate (OID = 18846) :
--
CREATE TABLE public."ProductRelationshipBlueprintTemplate" (
    "ProductRelationshipBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductRelationshipTemplateID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipTemplate (OID = 18853) :
--
CREATE TABLE public."ProductRelationshipTemplate" (
    "ProductRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductTemplateID" uuid NOT NULL,
    "ChildProductTemplateID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRole (OID = 18860) :
--
CREATE TABLE public."ProductRole" (
    "ProductRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRoleTemplate (OID = 18868) :
--
CREATE TABLE public."ProductRoleTemplate" (
    "ProductRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttribute (OID = 18876) :
--
CREATE TABLE public."ProductSpecificationAttribute" (
    "ProductSpecificationAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "IsMultiSelect" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "MinimumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "MaximumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "IsUserDefined" boolean DEFAULT false NOT NULL,
    "IsPriceDriven" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeOption (OID = 18890) :
--
CREATE TABLE public."ProductSpecificationAttributeOption" (
    "ProductSpecificationAttributeOptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "SpecficiationAttributeOptionID" uuid NOT NULL,
    "PriceAdjustment" numeric DEFAULT 0 NOT NULL,
    "WeightAdjustment" numeric,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "DefaultValue" numeric DEFAULT 0 NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeOptionTemplate (OID = 18904) :
--
CREATE TABLE public."ProductSpecificationAttributeOptionTemplate" (
    "SpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "PriceAdjustement" numeric DEFAULT 0 NOT NULL,
    "WeightAdjustment" numeric,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "DefaultValue" numeric DEFAULT 0 NOT NULL,
    "DefaultQuantity" numeric NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT false NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeOptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeTemplate (OID = 18917) :
--
CREATE TABLE public."ProductSpecificationAttributeTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsMultiSelect" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "MinimumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "MaximumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsUserDefined" boolean DEFAULT false NOT NULL,
    "IsPriceDriven" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationBlueprint (OID = 18931) :
--
CREATE TABLE public."ProductSpecificationBlueprint" (
    "ProductSpecificationBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationBlueprintTemplate (OID = 18937) :
--
CREATE TABLE public."ProductSpecificationBlueprintTemplate" (
    "ProductSpecificationBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTag (OID = 18943) :
--
CREATE TABLE public."ProductTag" (
    "ProductTagID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTagTemplate (OID = 18947) :
--
CREATE TABLE public."ProductTagTemplate" (
    "ProductTagTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTemplate (OID = 18951) :
--
CREATE TABLE public."ProductTemplate" (
    "ProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPackage" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "IsDefaultTemplate" boolean DEFAULT false NOT NULL,
    "CanBeResold" boolean DEFAULT false NOT NULL,
    "IsDeductionProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeCombination (OID = 18961) :
--
CREATE TABLE public."ProductVariantAttributeCombination" (
    "ProductVariantAttributeCombinationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "AllowOutOfStockOrders" boolean DEFAULT false NOT NULL,
    "StockQuantity" integer DEFAULT 0 NOT NULL,
    "Sku" varchar(4000),
    "ManufacturerPartNumber" varchar(4000),
    "Gtin" varchar(4000),
    "OverridenPrice" numeric NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeCombinationTemplate (OID = 18972) :
--
CREATE TABLE public."ProductVariantAttributeCombinationTemplate" (
    "ProductVariantAttributeCombinationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "AllowOutOfStockOrders" boolean DEFAULT false NOT NULL,
    "StockQuantity" integer NOT NULL,
    "Sku" varchar(4000),
    "ManufacturerPartNumber" varchar(4000),
    "Gtin" varchar(4000),
    "OverriddenPrice" numeric DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeValue (OID = 18983) :
--
CREATE TABLE public."ProductVariantAttributeValue" (
    "ProductVariantAttributeValueID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductProductAttributeID" uuid,
    "AttributeValueTypeID" integer,
    "Name" varchar(400) NOT NULL,
    "PriceAdjustment" numeric,
    "WeightAdjustement" numeric DEFAULT 0,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "Quantity" integer DEFAULT 0 NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeValueTemplate (OID = 18997) :
--
CREATE TABLE public."ProductVariantAttributeValueTemplate" (
    "ProductVariantAttributeValueTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductProductAttributeTemplateID" uuid NOT NULL,
    "AttributeValueTypeID" integer,
    "Name" varchar(400) NOT NULL,
    "PriceAdjustment" numeric,
    "WeightAdjustment" numeric DEFAULT 0,
    "Cost" numeric NOT NULL,
    "Quantity" integer NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RelationshipRole (OID = 19008) :
--
CREATE TABLE public."RelationshipRole" (
    "RelationshipRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar,
    "RelationshipRoleStatusID" integer NOT NULL,
    "RelationshipRoleStateID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Repository (OID = 19017) :
--
CREATE TABLE public."Repository" (
    "RepositoryID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OwnerID" uuid NOT NULL,
    "Name" varchar(256) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructure (OID = 19026) :
--
CREATE TABLE public."RepositoryStructure" (
    "RepositoryStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RepositoryID" uuid NOT NULL,
    "OwnerID" uuid NOT NULL,
    "ParentRepositoryStructureID" uuid,
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "Name" varchar(256) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructureGroup (OID = 19033) :
--
CREATE TABLE public."RepositoryStructureGroup" (
    "RepositoryStructureID" uuid NOT NULL,
    "OrganisationGroupID" uuid,
    "OrganisationExternalGroupID" uuid,
    "RepositoryStructureGroupID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructureRole (OID = 19040) :
--
CREATE TABLE public."RepositoryStructureRole" (
    "RepositoryStructureID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "RepositoryStructureRoleID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Resource (OID = 19047) :
--
CREATE TABLE public."Resource" (
    "ResourceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ResourceName" varchar(150) NOT NULL,
    "ResourceDescription" varchar(500),
    "SourceID" uuid,
    "ResourceTypeID" integer,
    "ResourceCategoryID" integer,
    "ResourceSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ResourceOperation (OID = 19056) :
--
CREATE TABLE public."ResourceOperation" (
    "ResourceID" uuid NOT NULL,
    "OperationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ResourceOperationTarget (OID = 19059) :
--
CREATE TABLE public."ResourceOperationTarget" (
    "ResourceID" uuid NOT NULL,
    "OperationID" uuid NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Role (OID = 19064) :
--
CREATE TABLE public."Role" (
    "RoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500) NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table RoleClaim (OID = 19074) :
--
CREATE TABLE public."RoleClaim" (
    "RoleClaimID" integer DEFAULT nextval('"RoleTemplateClaim_RoleTemplateClaimID_seq"'::regclass) NOT NULL,
    "RoleID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table ServiceDefinition (OID = 19082) :
--
CREATE TABLE public."ServiceDefinition" (
    "ServiceDefinitionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ServiceDefinitionTypeID" integer NOT NULL,
    "ServiceDefinitionCategoryID" integer,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ServiceInterfaceID" uuid NOT NULL,
    "IsPollingService" boolean DEFAULT false NOT NULL,
    "NumberOfRetriesPerCall" integer DEFAULT 1 NOT NULL,
    "ServiceEngineObjectName" varchar(1000),
    "ServiceDefinitionObjectName" varchar(1000),
    "ServiceMutatorObjectName" varchar(1000),
    "RetryPeriodPerCallInMinutes" integer DEFAULT 180,
    "RetryFailedCalls" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table ServiceDefinitionDetail (OID = 19093) :
--
CREATE TABLE public."ServiceDefinitionDetail" (
    "ServiceDefinitionDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "EnvironmentName" varchar(50),
    "ServicePartialURL" varchar(500) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ServiceDefinitionID" uuid NOT NULL,
    "ServerURL" varchar(500) NOT NULL
)
WITH (oids = false);
--
-- Structure for table ServiceInterface (OID = 19102) :
--
CREATE TABLE public."ServiceInterface" (
    "ServiceInterfaceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ServiceInterfaceTypeID" integer NOT NULL,
    "ServiceInterfaceCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ServiceInterfaceProcessLog (OID = 19111) :
--
CREATE TABLE public."ServiceInterfaceProcessLog" (
    "ServiceInterfaceProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseProductTaskID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer,
    "HasError" boolean DEFAULT false NOT NULL,
    "ServiceDefinitionID" uuid NOT NULL,
    "ParentID" uuid,
    "ProcessDetail" json,
    "ProcessMessage" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table ServiceProvider (OID = 19120) :
--
CREATE TABLE public."ServiceProvider" (
    "ServiceProviderID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Setting (OID = 19126) :
--
CREATE TABLE public."Setting" (
    "Id" serial NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCart (OID = 19136) :
--
CREATE TABLE public."ShoppingCart" (
    "ShoppingCartID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date NOT NULL,
    "HasBeenConvertedToTransactionOrder" boolean DEFAULT false NOT NULL,
    "HasExpired" boolean DEFAULT false NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric(30,8) DEFAULT 0 NOT NULL,
    "CurrencyRateToGBP" numeric(30,8) NOT NULL,
    "CurrencyRateToUSD" numeric(30,8) NOT NULL,
    "CountryCode" varchar(30),
    "PaymentCardTypeID" integer NOT NULL,
    "PaymentMethodTypeID" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrganisationID" uuid,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprint (OID = 19144) :
--
CREATE TABLE public."ShoppingCartBlueprint" (
    "ShoppingCartBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Name" varchar(400)
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintProduct (OID = 19150) :
--
CREATE TABLE public."ShoppingCartBlueprintProduct" (
    "ShoppingCartBlueprintID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Quantity" integer DEFAULT 1 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintProductTemplate (OID = 19156) :
--
CREATE TABLE public."ShoppingCartBlueprintProductTemplate" (
    "ShoppingCartBlueprintTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Quantity" integer DEFAULT 1 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintTemplate (OID = 19162) :
--
CREATE TABLE public."ShoppingCartBlueprintTemplate" (
    "ShoppingCartBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Name" varchar(400)
)
WITH (oids = false);
--
-- Structure for table ShoppingCartDeduction (OID = 19168) :
--
CREATE TABLE public."ShoppingCartDeduction" (
    "ShoppingCartID" uuid NOT NULL,
    "CountryDeductionID" uuid NOT NULL,
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItem (OID = 19171) :
--
CREATE TABLE public."ShoppingCartItem" (
    "ShoppingCartItemID" uuid NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "ProductID" uuid NOT NULL,
    "Quantity" integer NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ShoppingCartID" uuid NOT NULL,
    "InvoiceLineItemID" uuid,
    "AccountID" uuid
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItemProductAttribute (OID = 19176) :
--
CREATE TABLE public."ShoppingCartItemProductAttribute" (
    "ShoppingCartItemProductAttributeID" uuid NOT NULL,
    "ProductVariantAttributeValueID" uuid,
    "Quantity" numeric(30,8) DEFAULT 0 NOT NULL,
    "ShoppingCartItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItemProductSpecification (OID = 19180) :
--
CREATE TABLE public."ShoppingCartItemProductSpecification" (
    "ShoppingCartItemProductSpecificationID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "ProductSpecificationAttributeOptionID" uuid NOT NULL,
    "Quantity" numeric(30,8) DEFAULT 0 NOT NULL,
    "ShoppingCartItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttribute (OID = 19184) :
--
CREATE TABLE public."SpecificationAttribute" (
    "SpecificationAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTypeID" integer,
    "SpecificationAttributeCategoryID" integer,
    "SpecificationAttributeSubTypeID" integer,
    "SpecificationAttributeSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeOptionTemplate (OID = 19194) :
--
CREATE TABLE public."SpecificationAttributeOptionTemplate" (
    "SpecificationAttributeOptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "Order" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeRelationship (OID = 19203) :
--
CREATE TABLE public."SpecificationAttributeRelationship" (
    "SpecificationAttributeRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "ParentSpecificationAttributeID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsInverse" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeRelationshipTemplate (OID = 19211) :
--
CREATE TABLE public."SpecificationAttributeRelationshipTemplate" (
    "SpecificationAttributeRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "ParentSpecificationAttributeTemplateID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsInverse" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeTemplate (OID = 19219) :
--
CREATE TABLE public."SpecificationAttributeTemplate" (
    "SpecificationAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "DisplayOrder" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTypeID" integer,
    "SpecificationAttributeCategoryID" integer,
    "SpecificationAttributeSubTypeID" integer,
    "SpecificationAttributeSubCategoryID" integer,
    "Order" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificiationAttributeOption (OID = 19228) :
--
CREATE TABLE public."SpecificiationAttributeOption" (
    "SpecficiationAttributeOptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table State (OID = 19237) :
--
CREATE TABLE public."State" (
    "StateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StateName" varchar(150) NOT NULL,
    "StateDescription" varchar(500),
    "StateTypeID" integer,
    "StateCategoryID" integer,
    "StateSubCategoryID" integer,
    "ParentStateID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table StateItem (OID = 19246) :
--
CREATE TABLE public."StateItem" (
    "StateItemID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StateItemName" varchar(150) NOT NULL,
    "StateItemDescription" varchar(500),
    "StateID" uuid NOT NULL,
    "SourceTableName" varchar(50),
    "SourceTableField" varchar(50),
    "SourceTableFieldValue" varchar(50),
    "ParentStateItemID" uuid,
    "StateItemOrder" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusType (OID = 19255) :
--
CREATE TABLE public."StatusType" (
    "StatusTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeClaim (OID = 19265) :
--
CREATE TABLE public."StatusTypeClaim" (
    "StatusTypeClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid,
    "StatusTypeRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table StatusTypeClaimTemplate (OID = 19271) :
--
CREATE TABLE public."StatusTypeClaimTemplate" (
    "StatusTypeClaimTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid,
    "StatusTypeRoleTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table StatusTypeRole (OID = 19277) :
--
CREATE TABLE public."StatusTypeRole" (
    "StatusTypeRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeRoleTemplate (OID = 19286) :
--
CREATE TABLE public."StatusTypeRoleTemplate" (
    "StatusTypeRoleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructure (OID = 19295) :
--
CREATE TABLE public."StatusTypeStructure" (
    "StatusTypeStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid,
    "StatusOrder" integer DEFAULT 0 NOT NULL,
    "IsStart" boolean DEFAULT false NOT NULL,
    "IsEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTemplate (OID = 19302) :
--
CREATE TABLE public."StatusTypeStructureTemplate" (
    "StatusTypeStructureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "StatusTypeValueTemplateID" uuid,
    "StatusOrder" integer DEFAULT 0 NOT NULL,
    "IsStart" boolean DEFAULT false NOT NULL,
    "IsEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTransition (OID = 19309) :
--
CREATE TABLE public."StatusTypeStructureTransition" (
    "StatusTypeStructureTransitionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CurrentStatusTypeStructureID" uuid NOT NULL,
    "NextStatusTypeStructureID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTransitionTemplate (OID = 19313) :
--
CREATE TABLE public."StatusTypeStructureTransitionTemplate" (
    "StatusTypeStructureTransitionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CurrentStatusTypeStructureTemplateID" uuid NOT NULL,
    "NextStatusTypeStructureTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeTemplate (OID = 19317) :
--
CREATE TABLE public."StatusTypeTemplate" (
    "StatusTypeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeValue (OID = 19327) :
--
CREATE TABLE public."StatusTypeValue" (
    "StatusTypeValueID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeValueTemplate (OID = 19336) :
--
CREATE TABLE public."StatusTypeValueTemplate" (
    "StatusTypeValueTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Structure (OID = 19345) :
--
CREATE TABLE public."Structure" (
    "RepositoryMapID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "OrganisationExternalRoleID" uuid,
    "StructureID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TFEvent (OID = 19352) :
--
CREATE TABLE public."TFEvent" (
    "TFEventID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TFEventName" varchar(100) NOT NULL,
    "TFEventDescription" varchar(2000),
    "TFEventTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table TFEventMessageSubscriber (OID = 19359) :
--
CREATE TABLE public."TFEventMessageSubscriber" (
    "TFEventMessageSubscriberID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "ObjectName" varchar(300) NOT NULL,
    "ObjectAssembly" varchar(300),
    "DefaultMessageSubscriberFilter" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table TFEventTFEventMessageSubscriber (OID = 19366) :
--
CREATE TABLE public."TFEventTFEventMessageSubscriber" (
    "TFEventID" uuid NOT NULL,
    "TFEventMessageSubscriberID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TFEventMessageSubscriberFilter" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table TFEventType (OID = 19374) :
--
CREATE TABLE public."TFEventType" (
    "TFEventTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL
)
WITH (oids = false);
--
-- Structure for table TaxRate (OID = 19378) :
--
CREATE TABLE public."TaxRate" (
    "OrganisationTaxRateID" uuid NOT NULL,
    "TaxRateTemplateID" uuid NOT NULL,
    "TaxCategoryID" integer NOT NULL,
    "TaxPercentage" numeric NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TaxRateTemplate (OID = 19386) :
--
CREATE TABLE public."TaxRateTemplate" (
    "TaxRateTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TaxCategoryID" integer NOT NULL,
    "TaxPercentage" numeric NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Tenant (OID = 19395) :
--
CREATE TABLE public."Tenant" (
    "TenantID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TenantName" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TransactionLevelComponent (OID = 19401) :
--
CREATE TABLE public."TransactionLevelComponent" (
    "TransactionLevelComponentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsFixedFee" boolean DEFAULT false NOT NULL,
    "FixedFee" numeric NOT NULL,
    "PercentageFee" numeric DEFAULT 0 NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TransactionLevelComponentTypeID" uuid NOT NULL,
    "TransactionLevelComponentSubTypeID" uuid,
    "TransactionLevelComponentCategoryID" uuid,
    "TransactionLevelComponentSubCategoryID" uuid
)
WITH (oids = false);
--
-- Structure for table TransactionLevelComponentTemplate (OID = 19412) :
--
CREATE TABLE public."TransactionLevelComponentTemplate" (
    "TransactionLevelComponentTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsFixedFee" boolean DEFAULT false NOT NULL,
    "FixedFee" numeric NOT NULL,
    "PercentageFee" numeric DEFAULT 0 NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TransactionLevelComponentTypeID" uuid NOT NULL,
    "TransactionLevelComponentSubTypeID" uuid,
    "TransactionLevelComponentCategoryID" uuid,
    "TransactionLevelComponentSubCategoryID" uuid
)
WITH (oids = false);
--
-- Structure for table TransactionOrder (OID = 19423) :
--
CREATE TABLE public."TransactionOrder" (
    "TransactionOrderID" uuid NOT NULL,
    "CurrencyCode" varchar(100),
    "CurrencyRateToGBP" numeric NOT NULL,
    "VatNumber" varchar(400),
    "OrderSubTotalInclTaxAndDeduct" numeric NOT NULL,
    "OrderSubTotalExclTaxAndDeduct" numeric NOT NULL,
    "OrderSubTotalDiscountsInclTaxAndDeduct" numeric,
    "OrderSubTotalDiscountsExclTaxAndDeduct" numeric,
    "PaymentMethodAdditionalFeesInclTaxAndDeduct" numeric,
    "PaymentMethodAdditionalFeesExclTaxAndDeduct" numeric,
    "OrderTaxTotal" numeric NOT NULL,
    "OrderDiscountTotal" numeric NOT NULL,
    "OrderTotal" numeric NOT NULL,
    "RefundedAmount" numeric DEFAULT 0,
    "PaymentDate" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid NOT NULL,
    "CreatedOn" date NOT NULL,
    "CreatedBy" varchar(200),
    "AuthorizationTransactionID" varchar,
    "AuthorizationTransactionCode" varchar,
    "AuthorizationTransactionResult" varchar,
    "CaptureTransactionID" varchar,
    "CaptureTransactionResult" varchar,
    "SubscriptionTransactionID" varchar,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric NOT NULL,
    "CurrencyRateToUSD" numeric,
    "CountryCode" varchar(30) NOT NULL,
    "TransactionTypeID" integer NOT NULL,
    "PaymentMethodTypeID" integer NOT NULL,
    "TransactionGatewayTypeID" integer NOT NULL,
    "InvoiceID" uuid NOT NULL,
    "TransactionOrderReference" varchar(50) NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrderDeductionTotal" numeric(30,8),
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "ParentTransactionOrderID" uuid,
    "IsHierachicalTransactionOrder" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TransactionOrderItem (OID = 19433) :
--
CREATE TABLE public."TransactionOrderItem" (
    "OrderItemID" uuid NOT NULL,
    "Quantity" integer NOT NULL,
    "Price" numeric(30,8) NOT NULL,
    "PriceInclTaxAndDeduct" numeric NOT NULL,
    "PriceExclTaxAndDeduct" numeric NOT NULL,
    "OrderID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InvoiceLineItemID" uuid,
    "TaxTotal" numeric(30,8),
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotal" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderPayment (OID = 19441) :
--
CREATE TABLE public."TransactionOrderPayment" (
    "TransactionOrderPaymentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsPaymentSuccessful" boolean DEFAULT false NOT NULL,
    "PaymentDate" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "ResponseData" json,
    "TransactionResult" varchar(500),
    "PaymentType" varchar(200),
    "CardBrand" varchar(200),
    "ApprovalCode" varchar(200),
    "AVSResponseCode" varchar(3),
    "ProcessorResponseCode" varchar(30),
    "ProcessorApprovalCode" varchar(30),
    "ProcessorReceiptCode" varchar(30),
    "ProcessorCCVResponse" varchar(30),
    "ProcessorReferenceNumber" varchar(30),
    "CommercialServiceProvider" varchar(100),
    "ErrorMessage" varchar(1000),
    "CCVCode" varchar(5)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderPaymentError (OID = 19450) :
--
CREATE TABLE public."TransactionOrderPaymentError" (
    "TransactionOrderPaymentErrorID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TransactionOrderPaymentID" uuid,
    "IsMerchantError" boolean DEFAULT false NOT NULL,
    "IsCardIssuerError" boolean DEFAULT false NOT NULL,
    "IsProcessorError" boolean DEFAULT false NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "ErrorMessage" varchar(500) NOT NULL,
    "ErrorCode" varchar(200) NOT NULL,
    "ErrorDetail" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderProcessLog (OID = 19461) :
--
CREATE TABLE public."TransactionOrderProcessLog" (
    "TransactionOrderID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "TransactionOrderStatusDetail" varchar(2000),
    "IsTransactionOrderProcessed" boolean DEFAULT false NOT NULL,
    "PaidOn" timestamp without time zone,
    "IsPaid" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "TransactionOrderPaymentID" uuid
)
WITH (oids = false);
--
-- Structure for table TwoFactorAuthTokens (OID = 19469) :
--
CREATE TABLE public."TwoFactorAuthTokens" (
    "Token" varchar(100) NOT NULL,
    "Issued" timestamp without time zone NOT NULL,
    "UserAccount_ID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountArchive (OID = 19474) :
--
CREATE TABLE public."UserAccountArchive" (
    "UserAccountArchiveID" uuid NOT NULL,
    "UserAccountArchiveCreatedOn" date NOT NULL,
    "UserAccountArchiveTypeID" serial NOT NULL,
    "UserAccountArchiveCategoryID" serial NOT NULL,
    "UserAccountArchiveData" varchar,
    "UserAccountArchiveVersionID" integer NOT NULL,
    "UserAccountArchiveStartDate" date NOT NULL,
    "UserAccountArchiveEndDate" date,
    "UserID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountAudit (OID = 19484) :
--
CREATE TABLE public."UserAccountAudit" (
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(200) NOT NULL,
    "AuditID" uuid NOT NULL,
    "UserIPAddress" varchar(200),
    "URLAccessed" varchar(2000),
    "TimeAccessed" timestamp without time zone,
    "Data" varchar,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountDetail (OID = 19492) :
--
CREATE TABLE public."UserAccountDetail" (
    "UserDetailID" uuid NOT NULL,
    "UserID" uuid NOT NULL,
    "Salutation" varchar(100),
    "FirstName" varchar(200),
    "MiddleName" varchar(200),
    "LastName" varchar(200),
    "Title" varchar(100),
    "HomePhone" varchar(100),
    "HomeMobile" varchar(100),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountLedgerAccount (OID = 19500) :
--
CREATE TABLE public."UserAccountLedgerAccount" (
    "UserAccountID" uuid NOT NULL,
    "LedgerAccountID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountLoginSession (OID = 19505) :
--
CREATE TABLE public."UserAccountLoginSession" (
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(50) NOT NULL,
    "UserIPAddress" varchar(50),
    "UserHostAddress" varchar(50),
    "UserLocation" varchar(100),
    "UserLoginDate" timestamp without time zone,
    "UserLogoutDate" timestamp without time zone,
    "UserHasLoggedOut" boolean
)
WITH (oids = false);
--
-- Structure for table UserAccountLoginSessionData (OID = 19508) :
--
CREATE TABLE public."UserAccountLoginSessionData" (
    "UserAccountLoginSessionDataID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(50) NOT NULL,
    "RequestData" json
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisation (OID = 19515) :
--
CREATE TABLE public."UserAccountOrganisation" (
    "UserID" uuid NOT NULL,
    "OrganisationUnitID" integer,
    "OrganisationID" uuid NOT NULL,
    "JobTitle" varchar(300),
    "NickName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserAccountOrganisationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "UserJobTypeID" integer,
    "UserTypeID" uuid NOT NULL,
    "ParentID" uuid,
    "PrimaryContactID" uuid
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationGroup (OID = 19524) :
--
CREATE TABLE public."UserAccountOrganisationGroup" (
    "OrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserAccountOrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationRole (OID = 19529) :
--
CREATE TABLE public."UserAccountOrganisationRole" (
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserAccountOrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationSecondaryUserType (OID = 19534) :
--
CREATE TABLE public."UserAccountOrganisationSecondaryUserType" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationStatus (OID = 19539) :
--
CREATE TABLE public."UserAccountOrganisationStatus" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "StatusChangedOn" timestamp without time zone NOT NULL,
    "StatusChangedBy" varchar(200) NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationStructure (OID = 19542) :
--
CREATE TABLE public."UserAccountOrganisationStructure" (
    "OrganisationID" uuid NOT NULL,
    "UserID" uuid NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationTeam (OID = 19545) :
--
CREATE TABLE public."UserAccountOrganisationTeam" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "OrganisationTeamID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccounts (OID = 19550) :
--
CREATE TABLE public."UserAccounts" (
    "ID" uuid NOT NULL,
    "Tenant" varchar(50) NOT NULL,
    "Username" varchar(100) NOT NULL,
    "Email" varchar(100),
    "Created" timestamp without time zone NOT NULL,
    "LastUpdated" timestamp without time zone NOT NULL,
    "PasswordChanged" timestamp without time zone,
    "RequiresPasswordReset" boolean NOT NULL,
    "MobileCode" varchar(100),
    "MobileCodeSent" timestamp without time zone,
    "MobilePhoneNumber" varchar(20),
    "AccountTwoFactorAuthMode" integer NOT NULL,
    "CurrentTwoFactorAuthStatus" integer NOT NULL,
    "IsAccountVerified" boolean NOT NULL,
    "IsLoginAllowed" boolean NOT NULL,
    "IsAccountClosed" boolean NOT NULL,
    "AccountClosed" timestamp without time zone,
    "LastLogin" timestamp without time zone,
    "LastFailedLogin" timestamp without time zone,
    "FailedLoginCount" integer NOT NULL,
    "VerificationKey" varchar(100),
    "VerificationPurpose" integer,
    "VerificationKeySent" timestamp without time zone,
    "HashedPassword" varchar(200),
    "LastFailedPasswordReset" timestamp without time zone,
    "FailedPasswordResetCount" integer DEFAULT 0 NOT NULL,
    "MobilePhoneNumberChanged" timestamp without time zone,
    "VerificationStorage" varchar(100),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsTemporaryAccount" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    "IsApproved" boolean DEFAULT false NOT NULL,
    "IsEmployee" boolean DEFAULT false NOT NULL,
    "FailedForgotUsernameAttempts" integer DEFAULT 0 NOT NULL,
    "FailedForgotPasswordAttempts" integer DEFAULT 0 NOT NULL,
    "IsForgotUsernameRequestAllowed" boolean NOT NULL,
    "IsForgotPasswordRequestAllowed" boolean NOT NULL,
    "LastForgotUsernameFailedAttempt" timestamp without time zone,
    "LastForgotPasswordFailedAttempt" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table UserCertificates (OID = 19565) :
--
CREATE TABLE public."UserCertificates" (
    "UserAccount_ID" uuid NOT NULL,
    "Thumbprint" varchar(150) NOT NULL,
    "Subject" varchar(250),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserClaims (OID = 19570) :
--
CREATE TABLE public."UserClaims" (
    "UserAccount_ID" uuid NOT NULL,
    "Type" varchar(150) NOT NULL,
    "Value" varchar(150) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserType (OID = 19575) :
--
CREATE TABLE public."UserType" (
    "UserTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsPrincipal" boolean DEFAULT true,
    "IsSecondary" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorflowParameterTemplate (OID = 19587) :
--
CREATE TABLE public."WorflowParameterTemplate" (
    "WorflowParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsConfigurable1" boolean DEFAULT false NOT NULL,
    "ParameterName" varchar(100) NOT NULL,
    "ParameterValue" varchar(1000) NOT NULL,
    "ParameterType" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Workflow (OID = 19597) :
--
CREATE TABLE public."Workflow" (
    "WorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "WorkflowTypeID" integer,
    "WorkflowSubTypeID" integer,
    "WorkflowCategoryID" integer,
    "WorkflowSubCategoryID" integer,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowAction (OID = 19605) :
--
CREATE TABLE public."WorkflowAction" (
    "WorkflowActionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowActionTypeID" uuid,
    "IsManual" boolean DEFAULT false NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionCompleteCondition (OID = 19615) :
--
CREATE TABLE public."WorkflowActionCompleteCondition" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionCompleteConditionTemplate (OID = 19618) :
--
CREATE TABLE public."WorkflowActionCompleteConditionTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecuteCommand (OID = 19621) :
--
CREATE TABLE public."WorkflowActionExecuteCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecuteCommandTemplate (OID = 19624) :
--
CREATE TABLE public."WorkflowActionExecuteCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecutionTemplate (OID = 19627) :
--
CREATE TABLE public."WorkflowActionExecutionTemplate" (
    "WorkflowActionExecutionID" uuid NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar(1000),
    "IsPre" boolean DEFAULT false NOT NULL,
    "IsPost" boolean DEFAULT false NOT NULL,
    "IsCanStart" boolean DEFAULT false NOT NULL,
    "IsCanComplete" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionNotificationTemplate (OID = 19639) :
--
CREATE TABLE public."WorkflowActionNotificationTemplate" (
    "WorkflowActionNotificationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "IsConfigurable" boolean DEFAULT false NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar(1000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameter (OID = 19649) :
--
CREATE TABLE public."WorkflowActionParameter" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameterNotificationConstruct (OID = 19652) :
--
CREATE TABLE public."WorkflowActionParameterNotificationConstruct" (
    "WorkflowActionParameterNotificationConstructID" uuid NOT NULL,
    "WorkflowActionParameterNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "Order" integer NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "WorkflowActionParameterNotificationConstructVersionNumber" integer,
    "WorkflowActionParameterNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameterNotificationConstructTemplate (OID = 19655) :
--
CREATE TABLE public."WorkflowActionParameterNotificationConstructTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "Order" integer NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "WorkflowActionParameterNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowActionParameterNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowActionTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowParameterTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "NotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "OrganisationTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "Order" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "IsActive" SET STATISTICS 100;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "IsDeleted" SET STATISTICS 100;
--
-- Structure for table WorkflowActionParameterTemplate (OID = 19658) :
--
CREATE TABLE public."WorkflowActionParameterTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPostCommand (OID = 19661) :
--
CREATE TABLE public."WorkflowActionPostCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPostCommandTemplate (OID = 19664) :
--
CREATE TABLE public."WorkflowActionPostCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPreCommand (OID = 19667) :
--
CREATE TABLE public."WorkflowActionPreCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPreCommandTemplate (OID = 19670) :
--
CREATE TABLE public."WorkflowActionPreCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionProductPlaceholder (OID = 19673) :
--
CREATE TABLE public."WorkflowActionProductPlaceholder" (
    "WorkflowActionProductPlaceholderID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "ProductTypeID" uuid NOT NULL,
    "Order" integer DEFAULT 0,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionStartCondition (OID = 19680) :
--
CREATE TABLE public."WorkflowActionStartCondition" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionStartConditionTemplate (OID = 19683) :
--
CREATE TABLE public."WorkflowActionStartConditionTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionTemplate (OID = 19686) :
--
CREATE TABLE public."WorkflowActionTemplate" (
    "WorkflowActionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowActionTypeTemplateID" uuid,
    "IsManual" boolean DEFAULT false NOT NULL,
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionValidationTemplate (OID = 19696) :
--
CREATE TABLE public."WorkflowActionValidationTemplate" (
    "WorkflowActionValidationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowClaim (OID = 19705) :
--
CREATE TABLE public."WorkflowClaim" (
    "WorkflowClaimID" uuid NOT NULL,
    "WorkflowRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowClaimTemplate (OID = 19710) :
--
CREATE TABLE public."WorkflowClaimTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowClaimTemplateID" uuid NOT NULL,
    "WorkflowRoleTemplateID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowCommand (OID = 19715) :
--
CREATE TABLE public."WorkflowCommand" (
    "WorkflowCommandID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandCondition (OID = 19722) :
--
CREATE TABLE public."WorkflowCommandCondition" (
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandConditionTemplate (OID = 19725) :
--
CREATE TABLE public."WorkflowCommandConditionTemplate" (
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandParameter (OID = 19728) :
--
CREATE TABLE public."WorkflowCommandParameter" (
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandParameterTemplate (OID = 19731) :
--
CREATE TABLE public."WorkflowCommandParameterTemplate" (
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandTemplate (OID = 19734) :
--
CREATE TABLE public."WorkflowCommandTemplate" (
    "WorkflowCommandTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "WorkflowObjectTypeTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowCondition (OID = 19742) :
--
CREATE TABLE public."WorkflowCondition" (
    "WorkflowConditionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionParameter (OID = 19749) :
--
CREATE TABLE public."WorkflowConditionParameter" (
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionParameterTemplate (OID = 19752) :
--
CREATE TABLE public."WorkflowConditionParameterTemplate" (
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionTemplate (OID = 19755) :
--
CREATE TABLE public."WorkflowConditionTemplate" (
    "WorkflowConditionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecision (OID = 19763) :
--
CREATE TABLE public."WorkflowDecision" (
    "WorkflowDecisionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowDecisionTypeID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionError (OID = 19772) :
--
CREATE TABLE public."WorkflowDecisionError" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowActionID" uuid,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionErrorID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionErrorTemplate (OID = 19776) :
--
CREATE TABLE public."WorkflowDecisionErrorTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionErrorTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionExecuteCommand (OID = 19780) :
--
CREATE TABLE public."WorkflowDecisionExecuteCommand" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionExecuteCommandTemplate (OID = 19783) :
--
CREATE TABLE public."WorkflowDecisionExecuteCommandTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionFailure (OID = 19786) :
--
CREATE TABLE public."WorkflowDecisionFailure" (
    "WorkflowDecisionID" uuid NOT NULL,
    "NextWorkflowActionID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionFailureID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionFailureTemplate (OID = 19790) :
--
CREATE TABLE public."WorkflowDecisionFailureTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionFailureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionParameter (OID = 19794) :
--
CREATE TABLE public."WorkflowDecisionParameter" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionParameterTemplate (OID = 19797) :
--
CREATE TABLE public."WorkflowDecisionParameterTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionSuccess (OID = 19800) :
--
CREATE TABLE public."WorkflowDecisionSuccess" (
    "WorkflowDecisionID" uuid NOT NULL,
    "NextWorkflowActionID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionSuccessID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionSuccessTemplate (OID = 19804) :
--
CREATE TABLE public."WorkflowDecisionSuccessTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionSuccessTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionTemplate (OID = 19808) :
--
CREATE TABLE public."WorkflowDecisionTemplate" (
    "WorkflowDecisionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowDecisionTypeTemplateID" uuid,
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowExecution (OID = 19817) :
--
CREATE TABLE public."WorkflowExecution" (
    "WorkflowExecutionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "VersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowExecutionStatus (OID = 19825) :
--
CREATE TABLE public."WorkflowExecutionStatus" (
    "WorkflowExecutionStatusID" serial NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table WorkflowExecutionTemplate (OID = 19833) :
--
CREATE TABLE public."WorkflowExecutionTemplate" (
    "WorkflowExecutionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "VersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowHierarchy (OID = 19841) :
--
CREATE TABLE public."WorkflowHierarchy" (
    "WorkflowHierarchyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsTransistionStart" boolean,
    "IsTranistionEnd" boolean,
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "IsChildDependentOnParent" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorkflowHierarchyTemplate (OID = 19846) :
--
CREATE TABLE public."WorkflowHierarchyTemplate" (
    "WorkflowHierarchyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsTransistionStart" boolean,
    "IsTranistionEnd" boolean,
    "IsChildDependentOnParent" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorkflowInstance (OID = 19851) :
--
CREATE TABLE public."WorkflowInstance" (
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "WorkflowInstanceStatusID" integer NOT NULL,
    "WorkflowInstanceTypeID" integer,
    "WorkflowInstanceSubTypeID" integer,
    "WorkflowInstanceCategoryID" integer,
    "WorkflowInstanceSubCategoryID" integer,
    "WorkflowInstanceTempData" varchar
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecution (OID = 19857) :
--
CREATE TABLE public."WorkflowInstanceExecution" (
    "WorkflowInstanceExecutionID" serial NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowActionID" uuid,
    "WorkflowDecisionID" uuid,
    "WorkflowConditionID" uuid,
    "WorkflowCommandID" uuid,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "CreatedOn" date,
    "NumberOfRetries" integer DEFAULT 0
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionDataItem (OID = 19861) :
--
CREATE TABLE public."WorkflowInstanceExecutionDataItem" (
    "WorkflowInstanceExecutionDataItemID" integer DEFAULT nextval('"WorkflowInstanceExecutionData_WorkflowInstanceExecutionData_seq"'::regclass) NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "FieldName" varchar(300) NOT NULL,
    "FieldTypeID" integer,
    "DataContent" varchar,
    "DataStr" varchar,
    "DataNotJsonSerialized" boolean DEFAULT false NOT NULL,
    "EventOrder" integer,
    "WorkflowInstanceExecutionStatusEventID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionStatusEvent (OID = 19870) :
--
CREATE TABLE public."WorkflowInstanceExecutionStatusEvent" (
    "WorkflowInstanceExecutionStatusEventID" integer DEFAULT nextval('"WorkflowInstanceExecutionStat_WorkflowInstanceExecutionStat_seq"'::regclass) NOT NULL,
    "EventDate" timestamp without time zone NOT NULL,
    "EventBy" varchar(200) NOT NULL,
    "WorkflowExecutionStatusID" integer NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "EventOrder" integer NOT NULL,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionTrace (OID = 19875) :
--
CREATE TABLE public."WorkflowInstanceExecutionTrace" (
    "WorkflowInstanceExecutionTraceID" uuid NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowInstanceID" uuid,
    "WorkflowTransistionID" uuid,
    "WorkflowActionID" uuid,
    "WorkflowDecisionID" uuid,
    "WorkflowConditionID" uuid,
    "WorkflowCommandID" uuid,
    "TraceDetail" varchar(5000),
    "TraceStackTrace" varchar(5000),
    "HasError" boolean DEFAULT false NOT NULL,
    "ExecutedOn" date NOT NULL,
    "ExecutedBy" varchar(300),
    "AdditionalContent" varchar(5000),
    "NumberOfRetries" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceRestriction (OID = 19885) :
--
CREATE TABLE public."WorkflowInstanceRestriction" (
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid,
    "WorkflowVersionNumber" integer,
    "UserAccountOrganisationID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceSession (OID = 19890) :
--
CREATE TABLE public."WorkflowInstanceSession" (
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "SessionStartedOn" timestamp without time zone NOT NULL,
    "SessionEndedOn" timestamp without time zone NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainCompleteCondition (OID = 19893) :
--
CREATE TABLE public."WorkflowMainCompleteCondition" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowConditionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainCompleteConditionTemplate (OID = 19896) :
--
CREATE TABLE public."WorkflowMainCompleteConditionTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainExecuteCommand (OID = 19899) :
--
CREATE TABLE public."WorkflowMainExecuteCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainExecuteCommandTemplate (OID = 19902) :
--
CREATE TABLE public."WorkflowMainExecuteCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainParameter (OID = 19905) :
--
CREATE TABLE public."WorkflowMainParameter" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowParameterID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainParameterTemplate (OID = 19908) :
--
CREATE TABLE public."WorkflowMainParameterTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPostCommand (OID = 19911) :
--
CREATE TABLE public."WorkflowMainPostCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPostCommandTemplate (OID = 19914) :
--
CREATE TABLE public."WorkflowMainPostCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPreCommand (OID = 19917) :
--
CREATE TABLE public."WorkflowMainPreCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPreCommandTemplate (OID = 19920) :
--
CREATE TABLE public."WorkflowMainPreCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainStartCondition (OID = 19923) :
--
CREATE TABLE public."WorkflowMainStartCondition" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowConditionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainStartConditionTemplate (OID = 19926) :
--
CREATE TABLE public."WorkflowMainStartConditionTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowNotificationConstruct (OID = 19929) :
--
CREATE TABLE public."WorkflowNotificationConstruct" (
    "WorkflowNotificationConstructID" uuid NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowNotificationConstructTemplate (OID = 19934) :
--
CREATE TABLE public."WorkflowNotificationConstructTemplate" (
    "WorkflowNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowObjectType (OID = 19939) :
--
CREATE TABLE public."WorkflowObjectType" (
    "WorkflowObjectTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectTypeName" varchar(1000) NOT NULL,
    "ObjectTypeNameSpace" varchar(1000) NOT NULL,
    "ObjectTypeAssembly" varchar(1000) NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowObjectTypeTemplate (OID = 19946) :
--
CREATE TABLE public."WorkflowObjectTypeTemplate" (
    "WorkflowObjectTypeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectTypeName" varchar(1000) NOT NULL,
    "ObjectTypeNameSpace" varchar(1000) NOT NULL,
    "ObjectTypeAssembly" varchar(1000) NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowParameter (OID = 19953) :
--
CREATE TABLE public."WorkflowParameter" (
    "WorkflowParameterID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectType" varchar(1000) NOT NULL,
    "ObjectValue" varchar(2000) NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowParameterTemplate (OID = 19960) :
--
CREATE TABLE public."WorkflowParameterTemplate" (
    "WorkflowParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ObjectType" varchar(1000) NOT NULL,
    "ObjectValue" varchar(2000) NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowRole (OID = 19967) :
--
CREATE TABLE public."WorkflowRole" (
    "WorkflowRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean NOT NULL,
    "IsDeleted" boolean NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowRoleTemplate (OID = 19973) :
--
CREATE TABLE public."WorkflowRoleTemplate" (
    "WorkflowRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowStatusType (OID = 19981) :
--
CREATE TABLE public."WorkflowStatusType" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowStatusTypeTemplate (OID = 19986) :
--
CREATE TABLE public."WorkflowStatusTypeTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTemplate (OID = 19991) :
--
CREATE TABLE public."WorkflowTemplate" (
    "WorkflowTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "WorkflowTypeID" integer,
    "WorkflowSubTypeID" integer,
    "WorkflowCategoryID" integer,
    "WorkflowSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistion (OID = 19999) :
--
CREATE TABLE public."WorkflowTransistion" (
    "WorkflowTransistionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionCompleteCondition (OID = 20008) :
--
CREATE TABLE public."WorkflowTransistionCompleteCondition" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionCompleteConditionTemplate (OID = 20011) :
--
CREATE TABLE public."WorkflowTransistionCompleteConditionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionHierarchy (OID = 20014) :
--
CREATE TABLE public."WorkflowTransistionHierarchy" (
    "WorkflowTransistionHierarchyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionHierarchyTemplate (OID = 20019) :
--
CREATE TABLE public."WorkflowTransistionHierarchyTemplate" (
    "WorkflowTransistionHierarchyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionParameter (OID = 20025) :
--
CREATE TABLE public."WorkflowTransistionParameter" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionParameterTemplate (OID = 20028) :
--
CREATE TABLE public."WorkflowTransistionParameterTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionStartCondition (OID = 20031) :
--
CREATE TABLE public."WorkflowTransistionStartCondition" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionStartConditionTemplate (OID = 20034) :
--
CREATE TABLE public."WorkflowTransistionStartConditionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionTemplate (OID = 20037) :
--
CREATE TABLE public."WorkflowTransistionTemplate" (
    "WorkflowTransistionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowAction (OID = 20047) :
--
CREATE TABLE public."WorkflowTransistionWorkflowAction" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowActionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowActionTemplate (OID = 20050) :
--
CREATE TABLE public."WorkflowTransistionWorkflowActionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowDecision (OID = 20053) :
--
CREATE TABLE public."WorkflowTransistionWorkflowDecision" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowDecisionTemplate (OID = 20056) :
--
CREATE TABLE public."WorkflowTransistionWorkflowDecisionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTreeStructure (OID = 20059) :
--
CREATE TABLE public."WorkflowTreeStructure" (
    "WorkflowTreeStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "ItemOrder" integer NOT NULL,
    "IsLeafNode" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "IsActive" bit(1) DEFAULT B'1'::"bit" NOT NULL,
    "IsDeleted" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "ParentID" uuid,
    "InterfacePanelID" uuid,
    "InterfacePanelVersionNumber" integer,
    "Level" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructure" ALTER COLUMN "WorkflowTreeStructureID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureAction (OID = 20069) :
--
CREATE TABLE public."WorkflowTreeStructureAction" (
    "WorkflowTreeStructureActionID" uuid NOT NULL,
    "WorkflowTreeStructureID" uuid,
    "WorkflowActionID" uuid,
    "IsVisible" boolean DEFAULT true,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(1000)
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructureAction" ALTER COLUMN "WorkflowTreeStructureID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowTreeStructureAction" ALTER COLUMN "WorkflowActionID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureActionTemplate (OID = 20078) :
--
CREATE TABLE public."WorkflowTreeStructureActionTemplate" (
    "WorkflowTreeStructureActionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTreeStructureTemplateID" uuid,
    "WorkflowActionTemplateID" uuid,
    "IsVisible" boolean DEFAULT true,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ConditionString" varchar(1000)
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructureActionTemplate" ALTER COLUMN "WorkflowTreeStructureTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowTreeStructureActionTemplate" ALTER COLUMN "WorkflowActionTemplateID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureTemplate (OID = 20088) :
--
CREATE TABLE public."WorkflowTreeStructureTemplate" (
    "WorkflowTreeStructureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "Level" integer NOT NULL,
    "IsLeafNode" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "IsActive" bit(1),
    "IsDeleted" bit(1),
    "ParentID" uuid,
    "InterfacePanelTemplateID" uuid,
    "InterfacePanelTemplateVersionNumber" integer,
    "ItemOrder" integer
)
WITH (oids = false);
--
-- Structure for table appmanager (OID = 20096) :
--
CREATE TABLE public.appmanager (
    psize integer NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence busmessagecontent_busmessagecontentid_seq (OID = 20099) :
--
CREATE SEQUENCE public.busmessagecontent_busmessagecontentid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Structure for table containsagadata (OID = 20101) :
--
CREATE TABLE public.containsagadata (
    id uuid NOT NULL,
    originator varchar(255),
    originalmessageid varchar(255)
)
WITH (oids = false);
--
-- Definition for sequence currencyrate_seq (OID = 20107) :
--
CREATE SEQUENCE public.currencyrate_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence elmah_error_sequence (OID = 20109) :
--
CREATE SEQUENCE public.elmah_error_sequence
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence globalaccountingperiod_globalaccountingperiodid_seq (OID = 20111) :
--
CREATE SEQUENCE public.globalaccountingperiod_globalaccountingperiodid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence organisationaccountingperiod_organisationaccountingperiodid_seq (OID = 20113) :
--
CREATE SEQUENCE public.organisationaccountingperiod_organisationaccountingperiodid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence organisationtype_organisationtypeid_seq (OID = 20115) :
--
CREATE SEQUENCE public.organisationtype_organisationtypeid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence plangroup_plangroupid_seq (OID = 20117) :
--
CREATE SEQUENCE public.plangroup_plangroupid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Structure for table subscription (OID = 20119) :
--
CREATE TABLE public.subscription (
    subscriberendpoint varchar(450) NOT NULL,
    messagetype varchar(450) NOT NULL,
    version varchar(450),
    typename varchar(450)
)
WITH (oids = false);
--
-- Structure for table timeoutentity (OID = 20125) :
--
CREATE TABLE public.timeoutentity (
    id uuid NOT NULL,
    destination varchar(1024),
    sagaid uuid,
    state bytea,
    "time" timestamp without time zone,
    correlationid varchar(1024),
    headers text,
    endpoint varchar(440)
)
WITH (oids = false);
--
-- Definition for view vAttachment (OID = 20131) :
--
CREATE VIEW public."vAttachment"
AS
SELECT "AttachmentDetail"."AttachmentDetailID",
    "AttachmentDetail"."OrganisationID",
    "AttachmentDetail"."IsActive",
    "AttachmentDetail"."IsDeleted",
    "Attachment"."FileName",
    "AttachmentDetail"."RepositoryStructureID",
    "Attachment"."Subject",
    "Attachment"."MimeType",
    "Attachment"."Body",
    "Attachment"."FileSize",
    "Repository"."Name" AS "RepositoryName",
    "Attachment"."AttachmentID"
FROM (((("Attachment"
     JOIN "AttachmentDetail" ON (("Attachment"."AttachmentDetailID" =
         "AttachmentDetail"."AttachmentDetailID")))
     JOIN "RepositoryStructure" ON
         (("AttachmentDetail"."RepositoryStructureID" = "RepositoryStructure"."RepositoryStructureID")))
     JOIN "Repository" ON ((("RepositoryStructure"."RepositoryID" =
         "Repository"."RepositoryID") AND ("RepositoryStructure"."RepositoryID" = "Repository"."RepositoryID"))))
     JOIN "OrganisationDetail" ON
         (("OrganisationDetail"."OrganisationDefaultLogoID" = "AttachmentDetail"."AttachmentDetailID")))
WHERE ("AttachmentDetail"."IsDeleted" = true);

--
-- Definition for view vBranch (OID = 20136) :
--
CREATE VIEW public."vBranch"
AS
SELECT os."OrganisationID" AS "ParentOrganisationID",
    org."OrganisationID" AS "BranchOrganisationID",
    org."IsHeadOffice",
    contact."ContactID",
    branch."Name" AS "BranchName",
    contact."ContactName",
    contact."EmailAddress1",
    contact."Telephone1",
    contact."IsPrimaryContact",
    org."IsDeleted",
    contact."Telephone2",
    contact."MobileNumber1",
    contact."MobileNumber2",
    contact."EmailAddress2",
    contact."WebSiteURL",
    contact."ContactCategoryID",
    contact."ContactTypeID"
FROM (((("OrganisationStructure" os
     JOIN "OrganisationStructure" branch ON ((os."OrganisationStructureID"
         = branch."ParentOrganisationStructureID")))
     JOIN "OrganisationDetail" od ON ((branch."OrganisationID" =
         od."OrganisationID")))
     JOIN "Organisation" org ON ((branch."OrganisationID" = org."OrganisationID")))
     JOIN "Contact" contact ON ((org."OrganisationID" = contact."ParentID")));

--
-- Definition for view vBusTaskSchedule (OID = 20141) :
--
CREATE VIEW public."vBusTaskSchedule"
AS
SELECT bts."BusTaskScheduleID",
    bt."BusTaskID",
    bts."IntervalInMinutes",
    bt."CreatedOn",
    bt."Name",
    bt."Description",
    bt."IsActive",
    bt."IsDeleted",
    bth."BusTaskHandlerID",
    bth."ObjectTypeName",
    bth."ObjectTypeAssembly",
    bth."MessageTypeName",
    bth."MessageTypeAssembly"
FROM (("BusTaskSchedule" bts
     LEFT JOIN "BusTask" bt ON ((((bt."BusTaskID" = bts."BusTaskID") AND
         (bt."IsActive" = true)) AND (bt."IsDeleted" = false))))
     LEFT JOIN "BusTaskHandler" bth ON ((((bth."BusTaskHandlerID" =
         bt."BusTaskHandlerID") AND (bth."IsActive" = true)) AND (bth."IsDeleted" = false))))
WHERE ((bts."IsActive" = true) AND (bts."IsDeleted" = false));

--
-- Definition for view vClaimSource (OID = 20146) :
--
CREATE VIEW public."vClaimSource"
AS
SELECT uuid_generate_v1() AS "ID",
    'Resource'::text AS "ClaimType",
    res."ResourceID" AS "ClaimID",
    res."ResourceName" AS "ClaimName",
    'Operation'::text AS "ClaimSubType",
    op."OperationID" AS "ClaimSubID",
    op."OperationName" AS "ClaimSubName"
FROM (("Resource" res
     JOIN "ResourceOperation" ro ON ((ro."ResourceID" = res."ResourceID")))
     LEFT JOIN "Operation" op ON ((op."OperationID" = ro."OperationID")))
UNION
SELECT uuid_generate_v1() AS "ID",
    'State'::text AS "ClaimType",
    sat."StateID" AS "ClaimID",
    sat."StateName" AS "ClaimName",
    'StateItem'::text AS "ClaimSubType",
    si."StateItemID" AS "ClaimSubID",
        CASE
            WHEN (psi."StateItemName" IS NULL) THEN (si."StateItemName")::text
            ELSE (((psi."StateItemName")::text || '_'::text) ||
                (si."StateItemName")::text)
        END AS "ClaimSubName"
FROM (("State" sat
     JOIN "StateItem" si ON ((si."StateID" = sat."StateID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")));

--
-- Definition for view vClassification (OID = 20151) :
--
CREATE VIEW public."vClassification"
AS
SELECT ct."ClassificationTypeID" AS classificationtypeid,
    ct."Name" AS name,
    ctc."ClassificationTypeCategoryID",
    ctc."Name" AS categoryname
FROM ("ClassificationType" ct
     LEFT JOIN "ClassificationTypeCategory" ctc ON
         ((ctc."ClassificationTypeCategoryID" = ct."ClassificationTypeCategoryID")));

--
-- Definition for view vCountryAndCurrency (OID = 20155) :
--
CREATE VIEW public."vCountryAndCurrency"
AS
SELECT cc."CountryCode",
    cc."CountryName",
    cc."CurrencyCode",
    curr."CurrencyName",
    curate."CurrencyRateDate",
    curate."CurrencyRate",
    curate."CurrencyRateToGBP",
    curate."CurrencyRateToUSD"
FROM (("CountryCode" cc
     LEFT JOIN "CurrencyCode" curr ON (((curr."CurrencyCode")::text =
         (cc."CurrencyCode")::text)))
     LEFT JOIN "CurrencyRate" curate ON ((((curate."CurrencyCode")::text =
         (cc."CurrencyCode")::text) AND (curate."CurrencyRateDate" = (
    SELECT max(rr."CurrencyRateDate") AS max
    FROM "CurrencyRate" rr
    WHERE ((rr."CurrencyCode")::text = (cc."CurrencyCode")::text)
    )))))
WHERE (curate."CurrencyRateDate" IS NOT NULL);

--
-- Definition for view vCountryDeduction (OID = 20160) :
--
CREATE VIEW public."vCountryDeduction"
AS
SELECT cd."CountryDeductionID",
    cd."CountryCode",
    cd."DeductionID",
    cd."DeductionVersionNumber",
    cd."DeductionPercentage",
    cd."DeductionValue",
    cd."IsActive",
    cd."IsDeleted",
    cd."IsAppliedToAllOrders",
    de."Name",
    de."Description",
    de."IsPercentageBased",
        CASE
            WHEN (EXISTS (
    SELECT dp_1."DeductionID",
                dp_1."DeductionVersionNumber",
                dp_1."ProductID",
                dp_1."ProductVersionID"
    FROM "DeductionProduct" dp_1
    WHERE ((dp_1."DeductionID" = cd."DeductionID") AND
        (dp_1."DeductionVersionNumber" = cd."DeductionVersionNumber"))
    LIMIT 1
    )) THEN true
            ELSE false
        END AS "IsProductDeduction",
    dp."ProductID",
    dp."ProductVersionID"
FROM (("CountryDeduction" cd
     LEFT JOIN "Deduction" de ON (((((de."DeductionID" = cd."DeductionID")
         AND (de."IsActive" = true)) AND (de."IsDeleted" = false)) AND (de."DeductionVersionNumber" = cd."DeductionVersionNumber"))))
     LEFT JOIN "DeductionProduct" dp ON (((dp."DeductionID" =
         cd."DeductionID") AND (dp."DeductionVersionNumber" = cd."DeductionVersionNumber"))))
WHERE ((cd."IsActive" = true) AND (cd."IsDeleted" = false));

--
-- Definition for view vDefaultEmailAddress (OID = 20165) :
--
CREATE VIEW public."vDefaultEmailAddress"
AS
SELECT ua."ID" AS "UserID",
    ua."Username",
    ua."Email",
    uao."UserAccountOrganisationID",
    uao."OrganisationID" AS "BranchOrganisationID",
    con."EmailAddress1" AS "BranchEmailAddress",
    COALESCE(porg."OrganisationID", uao."OrganisationID") AS "OrganisationID",
    pcon."EmailAddress1"
FROM ((((((("UserAccounts" ua
     JOIN "UserAccountOrganisation" uao ON ((uao."UserID" = ua."ID")))
     LEFT JOIN "Organisation" org ON ((org."OrganisationID" =
         uao."OrganisationID")))
     LEFT JOIN "Contact" con ON (((con."ParentID" = uao."OrganisationID")
         AND (con."IsPrimaryContact" = true))))
     LEFT JOIN "Address" addr ON (((addr."ParentID" = con."ContactID") AND
         (addr."IsPrimaryAddress" = true))))
     LEFT JOIN "Organisation" porg ON ((porg."OrganisationID" =
         org."ParentOrganisationID")))
     LEFT JOIN "Contact" pcon ON (((pcon."ParentID" = org."OrganisationID")
         AND (pcon."IsPrimaryContact" = true))))
     LEFT JOIN "Address" paddr ON (((paddr."ParentID" = pcon."ContactID")
         AND (paddr."IsPrimaryAddress" = true))));

--
-- Definition for view vStatusType (OID = 20170) :
--
CREATE VIEW public."vStatusType"
AS
SELECT stv."StatusTypeValueID",
    stv."StatusTypeID",
    stv."StatusTypeVersionNumber",
    stv."Name",
    st."Name" AS "StatusTypeName",
    sts."StatusOrder",
    sts."IsStart",
    sts."IsEnd"
FROM (("StatusTypeValue" stv
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" =
         stv."StatusTypeID") AND (st."StatusTypeVersionNumber" = stv."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeStructure" sts ON ((((sts."StatusTypeID" =
         stv."StatusTypeID") AND (sts."StatusTypeVersionNumber" = stv."StatusTypeVersionNumber")) AND (sts."StatusTypeValueID" = stv."StatusTypeValueID"))));

--
-- Definition for view vDefaultOrganisationStatus (OID = 20175) :
--
CREATE VIEW public."vDefaultOrganisationStatus"
AS
SELECT od."DefaultOrganisationID",
    od."DefaultOrganisationVersionNumber",
    od."DefaultOrganisationTemplateID",
    od."DefaultOrganisationTemplateVersionNumber",
    od."Name",
    od."IsActive",
    od."IsDeleted",
    od."OrganisationTypeID" AS "RootOrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    dot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    true AS "IsDefault",
    dot."StatusTypeID",
    dot."StatusTypeVersionNumber",
    vsst."StatusTypeName",
    vsst."Name" AS "StatusTypeValueName",
    vsst."StatusTypeValueID",
    vsst."StatusOrder",
    vsst."IsStart",
    vsst."IsEnd"
FROM ((("DefaultOrganisation" od
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         od."OrganisationTypeID")))
     JOIN "DefaultOrganisationTarget" dot ON (((dot."DefaultOrganisationID"
         = od."DefaultOrganisationID") AND (dot."DefaultOrganisationVersionNumber" = od."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "vStatusType" vsst ON ((((vsst."StatusTypeID" =
         dot."StatusTypeID") AND (vsst."StatusTypeVersionNumber" = dot."StatusTypeVersionNumber")) AND (vsst."IsStart" = true))))
UNION
SELECT od."DefaultOrganisationID",
    od."DefaultOrganisationVersionNumber",
    od."DefaultOrganisationTemplateID",
    od."DefaultOrganisationTemplateVersionNumber",
    od."Name",
    od."IsActive",
    od."IsDeleted",
    od."OrganisationTypeID" AS "RootOrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    NULL::integer AS "OrganisationTypeID",
    dout."UserTypeID",
    dout."IsDefault",
    dout."StatusTypeID",
    dout."StatusTypeVersionNumber",
    vsst."StatusTypeName",
    vsst."Name" AS "StatusTypeValueName",
    vsst."StatusTypeValueID",
    vsst."StatusOrder",
    vsst."IsStart",
    vsst."IsEnd"
FROM ((("DefaultOrganisation" od
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         od."OrganisationTypeID")))
     JOIN "DefaultOrganisationUserTarget" dout ON
         (((dout."DefaultOrganisationID" = od."DefaultOrganisationID") AND (dout."DefaultOrganisationVersionNumber" = od."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "vStatusType" vsst ON ((((vsst."StatusTypeID" =
         dout."StatusTypeID") AND (vsst."StatusTypeVersionNumber" = dout."StatusTypeVersionNumber")) AND (vsst."IsStart" = true))));

--
-- Definition for view vDefaultOrganisationUserTypeOrganisationType (OID = 20180) :
--
CREATE VIEW public."vDefaultOrganisationUserTypeOrganisationType"
AS
SELECT dout."DefaultOrganisationID",
    dout."DefaultOrganisationVersionNumber",
    dorg."Name" AS "DefaultOrganisationName",
    dout."UserTypeID",
    ut."Name" AS "UserTypeName",
    ot."OrganisationTypeID",
    ot."Name" AS "OrganisationTypeName"
FROM ((("DefaultOrganisationUserTarget" dout
     LEFT JOIN "DefaultOrganisation" dorg ON
         (((dout."DefaultOrganisationID" = dorg."DefaultOrganisationID") AND (dout."DefaultOrganisationVersionNumber" = dorg."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "OrganisationType" ot ON ((dorg."OrganisationTypeID" =
         ot."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((dout."UserTypeID" = ut."UserTypeID")))
WHERE (((dout."IsActive" = true) AND (dout."IsDeleted" = false)) AND
    (dout."IsDefault" = true));

--
-- Definition for view vFieldDetailForUI (OID = 20185) :
--
CREATE VIEW public."vFieldDetailForUI"
AS
SELECT ''::character varying AS "InterfacePanelName",
    fd."FieldDetailID",
    fd."Name",
    fd."Description",
    fd."FieldLabelValue" AS "OverrideFieldLabelValue",
    fd."DefaultValue" AS "OverrideDefaultValue",
    fd."IsActive",
    fd."IsDeleted",
    fd."ToolTipValue" AS "OverrideToolTipValue",
    fd."ToolTipHTML" AS "OverrideToolTipHTML",
    fd."ToolTipIsHTML" AS "OverrideToolTipIsHTML",
    fd."InformationValue" AS "OverrideInformationValue",
    fd."InformationHTML" AS "OverrideInformationHTML",
    fd."InformationIsHTML" AS "OverrideInformationIsHTML",
    fd."HelpValue" AS "OverrideHelpValue",
    fd."HelpHTML" AS "OverrideHelpHTML",
    fd."HelpIsHTML" AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    false AS "IsVisible",
    false AS "IsMandatory",
    false AS "IsFilterable",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ("FieldDetail" fd
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFieldDetail" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    COALESCE(ipfd."OrganisationTypeID", NULL::integer) AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFieldDetailOrganisationType" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    COALESCE(ipfd."OrganisationTypeID", NULL::integer) AS "OrganisationTypeID",
    COALESCE(ipfd."UserTypeID", NULL::uuid) AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFDOrganisationTypeUserType" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")));

--
-- Definition for view vFieldDetailValidationForUI (OID = 20190) :
--
CREATE VIEW public."vFieldDetailValidationForUI"
AS
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    ipfd."FieldDetailID",
    COALESCE(d."OverrideValidationMessage",
        ipfd."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        ipfd."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", ipfd."OverrideValidationIsHTML")
        AS "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", ipfd."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", ipfd."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(d."ValidationCategory", ipfd."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", ipfd."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", ipfd."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    ipfd."InterfacePanelFieldDetailValidationName",
    d."OrganisationTypeID",
    d."UserTypeID",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelFDValidationOrganisationTypeUserType" d
     LEFT JOIN "InterfacePanelFieldDetailValidation" ipfd ON
         ((((ipfd."FieldDetailID" = d."FieldDetailID") AND (ipfd."InterfacePanelID" = d."InterfacePanelID")) AND (ipfd."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
UNION ALL
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    ipfd."FieldDetailID",
    COALESCE(d."OverrideValidationMessage",
        ipfd."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        ipfd."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", ipfd."OverrideValidationIsHTML")
        AS "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", ipfd."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", ipfd."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(d."ValidationCategory", ipfd."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", ipfd."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", ipfd."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    ipfd."InterfacePanelFieldDetailValidationName",
    d."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelFieldDetailValidationOrganisationType" d
     LEFT JOIN "InterfacePanelFieldDetailValidation" ipfd ON
         ((((ipfd."FieldDetailID" = d."FieldDetailID") AND (ipfd."InterfacePanelID" = d."InterfacePanelID")) AND (ipfd."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
UNION ALL
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    d."FieldDetailID",
    COALESCE(d."OverrideValidationMessage", d."OverrideValidationMessage")
        AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        d."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", d."OverrideValidationIsHTML") AS
        "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", d."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", d."ValidationSubType") AS "ValidationSubType",
    COALESCE(d."ValidationCategory", d."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", d."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", d."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    d."InterfacePanelFieldDetailValidationName",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ("InterfacePanelFieldDetailValidation" d
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))));

--
-- Definition for view vGlobalAccountingCurrentPeriod (OID = 20195) :
--
CREATE VIEW public."vGlobalAccountingCurrentPeriod"
AS
SELECT gap."GlobalAccountingPeriodID",
    to_date(((((((((((gap."Year" || '-'::text) || gap."Month") ||
        '-'::text) || gap."StartDay") || ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0), 'YYYY-MM-DD HH24:MI:SS'::text) AS "AccountingPeriodStart",
    to_date(((((((((((gap."Year" || '-'::text) || gap."Month") ||
        '-'::text) || gap."EndDay") || ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0), 'YYYY-MM-DD HH24:MI:SS'::text) AS "AccountingPeriodEnd",
    gap."IsFinancialClosePeriod" AS "AccountingPeriodFinancialClose",
    gdd."IsManuallyDrivenOnly" AS "DDIsManuallyDrivenOnly",
    gdd."GlobalDirectDebitCollectionPeriodID",
    gdd."CollectionDay" AS "DDCollectionDay",
    gdd."CollectionMonth" AS "DDCollectionMonth",
    gdd."CollectionYear" AS "DDCollectionYear",
    gap."PeriodNumber" AS "AccountingPeriodNumber",
    gdd."PeriodNumber" AS "DDPeriodNumber"
FROM ("GlobalAccountingPeriod" gap
     JOIN "GlobalDirectDebitCollectionPeriod" gdd ON
         (((((((gdd."IsCurrentPeriod" = true) AND (gdd."IsActive" = true)) AND (gdd."CollectionMonth" = gap."Month")) AND (gdd."CollectionYear" = gap."Year")) AND (gdd."IsClosed" = false)) AND (gdd."CollectionDay" = (
    SELECT period."CollectionDay"
    FROM "GlobalDirectDebitCollectionPeriod" period
    WHERE (((((period."IsCurrentPeriod" = true) AND (period."IsActive" =
        true)) AND (period."CollectionMonth" = gap."Month")) AND (period."CollectionYear" = gap."Year")) AND (period."IsClosed" = false))
    ORDER BY period."CollectionDay" DESC
    LIMIT 1
    )))))
WHERE ((gap."IsCurrentPeriod" = true) AND (gap."IsClosed" = false));

--
-- Definition for view vGroup (OID = 20200) :
--
CREATE VIEW public."vGroup"
AS
SELECT DISTINCT gt."GroupID",
    gt."GroupName",
    gt."GroupDescription",
    gt."GroupTypeID",
    gt."GroupSubTypeID",
    gt."GroupCategoryID",
    gt."IsActive",
    gt."IsDeleted",
        CASE (orggrp."OrganisationGroupID" IS NOT NULL)
            WHEN true THEN true
            ELSE false
        END AS "IsDisabled"
FROM ("Group" gt
     LEFT JOIN "OrganisationGroup" orggrp ON ((gt."GroupID" =
         orggrp."OrganisationGroupID")));

--
-- Definition for view vInterfacePanelFieldDetails (OID = 20205) :
--
CREATE VIEW public."vInterfacePanelFieldDetails"
AS
SELECT ipfdv."InterfacePanelID",
    ip."Name" AS panelname,
    ipfdv."FieldDetailID",
    fd."Name" AS fieldname,
    ipfdv."OverrideValidationMessage"
FROM (("InterfacePanelFieldDetailValidation" ipfdv
     LEFT JOIN "InterfacePanel" ip ON ((ipfdv."InterfacePanelID" =
         ip."InterfacePanelID")))
     LEFT JOIN "FieldDetail" fd ON ((ipfdv."FieldDetailID" = fd."FieldDetailID")));

--
-- Definition for view vInterfacePanelForUI (OID = 20210) :
--
CREATE VIEW public."vInterfacePanelForUI"
AS
SELECT ipotut."InterfacePanelID",
    ipotut."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ipotut."IsActive",
    ipotut."IsDeleted",
    ipotut."IsVisible",
    ipotut."ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    COALESCE(ipotut."InterfacePanelOrganisationTypeUserTypeLabel",
        ip."InterfacePanelLabel") AS "InterfacePanelLabel",
    ipotut."OrganisationTypeID",
    ipotut."UserTypeID"
FROM ("InterfacePanelOrganisationTypeUserType" ipotut
     LEFT JOIN "InterfacePanel" ip ON (((ipotut."InterfacePanelID" =
         ip."InterfacePanelID") AND (ipotut."InterfacePanelVersionNumber" = ip."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipot."InterfacePanelID",
    ipot."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ipot."IsActive",
    ipot."IsDeleted",
    ipot."IsVisible",
    ipot."ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    COALESCE(ipot."InterfacePanelOrganisationTypeLabel",
        ip."InterfacePanelLabel") AS "InterfacePanelLabel",
    ipot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID"
FROM ("InterfacePanelOrganisationType" ipot
     LEFT JOIN "InterfacePanel" ip ON (((ipot."InterfacePanelID" =
         ip."InterfacePanelID") AND (ipot."InterfacePanelVersionNumber" = ip."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ip."InterfacePanelID",
    ip."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ip."IsActive",
    ip."IsDeleted",
    true AS "IsVisible",
    NULL::uuid AS "ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    ip."InterfacePanelLabel",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID"
FROM "InterfacePanel" ip;

--
-- Definition for view vInterfacePanelValidationForUI (OID = 20215) :
--
CREATE VIEW public."vInterfacePanelValidationForUI"
AS
SELECT ipvotut."InterfacePanelID",
    ipvotut."InterfacePanelVersionNumber",
    ip."Name",
    ipvotut."OrganisationTypeID",
    ipvotut."UserTypeID",
    COALESCE(ipvotut."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipvotut."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipvotut."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipvotut."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipvotut."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipvotut."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipvotut."ValidationSubCategory", ipv."ValidationSubCategory")
        AS "ValidationSubCategory",
    COALESCE(ipvotut."SourceErrorCodes", ipv."SourceErrorCodes") AS
        "SourceErrorCodes",
    ipvotut."IsActive",
    ipvotut."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelValidationOrganisationTypeUserType" ipvotut
     LEFT JOIN "InterfacePanelValidation" ipv ON
         (((ipvotut."InterfacePanelID" = ipv."InterfacePanelID") AND (ipvotut."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipvotut."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipvotut."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipvot."InterfacePanelID",
    ipvot."InterfacePanelVersionNumber",
    ip."Name",
    ipvot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    COALESCE(ipvot."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipvot."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipvot."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipvot."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipvot."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipvot."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipvot."ValidationSubCategory", ipv."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(ipvot."SourceErrorCodes", ipv."SourceErrorCodes") AS
        "SourceErrorCodes",
    ipvot."IsActive",
    ipvot."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelValidationOrganisationType" ipvot
     LEFT JOIN "InterfacePanelValidation" ipv ON
         (((ipvot."InterfacePanelID" = ipv."InterfacePanelID") AND (ipvot."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipvot."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipvot."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipv."InterfacePanelID",
    ipv."InterfacePanelVersionNumber",
    ip."Name",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    COALESCE(ipv."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipv."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipv."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipv."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipv."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipv."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipv."ValidationSubCategory", ipv."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(ipv."SourceErrorCodes", ipv."SourceErrorCodes") AS "SourceErrorCodes",
    ipv."IsActive",
    ipv."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM ("InterfacePanelValidation" ipv
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipv."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))));

--
-- Definition for view vInvoiceWithCurrentTransactionOrderStatus (OID = 20220) :
--
CREATE VIEW public."vInvoiceWithCurrentTransactionOrderStatus"
AS
SELECT inv."InvoiceID",
    inv."VatNumber",
    inv."StartDate",
    inv."EndDate",
    inv."Total",
    inv."LastReminder",
    inv."Balance",
    inv."ParentID",
    inv."DueDate",
    inv."CountryCode",
    inv."NumberOfPaymentAttempts",
    inv."CarriedBalance",
    inv."InvoiceTypeID",
    inv."InvoiceNumber",
    inv."InvoiceName",
    inv."CreatedOn",
    inv."CurrencyCode",
    inv."CurrencyRateDate",
    inv."CurrencyRate",
    inv."CurrencyRateToGBP",
    inv."CurrencyRateToUSD",
    inv."InvoiceSubTotalInclTaxAndDeduct",
    inv."InvoiceSubTotalExclTaxAndDeduct",
    inv."InvoiceSubTotalDiscountsInclTaxAndDeduct",
    inv."InvoiceSubTotalDiscountsExclTaxAndDeduct",
    inv."OrganisationID",
    inv."ShoppingCartID",
    inv."OrganisationAccountingPeriodID",
    inv."InvoiceReference",
    inv."IsActive",
    inv."IsDeleted",
    inv."IsClosed",
    inv."IsFrozenPendingPayment",
    st."Name" AS "InvoiceStatus",
    tst."Name" AS "TransactionOrderStatus",
    st."StatusTypeValueID" AS "InvoiceStatusTypeValueID",
    tst."StatusTypeValueID" AS "TransactionOrderStatusTypeValueID",
    tt."TransactionOrderID",
    tt."OrderSubTotalInclTaxAndDeduct",
    tt."OrderSubTotalExclTaxAndDeduct",
    tt."OrderSubTotalDiscountsInclTaxAndDeduct",
    tt."OrderSubTotalDiscountsExclTaxAndDeduct",
    tt."PaymentMethodAdditionalFeesInclTaxAndDeduct",
    tt."PaymentMethodAdditionalFeesExclTaxAndDeduct",
    tt."OrderTaxTotal",
    tt."OrderDiscountTotal",
    tt."OrderTotal",
    tt."RefundedAmount",
    tt."PaymentDate",
    tt."AuthorizationTransactionID",
    tt."AuthorizationTransactionCode",
    tt."AuthorizationTransactionResult",
    tt."CaptureTransactionID",
    tt."CaptureTransactionResult",
    tt."SubscriptionTransactionID",
    tt."TransactionTypeID",
    tt."PaymentMethodTypeID",
    tt."TransactionGatewayTypeID",
    tt."TransactionOrderReference",
    tt."GlobalPaymentMethodID",
    tt."OrderDeductionTotal",
    tt."TaxTotalPercentage",
    tt."TaxTotalValue",
    tt."DeductionTotalPercentage",
    tt."DeductionTotalValue",
    tt."DiscountTotalPercentage",
    tt."DiscountTotalValue",
    gap."IsCurrentPeriod" AS "AccountPeriodIsCurrent",
    gap."IsClosed" AS "AccountingPeriodIsClosed",
    gap."PeriodNumber" AS "AccountingPeriodNumber",
    gap."StartDay" AS "AccountingPeriodStartDay",
    gap."EndDay" AS "AccountingPeriodEndDay",
    gap."Month" AS "AccountingPeriodMonth",
    gap."Year" AS "AccountingPeriodYear"
FROM ((((((("Invoice" inv
     LEFT JOIN "OrganisationAccountingPeriod" oap ON
         ((oap."OrganisationAccountingPeriodID" = inv."OrganisationAccountingPeriodID")))
     LEFT JOIN "GlobalAccountingPeriod" gap ON
         ((gap."GlobalAccountingPeriodID" = oap."GlobalAccountingPeriodID")))
     LEFT JOIN "TransactionOrder" tt ON ((tt."InvoiceID" = inv."InvoiceID")))
     LEFT JOIN "InvoiceProcessLog" ipl ON (((ipl."InvoiceID" =
         inv."InvoiceID") AND (ipl."CreatedOn" = (
    SELECT max(ipt."CreatedOn") AS max
    FROM "InvoiceProcessLog" ipt
    WHERE (ipt."InvoiceID" = inv."InvoiceID")
    LIMIT 1
    )))))
     LEFT JOIN "TransactionOrderProcessLog" topl ON
         (((topl."TransactionOrderID" = tt."TransactionOrderID") AND (topl."CreatedOn" = (
    SELECT max(topt."CreatedOn") AS max
    FROM "TransactionOrderProcessLog" topt
    WHERE (topt."TransactionOrderID" = tt."TransactionOrderID")
    LIMIT 1
    )))))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         ipl."StatusTypeID") AND (st."StatusTypeVersionNumber" = ipl."StatusTypeVersionNumber")) AND (st."StatusTypeValueID" = ipl."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" tst ON ((((tst."StatusTypeID" =
         topl."StatusTypeID") AND (tst."StatusTypeVersionNumber" = topl."StatusTypeVersionNumber")) AND (tst."StatusTypeValueID" = topl."StatusTypeValueID"))));

--
-- Definition for view vNotificationConstruct (OID = 20225) :
--
CREATE VIEW public."vNotificationConstruct"
AS
SELECT nc."NotificationConstructID",
    nc."NotificationConstructVersionNumber",
    nc."DefaultNotificationDeliveryMethodID",
    nc."DefaultNotificationExportFormatID",
    nc."Name",
    nc."Description",
    nc."NotificationTitle",
    nc."NotificationSubject",
    nc."NotificationDetails",
    nc."NotificationReference",
    nc."NotificationAdditionalDetails",
    nc."CanBeIncludedInBatchNotification",
    nc."IsActive",
    nc."IsDeleted",
    nc."NotificationConstructTypeID",
    nc."NotificationConstructCategoryID",
    ct1."Name" AS "TypeName",
    ct2."Name" AS "CategoryName",
    ct4."Name" AS "ExportFormatName",
    ct5."Name" AS "DeliveryMethodName",
    nc."ExternalRelatedNotificationConstructID",
    nc."ExternalRelatedNotificationConstructVersionNumber"
FROM (((("NotificationConstruct" nc
     LEFT JOIN "ClassificationType" ct1 ON ((ct1."ClassificationTypeID" =
         nc."NotificationConstructTypeID")))
     LEFT JOIN "ClassificationType" ct2 ON ((ct2."ClassificationTypeID" =
         nc."NotificationConstructCategoryID")))
     LEFT JOIN "ClassificationType" ct4 ON ((ct4."ClassificationTypeID" =
         nc."DefaultNotificationExportFormatID")))
     LEFT JOIN "ClassificationType" ct5 ON ((ct5."ClassificationTypeID" =
         nc."DefaultNotificationDeliveryMethodID")));

--
-- Definition for view vNotificationConstructGroup (OID = 20230) :
--
CREATE VIEW public."vNotificationConstructGroup"
AS
SELECT ncg."NotificationConstructGroupNotificationConstructID",
    ncg."NotificationConstructGroupNotificationConstructVersion",
    ng."NotificationConstructGroupID",
    ng."NotificationConstructGroupVersion",
    ng."Name" AS "GroupName",
    ng."Description" AS "GroupDescription",
    ng."IsActive" AS "GroupIsActive",
    ng."IsDeleted" AS "GroupIsDeleted",
    ncg."UserTypeID",
    ncg."NotificationConstructID",
    ncg."NotificationConstructVersionNumber",
    ncg."WorkflowID",
    ncg."WorkflowVersionNumber",
    ncg."IsActive",
    ncg."IsDeleted",
    ncg."ConditionString",
    ncg."OrganisationTypeID",
    nc."Name" AS "NotificationConstructName",
    nc."Description" AS "NotificationConstructDescription",
    nc."IsActive" AS "NotificationConstructIsActive",
    nc."IsDeleted" AS "NotificationConstructIsDeleted",
    nc."NotificationSubject" AS "NotificationConstructSubject",
    nc."NotificationTitle" AS "NotificationConstructTitle"
FROM (("NotificationConstructGroupNotificationConstruct" ncg
     LEFT JOIN "NotificationConstructGroup" ng ON
         (((ng."NotificationConstructGroupID" = ncg."NotificationConstructGroupID") AND (ng."NotificationConstructGroupVersion" = ncg."NotificationConstructGroupVersion"))))
     LEFT JOIN "NotificationConstruct" nc ON
         (((nc."NotificationConstructID" = ncg."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = ncg."NotificationConstructVersionNumber"))));

--
-- Definition for view vNotificationConstructGroupNotificationConstruct (OID = 20235) :
--
CREATE VIEW public."vNotificationConstructGroupNotificationConstruct"
AS
SELECT ncgnc."NotificationConstructID",
    ncgnc."NotificationConstructVersionNumber",
    ncgnc."NotificationConstructGroupID",
    ncgnc."NotificationConstructGroupVersion",
    ncg."Name",
    ncgnc."OrganisationTypeID",
    ot."Name" AS "OrganisationType",
    ncgnc."UserTypeID",
    ut."Name" AS "UserType",
    wf."WorkflowID",
    wf."WorkflowVersionNumber",
    wf."Name" AS "WorkflowName",
    ncgnc."ConditionString"
FROM (((("NotificationConstructGroupNotificationConstruct" ncgnc
     LEFT JOIN "NotificationConstructGroup" ncg ON
         (((ncgnc."NotificationConstructGroupID" = ncg."NotificationConstructGroupID") AND (ncgnc."NotificationConstructGroupVersion" = ncg."NotificationConstructGroupVersion"))))
     LEFT JOIN "Workflow" wf ON (((wf."WorkflowID" = ncgnc."WorkflowID")
         AND (wf."WorkflowVersionNumber" = ncgnc."WorkflowVersionNumber"))))
     LEFT JOIN "UserType" ut ON ((ncgnc."UserTypeID" = ut."UserTypeID")))
     LEFT JOIN "OrganisationType" ot ON ((ncgnc."OrganisationTypeID" =
         ot."OrganisationTypeID")))
WHERE ((ncgnc."IsActive" = true) AND (ncgnc."IsDeleted" = false));

--
-- Definition for view vUserAccountOrganisationUserTypeOrganisationType (OID = 20240) :
--
CREATE VIEW public."vUserAccountOrganisationUserTypeOrganisationType"
AS
SELECT uao."UserAccountOrganisationID",
    uao."UserID",
    uao."UserTypeID",
    ut."Name" AS "UserType",
    uao."OrganisationID",
    ot."OrganisationTypeID",
    ot."Name" AS "OrganisationType"
FROM (((("UserAccountOrganisation" uao
     LEFT JOIN "Organisation" org ON ((uao."OrganisationID" =
         org."OrganisationID")))
     LEFT JOIN "Organisation" parentorg ON ((org."ParentOrganisationID" =
         parentorg."OrganisationID")))
     LEFT JOIN "OrganisationType" ot ON ((parentorg."OrganisationTypeID" =
         ot."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((uao."UserTypeID" = ut."UserTypeID")))
WHERE ((uao."IsActive" = true) AND (uao."IsDeleted" = false));

--
-- Definition for view vNotificationRecipientStatus (OID = 20245) :
--
CREATE VIEW public."vNotificationRecipientStatus"
AS
SELECT uao."UserAccountOrganisationID",
    nr."NotificationID",
    n."NotificationStatusID",
    n."NotificationConstructID",
    n."NotificationConstructVersionNumber",
    nrl."NotificationDeliveryMethodID",
    nrl."NotificationExportFormatID",
    n."DateSent",
    n."IsSent",
    n."IsActive",
    n."IsDeleted",
    nr."IsAccepted",
    nr."AcceptedDate",
    nrl."IsRead",
    nrl."CreatedOn",
    nrl."ErrorOccured",
    nrl."SentOn",
    (((n."NotificationData" -> 'NotificationDictionary'::text) ->
        'TermsConditionsDataDTO'::text) -> 'VerificationCode'::text) AS "NotificationVerificationCode",
    nrl."NotificationRecipientID",
    nrl."NotificationRecipientLogID",
    nr."OrganisationID",
    nr."ParentID" AS "RecipientParent",
    nr."ToParentID" AS "RecipientToParent",
    n."ParentID",
    n."FromParentID"
FROM (((("Notification" n
     JOIN "NotificationRecipient" nr ON ((nr."NotificationID" =
         n."NotificationID")))
     JOIN "UserAccountOrganisation" uao ON
         ((uao."UserAccountOrganisationID" = nr."UserAccountOrganisationID")))
     JOIN "vUserAccountOrganisationUserTypeOrganisationType" uatt ON
         ((uatt."UserAccountOrganisationID" = uao."UserAccountOrganisationID")))
     JOIN "NotificationRecipientLog" nrl ON
         (((nrl."NotificationRecipientID" = nr."NotificationRecipientID") AND (nrl."CreatedOn" = (
    SELECT nrl2."CreatedOn"
    FROM "NotificationRecipientLog" nrl2
    WHERE (nrl2."NotificationRecipientID" = nr."NotificationRecipientID")
    ORDER BY nrl2."CreatedOn" DESC
    LIMIT 1
    )))));

--
-- Definition for view vNotificationWithUAOVerificationCode (OID = 20250) :
--
CREATE VIEW public."vNotificationWithUAOVerificationCode"
AS
SELECT nr."UserAccountOrganisationID",
    nr."NotificationID",
    n."NotificationConstructID",
    n."NotificationConstructVersionNumber",
    ncg."GroupName",
    ncg."GroupDescription",
    ncg."NotificationConstructName",
    ncg."NotificationConstructSubject",
    ncg."NotificationConstructTitle",
    n."DateSent",
    n."IsSent",
    n."IsActive",
    n."IsDeleted",
    nr."IsAccepted",
    nr."AcceptedDate",
    ncg."UserTypeID",
    ncg."OrganisationTypeID",
    nrl."IsRead",
    nrl."CreatedOn",
    nrl."ErrorOccured",
    nrl."SentOn",
    (((n."NotificationData" -> 'NotificationDictionary'::text) ->
        'TermsConditionsDataDTO'::text) -> 'VerificationCode'::text) AS "NotificationVerificationCode"
FROM ((("Notification" n
     JOIN "NotificationRecipient" nr ON ((nr."NotificationID" =
         n."NotificationID")))
     JOIN "NotificationRecipientLog" nrl ON
         (((nrl."NotificationRecipientID" = nr."NotificationRecipientID") AND (nrl."CreatedOn" = (
    SELECT nrl2."CreatedOn"
    FROM "NotificationRecipientLog" nrl2
    WHERE (nrl2."NotificationRecipientID" = nr."NotificationRecipientID")
    ORDER BY nrl2."CreatedOn" DESC
    LIMIT 1
    )))))
     JOIN "vNotificationConstructGroup" ncg ON
         (((ncg."NotificationConstructID" = n."NotificationConstructID") AND (ncg."NotificationConstructVersionNumber" = n."NotificationConstructVersionNumber"))));

--
-- Definition for view vOrganisation (OID = 20255) :
--
CREATE VIEW public."vOrganisation"
AS
SELECT o."OrganisationID",
    otype."Name" AS "TypeName",
    otype."OrganisationTypeID",
    od."Name",
    od."Description",
    o."IsBranch",
    o."IsHeadOffice",
    o."IsActive",
    o."IsDeleted"
FROM (("OrganisationDetail" od
     LEFT JOIN "Organisation" o ON ((o."OrganisationID" = od."OrganisationID")))
     LEFT JOIN "OrganisationType" otype ON ((o."OrganisationTypeID" =
         otype."OrganisationTypeID")))
WHERE ((o."IsBranch" = false) AND (o."IsHeadOffice" = false));

--
-- Definition for view vOrganisationCheckoutDiscount (OID = 20260) :
--
CREATE VIEW public."vOrganisationCheckoutDiscount"
AS
SELECT d."ParentID",
    o."OrganisationID",
    d."CreatedOn",
    d."DiscountAmount",
    d."DiscountApplyOnID",
    d."Description",
    d."DiscountID",
    d."DiscountPercentage",
    d."DiscountPeriod",
    d."DiscountQuantity",
    d."DiscountStatusID",
    d."DiscountTypeID",
    d."DiscountVersionNumber",
    d."DisocuntPeriodUnitID",
    d."InvoiceName",
    d."IsPercentage",
    d."IsRecurring",
    d."MaxRedemptions",
    d."Name",
    d."ValidTill",
    ct."Name" AS "DiscountStatus",
    ct1."Name" AS "DiscountType",
    ct2."Name" AS "DiscountApplyIn",
    ct3."Name" AS "PeriodUnit",
    d."IsSingleProductDiscount",
    d."IsCheckoutDiscount",
    d."IsSingleProductQuantityDiscount",
    d."SingleProductQuantityDiscountDivisor",
    d."IsSingleProductQuantityDiscountPercentageBased",
    d."IsSingleProductQuantityDiscountAdditionalQuantityBased",
    d."SingleProductQuantityDiscountAdditionalQuantity",
    d."IsMultipleProductCombinationDiscount",
    d."IsMultipleProductCombinationDiscountPercentageBased",
    d."IsMultipleProductCombinationDiscountCheapestFreeBased"
FROM (((((("Organisation" o
     LEFT JOIN "OrganisationDiscount" pd ON ((((pd."IsActive" = true) AND
         (pd."IsDeleted" = false)) AND (pd."OrganisationID" = o."OrganisationID"))))
     LEFT JOIN "Discount" d ON (((((d."DiscountID" = pd."DiscountID") AND
         (d."DiscountVersionNumber" = pd."DiscountVersionNumber")) AND (d."IsActive" = true)) AND (d."IsDeleted" = false))))
     LEFT JOIN "ClassificationType" ct ON (((ct."ClassificationTypeID" =
         d."DiscountStatusID") AND (ct."ClassificationTypeCategoryID" = 8010))))
     LEFT JOIN "ClassificationType" ct1 ON (((ct1."ClassificationTypeID" =
         d."DiscountTypeID") AND (ct1."ClassificationTypeCategoryID" = 8008))))
     LEFT JOIN "ClassificationType" ct2 ON (((ct2."ClassificationTypeID" =
         d."DiscountApplyOnID") AND (ct2."ClassificationTypeCategoryID" = 8011))))
     LEFT JOIN "ClassificationType" ct3 ON (((ct3."ClassificationTypeID" =
         d."DisocuntPeriodUnitID") AND (ct3."ClassificationTypeCategoryID" = 8006))))
WHERE (d."IsCheckoutDiscount" = true);

--
-- Definition for view vOrganisationDetail (OID = 20270) :
--
CREATE VIEW public."vOrganisationDetail"
AS
SELECT org."OrganisationID",
    org."OrganisationTypeID",
    org."OrganisationSubTypeID",
    org."OrganisationCategoryID",
    org."IsBranch",
    org."IsHeadOffice",
    org."IsActive",
    org."IsDeleted",
    org."IsUserOrganisation",
    org."CreatedOn",
    org."CreatedBy",
    org."ModifiedOn",
    org."ModifiedBy",
    org."OrganisationSubCategoryID",
    org."DefaultOrganisationID",
    org."DefaultOrganisationVersionNumber",
    org."ParentID",
    org."ParentOrganisationID",
    org."IsPaymentProvider",
    ct."ContactID",
    ct."ContactName",
    ct."MasterContactID",
    ct."OwnerID",
    ct."CustomerTypeID",
    ct."PreferredContactMethodID",
    ct."IsBackOfficeCustomer",
    ct."Salutation",
    ct."JobTitle",
    ct."FirstName",
    ct."Department",
    ct."NickName",
    ct."MiddleName",
    ct."LastName",
    ct."BirthDate",
    ct."Description",
    ct."GenderTypeID",
    ct."HasChildren",
    ct."EducationTypeID",
    ct."WebSiteURL",
    ct."EmailAddress1",
    ct."EmailAddress2",
    ct."EmailAddress3",
    ct."AssistantName",
    ct."AssistantPhone",
    ct."ManagerName",
    ct."ManagerPhone",
    ct."CountryTypeID",
    ct."DoNotFax",
    ct."DoNotEmail",
    ct."DoNotTelephone",
    ct."IsPrivate",
    ct."Telephone1",
    ct."Telephone2",
    ct."Telephone3",
    ct."Fax",
    ct."MobileNumber1",
    ct."MobileNumber2",
    ct."MobileNumber3",
    ct."OrganisationUnitID",
    ct."ParentContactID",
    ct."IsPrimaryContact",
    ct."ContactTypeID",
    ct."ContactSubTypeID",
    ct."ContactCategoryID",
    ct."FirmName",
    add."AddressID",
    add."Name",
    add."PrimaryContactName",
    add."Line1",
    add."Line2",
    add."Line3",
    add."City",
    add."StateOrProvince",
    add."County",
    add."Country",
    add."PostOfficeBox",
    add."PostalCode",
    add."UTCOffSet",
    add."Latitude",
    add."Longitude",
    add."AddressTypeID",
    add."AddressNumber",
    add."IsPrimaryAddress",
    add."AddressCategoryID",
    add."AddressSubTypeID",
    add."BuildingName",
    add."Order",
    add."CountryCode",
    add."AdditionalAddressInformation",
    add."Town",
    lod."IsVATRegistered",
    lod."VATNumber",
    lod."IsCompanyHouseRegistered",
    lod."RegisteredCompanyNumber",
    lod."PartnersCount",
    lod."RegisteredPractitionersCount",
    lod."StaffCount",
    lod."MonthlyCompletionsCount"
FROM (((("Organisation" org
     JOIN "OrganisationDetail" od ON ((od."OrganisationID" =
         org."OrganisationID")))
     JOIN "Contact" ct ON ((ct."ParentID" = org."OrganisationID")))
     JOIN "Address" add ON ((add."ParentID" = ct."ContactID")))
     LEFT JOIN legal."LegalOrganisationDetails" lod ON
         ((lod."OrganisationID" = org."OrganisationID")));

--
-- Definition for view vOrganisationFinancialStatus (OID = 20275) :
--
CREATE VIEW public."vOrganisationFinancialStatus"
AS
SELECT ofd."OrganisationFinancialDetailID",
    ofd."FinancialStatusTypeID",
    ofd."FinancialStatusTypeVersionNumber",
    ofd."FinancialStatusTypeValueID",
    ofd."HasACreditLimit",
    ofd."CreditLimit",
    ofd."NumberOfLatePayments",
    ofd."HasLatePayments",
    org."OrganisationID",
    org."Name",
    st."Name" AS "FinancialStatus"
FROM (("OrganisationFinancialDetail" ofd
     LEFT JOIN "vOrganisation" org ON ((org."OrganisationID" =
         ofd."OrganisationID")))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         ofd."FinancialStatusTypeID") AND (st."StatusTypeVersionNumber" = ofd."FinancialStatusTypeVersionNumber")) AND (st."StatusTypeValueID" = ofd."FinancialStatusTypeValueID"))));

--
-- Definition for view vOrganisationPaymentMethodStatus (OID = 20280) :
--
CREATE VIEW public."vOrganisationPaymentMethodStatus"
AS
SELECT bb."OrganisationID",
    bb."GlobalPaymentMethodID",
    bb."OrganisationBankAccountId",
    bb."IsActive",
    bb."IsDeleted",
    bb."IsDirectDebit",
    bb."IsBACS",
    bb."OrganisationDirectDebitMandateID",
    bb."IsPrimary",
    bb."StatusTypeID",
    bb."StatusTypeVersionNumber",
    bb."StatusTypeValueID",
    st."Name" AS "PaymentMethodStatus",
    org."Name" AS "OrganisationName"
FROM (("OrganisationPaymentMethod" bb
     LEFT JOIN "vOrganisation" org ON ((org."OrganisationID" =
         bb."OrganisationID")))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         bb."StatusTypeID") AND (st."StatusTypeVersionNumber" = bb."StatusTypeVersionNumber")) AND (st."StatusTypeValueID" = bb."StatusTypeValueID"))));

--
-- Definition for view vOrganisationStatus (OID = 20285) :
--
CREATE VIEW public."vOrganisationStatus"
AS
SELECT os."OrganisationID",
    org."IsBranch",
    org."IsActive",
    org."IsDeleted",
    org."IsHeadOffice",
    org."IsUserOrganisation",
    st."Name" AS "StatusTypeName",
    st."StatusTypeID",
    st."StatusTypeVersionNumber",
    st."StatusTypeTemplateID",
    st."StatusTypeTemplateVersionNumber",
    stv."StatusTypeValueID",
    stv."Name" AS "StatusValueName",
    os."StatusChangedOn",
    os."StatusChangedBy",
    stt."StatusOrder",
    stt."IsStart",
    stt."IsEnd",
    stt1."StatusTypeValueID" AS "NextStatusTypeValueID",
    stt1."Name" AS "NextStatusTypeName",
    stt1."StatusOrder" AS "NextStatusOrder",
    stt1."IsStart" AS "NextStatusStart",
    stt1."IsEnd" AS "NextStatusEnd"
FROM ((((("OrganisationStatus" os
     LEFT JOIN "Organisation" org ON ((org."OrganisationID" =
         os."OrganisationID")))
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" = os."StatusTypeID")
         AND (st."StatusTypeVersionNumber" = os."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeValue" stv ON ((stv."StatusTypeValueID" =
         os."StatusTypeValueID")))
     LEFT JOIN "vStatusType" stt ON ((((stt."StatusTypeID" =
         os."StatusTypeID") AND (stt."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt."StatusTypeValueID" = os."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" stt1 ON ((((stt1."StatusTypeID" =
         os."StatusTypeID") AND (stt1."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt1."StatusOrder" = (stt."StatusOrder" + 1)))));

--
-- Definition for view vOrganisationUserType (OID = 20290) :
--
CREATE VIEW public."vOrganisationUserType"
AS
SELECT org."OrganisationID",
    branch."OrganisationID" AS organisationbranchid,
    dout."DefaultOrganisationID",
    ut."Name",
    ut."UserTypeID"
FROM ((("UserType" ut
     LEFT JOIN "DefaultOrganisationUserTarget" dout ON (((ut."UserTypeID" =
         dout."UserTypeID") AND (dout."IsDefault" = true))))
     LEFT JOIN "Organisation" org ON (((dout."DefaultOrganisationID" =
         org."DefaultOrganisationID") AND (org."IsBranch" = false))))
     LEFT JOIN "Organisation" branch ON ((((dout."DefaultOrganisationID" =
         branch."DefaultOrganisationID") AND (branch."IsBranch" = true)) AND (branch."ParentOrganisationID" = org."OrganisationID"))));

--
-- Definition for view vOrgansiationClaim (OID = 20295) :
--
CREATE VIEW public."vOrgansiationClaim"
AS
SELECT orc."OrganisationID",
    orc."OrganisationRoleID",
    orgr."RoleName",
    orgr."RoleDescription",
        CASE
            WHEN (re."ResourceID" IS NULL) THEN 'State'::text
            ELSE 'Resource'::text
        END AS "ClaimType",
    COALESCE(re."ResourceID", s."StateID") AS "ClaimID",
    COALESCE(re."ResourceName", s."StateName") AS "ClaimName",
    COALESCE(re."ResourceDescription", s."StateDescription") AS "ClaimDescription",
        CASE
            WHEN (op."OperationID" IS NULL) THEN 'StateItem'::text
            ELSE 'Operation'::text
        END AS "ClaimSubType",
    COALESCE(op."OperationID", si."StateItemID") AS "ClaimSubID",
        CASE
            WHEN (op."OperationName" IS NULL) THEN (
            CASE
                WHEN (psi."StateItemName" IS NULL) THEN (si."StateItemName")::text
                ELSE (((psi."StateItemName")::text || '_'::text) ||
                    (si."StateItemName")::text)
            END)::character varying
            ELSE op."OperationName"
        END AS "ClaimSubName",
        CASE
            WHEN (op."OperationDescription" IS NULL) THEN (
            CASE
                WHEN (psi."StateItemDescription" IS NULL) THEN
                    (si."StateItemDescription")::text
                ELSE (((psi."StateItemDescription")::text || '_'::text) ||
                    (si."StateItemDescription")::text)
            END)::character varying
            ELSE op."OperationDescription"
        END AS "ClaimSubDescription",
    orgr."ParentID",
        CASE
            WHEN (orgr."ParentID" IS NOT NULL) THEN
            CASE
                WHEN (wr."WorkflowRoleID" IS NOT NULL) THEN 'Workflow'::text
                WHEN (mr."ModuleID" IS NOT NULL) THEN (('Module'::text ||
                    ' '::text) || (mr."Name")::text)
                WHEN (ar."ArtefactID" IS NOT NULL) THEN (('Artefact'::text
                    || ' '::text) || (ar."Name")::text)
                WHEN (dor."DefaultOrganisationID" IS NOT NULL) THEN
                    (('Organisation Template'::text || ' '::text) || (dor."Name")::text)
                WHEN (str."StatusTypeID" IS NOT NULL) THEN
                    (('Status Type'::text || ' '::text) || (str."Name")::text)
                WHEN (ro."RoleID" IS NOT NULL) THEN 'Global Role'::text
                WHEN (ncr."NotificationConstructID" IS NOT NULL) THEN
                    (('Notification Construct'::text || ' '::text) || (ncr."Name")::text)
                ELSE NULL::text
            END
            ELSE NULL::text
        END AS "RoleSource",
    COALESCE(ctr."Name", cts."Name") AS "ClaimTypeName"
FROM ((((((((((((((("OrganisationRoleClaim" orc
     LEFT JOIN "OrganisationRole" orgr ON ((orc."OrganisationRoleID" =
         orgr."OrganisationRoleID")))
     LEFT JOIN "Resource" re ON ((re."ResourceID" = orc."ResourceID")))
     LEFT JOIN "Operation" op ON ((op."OperationID" = orc."OperationID")))
     LEFT JOIN "State" s ON ((s."StateID" = orc."StateID")))
     LEFT JOIN "StateItem" si ON ((si."StateItemID" = orc."StateItemID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")))
     LEFT JOIN "WorkflowRole" wr ON ((wr."WorkflowRoleID" = orgr."ParentID")))
     LEFT JOIN "Module" mr ON ((mr."ModuleID" = (
    SELECT "ModuleRole"."ModuleID"
    FROM "ModuleRole"
    WHERE ("ModuleRole"."RoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "Artefact" ar ON ((ar."ArtefactID" = (
    SELECT "ArtefactRole"."ArtefactID"
    FROM "ArtefactRole"
    WHERE ("ArtefactRole"."ArtefactRoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "StatusType" str ON (((str."StatusTypeID" = (
    SELECT "StatusTypeRole"."StatusTypeID"
    FROM "StatusTypeRole"
    WHERE ("StatusTypeRole"."StatusTypeRoleID" = orgr."ParentID")
    ORDER BY "StatusTypeRole"."StatusTypeVersionNumber" DESC
    LIMIT 1
    )) AND (str."StatusTypeVersionNumber" = (
    SELECT "StatusTypeRole"."StatusTypeVersionNumber"
    FROM "StatusTypeRole"
    WHERE ("StatusTypeRole"."StatusTypeRoleID" = orgr."ParentID")
    ORDER BY "StatusTypeRole"."StatusTypeVersionNumber" DESC
    LIMIT 1
    )))))
     LEFT JOIN "NotificationConstruct" ncr ON ((ncr."NotificationConstructID" = (
    SELECT "NotificationConstructRole"."NotificationConstructID"
    FROM "NotificationConstructRole"
    WHERE ("NotificationConstructRole"."NotificationRoleConstructID" =
        orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "DefaultOrganisation" dor ON ((dor."DefaultOrganisationID" = (
    SELECT "DefaultOrganisationRole"."DefaultOrganisationID"
    FROM "DefaultOrganisationRole"
    WHERE ("DefaultOrganisationRole"."DefaultOrganisationRoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "Role" ro ON ((ro."RoleID" = orgr."ParentID")))
     LEFT JOIN "ClassificationType" ctr ON ((ctr."ClassificationTypeID" =
         re."ResourceTypeID")))
     LEFT JOIN "ClassificationType" cts ON ((cts."ClassificationTypeID" =
         s."StateTypeID")))
WHERE ((orgr."IsActive" = true) AND (orgr."IsDeleted" = false));

--
-- Definition for view vPlanSubscriptionStatusWithBillingAndPaymentMethodStatus (OID = 20300) :
--
CREATE VIEW public."vPlanSubscriptionStatusWithBillingAndPaymentMethodStatus"
AS
SELECT "PlanSubscription"."PlanSubscriptionID",
    "PlanSubscription"."PlanSubscriptionVersionNumber",
    "PlanSubscription"."HasInfinitePeriods",
    "PlanSubscription"."PlanQuantity",
    "PlanSubscription"."CreatedOn",
    "PlanSubscription"."CreatedBy",
    "PlanSubscription"."ActivatedOn",
    "PlanSubscription"."CancelledOn",
    "PlanSubscription"."CancelReasonID",
    "PlanSubscription"."DueInvoicesCount",
    "PlanSubscription"."DueSince",
    "PlanSubscription"."DueAmount",
    "PlanSubscription"."IsActive",
    "PlanSubscription"."IsDeleted",
    "PlanSubscription"."IsFree",
    "PlanSubscription"."OrganisationID",
    "PlanSubscription"."IsRenewal",
    "PlanSubscription"."RenewedOn",
    "PlanSubscription"."PlanSubscriptionReference",
    "Plan"."Name" AS "PlanName",
    "Plan"."InvoiceName",
    "Plan"."Price",
    "Plan"."Period",
    "Plan"."PlanID",
    "Plan"."PlanVersionNumber",
    "Plan"."TrialPeriod",
    "Plan"."PeriodUnitID",
    "Plan"."TrialPeriodUnitID",
    "Plan"."FreeQuantity",
    "Plan"."SetupCost",
    "Plan"."DowngradePenalty",
    "Plan"."CountryCode",
    "Plan"."CurrencyCode",
    "Plan"."CancellationPeriod",
    "Plan"."CancellationPeriodUnitID",
    "Plan"."PlanStatusID",
    "Plan"."IsTransactionBased",
    "Plan"."CoolOffPeriod",
    "Plan"."CoolOffPeriodUnitID",
    "Plan"."RenewalPrice",
    "Plan"."RenewalPercentage",
    "Plan"."RenewalIsPercentageOfOriginalPrice",
    "Plan"."HasForwardCycleFee",
    "Plan"."ForwardCycleFee",
    "Plan"."ForwardCycleFreeIsSameAsPrice",
    "Plan"."RenewalOfferPeriod",
    "Plan"."RenewalOfferPeriodUnitID",
    "Plan"."ForwardCycleFeePeriod",
    "Plan"."ForwardCycleFeePeriodUnitID",
    "Plan"."HasRenewalOffer",
    "Plan"."PriceDailyProRata",
    "Plan"."IsAutoRenew",
    "Plan"."AutoRenewDecisionPeriod",
    "Plan"."AutoRenewDecisionUnitID",
    "Plan"."AutoRenewPeriod",
    "Plan"."AutoRenewPeriodUnitID",
    "Plan"."PlanGroupID",
    "Plan"."PlanTypeID",
    "Plan"."PlanCategoryID",
    "PlanSubscriptionPaymentPlan"."BillingID",
    "PlanSubscriptionPaymentPlan"."GlobalPaymentMethodID",
    "vStatusType"."Name" AS "PlanSubscriptionStatus",
    "vStatusType"."StatusTypeName" AS "PlanSubscriptionStatusTypeName",
    "vStatusType"."StatusOrder" AS "PlanSubscriptionStatusOrder",
    "vStatusType"."StatusTypeValueID" AS "PlanSubscriptionStatusTypeValueID",
    "vStatusType"."StatusTypeID" AS "PlanSubscriptionStatusTypeID",
    "vStatusType"."StatusTypeVersionNumber" AS
        "PlanSubscriptionStatusTypeVersionNumber",
    "vStatusType"."IsStart" AS "PlanSubscriptionStatusIsStart",
    "vStatusType"."IsEnd" AS "PlanSubscriptionStatusIsEnd",
    "PlanSubscriptionProcessLog"."IsCancelled",
    "PlanSubscriptionProcessLog"."IsRenewed",
    "PlanSubscriptionProcessLog"."CreatedOn" AS "PlanSubscriptionStatusCreatedOn",
    "PlanSubscriptionProcessLog"."PlanSubscriptionStatusDetail",
    "PlanGroup"."Name",
    "OrganisationPaymentMethod"."OrganisationBankAccountId",
    "OrganisationPaymentMethod"."IsDirectDebit",
    "OrganisationPaymentMethod"."IsBACS",
    "OrganisationPaymentMethod"."OrganisationDirectDebitMandateID",
    "OrganisationPaymentMethod"."IsPrimary",
    "OrganisationPaymentMethod"."DirectDebitMonthCollectionPeriodNumber",
    "OrganisationPaymentMethod"."BACSMonthPaymentDay",
    "OrganisationPaymentMethod"."DirectDebitNumberOfNotificationDaysBeforeCollection",
    "OrganisationPaymentMethod"."BACSNumberOfNotificationDaysBeforeExpectationOfPayment",
    "vStatusType1"."Name" AS "OrganisationPaymentMethodStatus",
    "vStatusType1"."StatusTypeName" AS "OrganisationPaymentMethodStatusTypeName",
    "vStatusType1"."StatusOrder" AS "OrganisationPaymentMethodStatusOrder",
    "vStatusType1"."StatusTypeValueID" AS
        "OrganisationPaymentMethodStatusTypeValueID",
    "vStatusType1"."StatusTypeID" AS "OrganisationPaymentMethodStatusTypeID",
    "vStatusType1"."StatusTypeVersionNumber" AS
        "OrganisationPaymentMethodStatusTypeVersionNumber",
    "vStatusType1"."IsStart" AS "OrganisationPaymentMethodStatusIsStart",
    "vStatusType1"."IsEnd" AS "OrganisationPaymentMethodStatusIsEnd",
    "Billing"."BillingPeriod",
    "Billing"."BillingPeriodUnitID",
    "Billing"."BillingLagPeriod",
    "Billing"."BillingLagPeriodUnitID",
    "Billing"."BillingPeriodDayOfMonth",
    "Billing"."DelayedBillingPeriod",
    "Billing"."DelayedBillingPeriodUnitID",
    "Billing"."HasDelayedBilling",
    "Billing"."NumberOfBillingPeriods",
    "Billing"."InvoiceToProcessingDelayPeriod",
    "Billing"."InvoiceToProcessingDelayPeriodUnitID",
    "Billing"."InvoiceNotificationConstructID",
    "Billing"."InvoiceNotificationConstructVersionNumber",
    "Billing"."EstimatedProcessingPeriod",
    "Billing"."EstimatedProcessingPeriodUnitID"
FROM (((((((("PlanSubscription"
     JOIN "Plan" ON ((("PlanSubscription"."PlanID" = "Plan"."PlanID") AND
         ("PlanSubscription"."PlanVersionNumber" = "Plan"."PlanVersionNumber"))))
     JOIN "PlanSubscriptionPaymentPlan" ON
         ((("PlanSubscription"."PlanSubscriptionID" = "PlanSubscriptionPaymentPlan"."PlanSubscriptionID") AND ("PlanSubscription"."PlanSubscriptionVersionNumber" = "PlanSubscriptionPaymentPlan"."PlanSubscriptionVersionNumber"))))
     JOIN "PlanSubscriptionProcessLog" ON
         ((("PlanSubscription"."PlanSubscriptionID" = "PlanSubscriptionProcessLog"."PlanSubscriptionID") AND ("PlanSubscription"."PlanSubscriptionVersionNumber" = "PlanSubscriptionProcessLog"."PlanSubscriptionVersionNumber"))))
     JOIN "vStatusType" ON
         (((("PlanSubscriptionProcessLog"."StatusTypeValueID" = "vStatusType"."StatusTypeValueID") AND ("PlanSubscriptionProcessLog"."StatusTypeID" = "vStatusType"."StatusTypeID")) AND ("PlanSubscriptionProcessLog"."StatusTypeVersionNumber" = "vStatusType"."StatusTypeVersionNumber"))))
     JOIN "PlanGroup" ON (("Plan"."PlanGroupID" = "PlanGroup"."PlanGroupID")))
     JOIN "OrganisationPaymentMethod" ON
         ((("PlanSubscription"."OrganisationID" = "OrganisationPaymentMethod"."OrganisationID") AND ("PlanSubscriptionPaymentPlan"."GlobalPaymentMethodID" = "OrganisationPaymentMethod"."GlobalPaymentMethodID"))))
     JOIN "vStatusType" "vStatusType1" ON
         (((("OrganisationPaymentMethod"."StatusTypeID" = "vStatusType1"."StatusTypeID") AND ("OrganisationPaymentMethod"."StatusTypeVersionNumber" = "vStatusType1"."StatusTypeVersionNumber")) AND ("OrganisationPaymentMethod"."StatusTypeValueID" = "vStatusType1"."StatusTypeValueID"))))
     LEFT JOIN "Billing" ON (("PlanSubscriptionPaymentPlan"."BillingID" =
         "Billing"."BillingID")));

--
-- Definition for view vProductAttribute (OID = 20305) :
--
CREATE VIEW public."vProductAttribute"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    pa."Name" AS "ProductAttributeName",
    pa."Description" AS "ProductAttributeDescription",
    ppa."IsRequired" AS "IsProductAttributeRequired",
    ppa."DisplayOrder" AS "ProductAttributeDisplayOrder",
    ppav."PriceAdjustment",
    ppav."WeightAdjustement",
    ppav."Cost",
    ppav."Quantity",
    ppav."IsPreSelected",
    ppav."ProductVariantAttributeValueID",
    ppav."Name" AS "AttributeName",
    ppav."ProductProductAttributeID",
    ppa."ProductAttributeID"
FROM ((("Product" p
     JOIN "ProductProductAttribute" ppa ON ((((ppa."ProductID" =
         p."ProductID") AND (ppa."ProductVersionID" = p."ProductVersionID")) AND (ppa."IsActive" = true))))
     LEFT JOIN "ProductVariantAttributeValue" ppav ON
         (((ppav."ProductProductAttributeID" = ppa."ProductProductAttributeID") AND (ppav."IsActive" = true))))
     LEFT JOIN "ProductAttribute" pa ON (((pa."ProductAttributeID" =
         ppa."ProductAttributeID") AND (pa."IsActive" = true))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vProductDeduction (OID = 20310) :
--
CREATE VIEW public."vProductDeduction"
AS
SELECT cd."ProductDeductionID",
    cd."ProductID",
    cd."ProductVersionID",
    cd."DeductionID",
    cd."DeductionPercentage",
    cd."DeductionValue",
    cd."IsActive",
    cd."IsDeleted",
    de."Name",
    de."Description",
    de."IsPercentageBased",
    cd."DeductionVersionNumber"
FROM ("ProductDeduction" cd
     LEFT JOIN "Deduction" de ON ((((de."DeductionID" = cd."DeductionID")
         AND (de."IsActive" = true)) AND (de."IsDeleted" = false))))
WHERE ((cd."IsActive" = true) AND (cd."IsDeleted" = false));

--
-- Definition for view vProductDiscount (OID = 20315) :
--
CREATE VIEW public."vProductDiscount"
AS
SELECT p."ParentID",
    p."ProductID",
    p."ProductVersionID",
    p."IsPackage",
    d."CreatedOn",
    d."DiscountAmount",
    d."DiscountApplyOnID",
    d."Description",
    d."DiscountID",
    d."DiscountPercentage",
    d."DiscountPeriod",
    d."DiscountQuantity",
    d."DiscountStatusID",
    d."DiscountTypeID",
    d."DiscountVersionNumber",
    d."DisocuntPeriodUnitID",
    d."InvoiceName",
    d."IsPercentage",
    d."IsRecurring",
    d."MaxRedemptions",
    d."Name",
    d."ValidTill",
    ct."Name" AS "DiscountStatus",
    ct1."Name" AS "DiscountType",
    ct2."Name" AS "DiscountApplyIn",
    ct3."Name" AS "PeriodUnit",
    d."IsSingleProductDiscount",
    d."IsCheckoutDiscount",
    d."IsSingleProductQuantityDiscount",
    d."SingleProductQuantityDiscountDivisor",
    d."IsSingleProductQuantityDiscountPercentageBased",
    d."IsSingleProductQuantityDiscountAdditionalQuantityBased",
    d."SingleProductQuantityDiscountAdditionalQuantity",
    d."IsMultipleProductCombinationDiscount",
    d."IsMultipleProductCombinationDiscountPercentageBased",
    d."IsMultipleProductCombinationDiscountCheapestFreeBased"
FROM (((((("Product" p
     JOIN "ProductDiscount" pd ON (((((pd."IsActive" = true) AND
         (pd."IsDeleted" = false)) AND (pd."ProductID" = p."ProductID")) AND (pd."ProductVersionID" = p."ProductVersionID"))))
     JOIN "Discount" d ON (((((d."DiscountID" = pd."DiscountID") AND
         (d."DiscountVersionNumber" = pd."DiscountVersionNumber")) AND (d."IsActive" = true)) AND (d."IsDeleted" = false))))
     LEFT JOIN "ClassificationType" ct ON (((ct."ClassificationTypeID" =
         d."DiscountStatusID") AND (ct."ClassificationTypeCategoryID" = 8010))))
     LEFT JOIN "ClassificationType" ct1 ON (((ct1."ClassificationTypeID" =
         d."DiscountTypeID") AND (ct1."ClassificationTypeCategoryID" = 8008))))
     LEFT JOIN "ClassificationType" ct2 ON (((ct2."ClassificationTypeID" =
         d."DiscountApplyOnID") AND (ct2."ClassificationTypeCategoryID" = 8011))))
     LEFT JOIN "ClassificationType" ct3 ON (((ct3."ClassificationTypeID" =
         d."DisocuntPeriodUnitID") AND (ct3."ClassificationTypeCategoryID" = 8006))));

--
-- Definition for view vProductSpecification (OID = 20320) :
--
CREATE VIEW public."vProductSpecification"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    sa."Name" AS "SpecificationName",
    sa."Description" AS "SpecificationDescription",
    sa."DisplayOrder" AS "SpecificationDisplayOrder",
    psa."IsMandatory",
    psa."IsMultiSelect",
    psa."IsPreSelected",
    psa."MinimumSelectionLimit",
    psa."MaximumSelectionLimit",
    psa."IsUserDefined",
    psa."IsPriceDriven",
    psao."ProductSpecificationAttributeOptionID",
    psao."PriceAdjustment" AS "SpecDefaultOptionPriceAdjustement",
    psao."Cost" AS "SpecDefaultOptionCost",
    psao."DefaultValue" AS "SpecDefaultOptionDefaultValue",
    psao."DefaultQuantity" AS "SpecDefaultOptionDefaultQuantity"
FROM (((("Product" p
     JOIN "ProductSpecificationAttribute" psa ON (((((psa."ProductID" =
         p."ProductID") AND (psa."ProductVersionID" = p."ProductVersionID")) AND (psa."IsActive" = true)) AND (psa."IsDeleted" = false))))
     LEFT JOIN "SpecificationAttribute" sa ON
         ((((sa."SpecificationAttributeID" = psa."SpecificationAttributeID") AND (sa."IsActive" = true)) AND (sa."IsDeleted" = false))))
     LEFT JOIN "ProductSpecificationBlueprint" psb ON ((((((psb."ProductID"
         = p."ProductID") AND (psb."ProductVersionID" = p."ProductVersionID")) AND (psb."IsActive" = true)) AND (psb."IsDeleted" = false)) AND (psb."ProductSpecificationAttributeID" = psa."ProductSpecificationAttributeID"))))
     LEFT JOIN "ProductSpecificationAttributeOption" psao ON
         ((((psao."IsActive" = true) AND (psao."IsDeleted" = false)) AND (psao."ProductSpecificationAttributeOptionID" = psb."DefaultProductSpecificationAttributeOptionID"))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vProductSpecificationOption (OID = 20325) :
--
CREATE VIEW public."vProductSpecificationOption"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    psb."ProductSpecificationAttributeID",
    psb."IsMandatory",
    psb."IsMultiSelect",
    psb."IsPreSelected",
    psb."MinimumSelectionLimit",
    psb."MaximumSelectionLimit",
    psb."IsUserDefined",
    psb."IsPriceDriven",
    psb."SpecificationAttributeID",
    psao."ProductSpecificationAttributeOptionID",
    psao."PriceAdjustment",
    psao."WeightAdjustment",
    psao."Cost",
    psao."DefaultValue",
    psao."DefaultQuantity",
    psao."IsActive",
    psao."IsDeleted",
    psao."DisplayOrder",
    sao."Name" AS "OptionName",
    sao."Description" AS "OptionDescription"
FROM ((("Product" p
     JOIN "ProductSpecificationAttribute" psb ON (((((psb."ProductID" =
         p."ProductID") AND (psb."ProductVersionID" = p."ProductVersionID")) AND (psb."IsActive" = true)) AND (psb."IsDeleted" = false))))
     JOIN "ProductSpecificationAttributeOption" psao ON
         ((((psao."ProductSpecificationAttributeID" = psb."ProductSpecificationAttributeID") AND (psao."IsActive" = true)) AND (psao."IsDeleted" = false))))
     JOIN "SpecificiationAttributeOption" sao ON
         ((((sao."SpecficiationAttributeOptionID" = psao."SpecficiationAttributeOptionID") AND (sao."IsActive" = true)) AND (sao."IsDeleted" = false))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vResource (OID = 20330) :
--
CREATE VIEW public."vResource"
AS
SELECT DISTINCT r."ResourceID",
    r."ResourceName",
    r."ResourceDescription",
    r."SourceID",
    r."ResourceTypeID",
    r."ResourceCategoryID",
    r."ResourceSubCategoryID",
    r."IsActive",
    r."IsDeleted"
FROM ((("Resource" r
     LEFT JOIN "Resource" ro ON ((r."ResourceID" = ro."ResourceID")))
     LEFT JOIN "RoleClaim" rc ON ((rc."ResourceID" = r."ResourceID")))
     LEFT JOIN "OrganisationRoleClaim" orgroleclaim ON
         ((orgroleclaim."ResourceID" = r."ResourceID")));

--
-- Definition for view vRole (OID = 20335) :
--
CREATE VIEW public."vRole"
AS
SELECT DISTINCT rt."RoleID",
    rt."RoleName",
    rt."RoleDescription",
    rt."RoleTypeID",
    rt."RoleSubTypeID",
    rt."RoleCategoryID",
    rt."IsActive",
    rt."IsDeleted",
        CASE ((grt."RoleID" IS NOT NULL) OR (orgr."OrganisationRoleID" IS
            NOT NULL))
            WHEN true THEN true
            ELSE false
        END AS "IsDisabled"
FROM (("Role" rt
     LEFT JOIN "OrganisationRole" orgr ON ((rt."RoleID" =
         orgr."OrganisationRoleID")))
     LEFT JOIN "GroupRole" grt ON ((rt."RoleID" = grt."RoleID")));

--
-- Definition for view vState (OID = 20340) :
--
CREATE VIEW public."vState"
AS
SELECT s."StateID",
    s."ParentStateID",
    si."StateItemID",
    si."ParentStateItemID",
    s."StateName",
    si."StateItemName",
    si."StateItemOrder",
    psi."StateItemName" AS parentstateitemname
FROM (("State" s
     LEFT JOIN "StateItem" si ON ((si."StateID" = s."StateID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")))
WHERE (si."StateItemID" IS NOT NULL);

--
-- Definition for view vStatusTypeTemplate (OID = 20345) :
--
CREATE VIEW public."vStatusTypeTemplate"
AS
SELECT stv."StatusTypeValueTemplateID",
    stv."StatusTypeTemplateID",
    stv."StatusTypeTemplateVersionNumber",
    stv."Name",
    st."Name" AS "TemplateName",
    sts."StatusOrder",
    sts."IsStart",
    sts."IsEnd"
FROM (("StatusTypeValueTemplate" stv
     LEFT JOIN "StatusTypeTemplate" st ON (((st."StatusTypeTemplateID" =
         stv."StatusTypeTemplateID") AND (st."StatusTypeTemplateVersionNumber" = stv."StatusTypeTemplateVersionNumber"))))
     LEFT JOIN "StatusTypeStructureTemplate" sts ON
         ((((sts."StatusTypeTemplateID" = stv."StatusTypeTemplateID") AND (sts."StatusTypeTemplateVersionNumber" = stv."StatusTypeTemplateVersionNumber")) AND (sts."StatusTypeValueTemplateID" = stv."StatusTypeValueTemplateID"))));

--
-- Definition for view vTemporaryUsersNotLoggedIn (OID = 20350) :
--
CREATE VIEW public."vTemporaryUsersNotLoggedIn"
AS
SELECT ua."Created",
    ua."AccountClosed",
    ua."Email",
    ua."FailedLoginCount",
    ua."FailedPasswordResetCount",
    ua."ID",
    ua."IsAccountClosed",
    ua."IsAccountVerified",
    ua."IsActive",
    ua."LastLogin",
    ua."LastFailedPasswordReset",
    ua."LastUpdated"
FROM "UserAccounts" ua
WHERE (((ua."IsTemporaryAccount" = true) AND (ua."IsActive" = true)) AND
    (ua."IsDeleted" = false));

--
-- Definition for view vUserAccountNotLoggedIn (OID = 20354) :
--
CREATE VIEW public."vUserAccountNotLoggedIn"
AS
SELECT ua."ID",
    ua."Username",
    ua."Email",
    ua."IsTemporaryAccount",
    ua."Created",
    date_part('day'::text, (now() - (ua."Created")::timestamp with time
        zone)) AS "DaysSinceCreation",
    date_part('hour'::text, (now() - (ua."Created")::timestamp with time
        zone)) AS "HoursSinceCreation",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (7)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (14)::double precision)) THEN true
            ELSE false
        END AS "Between7and14DaysNotLoggedIn",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (14)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (21)::double precision)) THEN true
            ELSE false
        END AS "Between14and21DaysNotLoggedIn",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (0)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (7)::double precision)) THEN true
            ELSE false
        END AS "Between0and7DaysNotLoggedIn",
        CASE
            WHEN (date_part('day'::text, (now() - (ua."Created")::timestamp
                with time zone)) >= (21)::double precision) THEN true
            ELSE false
        END AS "GreaterThan21DaysNotLoggedIn",
        CASE
            WHEN (ua."LastLogin" IS NULL) THEN true
            ELSE false
        END AS "NotLoggedIn",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false))
    ) AS "COLPRemindersNotReadEver",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationSummary'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false))
    ) AS "COLPRegistrationsNotReadEver",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (7)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (14)::double precision))
    ) AS "COLPRemindersNotReadBetween7and14Days",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (14)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (21)::double precision))
    ) AS "COLPRemindersNotReadBetween14and21Days",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (0)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (7)::double precision))
    ) AS "COLPRemindersNotReadBetween0and7Days",
    (
    SELECT wdi."DataContent"
    FROM (((("WorkflowInstance" wi
             JOIN "Workflow" wf ON ((((wf."WorkflowID" = wi."WorkflowID")
                 AND (wf."WorkflowVersionNumber" = wi."WorkflowVersionNumber")) AND ((wf."Name")::text = 'Login'::text))))
             JOIN "WorkflowInstanceExecution" wie ON (((((wie."WorkflowID"
                 = wf."WorkflowID") AND (wie."WorkflowVersionNumber" = wf."WorkflowVersionNumber")) AND (wie."WorkflowInstanceID" = wi."WorkflowInstanceID")) AND (wie."WorkflowInstanceExecutionID" = (
        SELECT wie2."WorkflowInstanceExecutionID"
        FROM "WorkflowInstanceExecution" wie2
        WHERE (((wie2."WorkflowID" = wf."WorkflowID") AND
            (wie2."WorkflowVersionNumber" = wf."WorkflowVersionNumber")) AND (wie2."WorkflowInstanceID" = wi."WorkflowInstanceID"))
        ORDER BY wie2."CreatedOn" DESC
        LIMIT 1
        )))))
             JOIN "WorkflowInstanceExecutionStatusEvent" wied ON
                 (((wied."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wied."WorkflowInstanceExecutionStatusEventID" = (
        SELECT wied2."WorkflowInstanceExecutionStatusEventID"
        FROM "WorkflowInstanceExecutionStatusEvent" wied2
        WHERE (wied2."WorkflowInstanceExecutionID" =
            wie."WorkflowInstanceExecutionID")
        ORDER BY wied2."EventDate" DESC
        LIMIT 1
        )))))
             JOIN "WorkflowInstanceExecutionDataItem" wdi ON
                 (((wdi."WorkflowInstanceExecutionStatusEventID" = wied."WorkflowInstanceExecutionStatusEventID") AND (wdi."WorkflowInstanceExecutionDataItemID" = (
        SELECT wdi2."WorkflowInstanceExecutionDataItemID"
        FROM "WorkflowInstanceExecutionDataItem" wdi2
        WHERE (wdi2."WorkflowInstanceExecutionStatusEventID" =
            wied."WorkflowInstanceExecutionStatusEventID")
        ORDER BY wdi2."WorkflowInstanceExecutionDataItemID" DESC
        LIMIT 1
        )))))
    WHERE (wi."ParentID" = ua."ID")
    ) AS "LoginWorkflowDataContent"
FROM ("UserAccountOrganisation" uao
     JOIN "UserAccounts" ua ON ((ua."ID" = uao."UserID")))
WHERE (ua."LastLogin" IS NULL);

--
-- Definition for view vUserAccountOrganisation (OID = 20359) :
--
CREATE VIEW public."vUserAccountOrganisation"
AS
SELECT ua."ID",
    ua."IsTemporaryAccount",
    uao."UserAccountOrganisationID",
    uao."UserTypeID",
    uao."OrganisationID" AS "OrganisationBranchID",
    od1."OrganisationID",
    od1."Name",
    org."IsBranch",
    org."IsHeadOffice",
    org."IsUserOrganisation",
    org."IsPaymentProvider",
    org."OrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    ut."Name" AS "UserTypeName",
    lod."VATNumber",
    lod."IsVATRegistered",
    ct."BirthDate",
    ct."EmailAddress1",
    ct."FirstName",
    ct."LastName",
    ct."MiddleName",
    ua."Username",
    ua."Email",
    ct."ContactID",
    ad."AddressID",
    ad."BuildingName",
    ad."City",
    ad."CountryCode",
    ad."County",
    ad."Line1",
    ad."Line2",
    ad."Line3",
    ad."PostalCode",
    ad."Town",
    ad."IsPrimaryAddress"
FROM (((((((("UserAccounts" ua
     LEFT JOIN "Contact" ct ON (((ct."IsPrimaryContact" = true) AND
         (ct."ParentID" = ua."ID"))))
     LEFT JOIN "Address" ad ON ((ad."ParentID" = ct."ContactID")))
     JOIN "UserAccountOrganisation" uao ON ((uao."UserID" = ua."ID")))
     JOIN "OrganisationDetail" od1 ON ((od1."OrganisationID" = (
    SELECT "Organisation"."ParentOrganisationID"
    FROM "Organisation"
    WHERE ("Organisation"."OrganisationID" = uao."OrganisationID")
    LIMIT 1
    ))))
     JOIN "Organisation" org ON ((org."OrganisationID" = od1."OrganisationID")))
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         org."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((ut."UserTypeID" = uao."UserTypeID")))
     LEFT JOIN legal."LegalOrganisationDetails" lod ON
         ((lod."OrganisationID" = od1."OrganisationID")))
WHERE (ua."IsTemporaryAccount" = false);

--
-- Definition for view vUserStatus (OID = 20369) :
--
CREATE VIEW public."vUserStatus"
AS
SELECT os."UserAccountOrganisationID",
    org."OrganisationID",
    org."UserID",
    org."IsActive",
    org."IsDeleted",
    org."UserTypeID",
    st."Name" AS "StatusTypeName",
    st."StatusTypeID",
    st."StatusTypeVersionNumber",
    st."StatusTypeTemplateID",
    st."StatusTypeTemplateVersionNumber",
    stv."StatusTypeValueID",
    stv."Name" AS "StatusValueName",
    os."StatusChangedOn",
    os."StatusChangedBy",
    stt."StatusOrder",
    stt."IsStart",
    stt."IsEnd",
    stt1."StatusTypeValueID" AS "NextStatusTypeValueID",
    stt1."Name" AS "NextStatusTypeName",
    stt1."StatusOrder" AS "NextStatusOrder",
    stt1."IsStart" AS "NextStatusStart",
    stt1."IsEnd" AS "NextStatusEnd"
FROM (((((("UserAccountOrganisationStatus" os
     LEFT JOIN "UserAccountOrganisation" org ON
         ((org."UserAccountOrganisationID" = os."UserAccountOrganisationID")))
     LEFT JOIN "Organisation" og ON ((og."OrganisationID" = org."OrganisationID")))
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" = os."StatusTypeID")
         AND (st."StatusTypeVersionNumber" = os."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeValue" stv ON ((stv."StatusTypeValueID" =
         os."StatusTypeValueID")))
     LEFT JOIN "vStatusType" stt ON ((((stt."StatusTypeID" =
         os."StatusTypeID") AND (stt."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt."StatusTypeValueID" = os."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" stt1 ON ((((stt1."StatusTypeID" =
         os."StatusTypeID") AND (stt1."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt1."StatusOrder" = (stt."StatusOrder" + 1)))))
WHERE (stt."StatusTypeValueID" IS NOT NULL);

--
-- Definition for view vUserWorkflowInstanceStatus (OID = 20374) :
--
CREATE VIEW public."vUserWorkflowInstanceStatus"
AS
SELECT wfi."ParentID",
    COALESCE(ua."ID", ua1."ID") AS "UserID",
    uao."UserAccountOrganisationID",
    wfi."WorkflowID",
    wfi."WorkflowInstanceID",
    wfi."WorkflowInstanceStatusID",
    ct."Name" AS instancestatus,
    wftct."Name" AS workflowtype
FROM (((((("WorkflowInstance" wfi
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         wfi."WorkflowInstanceStatusID")))
     LEFT JOIN "Workflow" wf ON ((wf."WorkflowID" = wfi."WorkflowID")))
     LEFT JOIN "ClassificationType" wftct ON ((wf."WorkflowTypeID" =
         wftct."ClassificationTypeID")))
     LEFT JOIN "UserAccountOrganisation" uao ON ((wfi."ParentID" =
         uao."UserAccountOrganisationID")))
     LEFT JOIN "UserAccounts" ua ON ((uao."UserID" = ua."ID")))
     LEFT JOIN "UserAccounts" ua1 ON ((wfi."ParentID" = ua1."ID")))
WHERE (((wftct."Name")::text = 'Startup'::text) AND ((ct."Name")::text <>
    'Complete'::text));

--
-- Definition for view vWorkflowActionParameter (OID = 20379) :
--
CREATE VIEW public."vWorkflowActionParameter"
AS
SELECT wap."WorkflowActionID",
    wp."WorkflowParameterID",
    wp."Name",
    wp."Description",
    wp."ObjectType",
    wp."ObjectValue",
    wp."WorkflowID",
    wp."WorkflowVersionNumber"
FROM ("WorkflowParameter" wp
     JOIN "WorkflowActionParameter" wap ON ((((wap."WorkflowParameterID" =
         wp."WorkflowParameterID") AND (wap."WorkflowID" = wp."WorkflowID")) AND (wap."WorkflowVersionNumber" = wp."WorkflowVersionNumber"))));

--
-- Definition for view vWorkflowInstanceProgress (OID = 20383) :
--
CREATE VIEW public."vWorkflowInstanceProgress"
AS
SELECT COALESCE(dis."Name", act."Name") AS "StepName",
    COALESCE(dis."WorkflowDecisionID", act."WorkflowActionID") AS "StepID",
    ss."Name" AS "StepStatus",
    se."EventDate" AS "StepDate",
    se."EventBy" AS "StepExecutedBy",
    se."EventOrder" AS "StepOrder",
        CASE
            WHEN (act."WorkflowActionID" IS NULL) THEN 'Decision'::text
            ELSE 'Action'::text
        END AS "StepType",
        CASE
            WHEN (act."IsManual" = true) THEN 1
            ELSE 0
        END AS "StepIsManual",
    COALESCE(dis."IsTransistionStart", act."IsTransistionStart") AS "StepIsStart",
    COALESCE(dis."IsTransistionEnd", act."IsTransistionEnd") AS "StepIsEnd",
    wit."Name" AS "TransistionName",
    wit."IsWorkflowStart",
    wit."IsWorkflowEnd",
    wie."WorkflowTransistionID",
    wi."WorkflowInstanceID",
    se."WorkflowInstanceExecutionStatusEventID",
    se."WorkflowExecutionStatusID",
    se."WorkflowInstanceExecutionID",
    wie."WorkflowInstanceSessionID",
    wap."ObjectValue" AS actionarea,
    wap1."ObjectValue" AS actionaction,
    wap2."ObjectValue" AS actioncontroller,
    wf."WorkflowTypeID",
    wftct."Name" AS workflowtypename,
    wf."WorkflowCategoryID",
    wfcct."Name" AS workflowcategoryname,
    wfi."WorkflowInstanceStatusID",
    wfict."Name" AS workflowinstancestatusname
FROM (((((((((((((("WorkflowInstanceExecutionStatusEvent" se
     LEFT JOIN "WorkflowExecutionStatus" ss ON
         ((se."WorkflowExecutionStatusID" = ss."WorkflowExecutionStatusID")))
     LEFT JOIN "Workflow" wf ON (((se."WorkflowID" = wf."WorkflowID") AND
         (se."WorkflowVersionNumber" = wf."WorkflowVersionNumber"))))
     LEFT JOIN "ClassificationType" wftct ON ((wf."WorkflowTypeID" =
         wftct."ClassificationTypeID")))
     LEFT JOIN "ClassificationType" wfcct ON ((wf."WorkflowCategoryID" =
         wfcct."ClassificationTypeID")))
     LEFT JOIN "WorkflowInstance" wfi ON ((se."WorkflowInstanceID" =
         wfi."WorkflowInstanceID")))
     LEFT JOIN "ClassificationType" wfict ON
         ((wfi."WorkflowInstanceStatusID" = wfict."ClassificationTypeID")))
     LEFT JOIN "WorkflowInstanceExecution" wie ON
         ((wie."WorkflowInstanceExecutionID" = se."WorkflowInstanceExecutionID")))
     LEFT JOIN "WorkflowAction" act ON ((((act."WorkflowActionID" =
         wie."WorkflowActionID") AND (act."WorkflowID" = wie."WorkflowID")) AND (act."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowDecision" dis ON ((((dis."WorkflowDecisionID" =
         wie."WorkflowDecisionID") AND (dis."WorkflowID" = wie."WorkflowID")) AND (dis."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstance" wi ON ((wi."WorkflowInstanceID" =
         wie."WorkflowInstanceID")))
     LEFT JOIN "WorkflowTransistion" wit ON (((wit."WorkflowID" =
         wi."WorkflowID") AND (wit."WorkflowVersionNumber" = wi."WorkflowVersionNumber"))))
     LEFT JOIN "vWorkflowActionParameter" wap ON (((wap."WorkflowActionID"
         = act."WorkflowActionID") AND ((wap."Name")::text = 'Area'::text))))
     LEFT JOIN "vWorkflowActionParameter" wap1 ON
         (((wap1."WorkflowActionID" = act."WorkflowActionID") AND ((wap1."Name")::text = 'Action'::text))))
     LEFT JOIN "vWorkflowActionParameter" wap2 ON
         (((wap2."WorkflowActionID" = act."WorkflowActionID") AND ((wap2."Name")::text = 'Controller'::text))));

--
-- Definition for view vWorkflowInstanceExecutionNotCompleted (OID = 20388) :
--
CREATE VIEW public."vWorkflowInstanceExecutionNotCompleted"
AS
SELECT ip."StepName",
    ip."StepStatus",
    ip."StepDate",
    ip."StepExecutedBy",
    ip."StepOrder",
    ip."StepType",
    ip."StepIsManual",
    ip."StepIsStart",
    ip."StepIsEnd",
    ip."TransistionName",
    ip."IsWorkflowStart",
    ip."IsWorkflowEnd",
    ip."WorkflowTransistionID",
    ip."WorkflowInstanceID",
    ip."WorkflowInstanceExecutionStatusEventID",
    ip."WorkflowExecutionStatusID",
    ip."WorkflowInstanceExecutionID",
    ip."WorkflowInstanceSessionID",
    wis."SessionStartedOn",
    wis."SessionEndedOn",
    ip."StepID",
    ip.actionaction AS "ActionAction",
    ip.actionarea AS "ActionArea",
    ip.actioncontroller AS "ActionController",
    wis."WorkflowID",
    wis."WorkflowVersionNumber",
    di."DataContent" AS "JsonContent",
    ip."WorkflowTypeID",
    ip.workflowtypename,
    ip."WorkflowCategoryID",
    ip.workflowcategoryname,
    ip."WorkflowInstanceStatusID",
    ip.workflowinstancestatusname
FROM (("WorkflowInstanceSession" wis
     JOIN "vWorkflowInstanceProgress" ip ON
         ((ip."WorkflowInstanceSessionID" = wis."WorkflowInstanceSessionID")))
     LEFT JOIN "WorkflowInstanceExecutionDataItem" di ON
         (((di."WorkflowInstanceExecutionStatusEventID" = ip."WorkflowInstanceExecutionStatusEventID") AND (di."WorkflowInstanceExecutionID" = ip."WorkflowInstanceExecutionID"))))
WHERE (((((wis."SessionStartedOn" = (
    SELECT max(wis2."SessionStartedOn") AS max
    FROM "WorkflowInstanceSession" wis2
    WHERE (wis2."WorkflowInstanceID" = wis."WorkflowInstanceID")
    )) AND (ip."StepOrder" = (
    SELECT max(wse2."EventOrder") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" wse2
    WHERE (wse2."WorkflowInstanceSessionID" = wis."WorkflowInstanceSessionID")
    ))) AND (ip."WorkflowInstanceExecutionStatusEventID" IS NOT NULL)) AND
        ((ip."StepStatus")::text <> 'Closed'::text)) AND (ip."StepType" = 'Action'::text));

--
-- Definition for view vWorkflowInstanceExecutionStatusEvent (OID = 20393) :
--
CREATE VIEW public."vWorkflowInstanceExecutionStatusEvent"
AS
SELECT se."WorkflowInstanceExecutionStatusEventID",
    se."EventDate",
    se."EventBy",
    se."WorkflowExecutionStatusID",
    se."WorkflowInstanceExecutionID",
    se."EventOrder",
    ss."Name",
    COALESCE(dis."Name", act."Name") AS "ActionDecision"
FROM (((("WorkflowInstanceExecutionStatusEvent" se
     LEFT JOIN "WorkflowExecutionStatus" ss ON
         ((se."WorkflowExecutionStatusID" = ss."WorkflowExecutionStatusID")))
     LEFT JOIN "WorkflowInstanceExecution" wie ON
         ((wie."WorkflowInstanceExecutionID" = se."WorkflowInstanceExecutionID")))
     LEFT JOIN "WorkflowAction" act ON ((((act."WorkflowActionID" =
         wie."WorkflowActionID") AND (act."WorkflowID" = wie."WorkflowID")) AND (act."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowDecision" dis ON ((((dis."WorkflowDecisionID" =
         wie."WorkflowDecisionID") AND (dis."WorkflowID" = wie."WorkflowID")) AND (dis."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))));

--
-- Definition for view vWorkflowInstanceNotStarted (OID = 20398) :
--
CREATE VIEW public."vWorkflowInstanceNotStarted"
AS
SELECT wfi."WorkflowID",
    wfi."WorkflowVersionNumber",
    wfi."WorkflowInstanceID",
    wfi."WorkflowInstanceStatusID",
    ct."Name",
    wfi."ParentID"
FROM ("WorkflowInstance" wfi
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         wfi."WorkflowInstanceStatusID")))
WHERE ((ct."Name")::text = 'New'::text);

--
-- Definition for view vWorkflowInstanceRetry (OID = 20402) :
--
CREATE VIEW public."vWorkflowInstanceRetry"
AS
SELECT wie."WorkflowID",
    wie."WorkflowVersionNumber",
    w."Name",
    wie."WorkflowInstanceID",
    wie."WorkflowInstanceSessionID",
    COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID") AS
        "PreviousStepID",
    COALESCE(pwd."Name", pwa."Name") AS "PreviousStepName",
    COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID") AS "StepID",
    COALESCE(wd."Name", wa."Name") AS "StepName",
    wis."SessionStartedOn",
    count(wie."WorkflowInstanceID") AS count
FROM ((((((((("WorkflowInstanceExecution" wie
     LEFT JOIN "WorkflowDecision" wd ON ((wd."WorkflowDecisionID" =
         wie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" wa ON ((wa."WorkflowActionID" =
         wie."WorkflowActionID")))
     LEFT JOIN "WorkflowInstanceSession" wis ON
         ((wis."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")))
     LEFT JOIN "Workflow" w ON (((w."WorkflowID" = wie."WorkflowID") AND
         (w."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" wise ON
         ((((wise."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wise."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")) AND (wise."EventOrder" = 0))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" pwise ON
         ((((pwise."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID") AND (pwise."WorkflowInstanceSessionID" = wise."WorkflowInstanceSessionID")) AND (pwise."WorkflowInstanceExecutionStatusEventID" = (
    SELECT max(pp."WorkflowInstanceExecutionStatusEventID") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" pp
    WHERE ((pp."WorkflowInstanceSessionID" =
        wise."WorkflowInstanceSessionID") AND (pp."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID"))
    )))))
     LEFT JOIN "WorkflowInstanceExecution" pwie ON
         (((pwie."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID") AND (pwie."WorkflowInstanceExecutionID" = pwise."WorkflowInstanceExecutionID"))))
     LEFT JOIN "WorkflowDecision" pwd ON ((pwd."WorkflowDecisionID" =
         pwie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" pwa ON ((pwa."WorkflowActionID" =
         pwie."WorkflowActionID")))
GROUP BY wie."WorkflowID", wie."WorkflowVersionNumber", w."Name",
    wie."WorkflowInstanceID", wie."WorkflowInstanceSessionID", COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID"), COALESCE(pwd."Name", pwa."Name"), COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID"), COALESCE(wd."Name", wa."Name"), wis."SessionStartedOn"
ORDER BY wie."WorkflowID", wie."WorkflowVersionNumber",
    wie."WorkflowInstanceID", wis."SessionStartedOn";

--
-- Definition for view vWorkflowInstanceStatus (OID = 20407) :
--
CREATE VIEW public."vWorkflowInstanceStatus"
AS
SELECT p."StepName",
    p."StepStatus",
    p."WorkflowInstanceID",
    p."WorkflowInstanceExecutionStatusEventID"
FROM "vWorkflowInstanceProgress" p
WHERE ((((p."StepDate" = (
    SELECT max(se."EventDate") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" se
    WHERE (se."WorkflowInstanceExecutionID" = p."WorkflowInstanceExecutionID")
    )) AND (p."WorkflowInstanceSessionID" = (
    SELECT k."WorkflowInstanceSessionID"
    FROM "WorkflowInstanceSession" k
    WHERE (k."WorkflowInstanceID" = p."WorkflowInstanceID")
    ORDER BY k."SessionStartedOn" DESC
    LIMIT 1
    ))) AND (p."StepType" = 'Action'::text)) AND ((p."StepStatus")::text <>
        'Closed'::text))
GROUP BY p."StepName", p."StepStatus", p."WorkflowInstanceID",
    p."WorkflowInstanceExecutionStatusEventID";

--
-- Definition for view vWorkflowInstanceStepTrace (OID = 20412) :
--
CREATE VIEW public."vWorkflowInstanceStepTrace"
AS
SELECT wie."WorkflowID",
    wie."WorkflowVersionNumber",
    w."Name",
    wie."WorkflowInstanceID",
    wie."WorkflowInstanceSessionID",
    COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID") AS
        "PreviousStepID",
    COALESCE(pwd."Name", pwa."Name") AS "PreviousStepName",
    COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID") AS "StepID",
    COALESCE(wd."Name", wa."Name") AS "StepName",
    wis."SessionStartedOn"
FROM ((((((((("WorkflowInstanceExecution" wie
     LEFT JOIN "WorkflowDecision" wd ON ((wd."WorkflowDecisionID" =
         wie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" wa ON ((wa."WorkflowActionID" =
         wie."WorkflowActionID")))
     LEFT JOIN "WorkflowInstanceSession" wis ON
         ((wis."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")))
     LEFT JOIN "Workflow" w ON (((w."WorkflowID" = wie."WorkflowID") AND
         (w."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" wise ON
         ((((wise."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wise."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")) AND (wise."EventOrder" = 0))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" pwise ON
         ((((pwise."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID") AND (pwise."WorkflowInstanceSessionID" = wise."WorkflowInstanceSessionID")) AND (pwise."WorkflowInstanceExecutionStatusEventID" = (
    SELECT max(pp."WorkflowInstanceExecutionStatusEventID") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" pp
    WHERE ((pp."WorkflowInstanceSessionID" =
        wise."WorkflowInstanceSessionID") AND (pp."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID"))
    )))))
     LEFT JOIN "WorkflowInstanceExecution" pwie ON
         (((pwie."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID") AND (pwie."WorkflowInstanceExecutionID" = pwise."WorkflowInstanceExecutionID"))))
     LEFT JOIN "WorkflowDecision" pwd ON ((pwd."WorkflowDecisionID" =
         pwie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" pwa ON ((pwa."WorkflowActionID" =
         pwie."WorkflowActionID")))
GROUP BY wie."WorkflowID", wie."WorkflowVersionNumber", w."Name",
    wie."WorkflowInstanceID", wie."WorkflowInstanceSessionID", COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID"), COALESCE(pwd."Name", pwa."Name"), COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID"), COALESCE(wd."Name", wa."Name"), wis."SessionStartedOn", wise."WorkflowInstanceExecutionStatusEventID"
ORDER BY wie."WorkflowID", wie."WorkflowVersionNumber",
    wie."WorkflowInstanceID", wis."SessionStartedOn", wise."WorkflowInstanceExecutionStatusEventID";

--
-- Definition for view vWorkflowTree (OID = 20417) :
--
CREATE VIEW public."vWorkflowTree"
AS
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NULL) AND (wts."Level" = 1))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 2))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 3))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 4));

--
-- Structure for table Plan (OID = 20422) :
--
SET search_path = public_audit, pg_catalog;
CREATE TABLE public_audit."Plan" (
    "PlanID" uuid,
    "PlanVersionNumber" integer,
    "Name" varchar(200),
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8),
    "Period" integer,
    "TrialPeriod" integer,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone,
    "CreatedBy" varchar(200),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "CountryCode" varchar(300),
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean,
    "HasInfinitePeriods" boolean,
    "ParentID" uuid,
    "PlanTemplateID" uuid,
    "PlanTemplateVersionNumber" integer,
    "PlanStatusID" integer,
    "IsTransactionBased" boolean,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean,
    "HasForwardCycleFee" boolean,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFreeIsSameAsPrice" numeric(30,8),
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer,
    "PlanTypeID" integer,
    "PlanCategoryID" integer,
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    stamp timestamp with time zone DEFAULT now() NOT NULL,
    "current_user" text DEFAULT "current_user"() NOT NULL,
    "session_user" text DEFAULT "session_user"() NOT NULL,
    operation text NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetail (OID = 20431) :
--
CREATE TABLE public_audit."ProductDetail" (
    "ProductDetailID" uuid,
    "Name" varchar(1000),
    "Description" varchar(2000),
    "ProductID" uuid,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "RequireOtherProducts" boolean,
    "AutomaticallyAddRequiredProducts" boolean,
    "HasUserAgreement" boolean,
    "UserAgreementText" varchar,
    "IsRecurring" boolean,
    "RecurringCycleLength" integer,
    "RecurringCyclePeriodID" integer,
    "RecurringTotalCycle" integer,
    "IsTaxExempt" boolean,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer,
    "OrderMaximumQuantity" integer,
    "CallForPrice" boolean,
    "Price" numeric,
    "ProductCost" numeric,
    "CustomerEntersPrice" boolean,
    "HasTierPrices" boolean,
    "HasDiscountsApplied" boolean,
    "MinimumCustomerEnteredPrice" numeric,
    "MaximumCustomerEnteredPrice" numeric,
    "DisplayOrder" integer,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "ProductVersionID" integer,
    "CurrencyCode" varchar(30),
    "CurrencyRate" numeric,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean,
    stamp timestamp with time zone DEFAULT now() NOT NULL,
    "current_user" text DEFAULT "current_user"() NOT NULL,
    "session_user" text DEFAULT "session_user"() NOT NULL,
    operation text NOT NULL
)
WITH (oids = false);
--
-- Structure for table LRDocument (OID = 20440) :
--
SET search_path = sts, pg_catalog;
CREATE TABLE sts."LRDocument" (
    "LRDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "LRTitleID" uuid NOT NULL,
    "AttachmentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductPurchaseProductTaskID" uuid
)
WITH (oids = false);
--
-- Structure for table LRRegisterExtract (OID = 20446) :
--
CREATE TABLE sts."LRRegisterExtract" (
    "LRRegisterExtractID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "LRTitleID" uuid NOT NULL,
    "RegisterExtractData" json,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200),
    "ProductPurchaseProductTaskID" uuid
)
WITH (oids = false);
--
-- Structure for table LRTitle (OID = 20453) :
--
CREATE TABLE sts."LRTitle" (
    "LRTitleID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "TitleNumber" varchar(50) NOT NULL,
    "StsPropertyID" uuid NOT NULL,
    "Description" varchar(2000),
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ParentID" uuid,
    "ProductPurchaseProductTaskID" uuid NOT NULL,
    "StsSearchPropertyID" uuid,
    "LRPropertyTenureTypeID" integer NOT NULL,
    "AddressID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PropertyDetail (OID = 20463) :
--
CREATE TABLE sts."PropertyDetail" (
    "PropertyDetailID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "PropertyDetailAddressID" uuid NOT NULL,
    "PropertyDetailTypeID" integer,
    "PropertyDetailSubTypeID" integer,
    "PropertyDetailCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table StsAccountDocument (OID = 20467) :
--
CREATE TABLE sts."StsAccountDocument" (
    "AccountID" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StsAccountDocument" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActor (OID = 20473) :
--
CREATE TABLE sts."StsActor" (
    "OrganisationID" uuid,
    "ActorID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ActorUserAccountOrganisationID" uuid,
    "StsActorID" uuid NOT NULL,
    "StsInviteID" uuid,
    "IsActorOrganisatonPersonal" boolean DEFAULT false NOT NULL,
    "CreatedBy" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "ActorAccountID" uuid,
    "ActorContactID" uuid,
    "ContactDrivenActor" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorAuthority (OID = 20480) :
--
CREATE TABLE sts."StsActorAuthority" (
    "StsActorAuthorityID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StsActorID" uuid NOT NULL,
    "WillBeARegisteredOwner" boolean DEFAULT false NOT NULL,
    "IsARegisteredOwner" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "HasAuthorityToSellOnBelhalfOf" boolean DEFAULT false NOT NULL,
    "HasAuthorityToByOnTheBehalfOf" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorProcessLog (OID = 20490) :
--
CREATE TABLE sts."StsActorProcessLog" (
    "StsActorProcessLogID" oid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StsActorID" uuid,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid
)
WITH (oids = false);
--
-- Structure for table StsActorPurchase (OID = 20493) :
--
CREATE TABLE sts."StsActorPurchase" (
    "StsActorPurchaseID" uuid NOT NULL,
    "StsActorID" uuid NOT NULL,
    "IsShareOfPropertyPercentageDriven" boolean DEFAULT false NOT NULL,
    "ShareOfPropertyPricePercentage" numeric(30,8),
    "ShareOfPropertyPriceValue" numeric(30,8),
    "IsUsingAMortgage" boolean DEFAULT false NOT NULL,
    "MortgageFirstApplicant" boolean DEFAULT false NOT NULL,
    "MortgagePercentage" numeric(30,8) DEFAULT 0 NOT NULL,
    "MortgageAmount" numeric(30,8) NOT NULL,
    "MortgageValue" numeric(30,8),
    "MortgageLenderID" integer,
    "MortgageApplicationNumber" varchar(50),
    "MortgageTypeID" integer,
    "IsUsingAMortgageBroker" boolean DEFAULT false NOT NULL,
    "MortgageBrokerStsActorStructureID" uuid,
    "MortgageApplicantStsActorStructureID" uuid,
    "IsSharedOwnership" boolean DEFAULT false,
    "ShareOfPropertyPriceIsCashBuy" boolean DEFAULT false,
    "IsUsingADeposit" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table StsActorStructure (OID = 20504) :
--
CREATE TABLE sts."StsActorStructure" (
    "StsActorStructureID" uuid NOT NULL,
    "PrimaryStsActorID" uuid NOT NULL,
    "SecondaryStsActorID" uuid NOT NULL,
    "ActorPrimarySecondaryRelationshipTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "HasSeenSecondaryFaceToFace" boolean DEFAULT false NOT NULL,
    "DateSeenSecondaryFaceToFace" timestamp without time zone,
    "PlaceSeenSecondaryFaceToFaceID" integer,
    "PlaceSeenSecondaryFaceToFaceDesc" varchar(2000),
    "SecondaryStsActorAccountID" uuid,
    "HasActedForSecondaryOnPrevious" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorStsSearch (OID = 20514) :
--
CREATE TABLE sts."StsActorStsSearch" (
    "StsActorID" uuid NOT NULL,
    "StsSearchID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "StsActorStructureID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorStsTransaction (OID = 20520) :
--
CREATE TABLE sts."StsActorStsTransaction" (
    "StsActorID" uuid NOT NULL,
    "StsTransactionID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "StsActorStructureID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsAuthority (OID = 20526) :
--
CREATE TABLE sts."StsAuthority" (
    "StsAuthorityID" uuid NOT NULL,
    "StsActorAuthorityID" uuid,
    "RegisteredProprietorTypeID" integer,
    "StsAuthorityStsActorStructureID" uuid,
    "ContactID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsAuthorityStsDocument (OID = 20531) :
--
CREATE TABLE sts."StsAuthorityStsDocument" (
    "StsAuthorityID" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsDocument (OID = 20534) :
--
CREATE TABLE sts."StsDocument" (
    "StsDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "DocumentTypeID" integer,
    "DocumentSubTypeID" integer,
    "DocumentCategoryID" integer,
    "DocumentSubCategoryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AttachmentID" uuid,
    "DocumentHasExpiry" boolean DEFAULT false NOT NULL,
    "DocumentExpiryDate" timestamp without time zone,
    "DocumentTypeValue" varchar(1000),
    "DocumentCertificationTypeID" integer,
    "DocumentCertificationNameOnStamp" varchar(300),
    "DocumentCertificationBy" varchar(500)
)
WITH (oids = false);
--
-- Structure for table StsDocumentProcessLog (OID = 20544) :
--
CREATE TABLE sts."StsDocumentProcessLog" (
    "CreatedOn" timestamp without time zone NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusChangedOn" timestamp without time zone,
    "StatusChangedBy" uuid,
    "StsDocumentProcessLog" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StatusChangedByContactID" uuid
)
WITH (oids = false);
--
-- Structure for table StsInvite (OID = 20550) :
--
CREATE TABLE sts."StsInvite" (
    "StsInviteID" uuid NOT NULL,
    "NotificationID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "InviteTypeID" integer,
    "InviteDetail" json,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InviteSubTypeID" integer,
    "InviteCategoryID" integer,
    "InviteSubCategoryID" integer,
    "InviteIsExistingUser" boolean DEFAULT false NOT NULL,
    "CreatedBy" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsInviteProcessLog (OID = 20559) :
--
CREATE TABLE sts."StsInviteProcessLog" (
    "StsInviteID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "IsRejected" boolean DEFAULT false NOT NULL,
    "RejectReasonTypeID" integer,
    "RejectReasonComments" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table StsSearch (OID = 20569) :
--
CREATE TABLE sts."StsSearch" (
    "StsSearchID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StsSearchTypeID" integer,
    "StsSearchSubTypeID" integer,
    "StsSearchCategoryID" integer,
    "StsSearchSubCategoryID" integer,
    "InternalReferenceNumber" varchar(200),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AssignedToUserAccountOrganisationID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchDetail (OID = 20575) :
--
CREATE TABLE sts."StsSearchDetail" (
    "StsSearchDetailID" uuid NOT NULL,
    "StsSearchID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchProcessLog (OID = 20578) :
--
CREATE TABLE sts."StsSearchProcessLog" (
    "StsSearchID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchPropertyDetail (OID = 20584) :
--
CREATE TABLE sts."StsSearchPropertyDetail" (
    "StsSearchID" uuid NOT NULL,
    "PropertyDetailID" uuid NOT NULL,
    "PropertyPrice" numeric(30,8) NOT NULL,
    "PropertyTenureID" integer,
    "StsSearchPropertyDetailID" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchRelation (OID = 20588) :
--
CREATE TABLE sts."StsSearchRelation" (
    "BuyerStsSearchID" uuid NOT NULL,
    "SellerStsSearchID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSourceOfFunds (OID = 20593) :
--
CREATE TABLE sts."StsSourceOfFunds" (
    "StsSourceOfFunds" uuid NOT NULL,
    "SourceOfFundsTypeID" integer NOT NULL,
    "SourceOfFundsProvider" varchar(400),
    "StsActorPurchaseID" uuid NOT NULL,
    "SourceOfFundsPercentage" numeric(30,8),
    "SourceOfFundsAmount" numeric(30,8),
    "SourceOfFundsIsPercentageBased" boolean DEFAULT false NOT NULL,
    "SourceOfFundsInterestRate" numeric(30,8) NOT NULL,
    "SourceOfFundsCurrentBalance" numeric(30,8),
    "SourceOfFundsMonthlyRepaymentAmount" numeric(30,8),
    "SourceOfFundsProviderMaintainsInterestInProperty" boolean DEFAULT false NOT NULL,
    "SourceOfFundsStsActorStructureID" uuid,
    "IsSourceOfFundsPersonal" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSourceOfFundsStsDocument (OID = 20599) :
--
CREATE TABLE sts."StsSourceOfFundsStsDocument" (
    "StsSourceOfFunds" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StsSourceOfFundsStsDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransaction (OID = 20605) :
--
CREATE TABLE sts."StsTransaction" (
    "StsTransactionID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "TransactionTypeID" integer,
    "TransactionCategoryID" integer,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "InternalReferenceNumber" varchar(200),
    "OrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table StsTransactionComponent (OID = 20614) :
--
CREATE TABLE sts."StsTransactionComponent" (
    "StsTransactionComponentID" uuid NOT NULL,
    "StsTransactionComponentTypeID" integer NOT NULL,
    "StsTransactionComponentValue" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "StsTransactionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransactionProcessLog (OID = 20619) :
--
CREATE TABLE sts."StsTransactionProcessLog" (
    "StsTransactionID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsArchived" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransactionPropertyDetail (OID = 20626) :
--
CREATE TABLE sts."StsTransactionPropertyDetail" (
    "StsTransactionPropertyDetailID" uuid NOT NULL,
    "StsTransactionID" uuid NOT NULL,
    "PropertyDetailID" uuid NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence contactregulator_regulatorid_seq (OID = 27877) :
--
SET search_path = public, pg_catalog;
CREATE SEQUENCE public.contactregulator_regulatorid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for view vUserRoleRegulatorDetail (OID = 27895) :
--
CREATE VIEW public."vUserRoleRegulatorDetail"
AS
SELECT uac."ID",
    uac."Email",
    con."LastName",
    con."FirstName",
    "ContactRegulator"."RegulatorID",
    "ClassificationType"."Name" AS "Regulator",
    "ContactRegulator"."RegulatorNumber",
    "UserType"."Name" AS "UserRole",
    "OrganisationTradingName"."Name" AS "TradingName",
    "OrganisationDetail"."Name" AS "CompanyName",
    uac."IsActive",
    uac."IsDeleted"
FROM (((((((("UserAccounts" uac
     LEFT JOIN "Contact" con ON ((uac."ID" = con."ParentID")))
     LEFT JOIN "ContactRegulator" ON ((con."ContactID" =
         "ContactRegulator"."ContactID")))
     LEFT JOIN "ClassificationType" ON
         (("ClassificationType"."ClassificationTypeID" = "ContactRegulator"."RegulatorID")))
     LEFT JOIN "UserAccountOrganisation" ON ((uac."ID" =
         "UserAccountOrganisation"."UserID")))
     LEFT JOIN "UserType" ON (("UserAccountOrganisation"."UserTypeID" =
         "UserType"."UserTypeID")))
     LEFT JOIN "Organisation" ON
         (("UserAccountOrganisation"."OrganisationID" = "Organisation"."OrganisationID")))
     LEFT JOIN "OrganisationDetail" ON (("Organisation"."OrganisationID" =
         "OrganisationDetail"."OrganisationID")))
     JOIN "OrganisationTradingName" ON
         (("OrganisationTradingName"."OrganisationID" = "Organisation"."OrganisationID")))
WHERE (uac."IsApproved" = true);

--
-- Definition for view vCompany (OID = 27957) :
--
CREATE VIEW public."vCompany"
AS
SELECT o."OrganisationID" AS "CompanyId",
    od."Name" AS "CompanyName",
    o."CreatedOn" AS "CompanyRecordCreated",
    o."IsCompanyVerified",
    o."IsCompanyPinCreated",
    o."CompanyPinCode",
    o."CompanyPinCreated",
    c."Salutation" AS "SystemAdminTitle",
    c."FirstName" AS "SystemAdminFirstName",
    c."LastName" AS "SystemAdminLastName",
    c."Telephone1" AS "SystemAdminTel",
    c."EmailAddress1" AS "SystemAdminEmail",
    cr."RegulatorName" AS "CompanyRegulator",
    cr."RegulatorOtherName" AS "CompanyOtherRegulator",
    a."Line1" AS "CompanyAddress1",
    a."Line2" AS "CompanyAddress2",
    a."Town" AS "CompanyTownCity",
    a."County" AS "CompanyCounty",
    a."PostalCode" AS "CompanyPostCode",
    a."AdditionalAddressInformation",
    o."ReturnUrl"
FROM (((("Organisation" o
     LEFT JOIN "OrganisationDetail" od ON ((o."OrganisationID" =
         od."OrganisationID")))
     LEFT JOIN "Contact" c ON ((o."OrganisationID" = c."ParentID")))
     LEFT JOIN "ContactRegulator" cr ON ((c."ContactID" = cr."ContactID")))
     LEFT JOIN "Address" a ON ((a."ParentID" = cr."ContactID")));

--
-- Definition for index logged_actions_action_idx (OID = 22225) :
--
SET search_path = audit, pg_catalog;
CREATE INDEX logged_actions_action_idx ON logged_actions USING btree (action);
--
-- Definition for index logged_actions_action_tstamp_tx_stm_idx (OID = 22226) :
--
CREATE INDEX logged_actions_action_tstamp_tx_stm_idx ON logged_actions USING btree (action_tstamp_stm);
--
-- Definition for index logged_actions_relid_idx (OID = 22227) :
--
CREATE INDEX logged_actions_relid_idx ON logged_actions USING btree (relid);
--
-- Definition for index AttachmentDetailRoganisrnalRole (OID = 22228) :
--
SET search_path = public, pg_catalog;
CREATE INDEX "AttachmentDetailRoganisrnalRole" ON "AttachmentDetailRole" USING btree ("OrganisationExternalRoleID");
--
-- Definition for index AttachmentDetailRole_fk_AttachmenDetailRole_OrganisationRole (OID = 22229) :
--
CREATE INDEX "AttachmentDetailRole_fk_AttachmenDetailRole_OrganisationRole" ON "AttachmentDetailRole" USING btree ("OrganisationRoleID");
--
-- Definition for index AttachmentDetailRole_fk_AttachmentRole_AttachmentDetail (OID = 22230) :
--
CREATE INDEX "AttachmentDetailRole_fk_AttachmentRole_AttachmentDetail" ON "AttachmentDetailRole" USING btree ("AttachmentDetailID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory (OID = 22231) :
--
CREATE INDEX "FK_ClassificationType_ClassificationTypeCategory" ON "ClassificationType" USING btree ("ClassificationTypeCategoryID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory2 (OID = 22232) :
--
CREATE INDEX "FK_ClassificationType_ClassificationTypeCategory2" ON "ClassificationType" USING btree ("ParentClassificationTypeCategoryID");
--
-- Definition for index FK_StateItem_State (OID = 22233) :
--
CREATE INDEX "FK_StateItem_State" ON "StateItem" USING btree ("StateID");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTemplate (OID = 22234) :
--
CREATE INDEX "FK_WorkflowHierarchyTemplate_WorkflowTemplate" ON "WorkflowHierarchyTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate (OID = 22235) :
--
CREATE INDEX "FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate" ON "WorkflowHierarchyTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index FK_WorkflowTransistionTemplate_WorkflowTemplate (OID = 22236) :
--
CREATE INDEX "FK_WorkflowTransistionTemplate_WorkflowTemplate" ON "WorkflowTransistionTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserTypeTemplate_idx (OID = 22237) :
--
CREATE INDEX "InterfacePanelValidationOrganisationTypeUserTypeTemplate_idx" ON "InterfacePanelValidationOrganisationTypeUserTypeTemplate" USING btree ("InterfacePanelValidationOrganisationTypeUserTypeTemplateID", "InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index LinkedAccountClaims_IX_LinkedAccount_unt_ProviderAccountID (OID = 22238) :
--
CREATE INDEX "LinkedAccountClaims_IX_LinkedAccount_unt_ProviderAccountID" ON "LinkedAccountClaims" USING btree ("LinkedAccount_ProviderName", "LinkedAccount_ProviderAccountID");
--
-- Definition for index LinkedAccounts_IX_UserAccount_ID (OID = 22239) :
--
CREATE INDEX "LinkedAccounts_IX_UserAccount_ID" ON "LinkedAccounts" USING btree ("UserAccount_ID");
--
-- Definition for index OrganisationGroup_fk_Group_ClassificationType (OID = 22240) :
--
CREATE INDEX "OrganisationGroup_fk_Group_ClassificationType" ON "OrganisationGroup" USING btree ("GroupTypeID");
--
-- Definition for index OrganisationGroup_fk_Group_ClassificationType2 (OID = 22241) :
--
CREATE INDEX "OrganisationGroup_fk_Group_ClassificationType2" ON "OrganisationGroup" USING btree ("GroupSubTypeID");
--
-- Definition for index OrganisationGroup_fk_Group_GroupTemplate (OID = 22242) :
--
CREATE INDEX "OrganisationGroup_fk_Group_GroupTemplate" ON "OrganisationGroup" USING btree ("ParentID");
--
-- Definition for index OrganisationGroup_fk_Group_Organisation (OID = 22243) :
--
CREATE INDEX "OrganisationGroup_fk_Group_Organisation" ON "OrganisationGroup" USING btree ("OrganisationID");
--
-- Definition for index OrganisationStructure_FK_OrganisationStructure (OID = 22244) :
--
CREATE INDEX "OrganisationStructure_FK_OrganisationStructure" ON "OrganisationStructure" USING btree ("OrganisationID");
--
-- Definition for index OrganisationUnitStructure_FK UnitMap (OID = 22245) :
--
CREATE INDEX "OrganisationUnitStructure_FK UnitMap" ON "OrganisationUnitStructure" USING btree ("OrganisationUnitID");
--
-- Definition for index OrganisationUnitStructure_FK_OrganisationUnit (OID = 22246) :
--
CREATE INDEX "OrganisationUnitStructure_FK_OrganisationUnit" ON "OrganisationUnitStructure" USING btree ("OrganisationID");
--
-- Definition for index OrganisationUnit_FK OrganisationUnit (OID = 22247) :
--
CREATE INDEX "OrganisationUnit_FK OrganisationUnit" ON "OrganisationUnit" USING btree ("OrganisationID");
--
-- Definition for index PasswordResetSecrets_IX_UserAccount_ID (OID = 22248) :
--
CREATE INDEX "PasswordResetSecrets_IX_UserAccount_ID" ON "PasswordResetSecrets" USING btree ("UserAccount_ID");
--
-- Definition for index RepositoryStructureGroup_fk_Rep (OID = 22249) :
--
CREATE INDEX "RepositoryStructureGroup_fk_Rep" ON "RepositoryStructureGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index RepositoryStructureGroup_fk_RepStructure (OID = 22250) :
--
CREATE INDEX "RepositoryStructureGroup_fk_RepStructure" ON "RepositoryStructureGroup" USING btree ("RepositoryStructureID");
--
-- Definition for index RepositoryStructureGroup_fk_Repository (OID = 22251) :
--
CREATE INDEX "RepositoryStructureGroup_fk_Repository" ON "RepositoryStructureGroup" USING btree ("OrganisationExternalGroupID");
--
-- Definition for index RepositoryStructureRole_fk_anisationRole (OID = 22252) :
--
CREATE INDEX "RepositoryStructureRole_fk_anisationRole" ON "RepositoryStructureRole" USING btree ("OrganisationRoleID");
--
-- Definition for index RepositoryStructureRole_fk_ure (OID = 22253) :
--
CREATE INDEX "RepositoryStructureRole_fk_ure" ON "RepositoryStructureRole" USING btree ("RepositoryStructureID");
--
-- Definition for index RepositoryStructure_fk_RepositoryMap_Repository (OID = 22254) :
--
CREATE INDEX "RepositoryStructure_fk_RepositoryMap_Repository" ON "RepositoryStructure" USING btree ("RepositoryID");
--
-- Definition for index TwoFactorAuthTokens_IX_UserAccount_ID (OID = 22255) :
--
CREATE INDEX "TwoFactorAuthTokens_IX_UserAccount_ID" ON "TwoFactorAuthTokens" USING btree ("UserAccount_ID");
--
-- Definition for index UserAccountDetail_IX_UserID (OID = 22256) :
--
CREATE INDEX "UserAccountDetail_IX_UserID" ON "UserAccountDetail" USING btree ("UserID");
--
-- Definition for index UserCertificates_IX_UserAccount_ID (OID = 22257) :
--
CREATE INDEX "UserCertificates_IX_UserAccount_ID" ON "UserCertificates" USING btree ("UserAccount_ID");
--
-- Definition for index UserClaims_IX_UserAccount_ID (OID = 22258) :
--
CREATE INDEX "UserClaims_IX_UserAccount_ID" ON "UserClaims" USING btree ("UserAccount_ID");
--
-- Definition for index WorkflowActionParameterNotificationConstructTemplate_WorkflowAc (OID = 22259) :
--
CREATE UNIQUE INDEX "WorkflowActionParameterNotificationConstructTemplate_WorkflowAc" ON "WorkflowActionParameterNotificationConstructTemplate" USING btree ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion");
--
-- Definition for index WorkflowActionParameterTemplate_fk_WorkflowActiomplate (OID = 22260) :
--
CREATE INDEX "WorkflowActionParameterTemplate_fk_WorkflowActiomplate" ON "WorkflowActionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index WorkflowActionTemplate_WorkflowActionTemplateID_key (OID = 22261) :
--
CREATE UNIQUE INDEX "WorkflowActionTemplate_WorkflowActionTemplateID_key" ON "WorkflowActionTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index WorkflowAction_WorkflowActionID_key (OID = 22262) :
--
CREATE UNIQUE INDEX "WorkflowAction_WorkflowActionID_key" ON "WorkflowAction" USING btree ("WorkflowActionID");
--
-- Definition for index WorkflowAction_idx (OID = 22263) :
--
CREATE INDEX "WorkflowAction_idx" ON "WorkflowAction" USING btree ("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowConditionParameterTemplate_fk_WorkflowConditiomplate (OID = 22264) :
--
CREATE INDEX "WorkflowConditionParameterTemplate_fk_WorkflowConditiomplate" ON "WorkflowConditionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index WorkflowInstanceExecutionStatusEvent_eo_idx (OID = 22265) :
--
CREATE INDEX "WorkflowInstanceExecutionStatusEvent_eo_idx" ON "WorkflowInstanceExecutionStatusEvent" USING btree ("EventOrder", "WorkflowInstanceSessionID");
--
-- Definition for index WorkflowInstanceExecution_idx (OID = 22266) :
--
CREATE INDEX "WorkflowInstanceExecution_idx" ON "WorkflowInstanceExecution" USING btree ("WorkflowInstanceExecutionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowInstanceSession_si_so_idx (OID = 22267) :
--
CREATE INDEX "WorkflowInstanceSession_si_so_idx" ON "WorkflowInstanceSession" USING btree ("WorkflowInstanceID", "SessionStartedOn");
--
-- Definition for index WorkflowInstance_parentid_idx (OID = 22268) :
--
CREATE INDEX "WorkflowInstance_parentid_idx" ON "WorkflowInstance" USING btree ("ParentID");
--
-- Definition for index WorkflowTransistionHierarchy_fk_WorkflowTransistionHierarchye1 (OID = 22269) :
--
CREATE INDEX "WorkflowTransistionHierarchy_fk_WorkflowTransistionHierarchye1" ON "WorkflowTransistionHierarchy" USING btree ("ParentComponentID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowActionTemplatemplate (OID = 22270) :
--
CREATE INDEX "WorkflowTransistionWorkflowActionTemplatemplate" ON "WorkflowTransistionWorkflowActionTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index WorkflowTreeStructure_WorkflowTreeStructureID_key (OID = 22271) :
--
CREATE UNIQUE INDEX "WorkflowTreeStructure_WorkflowTreeStructureID_key" ON "WorkflowTreeStructure" USING btree ("WorkflowTreeStructureID");
--
-- Definition for index companyhouse_phrase_idx (OID = 22272) :
--
CREATE INDEX companyhouse_phrase_idx ON "CompanyHouse" USING hash (companyname);
--
-- Definition for index fk_Account_Account (OID = 22273) :
--
CREATE INDEX "fk_Account_Account" ON "Account" USING btree ("ParentAccountID");
--
-- Definition for index fk_Account_Contact (OID = 22274) :
--
CREATE INDEX "fk_Account_Contact" ON "Account" USING btree ("ContactID");
--
-- Definition for index fk_Address_ClassificationType (OID = 22275) :
--
CREATE INDEX "fk_Address_ClassificationType" ON "Address" USING btree ("AddressTypeID");
--
-- Definition for index fk_AttachmentDetailGroup_AttachmentDetail (OID = 22276) :
--
CREATE INDEX "fk_AttachmentDetailGroup_AttachmentDetail" ON "AttachmentDetailGroup" USING btree ("AttachmentDetailID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationExternalGroup (OID = 22277) :
--
CREATE INDEX "fk_AttachmentDetailGroup_OrganisationExternalGroup" ON "AttachmentDetailGroup" USING btree ("OrganisationExternalGroupID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationGroup (OID = 22278) :
--
CREATE INDEX "fk_AttachmentDetailGroup_OrganisationGroup" ON "AttachmentDetailGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index fk_AttachmentDetail_Organisation (OID = 22279) :
--
CREATE INDEX "fk_AttachmentDetail_Organisation" ON "AttachmentDetail" USING btree ("OrganisationID");
--
-- Definition for index fk_AttachmentDetail_RepositoryMap (OID = 22280) :
--
CREATE INDEX "fk_AttachmentDetail_RepositoryMap" ON "AttachmentDetail" USING btree ("RepositoryStructureID");
--
-- Definition for index fk_Attachment_AttachmentDetail (OID = 22281) :
--
CREATE INDEX "fk_Attachment_AttachmentDetail" ON "Attachment" USING btree ("AttachmentDetailID");
--
-- Definition for index fk_OrganisationDetail_Organisation_1 (OID = 22282) :
--
CREATE INDEX "fk_OrganisationDetail_Organisation_1" ON "OrganisationDetail" USING btree ("OrganisationID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationRole (OID = 22283) :
--
CREATE INDEX "fk_OrganisationGroupOrganisationRole_OrganisationRole" ON "OrganisationGroupRole" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_OrganisationRoleClaim_OrganisationRole (OID = 22284) :
--
CREATE INDEX "fk_OrganisationRoleClaim_OrganisationRole" ON "OrganisationRoleClaim" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationGroup (OID = 22285) :
--
CREATE INDEX "fk_OrganisationUnitOrganisationGroup_OrganisationGroup" ON "OrganisationUnitOrganisationGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationRole (OID = 22286) :
--
CREATE INDEX "fk_OrganisationUnitOrganisationRole_OrganisationRole" ON "OrganisationUnitOrganisationRole" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_RepositoryStructure_Repository (OID = 22287) :
--
CREATE INDEX "fk_RepositoryStructure_Repository" ON "RepositoryStructure" USING btree ("RepositoryID");
--
-- Definition for index fk_RoleTemplateClaim_Operation (OID = 22288) :
--
CREATE INDEX "fk_RoleTemplateClaim_Operation" ON "RoleClaim" USING btree ("OperationID");
--
-- Definition for index fk_RoleTemplateClaim_Resource (OID = 22289) :
--
CREATE INDEX "fk_RoleTemplateClaim_Resource" ON "RoleClaim" USING btree ("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_RoleTemplate (OID = 22290) :
--
CREATE INDEX "fk_RoleTemplateClaim_RoleTemplate" ON "RoleClaim" USING btree ("RoleID");
--
-- Definition for index fk_RoleTemplateClaim_State (OID = 22291) :
--
CREATE INDEX "fk_RoleTemplateClaim_State" ON "RoleClaim" USING btree ("StateID");
--
-- Definition for index fk_RoleTemplateClaim_StateItem (OID = 22292) :
--
CREATE INDEX "fk_RoleTemplateClaim_StateItem" ON "RoleClaim" USING btree ("StateItemID");
--
-- Definition for index fk_WorkflowActionCompleteConplate (OID = 22293) :
--
CREATE INDEX "fk_WorkflowActionCompleteConplate" ON "WorkflowActionCompleteConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate (OID = 22294) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate" ON "WorkflowActionExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowAction (OID = 22295) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommand_WorkflowAction" ON "WorkflowActionExecuteCommand" USING btree ("WorkflowActionID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowCommand (OID = 22296) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommand_WorkflowCommand" ON "WorkflowActionExecuteCommand" USING btree ("WorkflowCommandID");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate (OID = 22297) :
--
CREATE INDEX "fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate" ON "WorkflowActionPostCommandTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate (OID = 22298) :
--
CREATE INDEX "fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate" ON "WorkflowActionPreCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowActionStartConditimplate (OID = 22299) :
--
CREATE INDEX "fk_WorkflowActionStartConditimplate" ON "WorkflowActionStartConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate (OID = 22300) :
--
CREATE INDEX "fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowActionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate (OID = 22301) :
--
CREATE INDEX "fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate" ON "WorkflowCommandConditionTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate (OID = 22302) :
--
CREATE INDEX "fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate" ON "WorkflowCommandParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate (OID = 22303) :
--
CREATE INDEX "fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate" ON "WorkflowCommandTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowTemplate (OID = 22304) :
--
CREATE INDEX "fk_WorkflowCommandTemplate_WorkflowTemplate" ON "WorkflowCommandTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index fk_WorkflowCommand_Workflow (OID = 22305) :
--
CREATE INDEX "fk_WorkflowCommand_Workflow" ON "WorkflowCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommand_WorkflowObjectType (OID = 22306) :
--
CREATE INDEX "fk_WorkflowCommand_WorkflowObjectType" ON "WorkflowCommand" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate (OID = 22307) :
--
CREATE INDEX "fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowConditionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCondition_Workflow (OID = 22308) :
--
CREATE INDEX "fk_WorkflowCondition_Workflow" ON "WorkflowCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCondition_WorkflowObjectType (OID = 22309) :
--
CREATE INDEX "fk_WorkflowCondition_WorkflowObjectType" ON "WorkflowCondition" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteComdTemplate (OID = 22310) :
--
CREATE INDEX "fk_WorkflowDecisionExecuteComdTemplate" ON "WorkflowDecisionExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate (OID = 22311) :
--
CREATE INDEX "fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate" ON "WorkflowDecisionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate (OID = 22312) :
--
CREATE INDEX "fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowDecisionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowDecision_Workflow (OID = 22313) :
--
CREATE INDEX "fk_WorkflowDecision_Workflow" ON "WorkflowDecision" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecision_WorkflowObjectType (OID = 22314) :
--
CREATE INDEX "fk_WorkflowDecision_WorkflowObjectType" ON "WorkflowDecision" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_Workflow (OID = 22315) :
--
CREATE INDEX "fk_WorkflowHierarchy_Workflow" ON "WorkflowHierarchy" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_WorkflowTransistion (OID = 22316) :
--
CREATE INDEX "fk_WorkflowHierarchy_WorkflowTransistion" ON "WorkflowHierarchy" USING btree ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceExecutionDataIte (OID = 22317) :
--
CREATE INDEX "fk_WorkflowInstanceExecutionDataIte" ON "WorkflowInstanceExecutionDataItem" USING btree ("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index fk_WorkflowInstance_Workflow (OID = 22318) :
--
CREATE INDEX "fk_WorkflowInstance_Workflow" ON "WorkflowInstance" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditio (OID = 22319) :
--
CREATE INDEX "fk_WorkflowMainCompleteConditio" ON "WorkflowMainCompleteConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowMainCompleteCondition_Workflow (OID = 22320) :
--
CREATE INDEX "fk_WorkflowMainCompleteCondition_Workflow" ON "WorkflowMainCompleteCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_WorkflowCondition (OID = 22321) :
--
CREATE INDEX "fk_WorkflowMainCompleteCondition_WorkflowCondition" ON "WorkflowMainCompleteCondition" USING btree ("WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate (OID = 22322) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainExecuteCommand_Workflow (OID = 22323) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommand_Workflow" ON "WorkflowMainExecuteCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_WorkflowCommand (OID = 22324) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommand_WorkflowCommand" ON "WorkflowMainExecuteCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate (OID = 22325) :
--
CREATE INDEX "fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate" ON "WorkflowMainParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowMainParameter_Workflow (OID = 22326) :
--
CREATE INDEX "fk_WorkflowMainParameter_Workflow" ON "WorkflowMainParameter" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_WorkflowParameter (OID = 22327) :
--
CREATE INDEX "fk_WorkflowMainParameter_WorkflowParameter" ON "WorkflowMainParameter" USING btree ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate (OID = 22328) :
--
CREATE INDEX "fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainPostCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainPostCommand_Workflow (OID = 22329) :
--
CREATE INDEX "fk_WorkflowMainPostCommand_Workflow" ON "WorkflowMainPostCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_WorkflowCommand (OID = 22330) :
--
CREATE INDEX "fk_WorkflowMainPostCommand_WorkflowCommand" ON "WorkflowMainPostCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate (OID = 22331) :
--
CREATE INDEX "fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainPreCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainPreCommand_Workflow (OID = 22332) :
--
CREATE INDEX "fk_WorkflowMainPreCommand_Workflow" ON "WorkflowMainPreCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_WorkflowCommand (OID = 22333) :
--
CREATE INDEX "fk_WorkflowMainPreCommand_WorkflowCommand" ON "WorkflowMainPreCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate (OID = 22334) :
--
CREATE INDEX "fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate" ON "WorkflowMainStartConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowMainStartCondition_Workflow (OID = 22335) :
--
CREATE INDEX "fk_WorkflowMainStartCondition_Workflow" ON "WorkflowMainStartCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_WorkflowCondition (OID = 22336) :
--
CREATE INDEX "fk_WorkflowMainStartCondition_WorkflowCondition" ON "WorkflowMainStartCondition" USING btree ("WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowObjectType_Workflow (OID = 22337) :
--
CREATE INDEX "fk_WorkflowObjectType_Workflow" ON "WorkflowObjectType" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditioate (OID = 22338) :
--
CREATE INDEX "fk_WorkflowTransistionCompleteConditioate" ON "WorkflowTransistionCompleteConditionTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate (OID = 22339) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate" ON "WorkflowTransistionHierarchyTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index fk_WorkflowTransistionHierarchy_Workflow (OID = 22340) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchy_Workflow" ON "WorkflowTransistionHierarchy" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_WorkflowTransistion (OID = 22341) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchy_WorkflowTransistion" ON "WorkflowTransistionHierarchy" USING btree ("ChildComponentID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarcplate (OID = 22342) :
--
CREATE INDEX "fk_WorkflowTransistionHierarcplate" ON "WorkflowTransistionHierarchyTemplate" USING btree ("ChildComponentID");
--
-- Definition for index fk_WorkflowTransistionHierarmplate11 (OID = 22343) :
--
CREATE INDEX "fk_WorkflowTransistionHierarmplate11" ON "WorkflowTransistionHierarchyTemplate" USING btree ("ParentComponentID");
--
-- Definition for index fk_WorkflowTransistionParametemplate (OID = 22344) :
--
CREATE INDEX "fk_WorkflowTransistionParametemplate" ON "WorkflowTransistionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowTransistionStartCondititionTemplate (OID = 22345) :
--
CREATE INDEX "fk_WorkflowTransistionStartCondititionTemplate" ON "WorkflowTransistionStartConditionTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index fk_WorkflowTransistion_Workflow (OID = 22346) :
--
CREATE INDEX "fk_WorkflowTransistion_Workflow" ON "WorkflowTransistion" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index subscription_typenameidx (OID = 22347) :
--
CREATE INDEX subscription_typenameidx ON subscription USING btree (typename);
--
-- Definition for index timeoutentity_endpointidx (OID = 22348) :
--
CREATE INDEX timeoutentity_endpointidx ON timeoutentity USING btree ("time", endpoint);
--
-- Definition for index timeoutentity_sagaididx (OID = 22349) :
--
CREATE INDEX timeoutentity_sagaididx ON timeoutentity USING btree (sagaid);
--
-- Definition for index logged_actions_pkey (OID = 21153) :
--
SET search_path = audit, pg_catalog;
ALTER TABLE ONLY logged_actions
    ADD CONSTRAINT logged_actions_pkey
    PRIMARY KEY (event_id);
--
-- Definition for index pkLegalOrganisationDetails (OID = 21155) :
--
SET search_path = legal, pg_catalog;
ALTER TABLE ONLY "LegalOrganisationDetails"
    ADD CONSTRAINT "pkLegalOrganisationDetails"
    PRIMARY KEY ("OrganisationID");
--
-- Definition for index Account_pkey (OID = 21157) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "Account_pkey"
    PRIMARY KEY ("AccountID");
--
-- Definition for index AddressChronology_pkey (OID = 21159) :
--
ALTER TABLE ONLY "AddressChronology"
    ADD CONSTRAINT "AddressChronology_pkey"
    PRIMARY KEY ("AddressChronologyID");
--
-- Definition for index Address_pkey (OID = 21161) :
--
ALTER TABLE ONLY "Address"
    ADD CONSTRAINT "Address_pkey"
    PRIMARY KEY ("AddressID");
--
-- Definition for index ApplicationStageWorkflow_pkey (OID = 21163) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "ApplicationStageWorkflow_pkey"
    PRIMARY KEY ("ApplicationStageWorkflowID");
--
-- Definition for index ApplicationStage_pkey (OID = 21165) :
--
ALTER TABLE ONLY "ApplicationStage"
    ADD CONSTRAINT "ApplicationStage_pkey"
    PRIMARY KEY ("ApplicationStageID");
--
-- Definition for index AttachmentDetailGroup_pkey (OID = 21167) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "AttachmentDetailGroup_pkey"
    PRIMARY KEY ("AttachmentDetailGroupID");
--
-- Definition for index AttachmentDetailRole_pkey (OID = 21169) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "AttachmentDetailRole_pkey"
    PRIMARY KEY ("AttachmentDetailRoleID");
--
-- Definition for index AttachmentDetail_pkey (OID = 21171) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "AttachmentDetail_pkey"
    PRIMARY KEY ("AttachmentDetailID");
--
-- Definition for index Attachment_pkey (OID = 21173) :
--
ALTER TABLE ONLY "Attachment"
    ADD CONSTRAINT "Attachment_pkey"
    PRIMARY KEY ("AttachmentID");
--
-- Definition for index BankSortCode_pkey (OID = 21175) :
--
ALTER TABLE ONLY "BankSortCode"
    ADD CONSTRAINT "BankSortCode_pkey"
    PRIMARY KEY ("SortCode", "BankName");
--
-- Definition for index BusMessageContent_pkey (OID = 21177) :
--
ALTER TABLE ONLY "BusMessageContent"
    ADD CONSTRAINT "BusMessageContent_pkey"
    PRIMARY KEY ("BusMessageContentID");
--
-- Definition for index BusMessage_pkey (OID = 21179) :
--
ALTER TABLE ONLY "BusMessage"
    ADD CONSTRAINT "BusMessage_pkey"
    PRIMARY KEY ("BusMessageID");
--
-- Definition for index ClassificationTypeCategory_pkey (OID = 21181) :
--
ALTER TABLE ONLY "ClassificationTypeCategory"
    ADD CONSTRAINT "ClassificationTypeCategory_pkey"
    PRIMARY KEY ("ClassificationTypeCategoryID");
--
-- Definition for index ClassificationType_pkey (OID = 21183) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "ClassificationType_pkey"
    PRIMARY KEY ("ClassificationTypeID");
--
-- Definition for index CompanyHouse_pkey (OID = 21185) :
--
ALTER TABLE ONLY "CompanyHouse"
    ADD CONSTRAINT "CompanyHouse_pkey"
    PRIMARY KEY (companyname);
ALTER TABLE "CompanyHouse" CLUSTER ON "CompanyHouse_pkey";
--
-- Definition for index Contact_pkey (OID = 21187) :
--
ALTER TABLE ONLY "Contact"
    ADD CONSTRAINT "Contact_pkey"
    PRIMARY KEY ("ContactID");
--
-- Definition for index CurrencyRate_pkey (OID = 21189) :
--
ALTER TABLE ONLY "CurrencyRate"
    ADD CONSTRAINT "CurrencyRate_pkey"
    PRIMARY KEY ("CurrencyRateID");
--
-- Definition for index DefaultOrganisationBranch_pkey (OID = 21191) :
--
ALTER TABLE ONLY "DefaultOrganisationBranch"
    ADD CONSTRAINT "DefaultOrganisationBranch_pkey"
    PRIMARY KEY ("DefaultOrganisationBranchID");
--
-- Definition for index DefaultOrganisationBranch_pkeyT (OID = 21193) :
--
ALTER TABLE ONLY "DefaultOrganisationBranchTemplate"
    ADD CONSTRAINT "DefaultOrganisationBranch_pkeyT"
    PRIMARY KEY ("DefaultOrganisationBranchTemplateID");
--
-- Definition for index DefaultOrganisationGroupDefaultOrganisationRole_pkey (OID = 21195) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "DefaultOrganisationGroupDefaultOrganisationRole_pkey"
    PRIMARY KEY ("DefaultOrganisationGroupID", "DefaultOrganisationRoleID");
--
-- Definition for index DefaultOrganisationGroupDefaultOrganisationRole_pkeyT (OID = 21197) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "DefaultOrganisationGroupDefaultOrganisationRole_pkeyT"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID", "DefaultOrganisationRoleTemplateID");
--
-- Definition for index DefaultOrganisationGroup_pkey (OID = 21199) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "DefaultOrganisationGroup_pkey"
    PRIMARY KEY ("DefaultOrganisationGroupID");
--
-- Definition for index DefaultOrganisationGroup_pkeyT (OID = 21201) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "DefaultOrganisationGroup_pkeyT"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID");
--
-- Definition for index DefaultOrganisationRoleClaim_pkey (OID = 21203) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "DefaultOrganisationRoleClaim_pkey"
    PRIMARY KEY ("DefaultOrganisationRoleClaimID");
--
-- Definition for index DefaultOrganisationRoleClaim_pkeyT (OID = 21205) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "DefaultOrganisationRoleClaim_pkeyT"
    PRIMARY KEY ("DefaultOrganisationRoleClaimTemplateID");
--
-- Definition for index DefaultOrganisationRole_pkey (OID = 21207) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "DefaultOrganisationRole_pkey"
    PRIMARY KEY ("DefaultOrganisationRoleID");
--
-- Definition for index DefaultOrganisationRole_pkeyT (OID = 21209) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "DefaultOrganisationRole_pkeyT"
    PRIMARY KEY ("DefaultOrganisationRoleTemplateID");
--
-- Definition for index DefaultOrganisationTarget_pkey (OID = 21211) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "DefaultOrganisationTarget_pkey"
    PRIMARY KEY ("DefaultOrganisationTargetID");
--
-- Definition for index DefaultOrganisationTarget_pkeyT (OID = 21213) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "DefaultOrganisationTarget_pkeyT"
    PRIMARY KEY ("DefaultOrganisationTargetTemplateID");
--
-- Definition for index ErrorCode_pkey (OID = 21215) :
--
ALTER TABLE ONLY "ErrorCode"
    ADD CONSTRAINT "ErrorCode_pkey"
    PRIMARY KEY ("ErrorCodeID");
--
-- Definition for index GroupTemplateRole_pkey (OID = 21217) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "GroupTemplateRole_pkey"
    PRIMARY KEY ("GroupID", "RoleID");
--
-- Definition for index InterfacePanelFDValidationOrgTypeUserTypeTemplate_idx (OID = 21219) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrgTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFDValidationOrgTypeUserTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelFDValidationOrgTypeUserTypeTemplateID", "InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion", "OrganisationTypeID", "FieldDetailTemplateID");
--
-- Definition for index InterfacePanelFDValidationOrganisationTypeUserType_idx (OID = 21221) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelFDValidationOrganisationTypeUserType_idx"
    PRIMARY KEY ("InterfacePanelFDValidationOrganisationTypeUserTypeID", "InterfacePanelFDValidationOrganisationTypeUserTypeVersion", "FieldDetailID", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationTypeTemplate_idx (OID = 21223) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationOrganisationTypeTemplateID", "InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationType_idx (OID = 21225) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationType_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationOrganisationTypeID", "InterfacePanelFieldDetailValidationOrganisationTypeVersion", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationTemplate_idx (OID = 21227) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationTemplate_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationTemplateID", "InterfacePanelFieldDetailValidationTemplateVersion", "FieldDetailTemplateID", "InterfacePanelFieldDetailValidationTemplateName");
--
-- Definition for index InterfacePanelFieldDetailValidation_idx (OID = 21229) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidation"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidation_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationID", "InterfacePanelFieldDetailValidationVersion", "FieldDetailID", "InterfacePanelFieldDetailValidationName");
--
-- Definition for index InterfacePanelRoleClaimTemplate_pkey (OID = 21231) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "InterfacePanelRoleClaimTemplate_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index InterfacePanelRoleClaim_pkey (OID = 21233) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "InterfacePanelRoleClaim_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index InterfacePanelRoleTemplate_pkey (OID = 21235) :
--
ALTER TABLE ONLY "InterfacePanelRoleTemplate"
    ADD CONSTRAINT "InterfacePanelRoleTemplate_pkey"
    PRIMARY KEY ("InterfacePanelRoleTemplateID");
--
-- Definition for index InterfacePanelRole_pkey (OID = 21237) :
--
ALTER TABLE ONLY "InterfacePanelRole"
    ADD CONSTRAINT "InterfacePanelRole_pkey"
    PRIMARY KEY ("InterfacePanelRoleID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeTemplate_idx (OID = 21239) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeTemplateID", "InterfacePanelValidationOrganisationTypeTemplateVers", "OrganisationTypeID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserType_idx (OID = 21241) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserType_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeUserTypeID", "InterfacePanelValidationOrganisationTypeUserTypeVersion", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index InterfacePanelValidationOrganisationType_idx (OID = 21243) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationType_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeID", "InterfacePanelValidationOrganisationTypeVersion", "OrganisationTypeID");
--
-- Definition for index InterfacePanelValidationTemplate_idx (OID = 21245) :
--
ALTER TABLE ONLY "InterfacePanelValidationTemplate"
    ADD CONSTRAINT "InterfacePanelValidationTemplate_idx"
    PRIMARY KEY ("InterfacePanelValidationTemplateID", "InterfacePanelValidationTemplateVersionNumber", "InterfacePanelValidationTemplateName");
--
-- Definition for index InterfacePanelValidation_idx (OID = 21247) :
--
ALTER TABLE ONLY "InterfacePanelValidation"
    ADD CONSTRAINT "InterfacePanelValidation_idx"
    PRIMARY KEY ("InterfacePanelValidationID", "InterfacePanelVersionNumber");
--
-- Definition for index LinkedAccountClaims_pkey (OID = 21249) :
--
ALTER TABLE ONLY "LinkedAccountClaims"
    ADD CONSTRAINT "LinkedAccountClaims_pkey"
    PRIMARY KEY ("Type", "Value");
--
-- Definition for index LinkedAccounts_pkey (OID = 21251) :
--
ALTER TABLE ONLY "LinkedAccounts"
    ADD CONSTRAINT "LinkedAccounts_pkey"
    PRIMARY KEY ("ProviderName", "ProviderAccountID");
--
-- Definition for index ModulePluginTemplate_pkey (OID = 21253) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "ModulePluginTemplate_pkey"
    PRIMARY KEY ("ModulePluginTemplateID");
--
-- Definition for index ModulePlugin_pkey (OID = 21255) :
--
ALTER TABLE ONLY "ModulePlugin"
    ADD CONSTRAINT "ModulePlugin_pkey"
    PRIMARY KEY ("ModulePluginID");
--
-- Definition for index ModuleRoleClaimTemplate_pkey (OID = 21257) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "ModuleRoleClaimTemplate_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index ModuleRoleClaim_pkey (OID = 21259) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "ModuleRoleClaim_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index ModuleRoleTemplate_pkey (OID = 21261) :
--
ALTER TABLE ONLY "ModuleRoleTemplate"
    ADD CONSTRAINT "ModuleRoleTemplate_pkey"
    PRIMARY KEY ("RoleID");
--
-- Definition for index ModuleRole_pkey (OID = 21263) :
--
ALTER TABLE ONLY "ModuleRole"
    ADD CONSTRAINT "ModuleRole_pkey"
    PRIMARY KEY ("RoleID");
--
-- Definition for index ModuleSettingTemplate_pkey (OID = 21265) :
--
ALTER TABLE ONLY "ModuleSettingTemplate"
    ADD CONSTRAINT "ModuleSettingTemplate_pkey"
    PRIMARY KEY ("ModuleSettingTemplateID");
--
-- Definition for index ModuleSetting_pkey (OID = 21267) :
--
ALTER TABLE ONLY "ModuleSetting"
    ADD CONSTRAINT "ModuleSetting_pkey"
    PRIMARY KEY ("ModuleSettingID");
--
-- Definition for index ModuleSubscriptionTemplate_pkey (OID = 21269) :
--
ALTER TABLE ONLY "ModuleSubscriptionTemplate"
    ADD CONSTRAINT "ModuleSubscriptionTemplate_pkey"
    PRIMARY KEY ("ModuleSubscriptionTemplateID");
--
-- Definition for index ModuleSubscription_pkey (OID = 21271) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "ModuleSubscription_pkey"
    PRIMARY KEY ("ModuleSubscriptionID");
--
-- Definition for index ModuleTemplate_pkey (OID = 21273) :
--
ALTER TABLE ONLY "ModuleTemplate"
    ADD CONSTRAINT "ModuleTemplate_pkey"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index ModuleWorkflowTargetTemplate_pkey (OID = 21275) :
--
ALTER TABLE ONLY "ModuleWorkflowTargetTemplate"
    ADD CONSTRAINT "ModuleWorkflowTargetTemplate_pkey"
    PRIMARY KEY ("ModuleWorkflowTargetTemplateID");
--
-- Definition for index ModuleWorkflowTarget_pkey (OID = 21277) :
--
ALTER TABLE ONLY "ModuleWorkflowTarget"
    ADD CONSTRAINT "ModuleWorkflowTarget_pkey"
    PRIMARY KEY ("ModuleWorkflowTargetID");
--
-- Definition for index ModuleWorkflowTemplate_pkey (OID = 21279) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "ModuleWorkflowTemplate_pkey"
    PRIMARY KEY ("ModuleWorkflowTemplateID");
--
-- Definition for index ModuleWorkflow_pkey (OID = 21281) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "ModuleWorkflow_pkey"
    PRIMARY KEY ("ModuleWorkflowID");
--
-- Definition for index Module_pkey (OID = 21283) :
--
ALTER TABLE ONLY "Module"
    ADD CONSTRAINT "Module_pkey"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_idx (OID = 21285) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_idx"
    PRIMARY KEY ("NotificationConstructGroupNotificationConstructTemplateID", "NotificationConstructGroupNotificationConstructTemplateVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_idx (OID = 21287) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_idx"
    PRIMARY KEY ("NotificationConstructGroupNotificationConstructID", "NotificationConstructGroupNotificationConstructVersion");
--
-- Definition for index NotificationConstructGroupTemplate_idx (OID = 21289) :
--
ALTER TABLE ONLY "NotificationConstructGroupTemplate"
    ADD CONSTRAINT "NotificationConstructGroupTemplate_idx"
    PRIMARY KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index NotificationConstructGroup_idx (OID = 21291) :
--
ALTER TABLE ONLY "NotificationConstructGroup"
    ADD CONSTRAINT "NotificationConstructGroup_idx"
    PRIMARY KEY ("NotificationConstructGroupID", "NotificationConstructGroupVersion");
--
-- Definition for index NotificationConstruct_idx (OID = 21293) :
--
ALTER TABLE ONLY "NotificationConstruct"
    ADD CONSTRAINT "NotificationConstruct_idx"
    PRIMARY KEY ("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index NotificationRecipientLog_pkey (OID = 21295) :
--
ALTER TABLE ONLY "NotificationRecipientLog"
    ADD CONSTRAINT "NotificationRecipientLog_pkey"
    PRIMARY KEY ("NotificationRecipientLogID");
--
-- Definition for index Operation_pkey (OID = 21297) :
--
ALTER TABLE ONLY "Operation"
    ADD CONSTRAINT "Operation_pkey"
    PRIMARY KEY ("OperationID");
--
-- Definition for index OrganisationAccountingPeriod_OrganisationAccountingPeriodID_key (OID = 21299) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "OrganisationAccountingPeriod_OrganisationAccountingPeriodID_key"
    UNIQUE ("OrganisationAccountingPeriodID");
--
-- Definition for index OrganisationDetail_pkey (OID = 21301) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "OrganisationDetail_pkey"
    PRIMARY KEY ("OrganisationDetailID");
--
-- Definition for index OrganisationGroupOrganisationRole_pkey (OID = 21303) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "OrganisationGroupOrganisationRole_pkey"
    PRIMARY KEY ("OrganisationGroupID", "OrganisationRoleID");
--
-- Definition for index OrganisationGroup_pkey (OID = 21305) :
--
ALTER TABLE ONLY "OrganisationGroup"
    ADD CONSTRAINT "OrganisationGroup_pkey"
    PRIMARY KEY ("OrganisationGroupID");
--
-- Definition for index OrganisationRoleClaim_pkey (OID = 21307) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "OrganisationRoleClaim_pkey"
    PRIMARY KEY ("OrganisationRoleClaimID");
--
-- Definition for index OrganisationRole_pkey (OID = 21309) :
--
ALTER TABLE ONLY "OrganisationRole"
    ADD CONSTRAINT "OrganisationRole_pkey"
    PRIMARY KEY ("OrganisationRoleID");
--
-- Definition for index OrganisationStructure_pkey (OID = 21311) :
--
ALTER TABLE ONLY "OrganisationStructure"
    ADD CONSTRAINT "OrganisationStructure_pkey"
    PRIMARY KEY ("OrganisationStructureID");
--
-- Definition for index OrganisationTeam_pkey (OID = 21313) :
--
ALTER TABLE ONLY "OrganisationTeam"
    ADD CONSTRAINT "OrganisationTeam_pkey"
    PRIMARY KEY ("OrganisationTeamID");
--
-- Definition for index OrganisationUnitOrganisationGroup_pkey (OID = 21315) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "OrganisationUnitOrganisationGroup_pkey"
    PRIMARY KEY ("OrganisationUnitID", "OrganisationGroupID");
--
-- Definition for index OrganisationUnitOrganisationRole_pkey (OID = 21317) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "OrganisationUnitOrganisationRole_pkey"
    PRIMARY KEY ("OrganisationUnitID", "OrganisationRoleID");
--
-- Definition for index OrganisationUnitStructure_pkey (OID = 21319) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "OrganisationUnitStructure_pkey"
    PRIMARY KEY ("OrganisationUnitStructureID", "OrganisationUnitID");
--
-- Definition for index OrganisationUnit_pkey (OID = 21321) :
--
ALTER TABLE ONLY "OrganisationUnit"
    ADD CONSTRAINT "OrganisationUnit_pkey"
    PRIMARY KEY ("OrganisationUnitID");
--
-- Definition for index OrganisationWorkflow_pkey (OID = 21323) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "OrganisationWorkflow_pkey"
    PRIMARY KEY ("OrganisationWorkflowID");
--
-- Definition for index Organisation_pkey (OID = 21325) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "Organisation_pkey"
    PRIMARY KEY ("OrganisationID");
--
-- Definition for index PackageProductRelationshipBlueprintTemplate_pkey (OID = 21327) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "PackageProductRelationshipBlueprintTemplate_pkey"
    PRIMARY KEY ("PackageProductRelationshipBlueprintTemplateID");
--
-- Definition for index PackageProductRelationshipBlueprint_pkey (OID = 21329) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprint"
    ADD CONSTRAINT "PackageProductRelationshipBlueprint_pkey"
    PRIMARY KEY ("PackageProductRelationshipBlueprintID");
--
-- Definition for index PackageProductRelationshipTemplate_pkey (OID = 21331) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "PackageProductRelationshipTemplate_pkey"
    PRIMARY KEY ("PackageProductRelationshipTemplateID");
--
-- Definition for index PackageProductRelationship_pkey (OID = 21333) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "PackageProductRelationship_pkey"
    PRIMARY KEY ("PackageProductRelationshipID");
--
-- Definition for index PackageProductSpecificationBlueprintTemplate_pkey (OID = 21335) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "PackageProductSpecificationBlueprintTemplate_pkey"
    PRIMARY KEY ("PackageProductSpecificationBlueprintTemplateID");
--
-- Definition for index PackageProductSpecificationBlueprint_pkey (OID = 21337) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "PackageProductSpecificationBlueprint_pkey"
    PRIMARY KEY ("PackageProductSpecificationBlueprintID");
--
-- Definition for index PasswordResetSecrets_pkey (OID = 21339) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT "PasswordResetSecrets_pkey"
    PRIMARY KEY ("PasswordResetSecretID");
--
-- Definition for index PluginTemplate_pkey (OID = 21341) :
--
ALTER TABLE ONLY "PluginTemplate"
    ADD CONSTRAINT "PluginTemplate_pkey"
    PRIMARY KEY ("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index Plugin_pkey (OID = 21343) :
--
ALTER TABLE ONLY "Plugin"
    ADD CONSTRAINT "Plugin_pkey"
    PRIMARY KEY ("PluginID", "PluginVersionNumber");
--
-- Definition for index ProductAttributeTemplate_pkey (OID = 21345) :
--
ALTER TABLE ONLY "ProductAttributeTemplate"
    ADD CONSTRAINT "ProductAttributeTemplate_pkey"
    PRIMARY KEY ("ProductAttributeTemplateID");
--
-- Definition for index ProductAttribute_pkey (OID = 21347) :
--
ALTER TABLE ONLY "ProductAttribute"
    ADD CONSTRAINT "ProductAttribute_pkey"
    PRIMARY KEY ("ProductAttributeID");
--
-- Definition for index ProductDetailTemplate_pkey (OID = 21349) :
--
ALTER TABLE ONLY "ProductDetailTemplate"
    ADD CONSTRAINT "ProductDetailTemplate_pkey"
    PRIMARY KEY ("ProductDetailTemplateID");
--
-- Definition for index ProductDetail_pkey (OID = 21351) :
--
ALTER TABLE ONLY "ProductDetail"
    ADD CONSTRAINT "ProductDetail_pkey"
    PRIMARY KEY ("ProductDetailID");
--
-- Definition for index ProductFamilyProductPackageTemplate_pkey (OID = 21353) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "ProductFamilyProductPackageTemplate_pkey"
    PRIMARY KEY ("ProductFamilyProductPackageTemplateID");
--
-- Definition for index ProductFamilyProductPackage_pkey (OID = 21355) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "ProductFamilyProductPackage_pkey"
    PRIMARY KEY ("ProductFamilyProductPackageID");
--
-- Definition for index ProductFamilyTemplate_pkey (OID = 21357) :
--
ALTER TABLE ONLY "ProductFamilyTemplate"
    ADD CONSTRAINT "ProductFamilyTemplate_pkey"
    PRIMARY KEY ("ProductFamilyTemplateID");
--
-- Definition for index ProductFamily_pkey (OID = 21359) :
--
ALTER TABLE ONLY "ProductFamily"
    ADD CONSTRAINT "ProductFamily_pkey"
    PRIMARY KEY ("ProductFamilyID");
--
-- Definition for index ProductProductAttributeTemplate_pkey (OID = 21361) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "ProductProductAttributeTemplate_pkey"
    PRIMARY KEY ("ProductProductAttributeTemplateID");
--
-- Definition for index ProductProductAttribute_pkey (OID = 21363) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "ProductProductAttribute_pkey"
    PRIMARY KEY ("ProductProductAttributeID");
--
-- Definition for index ProductRelationshipBlueprintTemplate_pkey (OID = 21365) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "ProductRelationshipBlueprintTemplate_pkey"
    PRIMARY KEY ("ProductRelationshipBlueprintTemplateID");
--
-- Definition for index ProductRelationshipBlueprint_pkey (OID = 21367) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprint"
    ADD CONSTRAINT "ProductRelationshipBlueprint_pkey"
    PRIMARY KEY ("ProductRelationshipBlueprintID");
--
-- Definition for index ProductRelationshipTemplate_pkey (OID = 21369) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "ProductRelationshipTemplate_pkey"
    PRIMARY KEY ("ProductRelationshipTemplateID");
--
-- Definition for index ProductRelationship_pkey (OID = 21371) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "ProductRelationship_pkey"
    PRIMARY KEY ("ProductRelationshipID");
--
-- Definition for index ProductSpecificationAttributeOptionTemplate_pkey (OID = 21373) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "ProductSpecificationAttributeOptionTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index ProductSpecificationAttributeOption_pkey (OID = 21375) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "ProductSpecificationAttributeOption_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeOptionID");
--
-- Definition for index ProductSpecificationAttributeTemplate_pkey (OID = 21377) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "ProductSpecificationAttributeTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeTemplateID");
--
-- Definition for index ProductSpecificationAttribute_pkey (OID = 21379) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT "ProductSpecificationAttribute_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeID");
--
-- Definition for index ProductSpecificationBlueprintTemplate_pkey (OID = 21381) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "ProductSpecificationBlueprintTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationBlueprintTemplateID");
--
-- Definition for index ProductSpecificationBlueprint_pkey (OID = 21383) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "ProductSpecificationBlueprint_pkey"
    PRIMARY KEY ("ProductSpecificationBlueprintID");
--
-- Definition for index ProductTagTemplate_pkey (OID = 21385) :
--
ALTER TABLE ONLY "ProductTagTemplate"
    ADD CONSTRAINT "ProductTagTemplate_pkey"
    PRIMARY KEY ("ProductTagTemplateID");
--
-- Definition for index ProductTag_pkey (OID = 21387) :
--
ALTER TABLE ONLY "ProductTag"
    ADD CONSTRAINT "ProductTag_pkey"
    PRIMARY KEY ("ProductTagID");
--
-- Definition for index ProductVariantAttributeCombinationTemplate_pkey (OID = 21389) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombinationTemplate"
    ADD CONSTRAINT "ProductVariantAttributeCombinationTemplate_pkey"
    PRIMARY KEY ("ProductVariantAttributeCombinationTemplateID");
--
-- Definition for index ProductVariantAttributeCombination_pkey (OID = 21391) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombination"
    ADD CONSTRAINT "ProductVariantAttributeCombination_pkey"
    PRIMARY KEY ("ProductVariantAttributeCombinationID");
--
-- Definition for index ProductVariantAttributeValueTemplate_pkey (OID = 21393) :
--
ALTER TABLE ONLY "ProductVariantAttributeValueTemplate"
    ADD CONSTRAINT "ProductVariantAttributeValueTemplate_pkey"
    PRIMARY KEY ("ProductVariantAttributeValueTemplateID");
--
-- Definition for index ProductVariantAttributeValue_pkey (OID = 21395) :
--
ALTER TABLE ONLY "ProductVariantAttributeValue"
    ADD CONSTRAINT "ProductVariantAttributeValue_pkey"
    PRIMARY KEY ("ProductVariantAttributeValueID");
--
-- Definition for index RelationshipRoleTemplate_pkey (OID = 21397) :
--
ALTER TABLE ONLY "RelationshipRole"
    ADD CONSTRAINT "RelationshipRoleTemplate_pkey"
    PRIMARY KEY ("RelationshipRoleID");
--
-- Definition for index RepositoryStructureGroup_pkey (OID = 21399) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "RepositoryStructureGroup_pkey"
    PRIMARY KEY ("RepositoryStructureGroupID");
--
-- Definition for index RepositoryStructureRole_pkey (OID = 21401) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "RepositoryStructureRole_pkey"
    PRIMARY KEY ("RepositoryStructureRoleID");
--
-- Definition for index RepositoryStructure_pkey (OID = 21403) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "RepositoryStructure_pkey"
    PRIMARY KEY ("RepositoryStructureID");
--
-- Definition for index Repository_pkey (OID = 21405) :
--
ALTER TABLE ONLY "Repository"
    ADD CONSTRAINT "Repository_pkey"
    PRIMARY KEY ("RepositoryID");
--
-- Definition for index Resource_pkey (OID = 21407) :
--
ALTER TABLE ONLY "Resource"
    ADD CONSTRAINT "Resource_pkey"
    PRIMARY KEY ("ResourceID");
--
-- Definition for index RoleTemplateClaim_pkey (OID = 21409) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "RoleTemplateClaim_pkey"
    PRIMARY KEY ("RoleClaimID");
--
-- Definition for index ServiceProvider_pkey (OID = 21411) :
--
ALTER TABLE ONLY "ServiceProvider"
    ADD CONSTRAINT "ServiceProvider_pkey"
    PRIMARY KEY ("ServiceProviderID");
--
-- Definition for index Setting_pkey (OID = 21413) :
--
ALTER TABLE ONLY "Setting"
    ADD CONSTRAINT "Setting_pkey"
    PRIMARY KEY ("Id");
--
-- Definition for index SpecificationAttributeOptionTemplate_pkey (OID = 21415) :
--
ALTER TABLE ONLY "SpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "SpecificationAttributeOptionTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeOptionTemplateID");
--
-- Definition for index SpecificationAttributeRelationshipTemplate_pkey (OID = 21417) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "SpecificationAttributeRelationshipTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeRelationshipTemplateID", "SpecificationAttributeTemplateID", "ParentSpecificationAttributeTemplateID");
--
-- Definition for index SpecificationAttributeRelationship_pkey (OID = 21419) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "SpecificationAttributeRelationship_pkey"
    PRIMARY KEY ("SpecificationAttributeRelationshipID");
--
-- Definition for index SpecificationAttributeTemplate_pkey (OID = 21421) :
--
ALTER TABLE ONLY "SpecificationAttributeTemplate"
    ADD CONSTRAINT "SpecificationAttributeTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeTemplateID");
--
-- Definition for index SpecificationAttribute_pkey (OID = 21423) :
--
ALTER TABLE ONLY "SpecificationAttribute"
    ADD CONSTRAINT "SpecificationAttribute_pkey"
    PRIMARY KEY ("SpecificationAttributeID");
--
-- Definition for index SpecificiationAttributeOption_pkey (OID = 21425) :
--
ALTER TABLE ONLY "SpecificiationAttributeOption"
    ADD CONSTRAINT "SpecificiationAttributeOption_pkey"
    PRIMARY KEY ("SpecficiationAttributeOptionID");
--
-- Definition for index StateItem_pkey (OID = 21427) :
--
ALTER TABLE ONLY "StateItem"
    ADD CONSTRAINT "StateItem_pkey"
    PRIMARY KEY ("StateItemID");
--
-- Definition for index State_pkey (OID = 21429) :
--
ALTER TABLE ONLY "State"
    ADD CONSTRAINT "State_pkey"
    PRIMARY KEY ("StateID");
--
-- Definition for index StatusTypeStructure_pkey (OID = 21431) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "StatusTypeStructure_pkey"
    PRIMARY KEY ("StatusTypeStructureID");
--
-- Definition for index StatusTypeValue_pkey (OID = 21433) :
--
ALTER TABLE ONLY "StatusTypeValue"
    ADD CONSTRAINT "StatusTypeValue_pkey"
    PRIMARY KEY ("StatusTypeValueID");
--
-- Definition for index Structure_pkey (OID = 21435) :
--
ALTER TABLE ONLY "Structure"
    ADD CONSTRAINT "Structure_pkey"
    PRIMARY KEY ("StructureID");
--
-- Definition for index TFEventMessageSubscriber_pkey (OID = 21437) :
--
ALTER TABLE ONLY "TFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventMessageSubscriber_pkey"
    PRIMARY KEY ("TFEventMessageSubscriberID");
--
-- Definition for index TFEventTFEventMessageSubscriber_pkey (OID = 21439) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_pkey"
    PRIMARY KEY ("TFEventID", "TFEventMessageSubscriberID");
--
-- Definition for index TFEventType_pkey (OID = 21441) :
--
ALTER TABLE ONLY "TFEvent"
    ADD CONSTRAINT "TFEventType_pkey"
    PRIMARY KEY ("TFEventID");
--
-- Definition for index TFEventType_pkey1 (OID = 21443) :
--
ALTER TABLE ONLY "TFEventType"
    ADD CONSTRAINT "TFEventType_pkey1"
    PRIMARY KEY ("TFEventTypeID");
--
-- Definition for index TaxRateTemplate_pkey (OID = 21445) :
--
ALTER TABLE ONLY "TaxRateTemplate"
    ADD CONSTRAINT "TaxRateTemplate_pkey"
    PRIMARY KEY ("TaxRateTemplateID");
--
-- Definition for index TaxRate_pkey (OID = 21447) :
--
ALTER TABLE ONLY "TaxRate"
    ADD CONSTRAINT "TaxRate_pkey"
    PRIMARY KEY ("OrganisationTaxRateID");
--
-- Definition for index Tenant_pkey (OID = 21449) :
--
ALTER TABLE ONLY "Tenant"
    ADD CONSTRAINT "Tenant_pkey"
    PRIMARY KEY ("TenantID");
--
-- Definition for index TransactionLevelComponentTemplate_pkey (OID = 21451) :
--
ALTER TABLE ONLY "TransactionLevelComponentTemplate"
    ADD CONSTRAINT "TransactionLevelComponentTemplate_pkey"
    PRIMARY KEY ("TransactionLevelComponentTemplateID");
--
-- Definition for index TransactionLevelComponent_pkey (OID = 21453) :
--
ALTER TABLE ONLY "TransactionLevelComponent"
    ADD CONSTRAINT "TransactionLevelComponent_pkey"
    PRIMARY KEY ("TransactionLevelComponentID");
--
-- Definition for index TransactionOrderItem_pkey (OID = 21455) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "TransactionOrderItem_pkey"
    PRIMARY KEY ("OrderItemID");
--
-- Definition for index TransactionOrder_pkey (OID = 21457) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "TransactionOrder_pkey"
    PRIMARY KEY ("TransactionOrderID");
--
-- Definition for index TwoFactorAuthTokens_pkey (OID = 21459) :
--
ALTER TABLE ONLY "TwoFactorAuthTokens"
    ADD CONSTRAINT "TwoFactorAuthTokens_pkey"
    PRIMARY KEY ("Token");
--
-- Definition for index UserAccountArchive_UserAccountArchiveID_key (OID = 21461) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "UserAccountArchive_UserAccountArchiveID_key"
    UNIQUE ("UserAccountArchiveID");
--
-- Definition for index UserAccountArchive_pkey (OID = 21463) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "UserAccountArchive_pkey"
    PRIMARY KEY ("UserAccountArchiveID", "UserAccountArchiveCreatedOn", "UserAccountArchiveTypeID", "UserAccountArchiveCategoryID");
--
-- Definition for index UserAccountAudit_pkey (OID = 21465) :
--
ALTER TABLE ONLY "UserAccountAudit"
    ADD CONSTRAINT "UserAccountAudit_pkey"
    PRIMARY KEY ("UserAccountID", "UserSessionID", "AuditID");
--
-- Definition for index UserAccountDetail_pkey (OID = 21467) :
--
ALTER TABLE ONLY "UserAccountDetail"
    ADD CONSTRAINT "UserAccountDetail_pkey"
    PRIMARY KEY ("UserDetailID");
--
-- Definition for index UserAccountLoginSession_pkey (OID = 21469) :
--
ALTER TABLE ONLY "UserAccountLoginSession"
    ADD CONSTRAINT "UserAccountLoginSession_pkey"
    PRIMARY KEY ("UserAccountID", "UserSessionID");
--
-- Definition for index UserAccountOrganisationStructure_pkey (OID = 21471) :
--
ALTER TABLE ONLY "UserAccountOrganisationStructure"
    ADD CONSTRAINT "UserAccountOrganisationStructure_pkey"
    PRIMARY KEY ("OrganisationID", "UserID");
--
-- Definition for index UserAccountOrganisationUnit_pkey (OID = 21473) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "UserAccountOrganisationUnit_pkey"
    PRIMARY KEY ("UserAccountOrganisationID");
--
-- Definition for index UserAccounts_pkey (OID = 21475) :
--
ALTER TABLE ONLY "UserAccounts"
    ADD CONSTRAINT "UserAccounts_pkey"
    PRIMARY KEY ("ID");
--
-- Definition for index UserCertificates_pkey (OID = 21477) :
--
ALTER TABLE ONLY "UserCertificates"
    ADD CONSTRAINT "UserCertificates_pkey"
    PRIMARY KEY ("Thumbprint");
--
-- Definition for index UserClaims_pkey (OID = 21479) :
--
ALTER TABLE ONLY "UserClaims"
    ADD CONSTRAINT "UserClaims_pkey"
    PRIMARY KEY ("Type", "Value");
--
-- Definition for index UserShoppingCartItem_pkey (OID = 21481) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "UserShoppingCartItem_pkey"
    PRIMARY KEY ("ShoppingCartItemID");
--
-- Definition for index WorflowParameterTemplate_pkey (OID = 21483) :
--
ALTER TABLE ONLY "WorflowParameterTemplate"
    ADD CONSTRAINT "WorflowParameterTemplate_pkey"
    PRIMARY KEY ("WorflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index Workflow TemplateTreeStructur_WorkflowTemplateTreeStructure_key (OID = 21485) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "Workflow TemplateTreeStructur_WorkflowTemplateTreeStructure_key"
    UNIQUE ("WorkflowTreeStructureTemplateID");
--
-- Definition for index Workflow TemplateTreeStructure_pkey (OID = 21487) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "Workflow TemplateTreeStructure_pkey"
    PRIMARY KEY ("WorkflowTreeStructureTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionCompleteConditionTemplate_pkey (OID = 21489) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowActionCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionCompleteCondition_pkey (OID = 21491) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "WorkflowActionCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowActionExecuteCommandTemplate_pkey (OID = 21493) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowActionExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionExecuteCommand_pkey (OID = 21495) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "WorkflowActionExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionExecutionTemplate_pkey (OID = 21497) :
--
ALTER TABLE ONLY "WorkflowActionExecutionTemplate"
    ADD CONSTRAINT "WorkflowActionExecutionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionExecutionID", "WorkflowTemplateVersionNumber", "WorkflowTemplateID");
--
-- Definition for index WorkflowActionNotificationTemplate_pkey (OID = 21499) :
--
ALTER TABLE ONLY "WorkflowActionNotificationTemplate"
    ADD CONSTRAINT "WorkflowActionNotificationTemplate_pkey"
    PRIMARY KEY ("WorkflowActionNotificationTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameterTemplate_pkey (OID = 21501) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "WorkflowActionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameter_pkey (OID = 21503) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "WorkflowActionParameter_pkey"
    PRIMARY KEY ("WorkflowParameterID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionPostCommandTemplate_pkey (OID = 21505) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "WorkflowActionPostCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionPostCommand_pkey (OID = 21507) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "WorkflowActionPostCommand_pkey"
    PRIMARY KEY ("WorkflowVersionNumber", "WorkflowID", "WorkflowCommandID", "WorkflowActionID");
--
-- Definition for index WorkflowActionPreCommandTemplate_pkey (OID = 21509) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "WorkflowActionPreCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionPreCommand_pkey (OID = 21511) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "WorkflowActionPreCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionProductPlaceholder_pkey (OID = 21513) :
--
ALTER TABLE ONLY "WorkflowActionProductPlaceholder"
    ADD CONSTRAINT "WorkflowActionProductPlaceholder_pkey"
    PRIMARY KEY ("WorkflowActionProductPlaceholderID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionStartConditionTemplate_pkey (OID = 21515) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "WorkflowActionStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionStartCondition_pkey (OID = 21517) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "WorkflowActionStartCondition_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionTemplate_pkey (OID = 21519) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "WorkflowActionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionValidationTemplate_pkey (OID = 21521) :
--
ALTER TABLE ONLY "WorkflowActionValidationTemplate"
    ADD CONSTRAINT "WorkflowActionValidationTemplate_pkey"
    PRIMARY KEY ("WorkflowActionValidationTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowAction_pkey (OID = 21523) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "WorkflowAction_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandConditionTemplate_pkey (OID = 21525) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "WorkflowCommandConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommandCondition_pkey (OID = 21527) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "WorkflowCommandCondition_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandParameterTemplate_pkey (OID = 21529) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "WorkflowCommandParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommandParameter_pkey (OID = 21531) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "WorkflowCommandParameter_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandTemplate_pkey (OID = 21533) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "WorkflowCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommand_pkey (OID = 21535) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "WorkflowCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowConditionParameterTemplate_pkey (OID = 21537) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "WorkflowConditionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowConditionParameter_pkey (OID = 21539) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "WorkflowConditionParameter_pkey"
    PRIMARY KEY ("WorkflowConditionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowConditionTemplate_pkey (OID = 21541) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "WorkflowConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCondition_pkey (OID = 21543) :
--
ALTER TABLE ONLY "WorkflowCondition"
    ADD CONSTRAINT "WorkflowCondition_pkey"
    PRIMARY KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionErrorTemplate_WorkflowDecisionErrorTemplate_key (OID = 21545) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "WorkflowDecisionErrorTemplate_WorkflowDecisionErrorTemplate_key"
    UNIQUE ("WorkflowDecisionErrorTemplateID");
--
-- Definition for index WorkflowDecisionError_WorkflowDecisionErrorID_key (OID = 21547) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "WorkflowDecisionError_WorkflowDecisionErrorID_key"
    UNIQUE ("WorkflowDecisionErrorID");
--
-- Definition for index WorkflowDecisionExecuteCommandTemplate_pkey (OID = 21549) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowDecisionExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecisionExecuteCommand_pkey (OID = 21551) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommand"
    ADD CONSTRAINT "WorkflowDecisionExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionFailure_WorkflowDecisionFailureID_key (OID = 21553) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "WorkflowDecisionFailure_WorkflowDecisionFailureID_key"
    UNIQUE ("WorkflowDecisionFailureID");
--
-- Definition for index WorkflowDecisionParameterTemplate_pkey (OID = 21555) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "WorkflowDecisionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecisionParameter_pkey (OID = 21557) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "WorkflowDecisionParameter_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionSuccessTempla_WorkflowDecisionSuccessTempla_key (OID = 21559) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "WorkflowDecisionSuccessTempla_WorkflowDecisionSuccessTempla_key"
    UNIQUE ("WorkflowDecisionSuccessTemplateID");
--
-- Definition for index WorkflowDecisionSuccess_WorkflowDecisionSuccessID_key (OID = 21561) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "WorkflowDecisionSuccess_WorkflowDecisionSuccessID_key"
    UNIQUE ("WorkflowDecisionSuccessID");
--
-- Definition for index WorkflowDecisionTemplate_pkey (OID = 21563) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "WorkflowDecisionTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecision_pkey (OID = 21565) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "WorkflowDecision_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowExecutionStatus_pkey (OID = 21567) :
--
ALTER TABLE ONLY "WorkflowExecutionStatus"
    ADD CONSTRAINT "WorkflowExecutionStatus_pkey"
    PRIMARY KEY ("WorkflowExecutionStatusID");
--
-- Definition for index WorkflowExecutionTemplate_pkey (OID = 21569) :
--
ALTER TABLE ONLY "WorkflowExecutionTemplate"
    ADD CONSTRAINT "WorkflowExecutionTemplate_pkey"
    PRIMARY KEY ("WorkflowExecutionTemplateID");
--
-- Definition for index WorkflowExecution_pkey (OID = 21571) :
--
ALTER TABLE ONLY "WorkflowExecution"
    ADD CONSTRAINT "WorkflowExecution_pkey"
    PRIMARY KEY ("WorkflowExecutionID", "VersionNumber");
--
-- Definition for index WorkflowHierarchyTemplate_pkey (OID = 21573) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "WorkflowHierarchyTemplate_pkey"
    PRIMARY KEY ("WorkflowHierarchyTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowHierarchy_pkey (OID = 21575) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "WorkflowHierarchy_pkey"
    PRIMARY KEY ("WorkflowHierarchyID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowInstanceExecutionDataItem_pkey (OID = 21577) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionDataItem"
    ADD CONSTRAINT "WorkflowInstanceExecutionDataItem_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionDataItemID");
--
-- Definition for index WorkflowInstanceExecutionStatusEvent_pkey (OID = 21579) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "WorkflowInstanceExecutionStatusEvent_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index WorkflowInstanceExecution_pkey (OID = 21581) :
--
ALTER TABLE ONLY "WorkflowInstanceExecution"
    ADD CONSTRAINT "WorkflowInstanceExecution_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index WorkflowInstanceSession_pkey (OID = 21583) :
--
ALTER TABLE ONLY "WorkflowInstanceSession"
    ADD CONSTRAINT "WorkflowInstanceSession_pkey"
    PRIMARY KEY ("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index WorkflowInstance_pkey (OID = 21585) :
--
ALTER TABLE ONLY "WorkflowInstance"
    ADD CONSTRAINT "WorkflowInstance_pkey"
    PRIMARY KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowMainCompleteConditionTemplate_pkey (OID = 21587) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowMainCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainCompleteCondition_pkey (OID = 21589) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "WorkflowMainCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowConditionID");
--
-- Definition for index WorkflowMainExecuteCommandTemplate_pkey (OID = 21591) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowMainExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainExecuteCommand_pkey (OID = 21593) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "WorkflowMainExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainParameterTemplate_pkey (OID = 21595) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "WorkflowMainParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainParameter_pkey (OID = 21597) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "WorkflowMainParameter_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowParameterID");
--
-- Definition for index WorkflowMainPostCommandTemplate_pkey (OID = 21599) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "WorkflowMainPostCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainPostCommand_pkey (OID = 21601) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "WorkflowMainPostCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainPreCommandTemplate_pkey (OID = 21603) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "WorkflowMainPreCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainPreCommand_pkey (OID = 21605) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "WorkflowMainPreCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainStartConditionTemplate_pkey (OID = 21607) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "WorkflowMainStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainStartCondition_pkey (OID = 21609) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "WorkflowMainStartCondition_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowConditionID");
--
-- Definition for index WorkflowObjectTypeTemplate_pkey (OID = 21611) :
--
ALTER TABLE ONLY "WorkflowObjectTypeTemplate"
    ADD CONSTRAINT "WorkflowObjectTypeTemplate_pkey"
    PRIMARY KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowObjectType_pkey (OID = 21613) :
--
ALTER TABLE ONLY "WorkflowObjectType"
    ADD CONSTRAINT "WorkflowObjectType_pkey"
    PRIMARY KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowParameterTemplate_pkey (OID = 21615) :
--
ALTER TABLE ONLY "WorkflowParameterTemplate"
    ADD CONSTRAINT "WorkflowParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowParameter_pkey (OID = 21617) :
--
ALTER TABLE ONLY "WorkflowParameter"
    ADD CONSTRAINT "WorkflowParameter_pkey"
    PRIMARY KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTemplate_pkey (OID = 21619) :
--
ALTER TABLE ONLY "WorkflowTemplate"
    ADD CONSTRAINT "WorkflowTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionCompleteConditionTemplate_pkey (OID = 21621) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowTransistionCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionCompleteCondition_pkey (OID = 21623) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "WorkflowTransistionCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionHierarchyTemplate_pkey (OID = 21625) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "WorkflowTransistionHierarchyTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionHierarchyTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionHierarchy_pkey (OID = 21627) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "WorkflowTransistionHierarchy_pkey"
    PRIMARY KEY ("WorkflowTransistionHierarchyID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionParameterTemplate_pkey (OID = 21629) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "WorkflowTransistionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionParameter_pkey (OID = 21631) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "WorkflowTransistionParameter_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionStartConditionTemplate_pkey (OID = 21633) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "WorkflowTransistionStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionStartCondition_pkey (OID = 21635) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "WorkflowTransistionStartCondition_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionTemplate_pkey (OID = 21637) :
--
ALTER TABLE ONLY "WorkflowTransistionTemplate"
    ADD CONSTRAINT "WorkflowTransistionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowActionTemplate_pkey (OID = 21639) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "WorkflowTransistionWorkflowActionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowAction_pkey (OID = 21641) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "WorkflowTransistionWorkflowAction_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionWorkflowDecisionTemplate_pkey (OID = 21643) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "WorkflowTransistionWorkflowDecisionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowDecision_pkey (OID = 21645) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "WorkflowTransistionWorkflowDecision_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistion_pkey (OID = 21647) :
--
ALTER TABLE ONLY "WorkflowTransistion"
    ADD CONSTRAINT "WorkflowTransistion_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTreeStructureActionTemplate_pkey (OID = 21649) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_pkey"
    PRIMARY KEY ("WorkflowTreeStructureActionTemplateID");
--
-- Definition for index WorkflowTreeStructureAction_pkey (OID = 21651) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_pkey"
    PRIMARY KEY ("WorkflowTreeStructureActionID");
--
-- Definition for index WorkflowTreeStructure_pkey (OID = 21653) :
--
ALTER TABLE ONLY "WorkflowTreeStructure"
    ADD CONSTRAINT "WorkflowTreeStructure_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowTreeStructureID", "WorkflowVersionNumber");
--
-- Definition for index Workflow_pkey (OID = 21655) :
--
ALTER TABLE ONLY "Workflow"
    ADD CONSTRAINT "Workflow_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index containsagadata_pkey (OID = 21657) :
--
ALTER TABLE ONLY containsagadata
    ADD CONSTRAINT containsagadata_pkey
    PRIMARY KEY (id);
--
-- Definition for index countrycode_pkey (OID = 21659) :
--
ALTER TABLE ONLY "CountryCode"
    ADD CONSTRAINT countrycode_pkey
    PRIMARY KEY ("CountryCode");
--
-- Definition for index pkActor (OID = 21661) :
--
ALTER TABLE ONLY "Actor"
    ADD CONSTRAINT "pkActor"
    PRIMARY KEY ("ActorID");
--
-- Definition for index pkActorClaimRoleMapping (OID = 21663) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "pkActorClaimRoleMapping"
    PRIMARY KEY ("ActorClaimRoleMappingID");
--
-- Definition for index pkArtefact (OID = 21665) :
--
ALTER TABLE ONLY "Artefact"
    ADD CONSTRAINT "pkArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index pkArtefactClaim (OID = 21667) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "pkArtefactClaim"
    PRIMARY KEY ("ArtefactClaimID");
--
-- Definition for index pkArtefactClaimTemplate (OID = 21669) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "pkArtefactClaimTemplate"
    PRIMARY KEY ("ArtefactClaimTemplateID");
--
-- Definition for index pkArtefactDependency (OID = 21671) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "pkArtefactDependency"
    PRIMARY KEY ("ArtefactDependencyID");
--
-- Definition for index pkArtefactDependencyStatusType (OID = 21673) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "pkArtefactDependencyStatusType"
    PRIMARY KEY ("ArtefactDependencyStatusTypeID");
--
-- Definition for index pkArtefactDependencyStatusTypeTemplate (OID = 21675) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "pkArtefactDependencyStatusTypeTemplate"
    PRIMARY KEY ("ArtefactDependencyStatusTypeTemplate");
--
-- Definition for index pkArtefactDependencyTemplate (OID = 21677) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "pkArtefactDependencyTemplate"
    PRIMARY KEY ("ArtefactDependencyTemplateID");
--
-- Definition for index pkArtefactNotificationConstruct (OID = 21679) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "pkArtefactNotificationConstruct"
    PRIMARY KEY ("ArtefactNotificationConstructID");
--
-- Definition for index pkArtefactNotificationConstructTemplate (OID = 21681) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "pkArtefactNotificationConstructTemplate"
    PRIMARY KEY ("ArtefactNotificationConstructTemplateID");
--
-- Definition for index pkArtefactProduct (OID = 21683) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "pkArtefactProduct"
    PRIMARY KEY ("ProductID", "ProductVersionID", "ArtefactVersionNumber", "ArtefactID");
--
-- Definition for index pkArtefactProductTemplate (OID = 21685) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "pkArtefactProductTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkArtefactRole (OID = 21687) :
--
ALTER TABLE ONLY "ArtefactRole"
    ADD CONSTRAINT "pkArtefactRole"
    PRIMARY KEY ("ArtefactRoleID");
--
-- Definition for index pkArtefactRoleTemplate (OID = 21689) :
--
ALTER TABLE ONLY "ArtefactRoleTemplate"
    ADD CONSTRAINT "pkArtefactRoleTemplate"
    PRIMARY KEY ("ArtefactRoleTemplateID");
--
-- Definition for index pkArtefactStatusType (OID = 21691) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "pkArtefactStatusType"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkArtefactStatusTypeTemplate (OID = 21693) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "pkArtefactStatusTypeTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkArtefactSubscription (OID = 21695) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "pkArtefactSubscription"
    PRIMARY KEY ("ArtefactSubscriptionID");
--
-- Definition for index pkArtefactSubscriptionTemplate (OID = 21697) :
--
ALTER TABLE ONLY "ArtefactSubscriptionTemplate"
    ADD CONSTRAINT "pkArtefactSubscriptionTemplate"
    PRIMARY KEY ("ArtefactSubscriptionTemplateID");
--
-- Definition for index pkArtefactTemplate (OID = 21699) :
--
ALTER TABLE ONLY "ArtefactTemplate"
    ADD CONSTRAINT "pkArtefactTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index pkArtefactWorkflow (OID = 21701) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "pkArtefactWorkflow"
    PRIMARY KEY ("ArtefactWorkflowID");
--
-- Definition for index pkArtefactWorkflowTemplate (OID = 21703) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "pkArtefactWorkflowTemplate"
    PRIMARY KEY ("ArtefactWorkflowTemplateID");
--
-- Definition for index pkBilling (OID = 21705) :
--
ALTER TABLE ONLY "Billing"
    ADD CONSTRAINT "pkBilling"
    PRIMARY KEY ("BillingID");
--
-- Definition for index pkBillingTemplate (OID = 21707) :
--
ALTER TABLE ONLY "BillingTemplate"
    ADD CONSTRAINT "pkBillingTemplate"
    PRIMARY KEY ("BillingTemplateID");
--
-- Definition for index pkBucket (OID = 21709) :
--
ALTER TABLE ONLY "Bucket"
    ADD CONSTRAINT "pkBucket"
    PRIMARY KEY ("BucketID");
--
-- Definition for index pkBucketTemplate (OID = 21711) :
--
ALTER TABLE ONLY "BucketTemplate"
    ADD CONSTRAINT "pkBucketTemplate"
    PRIMARY KEY ("BucketTemplateID");
--
-- Definition for index pkBusMessageProcessLog (OID = 21713) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "pkBusMessageProcessLog"
    PRIMARY KEY ("BusMessageProcessLogID");
--
-- Definition for index pkBusTask (OID = 21715) :
--
ALTER TABLE ONLY "BusTask"
    ADD CONSTRAINT "pkBusTask"
    PRIMARY KEY ("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index pkBusTaskHandler (OID = 21717) :
--
ALTER TABLE ONLY "BusTaskHandler"
    ADD CONSTRAINT "pkBusTaskHandler"
    PRIMARY KEY ("BusTaskHandlerID");
--
-- Definition for index pkBusTaskSchedule (OID = 21719) :
--
ALTER TABLE ONLY "BusTaskSchedule"
    ADD CONSTRAINT "pkBusTaskSchedule"
    PRIMARY KEY ("BusTaskScheduleID");
--
-- Definition for index pkBusTaskScheduleProcessLog (OID = 21721) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "pkBusTaskScheduleProcessLog"
    PRIMARY KEY ("BusTaskScheduleProcessLogID");
--
-- Definition for index pkComponentTier (OID = 21723) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "pkComponentTier"
    PRIMARY KEY ("ComponentTierID");
--
-- Definition for index pkComponentTierTemplate (OID = 21725) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "pkComponentTierTemplate"
    PRIMARY KEY ("ComponentTierTemplateID");
--
-- Definition for index pkContactName (OID = 21727) :
--
ALTER TABLE ONLY "ContactName"
    ADD CONSTRAINT "pkContactName"
    PRIMARY KEY ("ContactNameID");
--
-- Definition for index pkContactPhone (OID = 21729) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "pkContactPhone"
    PRIMARY KEY ("ContactPhoneId");
--
-- Definition for index pkCountryDeduction (OID = 21733) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "pkCountryDeduction"
    PRIMARY KEY ("CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkCountryDeductionTemplate (OID = 21735) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "pkCountryDeductionTemplate"
    PRIMARY KEY ("CountryDeductionTemplateID", "DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index pkCurrencyCode (OID = 21737) :
--
ALTER TABLE ONLY "CurrencyCode"
    ADD CONSTRAINT "pkCurrencyCode"
    PRIMARY KEY ("CurrencyCode");
--
-- Definition for index pkDeduction (OID = 21739) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "pkDeduction"
    PRIMARY KEY ("DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkDeductionComponentTier (OID = 21741) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "pkDeductionComponentTier"
    PRIMARY KEY ("DeductionID", "DeductionVersionNumber", "ComponentTierID");
--
-- Definition for index pkDeductionComponentTierTemplate (OID = 21743) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "pkDeductionComponentTierTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber", "ComponentTierTemplateID");
--
-- Definition for index pkDeductionProduct (OID = 21745) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "pkDeductionProduct"
    PRIMARY KEY ("DeductionID", "ProductID", "ProductVersionID", "DeductionVersionNumber");
--
-- Definition for index pkDeductionProductTemplate (OID = 21747) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "pkDeductionProductTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkDeductionTemplate (OID = 21749) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "pkDeductionTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisation (OID = 21751) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "pkDefaultOrganisation"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationArtefact (OID = 21753) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "pkDefaultOrganisationArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationArtefactT (OID = 21755) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationArtefactT"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationBucket (OID = 21757) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "pkDefaultOrganisationBucket"
    PRIMARY KEY ("BucketTemplateID", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationBucketT (OID = 21759) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationBucketT"
    PRIMARY KEY ("BucketTemplateID", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationGroupTarget (OID = 21761) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "pkDefaultOrganisationGroupTarget"
    PRIMARY KEY ("DefaultOrganisationUserTargetID", "DefaultOrganisationGroupID");
--
-- Definition for index pkDefaultOrganisationGroupTargetTemplate (OID = 21763) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationGroupTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID", "DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationLedger (OID = 21765) :
--
ALTER TABLE ONLY "DefaultOrganisationLedger"
    ADD CONSTRAINT "pkDefaultOrganisationLedger"
    PRIMARY KEY ("DefaultOrganisationLedgerID");
--
-- Definition for index pkDefaultOrganisationLedgerTemplate (OID = 21767) :
--
ALTER TABLE ONLY "DefaultOrganisationLedgerTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationLedgerTemplate"
    PRIMARY KEY ("DefaultOrganisationLedgerTemplateID");
--
-- Definition for index pkDefaultOrganisationModule (OID = 21769) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "pkDefaultOrganisationModule"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationModuleT (OID = 21771) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationModuleT"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationNotificationConstruct (OID = 21773) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "pkDefaultOrganisationNotificationConstruct"
    PRIMARY KEY ("DefaultOrganisationNotificationConstructID");
--
-- Definition for index pkDefaultOrganisationPaymentMethod (OID = 21775) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "pkDefaultOrganisationPaymentMethod"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkDefaultOrganisationPaymentMethodTemplate (OID = 21777) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationPaymentMethodTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkDefaultOrganisationProduct (OID = 21779) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "pkDefaultOrganisationProduct"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkDefaultOrganisationProductTemplate (OID = 21781) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationProductTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkDefaultOrganisationRoleTarget (OID = 21783) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "pkDefaultOrganisationRoleTarget"
    PRIMARY KEY ("DefaultOrganisationRoleID", "DefaultOrganisationUserTargetID");
--
-- Definition for index pkDefaultOrganisationRoleTargetTemplate (OID = 21785) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationRoleTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationRoleTemplateID", "DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationShoppingCartBlueprint (OID = 21787) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "pkDefaultOrganisationShoppingCartBlueprint"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "ShoppingCartBlueprintID");
--
-- Definition for index pkDefaultOrganisationShoppingCartBlueprintTemplate (OID = 21789) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationShoppingCartBlueprintTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "ShoppingCartBlueprintTemplateID");
--
-- Definition for index pkDefaultOrganisationStatusType (OID = 21791) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "pkDefaultOrganisationStatusType"
    PRIMARY KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationStatusTypeTemplate (OID = 21793) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationStatusTypeTemplate"
    PRIMARY KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationTemplate (OID = 21795) :
--
ALTER TABLE ONLY "DefaultOrganisationTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationUserTarget (OID = 21797) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "pkDefaultOrganisationUserTarget"
    PRIMARY KEY ("DefaultOrganisationUserTargetID");
--
-- Definition for index pkDefaultOrganisationUserTargetTemplate (OID = 21799) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationUserTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationUserType (OID = 21801) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "pkDefaultOrganisationUserType"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "UserTypeID");
--
-- Definition for index pkDefaultOrganisationUserTypeTemplate (OID = 21803) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationUserTypeTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "UserTypeID");
--
-- Definition for index pkDefaultOrganisationWorkflow (OID = 21805) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "pkDefaultOrganisationWorkflow"
    PRIMARY KEY ("WorkflowVersionNumber", "WorkflowID", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationWorkflowT (OID = 21807) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationWorkflowT"
    PRIMARY KEY ("WorkflowTemplateVersionNumber", "WorkflowTemplateID", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrgantionNotificationConstructT (OID = 21809) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "pkDefaultOrgantionNotificationConstructT"
    PRIMARY KEY ("DefaultOrganisationNotificationConstructTemplateID");
--
-- Definition for index pkDirectDebitMandate (OID = 21811) :
--
ALTER TABLE ONLY "DirectDebitMandate"
    ADD CONSTRAINT "pkDirectDebitMandate"
    PRIMARY KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index pkDirectDebitMandateTemplate (OID = 21813) :
--
ALTER TABLE ONLY "DirectDebitMandateTemplate"
    ADD CONSTRAINT "pkDirectDebitMandateTemplate"
    PRIMARY KEY ("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber");
--
-- Definition for index pkDirectDebitSchedule (OID = 21815) :
--
ALTER TABLE ONLY "DirectDebitSchedule"
    ADD CONSTRAINT "pkDirectDebitSchedule"
    PRIMARY KEY ("DirectDebitScheduleID");
--
-- Definition for index pkDiscount (OID = 21817) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "pkDiscount"
    PRIMARY KEY ("DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkDiscountComponentTier (OID = 21819) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "pkDiscountComponentTier"
    PRIMARY KEY ("DiscountID", "DiscountVersionNumber", "ComponentTierID");
--
-- Definition for index pkDiscountComponentTierTemplate (OID = 21821) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "pkDiscountComponentTierTemplate"
    PRIMARY KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber", "ComponentTierTemplateID");
--
-- Definition for index pkDiscountRelatedProduct (OID = 21823) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "pkDiscountRelatedProduct"
    PRIMARY KEY ("DiscountRelatedProductID");
--
-- Definition for index pkDiscountRelatedProductTemplate (OID = 21825) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "pkDiscountRelatedProductTemplate"
    PRIMARY KEY ("DiscountRelatedProductTemplateID");
--
-- Definition for index pkDiscountTemplate (OID = 21827) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "pkDiscountTemplate"
    PRIMARY KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkFieldDetail (OID = 21829) :
--
ALTER TABLE ONLY "FieldDetail"
    ADD CONSTRAINT "pkFieldDetail"
    PRIMARY KEY ("FieldDetailID");
--
-- Definition for index pkFieldDetailTemplate (OID = 21831) :
--
ALTER TABLE ONLY "FieldDetailTemplate"
    ADD CONSTRAINT "pkFieldDetailTemplate"
    PRIMARY KEY ("FieldDetailTemplateID");
--
-- Definition for index pkGlobalAccountingPeriod (OID = 21833) :
--
ALTER TABLE ONLY "GlobalAccountingPeriod"
    ADD CONSTRAINT "pkGlobalAccountingPeriod"
    PRIMARY KEY ("GlobalAccountingPeriodID");
--
-- Definition for index pkGlobalDirectDebitCollectionPeriod (OID = 21835) :
--
ALTER TABLE ONLY "GlobalDirectDebitCollectionPeriod"
    ADD CONSTRAINT "pkGlobalDirectDebitCollectionPeriod"
    PRIMARY KEY ("GlobalDirectDebitCollectionPeriodID");
--
-- Definition for index pkGlobalPaymentMethod (OID = 21837) :
--
ALTER TABLE ONLY "GlobalPaymentMethod"
    ADD CONSTRAINT "pkGlobalPaymentMethod"
    PRIMARY KEY ("GlobalPaymentMethodID");
--
-- Definition for index pkGroup (OID = 21839) :
--
ALTER TABLE ONLY "Group"
    ADD CONSTRAINT "pkGroup"
    PRIMARY KEY ("GroupID");
--
-- Definition for index pkInterfacePanel (OID = 21841) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "pkInterfacePanel"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index pkInterfacePanelFieldDetail (OID = 21843) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "pkInterfacePanelFieldDetail"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID");
--
-- Definition for index pkInterfacePanelFieldDetailOrg123aisationType (OID = 21845) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrg123aisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrg123aisationTypeTemplate (OID = 21847) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrg123aisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrganaisationType (OID = 21849) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrganaisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrganaisationTypeTemplate (OID = 21851) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrganaisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailTemplate (OID = 21853) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID");
--
-- Definition for index pkInterfacePanelOrganUserTypeype (OID = 21855) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "pkInterfacePanelOrganUserTypeype"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganUserTypeypeTemplate (OID = 21857) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelOrganUserTypeypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganisationType (OID = 21859) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "pkInterfacePanelOrganisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganisationTypeTemplate (OID = 21861) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelOrganisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelSetting (OID = 21863) :
--
ALTER TABLE ONLY "InterfacePanelSetting"
    ADD CONSTRAINT "pkInterfacePanelSetting"
    PRIMARY KEY ("InterfacePanelSettingID", "InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index pkInterfacePanelSettingTemplate (OID = 21865) :
--
ALTER TABLE ONLY "InterfacePanelSettingTemplate"
    ADD CONSTRAINT "pkInterfacePanelSettingTemplate"
    PRIMARY KEY ("InterfacePanelSettingTemplateID", "InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index pkInterfacePanelTemplate (OID = 21867) :
--
ALTER TABLE ONLY "InterfacePanelTemplate"
    ADD CONSTRAINT "pkInterfacePanelTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index pkInvoice (OID = 21869) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "pkInvoice"
    PRIMARY KEY ("InvoiceID");
--
-- Definition for index pkInvoiceLineItem (OID = 21871) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "pkInvoiceLineItem"
    PRIMARY KEY ("InvoiceLineItemID");
--
-- Definition for index pkInvoiceProcessLog (OID = 21873) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "pkInvoiceProcessLog"
    PRIMARY KEY ("InvoiceID", "CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkLedgerAccount (OID = 21875) :
--
ALTER TABLE ONLY "OrganisationLedgerAccount"
    ADD CONSTRAINT "pkLedgerAccount"
    PRIMARY KEY ("OrganisationLedgerAccountID");
--
-- Definition for index pkLedgerAccountBalance (OID = 21877) :
--
ALTER TABLE ONLY "LedgerAccountBalance"
    ADD CONSTRAINT "pkLedgerAccountBalance"
    PRIMARY KEY ("LedgerAccountID", "BalanceOn");
--
-- Definition for index pkLedgerAccountTransaction (OID = 21879) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "pkLedgerAccountTransaction"
    PRIMARY KEY ("LedgerAccountID", "TransactionOrderID", "BalanceOn");
--
-- Definition for index pkModuleArtefact (OID = 21881) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "pkModuleArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "ModuleID", "ModuleVersionNumber");
--
-- Definition for index pkModuleArtefactTemplate (OID = 21883) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "pkModuleArtefactTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index pkModuleDependency (OID = 21885) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "pkModuleDependency"
    PRIMARY KEY ("ModuleDependencyID");
--
-- Definition for index pkModuleDependencyTemplate (OID = 21887) :
--
ALTER TABLE ONLY "ModuleDependencyTemplate"
    ADD CONSTRAINT "pkModuleDependencyTemplate"
    PRIMARY KEY ("ModuleDependencyTemplateID");
--
-- Definition for index pkModuleNotificationConstruct (OID = 21889) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "pkModuleNotificationConstruct"
    PRIMARY KEY ("ModuleNotificationConstructID");
--
-- Definition for index pkModuleNotificationConstructTemplate (OID = 21891) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "pkModuleNotificationConstructTemplate"
    PRIMARY KEY ("ModuleNotificationConstructTemplateID");
--
-- Definition for index pkModuleProduct (OID = 21893) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "pkModuleProduct"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkModuleProductTemplate (OID = 21895) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "pkModuleProductTemplate"
    PRIMARY KEY ("ProductVersionID", "ProductTemplateID", "ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index pkModuleStatusType (OID = 21897) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "pkModuleStatusType"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkModuleStatusTypeTemplate (OID = 21899) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "pkModuleStatusTypeTemplate"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkNotification (OID = 21901) :
--
ALTER TABLE ONLY "Notification"
    ADD CONSTRAINT "pkNotification"
    PRIMARY KEY ("NotificationID");
--
-- Definition for index pkNotificationConstructClaim (OID = 21903) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "pkNotificationConstructClaim"
    PRIMARY KEY ("NotificationConstructClaimID");
--
-- Definition for index pkNotificationConstructClaimTemplate (OID = 21905) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "pkNotificationConstructClaimTemplate"
    PRIMARY KEY ("NotificationConstructClaimTemplateID");
--
-- Definition for index pkNotificationConstructData (OID = 21907) :
--
ALTER TABLE ONLY "NotificationConstructData"
    ADD CONSTRAINT "pkNotificationConstructData"
    PRIMARY KEY ("NotificationConstructDataID");
--
-- Definition for index pkNotificationConstructDataTemplate (OID = 21909) :
--
ALTER TABLE ONLY "NotificationConstructDataTemplate"
    ADD CONSTRAINT "pkNotificationConstructDataTemplate"
    PRIMARY KEY ("NotificationConstructDataTemplateID");
--
-- Definition for index pkNotificationConstructParameter (OID = 21911) :
--
ALTER TABLE ONLY "NotificationConstructParameter"
    ADD CONSTRAINT "pkNotificationConstructParameter"
    PRIMARY KEY ("NotificationConstructParameterID");
--
-- Definition for index pkNotificationConstructParameterTemplate (OID = 21913) :
--
ALTER TABLE ONLY "NotificationConstructParameterTemplate"
    ADD CONSTRAINT "pkNotificationConstructParameterTemplate"
    PRIMARY KEY ("NotificationConstructParameterTemplateID");
--
-- Definition for index pkNotificationConstructRole (OID = 21915) :
--
ALTER TABLE ONLY "NotificationConstructRole"
    ADD CONSTRAINT "pkNotificationConstructRole"
    PRIMARY KEY ("NotificationRoleConstructID");
--
-- Definition for index pkNotificationConstructRoleTemplate (OID = 21917) :
--
ALTER TABLE ONLY "NotificationConstructRoleTemplate"
    ADD CONSTRAINT "pkNotificationConstructRoleTemplate"
    PRIMARY KEY ("NotificationConstructRoleID");
--
-- Definition for index pkNotificationConstructTarget (OID = 21919) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "pkNotificationConstructTarget"
    PRIMARY KEY ("NotificationConstructTargetID");
--
-- Definition for index pkNotificationConstructTargetTemplate (OID = 21921) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "pkNotificationConstructTargetTemplate"
    PRIMARY KEY ("NotificationConstructTargetTemplateID");
--
-- Definition for index pkNotificationConstructTemplate (OID = 21923) :
--
ALTER TABLE ONLY "NotificationConstructTemplate"
    ADD CONSTRAINT "pkNotificationConstructTemplate"
    PRIMARY KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index pkNotificationRecipient (OID = 21925) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "pkNotificationRecipient"
    PRIMARY KEY ("NotificationRecipientID");
--
-- Definition for index pkOrganisationAccountingPeriod (OID = 21927) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "pkOrganisationAccountingPeriod"
    PRIMARY KEY ("OrganisationAccountingPeriodID", "OrganisationID");
--
-- Definition for index pkOrganisationArtefact (OID = 21929) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "pkOrganisationArtefact"
    PRIMARY KEY ("OrganisationID", "ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index pkOrganisationBankAccount (OID = 21931) :
--
ALTER TABLE ONLY "OrganisationBankAccount"
    ADD CONSTRAINT "pkOrganisationBankAccount"
    PRIMARY KEY ("OrganisationBankAccountId");
--
-- Definition for index pkOrganisationDirectDebitMandate (OID = 21933) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "pkOrganisationDirectDebitMandate"
    PRIMARY KEY ("OrganisationDirectDebitMandateID");
--
-- Definition for index pkOrganisationDirectDebitMandateSignoff (OID = 21935) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "pkOrganisationDirectDebitMandateSignoff"
    PRIMARY KEY ("OrganisationDirectDebitMandateID", "CreatedOn");
--
-- Definition for index pkOrganisationDiscount (OID = 21937) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "pkOrganisationDiscount"
    PRIMARY KEY ("OrganisationID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkOrganisationFinancialDetail (OID = 21939) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "pkOrganisationFinancialDetail"
    PRIMARY KEY ("OrganisationFinancialDetailID");
--
-- Definition for index pkOrganisationOfflinePaymentMethod (OID = 21941) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "pkOrganisationOfflinePaymentMethod"
    PRIMARY KEY ("OrganisationID", "GlobalPaymentMethodID");
--
-- Definition for index pkOrganisationPlanSubscription (OID = 21943) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "pkOrganisationPlanSubscription"
    PRIMARY KEY ("OrganisationID", "PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index pkOrganisationProductPurchase (OID = 21945) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "pkOrganisationProductPurchase"
    PRIMARY KEY ("OrganisationID", "ProductID", "ProductVersionID", "InvoiceLineItemID");
--
-- Definition for index pkOrganisationSetting (OID = 21947) :
--
ALTER TABLE ONLY "OrganisationSetting"
    ADD CONSTRAINT "pkOrganisationSetting"
    PRIMARY KEY ("OrganisationSettingID");
--
-- Definition for index pkOrganisationSettingTemplate (OID = 21949) :
--
ALTER TABLE ONLY "OrganisationSettingTemplate"
    ADD CONSTRAINT "pkOrganisationSettingTemplate"
    PRIMARY KEY ("OrganisationSettingTemplateID");
--
-- Definition for index pkOrganisationStatus (OID = 21951) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "pkOrganisationStatus"
    PRIMARY KEY ("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkOrganisationStatusType (OID = 21953) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "pkOrganisationStatusType"
    PRIMARY KEY ("OrganisationStatusTypeID");
--
-- Definition for index pkOrganisationTeamSetting (OID = 21956) :
--
ALTER TABLE ONLY "OrganisationTeamSetting"
    ADD CONSTRAINT "pkOrganisationTeamSetting"
    PRIMARY KEY ("OrganisationTeamSettingID");
--
-- Definition for index pkOrganisationTeamSettingTemplate (OID = 21958) :
--
ALTER TABLE ONLY "OrganisationTeamSettingTemplate"
    ADD CONSTRAINT "pkOrganisationTeamSettingTemplate"
    PRIMARY KEY ("OrganisationTeamSettingID");
--
-- Definition for index pkOrganisationTradingName (OID = 21960) :
--
ALTER TABLE ONLY "OrganisationTradingName"
    ADD CONSTRAINT "pkOrganisationTradingName"
    PRIMARY KEY ("OrganisationTradingNameID");
--
-- Definition for index pkOrganisationType (OID = 21962) :
--
ALTER TABLE ONLY "OrganisationType"
    ADD CONSTRAINT "pkOrganisationType"
    PRIMARY KEY ("OrganisationTypeID");
--
-- Definition for index pkOrganisationUserType (OID = 21964) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "pkOrganisationUserType"
    PRIMARY KEY ("OrganisationID", "UserTypeID");
--
-- Definition for index pkPackage (OID = 21967) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "pkPackage"
    PRIMARY KEY ("PackageID", "PackageVersionNumber");
--
-- Definition for index pkPackageProduct (OID = 21969) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "pkPackageProduct"
    PRIMARY KEY ("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index pkPackageProductTemplate (OID = 21971) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "pkPackageProductTemplate"
    PRIMARY KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index pkPackageTemplate (OID = 21973) :
--
ALTER TABLE ONLY "PackageTemplate"
    ADD CONSTRAINT "pkPackageTemplate"
    PRIMARY KEY ("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index pkPlan (OID = 21975) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "pkPlan"
    PRIMARY KEY ("PlanID", "PlanVersionNumber");
--
-- Definition for index pkPlanBilling (OID = 21977) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "pkPlanBilling"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "BillingID");
--
-- Definition for index pkPlanBillingTemplate (OID = 21979) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "pkPlanBillingTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "BillingTemplateID");
--
-- Definition for index pkPlanDiscount (OID = 21981) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "pkPlanDiscount"
    PRIMARY KEY ("PlanVersionNumber", "PlanID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkPlanDiscountTemplate (OID = 21983) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "pkPlanDiscountTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkPlanGlobalPaymentMethod (OID = 21985) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "pkPlanGlobalPaymentMethod"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkPlanGlobalPaymentMethodTemplate (OID = 21987) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "pkPlanGlobalPaymentMethodTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkPlanGroup (OID = 21989) :
--
ALTER TABLE ONLY "PlanGroup"
    ADD CONSTRAINT "pkPlanGroup"
    PRIMARY KEY ("PlanGroupID");
--
-- Definition for index pkPlanProduct (OID = 21991) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "pkPlanProduct"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkPlanProductTemplate (OID = 21993) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "pkPlanProductTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkPlanSubscription (OID = 21995) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "pkPlanSubscription"
    PRIMARY KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index pkPlanSubscriptionBillingPeriod (OID = 21997) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "pkPlanSubscriptionBillingPeriod"
    PRIMARY KEY ("PlanSubscriptionBillingPeriodID");
--
-- Definition for index pkPlanSubscriptionPaymentPlan (OID = 21999) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "pkPlanSubscriptionPaymentPlan"
    PRIMARY KEY ("PlanSubscriptionPaymentPlanID");
--
-- Definition for index pkPlanSubscriptionPeriod (OID = 22001) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "pkPlanSubscriptionPeriod"
    PRIMARY KEY ("PlanSubscriptionPeriodID");
--
-- Definition for index pkPlanSubscriptionProcessLog (OID = 22003) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "pkPlanSubscriptionProcessLog"
    PRIMARY KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber", "CreatedOn", "StatusTypeValueID", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkPlanTemplate (OID = 22005) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "pkPlanTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index pkPlanTransaction (OID = 22007) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "pkPlanTransaction"
    PRIMARY KEY ("PlanTransactionID");
--
-- Definition for index pkPlanTransactionComponentTier (OID = 22009) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "pkPlanTransactionComponentTier"
    PRIMARY KEY ("ComponentTierID", "PlanTransactionID");
--
-- Definition for index pkPlanTransactionComponentTierTemplate (OID = 22011) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "pkPlanTransactionComponentTierTemplate"
    PRIMARY KEY ("ComponentTierTemplateID", "PlanTransactionTemplateID");
--
-- Definition for index pkPlanTransactionTemplate (OID = 22013) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "pkPlanTransactionTemplate"
    PRIMARY KEY ("PlanTransactionTemplateID");
--
-- Definition for index pkProduct (OID = 22015) :
--
ALTER TABLE ONLY "Product"
    ADD CONSTRAINT "pkProduct"
    PRIMARY KEY ("ProductID", "ProductVersionID");
--
-- Definition for index pkProductBusTask (OID = 22017) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "pkProductBusTask"
    PRIMARY KEY ("ProductBusTaskID");
--
-- Definition for index pkProductBusTaskTemplate (OID = 22019) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "pkProductBusTaskTemplate"
    PRIMARY KEY ("ProductBusTaskTemplateID");
--
-- Definition for index pkProductClaim (OID = 22021) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "pkProductClaim"
    PRIMARY KEY ("ProductClaimID");
--
-- Definition for index pkProductClaimTemplate (OID = 22023) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "pkProductClaimTemplate"
    PRIMARY KEY ("ProductClaimTemplateID");
--
-- Definition for index pkProductComponentTier (OID = 22025) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "pkProductComponentTier"
    PRIMARY KEY ("ProductID", "ProductVersionID", "ComponentTierID");
--
-- Definition for index pkProductComponentTierTemplate (OID = 22027) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "pkProductComponentTierTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "ComponentTierTemplateID");
--
-- Definition for index pkProductDeduction (OID = 22029) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "pkProductDeduction"
    PRIMARY KEY ("ProductDeductionID");
--
-- Definition for index pkProductDeductionTemplate (OID = 22031) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "pkProductDeductionTemplate"
    PRIMARY KEY ("ProductDeductionTemplateID");
--
-- Definition for index pkProductDiscount (OID = 22033) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "pkProductDiscount"
    PRIMARY KEY ("ProductID", "ProductVersionID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkProductDiscountTemplate (OID = 22035) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "pkProductDiscountTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkProductPlan (OID = 22037) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "pkProductPlan"
    PRIMARY KEY ("ProductID", "ProductVersionID", "PlanID", "PlanVersionNumber");
--
-- Definition for index pkProductPlanTemplate (OID = 22039) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "pkProductPlanTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index pkProductPurchase (OID = 22041) :
--
ALTER TABLE ONLY "ProductPurchase"
    ADD CONSTRAINT "pkProductPurchase"
    PRIMARY KEY ("ProductPurchaseID");
--
-- Definition for index pkProductPurchaseBusTaskProcessDetail (OID = 22044) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessDetail"
    ADD CONSTRAINT "pkProductPurchaseBusTaskProcessDetail"
    PRIMARY KEY ("ProductPurchaseBusTaskProcessDetailID", "StartDate");
--
-- Definition for index pkProductPurchaseBusTaskProcessLog (OID = 22047) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "pkProductPurchaseBusTaskProcessLog"
    PRIMARY KEY ("ProductPurchaseProductTaskID");
--
-- Definition for index pkProductPurchaseProcessLog (OID = 22049) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "pkProductPurchaseProcessLog"
    PRIMARY KEY ("ProductPurchaseProcessLogID");
--
-- Definition for index pkProductPurchaseReference (OID = 22051) :
--
ALTER TABLE ONLY "ProductPurchaseReference"
    ADD CONSTRAINT "pkProductPurchaseReference"
    PRIMARY KEY ("ProductPurchaseReferenceID", "InvoiceLineItemID");
--
-- Definition for index pkProductRole (OID = 22053) :
--
ALTER TABLE ONLY "ProductRole"
    ADD CONSTRAINT "pkProductRole"
    PRIMARY KEY ("ProductRoleID");
--
-- Definition for index pkProductRoleTemplate (OID = 22055) :
--
ALTER TABLE ONLY "ProductRoleTemplate"
    ADD CONSTRAINT "pkProductRoleTemplate"
    PRIMARY KEY ("ProductRoleTemplateID");
--
-- Definition for index pkProductTemplate (OID = 22057) :
--
ALTER TABLE ONLY "ProductTemplate"
    ADD CONSTRAINT "pkProductTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkRole (OID = 22059) :
--
ALTER TABLE ONLY "Role"
    ADD CONSTRAINT "pkRole"
    PRIMARY KEY ("RoleID");
--
-- Definition for index pkServiceDefinition (OID = 22061) :
--
ALTER TABLE ONLY "ServiceDefinition"
    ADD CONSTRAINT "pkServiceDefinition"
    PRIMARY KEY ("ServiceDefinitionID");
--
-- Definition for index pkServiceDefinitionDetail (OID = 22063) :
--
ALTER TABLE ONLY "ServiceDefinitionDetail"
    ADD CONSTRAINT "pkServiceDefinitionDetail"
    PRIMARY KEY ("ServiceDefinitionDetailID");
--
-- Definition for index pkServiceInterface (OID = 22065) :
--
ALTER TABLE ONLY "ServiceInterface"
    ADD CONSTRAINT "pkServiceInterface"
    PRIMARY KEY ("ServiceInterfaceID");
--
-- Definition for index pkServiceInterfaceProcessLog (OID = 22067) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "pkServiceInterfaceProcessLog"
    PRIMARY KEY ("ServiceInterfaceProcessLogID");
--
-- Definition for index pkShoppingCartBlueprint (OID = 22069) :
--
ALTER TABLE ONLY "ShoppingCartBlueprint"
    ADD CONSTRAINT "pkShoppingCartBlueprint"
    PRIMARY KEY ("ShoppingCartBlueprintID");
--
-- Definition for index pkShoppingCartBlueprintProduct (OID = 22071) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "pkShoppingCartBlueprintProduct"
    PRIMARY KEY ("ShoppingCartBlueprintID", "ProductID", "ProductVersionID");
--
-- Definition for index pkShoppingCartBlueprintProductTemplate (OID = 22073) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "pkShoppingCartBlueprintProductTemplate"
    PRIMARY KEY ("ShoppingCartBlueprintTemplateID", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkShoppingCartBlueprintTemplate (OID = 22075) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "pkShoppingCartBlueprintTemplate"
    PRIMARY KEY ("ShoppingCartBlueprintTemplateID");
--
-- Definition for index pkShoppingCartDeduction (OID = 22077) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "pkShoppingCartDeduction"
    PRIMARY KEY ("ShoppingCartID", "CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkShoppingCartItemProductAttribute (OID = 22079) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "pkShoppingCartItemProductAttribute"
    PRIMARY KEY ("ShoppingCartItemProductAttributeID");
--
-- Definition for index pkShoppingCartItemProductSpecification (OID = 22081) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "pkShoppingCartItemProductSpecification"
    PRIMARY KEY ("ShoppingCartItemProductSpecificationID");
--
-- Definition for index pkStatusType (OID = 22083) :
--
ALTER TABLE ONLY "StatusType"
    ADD CONSTRAINT "pkStatusType"
    PRIMARY KEY ("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkStatusTypeClaim (OID = 22085) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "pkStatusTypeClaim"
    PRIMARY KEY ("StatusTypeClaimID");
--
-- Definition for index pkStatusTypeClaimTemplate (OID = 22087) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "pkStatusTypeClaimTemplate"
    PRIMARY KEY ("StatusTypeClaimTemplateID");
--
-- Definition for index pkStatusTypeRole (OID = 22089) :
--
ALTER TABLE ONLY "StatusTypeRole"
    ADD CONSTRAINT "pkStatusTypeRole"
    PRIMARY KEY ("StatusTypeRoleID");
--
-- Definition for index pkStatusTypeRoleTemplate (OID = 22091) :
--
ALTER TABLE ONLY "StatusTypeRoleTemplate"
    ADD CONSTRAINT "pkStatusTypeRoleTemplate"
    PRIMARY KEY ("StatusTypeRoleTemplateID");
--
-- Definition for index pkStatusTypeStructureTemplate (OID = 22093) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "pkStatusTypeStructureTemplate"
    PRIMARY KEY ("StatusTypeStructureTemplateID");
--
-- Definition for index pkStatusTypeStructureTransition (OID = 22095) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "pkStatusTypeStructureTransition"
    PRIMARY KEY ("StatusTypeStructureTransitionID");
--
-- Definition for index pkStatusTypeStructureTransitionTemplate (OID = 22097) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "pkStatusTypeStructureTransitionTemplate"
    PRIMARY KEY ("StatusTypeStructureTransitionTemplateID");
--
-- Definition for index pkStatusTypeTemplate (OID = 22099) :
--
ALTER TABLE ONLY "StatusTypeTemplate"
    ADD CONSTRAINT "pkStatusTypeTemplate"
    PRIMARY KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkStatusTypeValueTemplate (OID = 22101) :
--
ALTER TABLE ONLY "StatusTypeValueTemplate"
    ADD CONSTRAINT "pkStatusTypeValueTemplate"
    PRIMARY KEY ("StatusTypeValueTemplateID");
--
-- Definition for index pkTransactionOrderPayment (OID = 22103) :
--
ALTER TABLE ONLY "TransactionOrderPayment"
    ADD CONSTRAINT "pkTransactionOrderPayment"
    PRIMARY KEY ("TransactionOrderPaymentID");
--
-- Definition for index pkTransactionOrderPaymentError (OID = 22105) :
--
ALTER TABLE ONLY "TransactionOrderPaymentError"
    ADD CONSTRAINT "pkTransactionOrderPaymentError"
    PRIMARY KEY ("TransactionOrderPaymentErrorID", "CreatedOn");
--
-- Definition for index pkTransactionOrderProcessLog (OID = 22107) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "pkTransactionOrderProcessLog"
    PRIMARY KEY ("TransactionOrderID", "CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkUserAccountLedgerAccount (OID = 22109) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "pkUserAccountLedgerAccount"
    PRIMARY KEY ("UserAccountID", "LedgerAccountID");
--
-- Definition for index pkUserAccountLoginSessionData (OID = 22111) :
--
ALTER TABLE ONLY "UserAccountLoginSessionData"
    ADD CONSTRAINT "pkUserAccountLoginSessionData"
    PRIMARY KEY ("UserAccountLoginSessionDataID");
--
-- Definition for index pkUserAccountOrganisationGroup (OID = 22113) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "pkUserAccountOrganisationGroup"
    PRIMARY KEY ("OrganisationGroupID", "UserAccountOrganisationID");
--
-- Definition for index pkUserAccountOrganisationRole (OID = 22115) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "pkUserAccountOrganisationRole"
    PRIMARY KEY ("UserAccountOrganisationID", "OrganisationRoleID");
--
-- Definition for index pkUserAccountOrganisationSecondaryUserType (OID = 22117) :
--
ALTER TABLE ONLY "UserAccountOrganisationSecondaryUserType"
    ADD CONSTRAINT "pkUserAccountOrganisationSecondaryUserType"
    PRIMARY KEY ("UserAccountOrganisationID", "UserTypeID");
--
-- Definition for index pkUserAccountOrganisationStatus (OID = 22119) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "pkUserAccountOrganisationStatus"
    PRIMARY KEY ("UserAccountOrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkUserAccountOrganisationTeam (OID = 22121) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "pkUserAccountOrganisationTeam"
    PRIMARY KEY ("UserAccountOrganisationID", "OrganisationTeamID");
--
-- Definition for index pkUserShoppingCart (OID = 22123) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "pkUserShoppingCart"
    PRIMARY KEY ("ShoppingCartID");
--
-- Definition for index pkUserType (OID = 22125) :
--
ALTER TABLE ONLY "UserType"
    ADD CONSTRAINT "pkUserType"
    PRIMARY KEY ("UserTypeID");
--
-- Definition for index pkWorkflowActionParameterNotificationConstruct (OID = 22127) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "pkWorkflowActionParameterNotificationConstruct"
    PRIMARY KEY ("WorkflowActionParameterNotificationConstructID", "WorkflowActionID", "WorkflowParameterID", "OrganisationTypeID", "UserTypeID", "WorkflowActionParameterNotificationConstructTemplateVersion", "NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index pkWorkflowActionParameterNotificationConstructTemplate (OID = 22129) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "pkWorkflowActionParameterNotificationConstructTemplate"
    PRIMARY KEY ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionTemplateID", "WorkflowParameterTemplateID", "OrganisationTypeID", "UserTypeID", "WorkflowActionParameterNotificationConstructTemplateVersion", "NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index pkWorkflowClaimTemplate (OID = 22131) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "pkWorkflowClaimTemplate"
    PRIMARY KEY ("WorkflowClaimTemplateID");
--
-- Definition for index pkWorkflowDecisionError (OID = 22133) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "pkWorkflowDecisionError"
    PRIMARY KEY ("WorkflowDecisionErrorID");
--
-- Definition for index pkWorkflowDecisionErrorTemplate (OID = 22135) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionErrorTemplate"
    PRIMARY KEY ("WorkflowDecisionErrorTemplateID");
--
-- Definition for index pkWorkflowDecisionFailure (OID = 22137) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "pkWorkflowDecisionFailure"
    PRIMARY KEY ("WorkflowDecisionFailureID");
--
-- Definition for index pkWorkflowDecisionFailureTemplate (OID = 22139) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionFailureTemplate"
    PRIMARY KEY ("WorkflowDecisionFailureTemplateID");
--
-- Definition for index pkWorkflowDecisionSuccess (OID = 22141) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "pkWorkflowDecisionSuccess"
    PRIMARY KEY ("WorkflowDecisionSuccessID");
--
-- Definition for index pkWorkflowDecisionSuccessTemplate (OID = 22143) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionSuccessTemplate"
    PRIMARY KEY ("WorkflowDecisionSuccessTemplateID");
--
-- Definition for index pkWorkflowInstanceExecutionTrace (OID = 22145) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionTrace"
    ADD CONSTRAINT "pkWorkflowInstanceExecutionTrace"
    PRIMARY KEY ("WorkflowInstanceExecutionTraceID");
--
-- Definition for index pkWorkflowInstanceRestriction (OID = 22147) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "pkWorkflowInstanceRestriction"
    PRIMARY KEY ("WorkflowInstanceID", "UserAccountOrganisationID");
--
-- Definition for index pkWorkflowNotificationConstruct (OID = 22149) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "pkWorkflowNotificationConstruct"
    PRIMARY KEY ("WorkflowNotificationConstructID");
--
-- Definition for index pkWorkflowNotificationConstructTemplate (OID = 22151) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "pkWorkflowNotificationConstructTemplate"
    PRIMARY KEY ("WorkflowNotificationConstructTemplateID");
--
-- Definition for index pkWorkflowRole (OID = 22153) :
--
ALTER TABLE ONLY "WorkflowRole"
    ADD CONSTRAINT "pkWorkflowRole"
    PRIMARY KEY ("WorkflowRoleID");
--
-- Definition for index pkWorkflowRoleClaim (OID = 22155) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "pkWorkflowRoleClaim"
    PRIMARY KEY ("WorkflowClaimID");
--
-- Definition for index pkWorkflowRoleTemplate (OID = 22157) :
--
ALTER TABLE ONLY "WorkflowRoleTemplate"
    ADD CONSTRAINT "pkWorkflowRoleTemplate"
    PRIMARY KEY ("WorkflowRoleTemplateID");
--
-- Definition for index pkWorkflowStatusType (OID = 22159) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "pkWorkflowStatusType"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkWorkflowStatusTypeTemplate (OID = 22161) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "pkWorkflowStatusTypeTemplate"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index subscription_pkey (OID = 22163) :
--
ALTER TABLE ONLY subscription
    ADD CONSTRAINT subscription_pkey
    PRIMARY KEY (subscriberendpoint, messagetype);
--
-- Definition for index timeoutentity_pkey (OID = 22165) :
--
ALTER TABLE ONLY timeoutentity
    ADD CONSTRAINT timeoutentity_pkey
    PRIMARY KEY (id);
--
-- Definition for index pkLRDocument (OID = 22167) :
--
SET search_path = sts, pg_catalog;
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "pkLRDocument"
    PRIMARY KEY ("LRDocumentID");
--
-- Definition for index pkLRRegisterExtract (OID = 22169) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "pkLRRegisterExtract"
    PRIMARY KEY ("LRRegisterExtractID");
--
-- Definition for index pkLRTitle (OID = 22171) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "pkLRTitle"
    PRIMARY KEY ("LRTitleID");
--
-- Definition for index pkStsAccountDocument (OID = 22173) :
--
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "pkStsAccountDocument"
    PRIMARY KEY ("StsAccountDocument");
--
-- Definition for index pkStsActor (OID = 22175) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "pkStsActor"
    PRIMARY KEY ("StsActorID");
--
-- Definition for index pkStsActorAuthority (OID = 22177) :
--
ALTER TABLE ONLY "StsActorAuthority"
    ADD CONSTRAINT "pkStsActorAuthority"
    PRIMARY KEY ("StsActorAuthorityID");
--
-- Definition for index pkStsActorProcessLog (OID = 22179) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "pkStsActorProcessLog"
    PRIMARY KEY ("StsActorProcessLogID");
--
-- Definition for index pkStsActorPurchase (OID = 22181) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "pkStsActorPurchase"
    PRIMARY KEY ("StsActorPurchaseID");
--
-- Definition for index pkStsActorStructure (OID = 22183) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "pkStsActorStructure"
    PRIMARY KEY ("StsActorStructureID");
--
-- Definition for index pkStsActorStsSearch (OID = 22185) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "pkStsActorStsSearch"
    PRIMARY KEY ("StsActorID", "StsSearchID");
--
-- Definition for index pkStsActorStsTransaction (OID = 22187) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "pkStsActorStsTransaction"
    PRIMARY KEY ("StsActorID", "StsTransactionID");
--
-- Definition for index pkStsAuthority (OID = 22189) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "pkStsAuthority"
    PRIMARY KEY ("StsAuthorityID");
--
-- Definition for index pkStsAuthorityStsDocument (OID = 22191) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "pkStsAuthorityStsDocument"
    PRIMARY KEY ("StsAuthorityID", "StsDocumentID");
--
-- Definition for index pkStsDocument (OID = 22193) :
--
ALTER TABLE ONLY "StsDocument"
    ADD CONSTRAINT "pkStsDocument"
    PRIMARY KEY ("StsDocumentID");
--
-- Definition for index pkStsDocumentProcessLog (OID = 22195) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "pkStsDocumentProcessLog"
    PRIMARY KEY ("StsDocumentProcessLog");
--
-- Definition for index pkStsInvite (OID = 22197) :
--
ALTER TABLE ONLY "StsInvite"
    ADD CONSTRAINT "pkStsInvite"
    PRIMARY KEY ("StsInviteID");
--
-- Definition for index pkStsInviteProcessLog (OID = 22199) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "pkStsInviteProcessLog"
    PRIMARY KEY ("StatusTypeValueID", "StatusTypeVersionNumber", "CreatedOn", "StsInviteID", "StatusTypeID");
--
-- Definition for index pkStsProperty (OID = 22201) :
--
ALTER TABLE ONLY "PropertyDetail"
    ADD CONSTRAINT "pkStsProperty"
    PRIMARY KEY ("PropertyDetailID");
--
-- Definition for index pkStsSearch (OID = 22203) :
--
ALTER TABLE ONLY "StsSearch"
    ADD CONSTRAINT "pkStsSearch"
    PRIMARY KEY ("StsSearchID");
--
-- Definition for index pkStsSearchDetail (OID = 22205) :
--
ALTER TABLE ONLY "StsSearchDetail"
    ADD CONSTRAINT "pkStsSearchDetail"
    PRIMARY KEY ("StsSearchDetailID");
--
-- Definition for index pkStsSearchProcessLog (OID = 22207) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "pkStsSearchProcessLog"
    PRIMARY KEY ("StsSearchID", "CreatedOn", "StatusTypeID", "StatusTypeValueID", "StatusTypeVersionNumber");
--
-- Definition for index pkStsSearchProperty (OID = 22209) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "pkStsSearchProperty"
    PRIMARY KEY ("StsSearchPropertyDetailID");
--
-- Definition for index pkStsSearchRelation (OID = 22211) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "pkStsSearchRelation"
    PRIMARY KEY ("BuyerStsSearchID", "SellerStsSearchID");
--
-- Definition for index pkStsSourceOfFunds (OID = 22213) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "pkStsSourceOfFunds"
    PRIMARY KEY ("StsSourceOfFunds");
--
-- Definition for index pkStsSourceOfFundsStsDocument (OID = 22215) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "pkStsSourceOfFundsStsDocument"
    PRIMARY KEY ("StsSourceOfFundsStsDocumentID");
--
-- Definition for index pkStsTransaction (OID = 22217) :
--
ALTER TABLE ONLY "StsTransaction"
    ADD CONSTRAINT "pkStsTransaction"
    PRIMARY KEY ("StsTransactionID");
--
-- Definition for index pkStsTransactionComponent (OID = 22219) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "pkStsTransactionComponent"
    PRIMARY KEY ("StsTransactionComponentID");
--
-- Definition for index pkStsTransactionProcessLog (OID = 22221) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "pkStsTransactionProcessLog"
    PRIMARY KEY ("CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StsTransactionID");
--
-- Definition for index pkStsTransactionPropertyDetail (OID = 22223) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "pkStsTransactionPropertyDetail"
    PRIMARY KEY ("StsTransactionPropertyDetailID");
--
-- Definition for index fk_LegalOrganisationDetails_Organisation (OID = 22352) :
--
SET search_path = legal, pg_catalog;
ALTER TABLE ONLY "LegalOrganisationDetails"
    ADD CONSTRAINT "fk_LegalOrganisationDetails_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index DefaultOrganisationUserTargetTemplate_fk (OID = 22357) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "DefaultOrganisationUserTargetTemplate_fk"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK OrganisationUnit (OID = 22362) :
--
ALTER TABLE ONLY "OrganisationUnit"
    ADD CONSTRAINT "FK OrganisationUnit"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK UnitMap (OID = 22367) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "FK UnitMap"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory (OID = 22372) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "FK_ClassificationType_ClassificationTypeCategory"
    FOREIGN KEY ("ClassificationTypeCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory2 (OID = 22377) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "FK_ClassificationType_ClassificationTypeCategory2"
    FOREIGN KEY ("ParentClassificationTypeCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroup (OID = 22382) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroup"
    FOREIGN KEY ("DefaultOrganisationGroupID") REFERENCES "DefaultOrganisationGroup"("DefaultOrganisationGroupID");
--
-- Definition for index FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroupT (OID = 22387) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroupT"
    FOREIGN KEY ("DefaultOrganisationGroupTemplateID") REFERENCES "DefaultOrganisationGroupTemplate"("DefaultOrganisationGroupTemplateID");
--
-- Definition for index FK_DefaultonGroupDefault_DefaultOrganisationRole (OID = 22392) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "FK_DefaultonGroupDefault_DefaultOrganisationRole"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index FK_DefaultonGroupDefault_DefaultOrganisationRoleT (OID = 22397) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "FK_DefaultonGroupDefault_DefaultOrganisationRoleT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index FK_GroupTemplateRole_GroupTemplate (OID = 22402) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "FK_GroupTemplateRole_GroupTemplate"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index FK_GroupTemplateRole_RoleTemplate (OID = 22407) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "FK_GroupTemplateRole_RoleTemplate"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index FK_Module_ModuleTemplate (OID = 22412) :
--
ALTER TABLE ONLY "Module"
    ADD CONSTRAINT "FK_Module_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index FK_OrganisationStructure (OID = 22417) :
--
ALTER TABLE ONLY "OrganisationStructure"
    ADD CONSTRAINT "FK_OrganisationStructure"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK_OrganisationUnit (OID = 22422) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "FK_OrganisationUnit"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK_Plugin_PluginTemplate (OID = 22427) :
--
ALTER TABLE ONLY "Plugin"
    ADD CONSTRAINT "FK_Plugin_PluginTemplate"
    FOREIGN KEY ("PluginTemplateID", "PluginTemplateVersionNumber") REFERENCES "PluginTemplate"("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index FK_StateItem_State (OID = 22432) :
--
ALTER TABLE ONLY "StateItem"
    ADD CONSTRAINT "FK_StateItem_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index FK_WorkflowActionTemplate_WorkflowTemplate (OID = 22437) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowActionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowDecisionFailureActionTemplate (OID = 22442) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "FK_WorkflowDecisionFailureActionTemplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowDecisionSuccessActionTplate (OID = 22447) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "FK_WorkflowDecisionSuccessActionTplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTemplate (OID = 22452) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "FK_WorkflowHierarchyTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate (OID = 22457) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionTemplate_WorkflowTemplate (OID = 22462) :
--
ALTER TABLE ONLY "WorkflowTransistionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowActionTe (OID = 22467) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowActionTe"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowActionTemplate_Wormplate (OID = 22472) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowActionTemplate_Wormplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTrmplate (OID = 22477) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTrmplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowDecisionTplate (OID = 22482) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowDecisionTplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_dboLinkedAccountCeAccountID (OID = 22487) :
--
ALTER TABLE ONLY "LinkedAccountClaims"
    ADD CONSTRAINT "FK_dboLinkedAccountCeAccountID"
    FOREIGN KEY ("LinkedAccount_ProviderName", "LinkedAccount_ProviderAccountID") REFERENCES "LinkedAccounts"("ProviderName", "ProviderAccountID") ON DELETE CASCADE;
--
-- Definition for index FK_dboLinkedAccounts_dboUserAccounts_UserAccount_ID (OID = 22492) :
--
ALTER TABLE ONLY "LinkedAccounts"
    ADD CONSTRAINT "FK_dboLinkedAccounts_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboPasswordResetSecrets_dboUserAccounts_UserAccount_ID (OID = 22497) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT "FK_dboPasswordResetSecrets_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboTwoFactorAuthTokens_dboUserAccounts_UserAccount_ID (OID = 22502) :
--
ALTER TABLE ONLY "TwoFactorAuthTokens"
    ADD CONSTRAINT "FK_dboTwoFactorAuthTokens_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserAccountDetail_dboUserAccounts_UserID (OID = 22507) :
--
ALTER TABLE ONLY "UserAccountDetail"
    ADD CONSTRAINT "FK_dboUserAccountDetail_dboUserAccounts_UserID"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserAccountOrganisationGroup_dboOrganisupID (OID = 22512) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "FK_dboUserAccountOrganisationGroup_dboOrganisupID"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserCertificates_dboUserAccounts_UserAccount_ID (OID = 22517) :
--
ALTER TABLE ONLY "UserCertificates"
    ADD CONSTRAINT "FK_dboUserCertificates_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserClaims_dboUserAccounts_UserAccount_ID (OID = 22522) :
--
ALTER TABLE ONLY "UserClaims"
    ADD CONSTRAINT "FK_dboUserClaims_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index InterfacePanelFDValidationOrgTypeUserTypeTemplate_fk (OID = 22527) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrgTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFDValidationOrgTypeUserTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFDValidationOrganisationTypeUserType_fk (OID = 22532) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelFDValidationOrganisationTypeUserType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationTypeTemplate_fk (OID = 22537) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationType_fk (OID = 22542) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationTemplate_fk (OID = 22547) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidation_fk (OID = 22552) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidation"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidation_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeTemplate_fk (OID = 22557) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserTypeTemplate_fk (OID = 22562) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserType_fk (OID = 22567) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationType_fk (OID = 22572) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidation_fk (OID = 22577) :
--
ALTER TABLE ONLY "InterfacePanelValidation"
    ADD CONSTRAINT "InterfacePanelValidation_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk (OID = 22582) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk"
    FOREIGN KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion") REFERENCES "NotificationConstructGroupTemplate"("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk2 (OID = 22587) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk2"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk3 (OID = 22592) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk3"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk4 (OID = 22597) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk4"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk (OID = 22602) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk"
    FOREIGN KEY ("NotificationConstructGroupID", "NotificationConstructGroupVersion") REFERENCES "NotificationConstructGroup"("NotificationConstructGroupID", "NotificationConstructGroupVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk2 (OID = 22607) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk2"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk3 (OID = 22612) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk3"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index NotificationConstructGroup_fk (OID = 22617) :
--
ALTER TABLE ONLY "NotificationConstructGroup"
    ADD CONSTRAINT "NotificationConstructGroup_fk"
    FOREIGN KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion") REFERENCES "NotificationConstructGroupTemplate"("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index OrganisationFinancialDetail_fk (OID = 22622) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "OrganisationFinancialDetail_fk"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index TFEventTFEventMessageSubscriber_fk (OID = 22627) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_fk"
    FOREIGN KEY ("TFEventID") REFERENCES "TFEvent"("TFEventID");
--
-- Definition for index TFEventTFEventMessageSubscriber_fk1 (OID = 22632) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_fk1"
    FOREIGN KEY ("TFEventMessageSubscriberID") REFERENCES "TFEventMessageSubscriber"("TFEventMessageSubscriberID");
--
-- Definition for index TFEvent_fk (OID = 22637) :
--
ALTER TABLE ONLY "TFEvent"
    ADD CONSTRAINT "TFEvent_fk"
    FOREIGN KEY ("TFEventTypeID") REFERENCES "TFEventType"("TFEventTypeID");
--
-- Definition for index WorkflowActionParameterNotificationConstructTemplate_fk (OID = 22642) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "WorkflowActionParameterNotificationConstructTemplate_fk"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionParameterTemplate"("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameterNotificationConstruct_fk (OID = 22647) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "WorkflowActionParameterNotificationConstruct_fk"
    FOREIGN KEY ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion") REFERENCES "WorkflowActionParameterNotificationConstructTemplate"("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion");
--
-- Definition for index WorkflowTreeStructureActionTemplate_fk (OID = 22652) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_fk"
    FOREIGN KEY ("WorkflowTreeStructureTemplateID") REFERENCES "WorkflowTreeStructureTemplate"("WorkflowTreeStructureTemplateID");
--
-- Definition for index WorkflowTreeStructureActionTemplate_fk1 (OID = 22657) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_fk1"
    FOREIGN KEY ("WorkflowActionTemplateID") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID");
--
-- Definition for index WorkflowTreeStructureAction_fk (OID = 22662) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_fk"
    FOREIGN KEY ("WorkflowTreeStructureID") REFERENCES "WorkflowTreeStructure"("WorkflowTreeStructureID");
--
-- Definition for index WorkflowTreeStructureAction_fk1 (OID = 22667) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_fk1"
    FOREIGN KEY ("WorkflowActionID") REFERENCES "WorkflowAction"("WorkflowActionID");
--
-- Definition for index WorkflowTreeStructureTemplate_fk (OID = 22672) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index WorkflowTreeStructure_fk (OID = 22677) :
--
ALTER TABLE ONLY "WorkflowTreeStructure"
    ADD CONSTRAINT "WorkflowTreeStructure_fk"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber") ON UPDATE CASCADE ON DELETE CASCADE;
--
-- Definition for index fk_Account_Contact (OID = 22682) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_Account_Organisation (OID = 22687) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_Organisation"
    FOREIGN KEY ("ContactOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Account_OrganisationContact (OID = 22692) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_OrganisationContact"
    FOREIGN KEY ("ParentOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_AccountingPeriod_Organisation (OID = 22697) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "fk_AccountingPeriod_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ActorClaim_Actor (OID = 22702) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Actor"
    FOREIGN KEY ("ActorID") REFERENCES "Actor"("ActorID");
--
-- Definition for index fk_ActorClaim_Operation (OID = 22707) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ActorClaim_Resource (OID = 22712) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ActorClaim_Role (OID = 22717) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ActorClaim_State (OID = 22722) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ActorClaim_StateItem (OID = 22727) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_AddressChronology_Address (OID = 22732) :
--
ALTER TABLE ONLY "AddressChronology"
    ADD CONSTRAINT "fk_AddressChronology_Address"
    FOREIGN KEY ("ParentID") REFERENCES "Address"("AddressID");
--
-- Definition for index fk_Address_CountryCode (OID = 22737) :
--
ALTER TABLE ONLY "Address"
    ADD CONSTRAINT "fk_Address_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_ApplicationStageWorkflow_ApplicationStage (OID = 22742) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "fk_ApplicationStageWorkflow_ApplicationStage"
    FOREIGN KEY ("ApplicationStageID") REFERENCES "ApplicationStage"("ApplicationStageID");
--
-- Definition for index fk_ApplicationStageWorkflow_Workflow (OID = 22747) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "fk_ApplicationStageWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "VersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_ArtefactClaimTemplate_ArtefactRoleTemplate (OID = 22752) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_ArtefactRoleTemplate"
    FOREIGN KEY ("ArtefactRoleTemplateID") REFERENCES "ArtefactRoleTemplate"("ArtefactRoleTemplateID");
--
-- Definition for index fk_ArtefactClaimTemplate_ArtefactTemplate (OID = 22757) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactClaimTemplate_Operation (OID = 22762) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ArtefactClaimTemplate_Resource (OID = 22767) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ArtefactClaimTemplate_Role (OID = 22772) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ArtefactClaimTemplate_State (OID = 22777) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ArtefactClaimTemplate_StateItem (OID = 22782) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ArtefactClaim_Artefact (OID = 22787) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactClaim_ArtefactRole (OID = 22792) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_ArtefactRole"
    FOREIGN KEY ("ArtefactRoleID") REFERENCES "ArtefactRole"("ArtefactRoleID");
--
-- Definition for index fk_ArtefactClaim_Operation (OID = 22797) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ArtefactClaim_Resource (OID = 22802) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ArtefactClaim_Role (OID = 22807) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ArtefactClaim_State (OID = 22812) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ArtefactClaim_StateItem (OID = 22817) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ArtefactDepenactDependencyTemplate (OID = 22822) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDepenactDependencyTemplate"
    FOREIGN KEY ("ArtefactDependencyTemplateID") REFERENCES "ArtefactDependencyTemplate"("ArtefactDependencyTemplateID");
--
-- Definition for index fk_ArtefactDependencyStatusTypeTemplate_StatusTypeValueTemplate (OID = 22827) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusTypeTemplate_StatusTypeValueTemplate"
    FOREIGN KEY ("StatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_ArtefactDependencyStatusType_ArtefactDependency (OID = 22832) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_ArtefactDependency"
    FOREIGN KEY ("ArtefactDependencyID") REFERENCES "ArtefactDependency"("ArtefactDependencyID");
--
-- Definition for index fk_ArtefactDependencyStatusType_ArtefactStatusType (OID = 22837) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_ArtefactStatusType"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber") REFERENCES "ArtefactStatusType"("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ArtefactDependencyStatusType_StatusTypeValue (OID = 22842) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ArtefactDependencyTemplate_ArtefactTemplate (OID = 22847) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "fk_ArtefactDependencyTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactDependency_Artefact (OID = 22852) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_ArtefactDependency_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactDependency_ArtefactDependencyTemplate (OID = 22857) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_ArtefactDependency_ArtefactDependencyTemplate"
    FOREIGN KEY ("ArtefactDependencyTemplateID") REFERENCES "ArtefactDependencyTemplate"("ArtefactDependencyTemplateID");
--
-- Definition for index fk_ArtefactDepentefactStatusTypeTemplate (OID = 22862) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDepentefactStatusTypeTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "ArtefactStatusTypeTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotificationConstructTemplate_NotificationConstructT (OID = 22867) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ArtefactNotificationConstructTemplate_NotificationConstructT"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotificationConstruct_NotificationConstruct (OID = 22872) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "fk_ArtefactNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_ArtefactNotificationTemplate_ArtefactTemplate (OID = 22877) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ArtefactNotificationTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotification_Artefact (OID = 22882) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "fk_ArtefactNotification_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactProductTemplate_ArtefactTemplate (OID = 22887) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "fk_ArtefactProductTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactProductTemplate_ProductTemplate (OID = 22892) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "fk_ArtefactProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ArtefactProduct_Artefact (OID = 22897) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "fk_ArtefactProduct_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactProduct_Product (OID = 22902) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "fk_ArtefactProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ArtefactRoleTemplate_ArtefactTemplate (OID = 22907) :
--
ALTER TABLE ONLY "ArtefactRoleTemplate"
    ADD CONSTRAINT "fk_ArtefactRoleTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactRole_Artefact (OID = 22912) :
--
ALTER TABLE ONLY "ArtefactRole"
    ADD CONSTRAINT "fk_ArtefactRole_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactStatusTypeTemplate_ArtefactTemplate (OID = 22917) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactStatusTypeTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactStatusTypeTemplate_StatusTypeTemplate (OID = 22922) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ArtefactStatusType_Artefact (OID = 22927) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "fk_ArtefactStatusType_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactStatusType_StatusType (OID = 22932) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "fk_ArtefactStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ArtefactSubscriptionTemplate_ArtefactTemplate (OID = 22937) :
--
ALTER TABLE ONLY "ArtefactSubscriptionTemplate"
    ADD CONSTRAINT "fk_ArtefactSubscriptionTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactSubscription_Artefact (OID = 22942) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "fk_ArtefactSubscription_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactSubscription_PlanSubscription (OID = 22947) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "fk_ArtefactSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_ArtefactWorkflowTemplate_ArtefactTemplate (OID = 22952) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "fk_ArtefactWorkflowTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactWorkflowTemplate_WorkflowTemplate (OID = 22957) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "fk_ArtefactWorkflowTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_ArtefactWorkflow_Artefact (OID = 22962) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "fk_ArtefactWorkflow_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactWorkflow_Workflow (OID = 22967) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "fk_ArtefactWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Artefact_ArtefactTemplate (OID = 22972) :
--
ALTER TABLE ONLY "Artefact"
    ADD CONSTRAINT "fk_Artefact_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_Artefactlate_Artefact (OID = 22977) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_Artefactlate_Artefact"
    FOREIGN KEY ("DependencyArtefactID", "DependencyArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_Artefactlate_ArtefactTemplate (OID = 22982) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "fk_Artefactlate_ArtefactTemplate"
    FOREIGN KEY ("DependencyArtefactTemplateID", "DependencyArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_AttachmenDetailRole_OrganisationRole (OID = 22987) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "fk_AttachmenDetailRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_AttachmentDetailGroup_AttachmentDetail (OID = 22992) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "fk_AttachmentDetailGroup_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationGroup (OID = 22997) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "fk_AttachmentDetailGroup_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_AttachmentDetail_Organisation (OID = 23002) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "fk_AttachmentDetail_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_AttachmentDetail_RepositoryStructure (OID = 23007) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "fk_AttachmentDetail_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_AttachmentRole_AttachmentDetail (OID = 23012) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "fk_AttachmentRole_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_Attachment_AttachmentDetail (OID = 23017) :
--
ALTER TABLE ONLY "Attachment"
    ADD CONSTRAINT "fk_Attachment_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_Billing_BillingTemplate (OID = 23022) :
--
ALTER TABLE ONLY "Billing"
    ADD CONSTRAINT "fk_Billing_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_BusMessageContent_BusMessage (OID = 23027) :
--
ALTER TABLE ONLY "BusMessageContent"
    ADD CONSTRAINT "fk_BusMessageContent_BusMessage"
    FOREIGN KEY ("BusMessageID") REFERENCES "BusMessage"("BusMessageID");
--
-- Definition for index fk_BusMessageProcessLog_StatusType (OID = 23032) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_BusMessageProcessLog_StatusTypeValue (OID = 23037) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_BusMessageStatus_BusMessage (OID = 23042) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageStatus_BusMessage"
    FOREIGN KEY ("BusMessageID") REFERENCES "BusMessage"("BusMessageID");
--
-- Definition for index fk_BusTaskProcessLog_BusTaskSchedule (OID = 23047) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskProcessLog_BusTaskSchedule"
    FOREIGN KEY ("BusTaskScheduleID") REFERENCES "BusTaskSchedule"("BusTaskScheduleID");
--
-- Definition for index fk_BusTaskScheduleProcessLog_StatusType (OID = 23052) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskScheduleProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_BusTaskScheduleProcessLog_StatusTypeValue (OID = 23057) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskScheduleProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_BusTaskSchedule_BusTask (OID = 23062) :
--
ALTER TABLE ONLY "BusTaskSchedule"
    ADD CONSTRAINT "fk_BusTaskSchedule_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_BusTask_BusTaskHandler (OID = 23067) :
--
ALTER TABLE ONLY "BusTask"
    ADD CONSTRAINT "fk_BusTask_BusTaskHandler"
    FOREIGN KEY ("BusTaskHandlerID") REFERENCES "BusTaskHandler"("BusTaskHandlerID");
--
-- Definition for index fk_ClaimTarget_Operation (OID = 23072) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ClaimTarget_OrganisationType (OID = 23077) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ClaimTarget_Resource (OID = 23082) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ClaimTarget_UserType (OID = 23087) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ClassificationTypeCategory_ClassificationTypeCategoryID (OID = 23092) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_ClassificationTypeCategory_ClassificationTypeCategoryID"
    FOREIGN KEY ("UserAccountArchiveCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index fk_ClassificationType_ClassificationTypeID (OID = 23097) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_ClassificationType_ClassificationTypeID"
    FOREIGN KEY ("UserAccountArchiveTypeID") REFERENCES "ClassificationType"("ClassificationTypeID");
--
-- Definition for index fk_ComponentTier_OrganisationType (OID = 23102) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "fk_ComponentTier_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ComponentTier_OrganisationType (OID = 23107) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "fk_ComponentTier_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ComponentTier_UserType (OID = 23112) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "fk_ComponentTier_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ComponentTier_UserType (OID = 23117) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "fk_ComponentTier_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ContactName_Contact (OID = 23122) :
--
ALTER TABLE ONLY "ContactName"
    ADD CONSTRAINT "fk_ContactName_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactOrganisationRegulator_Contact (OID = 23127) :
--
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "fk_ContactOrganisationRegulator_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactPhone_Contact (OID = 23132) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "fk_ContactPhone_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactPhone_CountryCode (OID = 23137) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "fk_ContactPhone_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryCode_CurrencyCode (OID = 23142) :
--
ALTER TABLE ONLY "CountryCode"
    ADD CONSTRAINT "fk_CountryCode_CurrencyCode"
    FOREIGN KEY ("CurrencyCode") REFERENCES "CurrencyCode"("CurrencyCode");
--
-- Definition for index fk_CountryDeductionTemplate_CountryCode (OID = 23147) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "fk_CountryDeductionTemplate_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryDeductionTemplate_DeductionTemplate (OID = 23152) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "fk_CountryDeductionTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_CountryDeduction_CountryCode (OID = 23157) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "fk_CountryDeduction_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryDeduction_Deduction (OID = 23162) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "fk_CountryDeduction_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionComponentTierTemplate_ComponentTierTemplate (OID = 23167) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "fk_DeductionComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_DeductionComponentTierTemplate_DeductionTemplate (OID = 23172) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "fk_DeductionComponentTierTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_DeductionComponentTier_ComponentTier (OID = 23177) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "fk_DeductionComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_DeductionComponentTier_Deduction (OID = 23182) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "fk_DeductionComponentTier_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionProductTemplate_DeductionTemplate (OID = 23187) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "fk_DeductionProductTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_DeductionProductTemplate_ProductTemplate (OID = 23192) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "fk_DeductionProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DeductionProduct_Deduction (OID = 23197) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "fk_DeductionProduct_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionProduct_Product (OID = 23202) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "fk_DeductionProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DeductionTemplate_OrganisationType (OID = 23207) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "fk_DeductionTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DeductionTemplate_UserType (OID = 23212) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "fk_DeductionTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_Deduction_DeductionTemplate (OID = 23217) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_Deduction_OrganisationType (OID = 23222) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_Deduction_UserType (OID = 23227) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationArtefact_Artefact (OID = 23232) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_ArtefactT (OID = 23237) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_ArtefactT"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_DefaultOrganisation (OID = 23242) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_DefaultOrganisationT (OID = 23247) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBranch_DefaultOrganisation (OID = 23252) :
--
ALTER TABLE ONLY "DefaultOrganisationBranch"
    ADD CONSTRAINT "fk_DefaultOrganisationBranch_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBranch_DefaultOrganisationT (OID = 23257) :
--
ALTER TABLE ONLY "DefaultOrganisationBranchTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBranch_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBucket_BucketTemplate (OID = 23262) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_BucketTemplate"
    FOREIGN KEY ("BucketTemplateID") REFERENCES "BucketTemplate"("BucketTemplateID");
--
-- Definition for index fk_DefaultOrganisationBucket_BucketTemplateT (OID = 23267) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_BucketTemplateT"
    FOREIGN KEY ("BucketTemplateID") REFERENCES "BucketTemplate"("BucketTemplateID");
--
-- Definition for index fk_DefaultOrganisationBucket_DefaultOrganisation (OID = 23272) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBucket_DefaultOrganisationT (OID = 23277) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationGr (OID = 23282) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationGr"
    FOREIGN KEY ("DefaultOrganisationGroupTemplateID") REFERENCES "DefaultOrganisationGroupTemplate"("DefaultOrganisationGroupTemplateID");
--
-- Definition for index fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationUs (OID = 23287) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationUs"
    FOREIGN KEY ("DefaultOrganisationUserTargetTemplateID") REFERENCES "DefaultOrganisationUserTargetTemplate"("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index fk_DefaultOrganisationGroupTarget_DefaultOrganisationGroup (OID = 23292) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTarget_DefaultOrganisationGroup"
    FOREIGN KEY ("DefaultOrganisationGroupID") REFERENCES "DefaultOrganisationGroup"("DefaultOrganisationGroupID");
--
-- Definition for index fk_DefaultOrganisationGroupTarget_DefaultOrganisationUserTarget (OID = 23297) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTarget_DefaultOrganisationUserTarget"
    FOREIGN KEY ("DefaultOrganisationUserTargetID") REFERENCES "DefaultOrganisationUserTarget"("DefaultOrganisationUserTargetID");
--
-- Definition for index fk_DefaultOrganisationGroup_DefaultOrganisation (OID = 23302) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroup_DefaultOrganisationT (OID = 23307) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroup_Group (OID = 23312) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_Group"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index fk_DefaultOrganisationGroup_GroupT (OID = 23317) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_GroupT"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index fk_DefaultOrganisationLedgerTemplate_DefaultOrganisationTemplat (OID = 23322) :
--
ALTER TABLE ONLY "DefaultOrganisationLedgerTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationLedgerTemplate_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationLedger_DefaultOrganisationTemplat (OID = 23327) :
--
ALTER TABLE ONLY "DefaultOrganisationLedger"
    ADD CONSTRAINT "fk_DefaultOrganisationLedger_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_DefaulanisationT (OID = 23332) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_DefaulanisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_DefaultOrganisation (OID = 23337) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_Module (OID = 23342) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_ModuleT (OID = 23347) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_ModuleT"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstructTemplate_Notificatio (OID = 23352) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstructTemplate_Notificatio"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstruct_DefaultOrganisation (OID = 23357) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstruct_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstruct_NotificationConstru (OID = 23362) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstruct_NotificationConstru"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethodTemplate_DefaultOrganisation (OID = 23367) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethodTemplate_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethodTemplate_GlobalPaymentMethod (OID = 23372) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethodTemplate_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_DefaultOrganisationPaymentMethod_DefaultOrganisation (OID = 23377) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethod_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethod_GlobalPaymentMethod (OID = 23382) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethod_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_DefaultOrganisationProductTemplate_DefaultOrganisationTempla (OID = 23387) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationProductTemplate_DefaultOrganisationTempla"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationProductTemplate_ProductTemplate (OID = 23392) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DefaultOrganisationProduct_DefaultOrganisation (OID = 23397) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "fk_DefaultOrganisationProduct_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationProduct_Product (OID = 23402) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "fk_DefaultOrganisationProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_DefaultOrganisationRole (OID = 23407) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_DefaultOrganisationRole"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_DefaultOrganisationRoleT (OID = 23412) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_DefaultOrganisationRoleT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_Operation (OID = 23417) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_OperationT (OID = 23422) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_OperationT"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_Resource (OID = 23427) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_ResourceT (OID = 23432) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_ResourceT"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_State (OID = 23437) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateItem (OID = 23442) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateItemT (OID = 23447) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateItemT"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateT (OID = 23452) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateT"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_DefaultOrganisationRoleTargetTemplate_DefaultOrganisationUse (OID = 23457) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTargetTemplate_DefaultOrganisationUse"
    FOREIGN KEY ("DefaultOrganisationUserTargetTemplateID") REFERENCES "DefaultOrganisationUserTargetTemplate"("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisation (OID = 23462) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisationT (OID = 23467) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisationUserTarget (OID = 23472) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisationUserTarget"
    FOREIGN KEY ("DefaultOrganisationUserTargetID") REFERENCES "DefaultOrganisationUserTarget"("DefaultOrganisationUserTargetID");
--
-- Definition for index fk_DefaultOrganisationRole_DefaultOrganisation (OID = 23477) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationRole_DefaultOrganisationT (OID = 23482) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationRole_Role (OID = 23487) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_DefaultOrganisationRole_RoleT (OID = 23492) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_RoleT"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProductTemplate_DefaultOrgani (OID = 23497) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProductTemplate_DefaultOrgani"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProductTemplate_ShoppingCartP (OID = 23502) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProductTemplate_ShoppingCartP"
    FOREIGN KEY ("ShoppingCartBlueprintTemplateID") REFERENCES "ShoppingCartBlueprintTemplate"("ShoppingCartBlueprintTemplateID");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProduct_DefaultOrgani (OID = 23507) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProduct_DefaultOrgani"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProduct_ShoppingCartP (OID = 23512) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProduct_ShoppingCartP"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_DefaultOrganisationStatusTypeTemplate_DefaultOrganisationTem (OID = 23517) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusTypeTemplate_DefaultOrganisationTem"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusTypeTemplate_StatusTypeValueTemplat (OID = 23522) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusTypeTemplate_StatusTypeValueTemplat"
    FOREIGN KEY ("DefaultStatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_DefaultOrganisationStatusType_DefaultOrganisation (OID = 23527) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusType (OID = 23532) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusTypeT (OID = 23537) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusTypeT"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusTypeValue (OID = 23542) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusTypeValue"
    FOREIGN KEY ("DefaultStatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_DefaultOrganisationStatusT (OID = 23547) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_DefaultOrganisationStatusT"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationStatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_DefaultOrganisationTemplat (OID = 23552) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_OrganisationType (OID = 23557) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationTarget_DefaultOrganisation (OID = 23562) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTarget_DefaultOrganisationStatusType (OID = 23567) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_DefaultOrganisationStatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisationStatusType"("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTarget_OrganisationType (OID = 23572) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationTemplate_OrganisationType (OID = 23577) :
--
ALTER TABLE ONLY "DefaultOrganisationTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationSta (OID = 23582) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationSta"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationStatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationTem (OID = 23587) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationTem"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_UserType (OID = 23592) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTarget_DefaultOrganisation (OID = 23597) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTarget_DefaultOrganisationStatusType (OID = 23602) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_DefaultOrganisationStatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisationStatusType"("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTarget_UserType (OID = 23607) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTypeTemplate_DefaultOrganisationTempl (OID = 23612) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTypeTemplate_DefaultOrganisationTempl"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTypeTemplate_UserType (OID = 23617) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTypeTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserType_DefaultOrganisation (OID = 23622) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "fk_DefaultOrganisationUserType_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserType_UserType (OID = 23627) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "fk_DefaultOrganisationUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationWorkflow_DefaultOrganisation (OID = 23632) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflow_Workflow (OID = 23637) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflow_WorkflowT (OID = 23642) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_WorkflowT"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflows_DefaultOrganisation (OID = 23647) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflows_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisation_DefaultOrganisationTemplate (OID = 23652) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "fk_DefaultOrganisation_DefaultOrganisationTemplate"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisation_OrganisationType (OID = 23657) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "fk_DefaultOrganisation_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrgationNotificationConstruct_DefaultOrganisationT (OID = 23662) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "fk_DefaultOrgationNotificationConstruct_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DirectDebitMandate_DirectDebitMandateTemplate (OID = 23667) :
--
ALTER TABLE ONLY "DirectDebitMandate"
    ADD CONSTRAINT "fk_DirectDebitMandate_DirectDebitMandateTemplate"
    FOREIGN KEY ("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber") REFERENCES "DirectDebitMandateTemplate"("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber");
--
-- Definition for index fk_DiscountComponentTierTemplate_ComponentTierTemplate (OID = 23672) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "fk_DiscountComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_DiscountComponentTierTemplate_DiscountTemplate (OID = 23677) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "fk_DiscountComponentTierTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_DiscountComponentTier_ComponentTier (OID = 23682) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "fk_DiscountComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_DiscountComponentTier_Discount (OID = 23687) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "fk_DiscountComponentTier_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_DiscountRelatedProductTemplate_DiscountTemplate (OID = 23692) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "fk_DiscountRelatedProductTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_DiscountRelatedProductTemplate_ProductTemplate (OID = 23697) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "fk_DiscountRelatedProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DiscountRelatedProduct_Discount (OID = 23702) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "fk_DiscountRelatedProduct_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_DiscountRelatedProduct_Product (OID = 23707) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "fk_DiscountRelatedProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DiscountTemplate_OrganisationType (OID = 23712) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "fk_DiscountTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DiscountTemplate_UserType (OID = 23717) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "fk_DiscountTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_Discount_Organisation (OID = 23722) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_Organisation"
    FOREIGN KEY ("OwnerOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Discount_OrganisationType (OID = 23727) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_Discount_UserType (OID = 23732) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_FieldDetail_FieldDetailTemplate (OID = 23737) :
--
ALTER TABLE ONLY "FieldDetail"
    ADD CONSTRAINT "fk_FieldDetail_FieldDetailTemplate"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_GlobalPaymentMethod_DirectDebitMandate (OID = 23742) :
--
ALTER TABLE ONLY "GlobalPaymentMethod"
    ADD CONSTRAINT "fk_GlobalPaymentMethod_DirectDebitMandate"
    FOREIGN KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber") REFERENCES "DirectDebitMandate"("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index fk_Group_Organisation (OID = 23747) :
--
ALTER TABLE ONLY "OrganisationGroup"
    ADD CONSTRAINT "fk_Group_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_InterfacePaUserTypeUserTypeypeTemplate_OrganisationType (OID = 23752) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePaUserTypeUserTypeypeTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePaUserTypeUserTypeype_OrganisationType (OID = 23757) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePaUserTypeUserTypeype_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelClaim1_Role (OID = 23762) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelClaim1_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_InterfacePanelClaimTemplate1_Role (OID = 23767) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelClaimTemplate1_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_InterfacePanelClaimTemplate_InterfacePanelRoleTemplate (OID = 23772) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelClaimTemplate_InterfacePanelRoleTemplate"
    FOREIGN KEY ("InterfacePanelRoleTemplateID") REFERENCES "InterfacePanelRoleTemplate"("InterfacePanelRoleTemplateID");
--
-- Definition for index fk_InterfacePanelClaim_InterfacePanelRole (OID = 23777) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelClaim_InterfacePanelRole"
    FOREIGN KEY ("InterfacePanelRoleID") REFERENCES "InterfacePanelRole"("InterfacePanelRoleID");
--
-- Definition for index fk_InterfacePanelFieldDetail132ganaisationTypeTemplate_FieldDet (OID = 23782) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail132ganaisationTypeTemplate_FieldDet"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetail132ganaisationType_FieldDeta (OID = 23787) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail132ganaisationType_FieldDeta"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetail312naisationTypeTemplate_Organisat (OID = 23792) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail312naisationTypeTemplate_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetail312naisationType_Organisat (OID = 23797) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail312naisationType_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOr31sationTypeTemplate_Interface (OID = 23802) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOr31sationTypeTemplate_Interface"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOr31sationType_Interface (OID = 23807) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOr31sationType_Interface"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganai123123ate_Organisat (OID = 23812) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganai123123ate_Organisat"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganai123123ate_Organisat (OID = 23817) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganai123123ate_Organisat"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_FieldDeta (OID = 23822) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_FieldDeta"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Interface (OID = 23827) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Interface"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Organisat (OID = 23832) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_FieldDeta (OID = 23837) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_FieldDeta"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_Interface (OID = 23842) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_Interface"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_Organisat (OID = 23847) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailSettingTemplate_FieldDetailTemplate (OID = 23852) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSettingTemplate_FieldDetailTemplate"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetailSettingTemplate_InterfacePanelTempl (OID = 23857) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSettingTemplate_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailSetting_FieldDetail (OID = 23862) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSetting_FieldDetail"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetailSetting_InterfacePanelTempl (OID = 23867) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSetting_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrUserTypeTemplate_OrganisationType (OID = 23872) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrUserTypeTemplate_OrganisationType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelOrUserType_OrganisationType (OID = 23877) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelOrUserType_OrganisationType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelOrgaUserTypeonTypeTemplate_InterfacePanelTempl (OID = 23882) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrgaUserTypeonTypeTemplate_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelOrgaUserTypeonType_InterfacePanelTemplat (OID = 23887) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelOrgaUserTypeonType_InterfacePanelTemplat"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationTypeTemplate_InterfacePanelTemplat (OID = 23892) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationTypeTemplate_InterfacePanelTemplat"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationTypeTemplate_OrganisationType (OID = 23897) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationTypeTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelOrganisationType_InterfacePanel (OID = 23902) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationType_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationType_OrganisationType (OID = 23907) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationType_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_InterfacePanelTemplate (OID = 23912) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_Operation (OID = 23917) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_Resource (OID = 23922) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_State (OID = 23927) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_StateItem (OID = 23932) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_InterfacePanelRoleClaim_InterfacePanel (OID = 23937) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelRoleClaim_Operation (OID = 23942) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_InterfacePanelRoleClaim_Resource (OID = 23947) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_InterfacePanelRoleClaim_State (OID = 23952) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_InterfacePanelRoleClaim_StateItem (OID = 23957) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_InterfacePanelRoleTemplate_InterfacePanelTemplate (OID = 23962) :
--
ALTER TABLE ONLY "InterfacePanelRoleTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelRole_InterfacePanel (OID = 23967) :
--
ALTER TABLE ONLY "InterfacePanelRole"
    ADD CONSTRAINT "fk_InterfacePanelRole_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelSettingTemplate_InterfacePanelTemplate (OID = 23972) :
--
ALTER TABLE ONLY "InterfacePanelSettingTemplate"
    ADD CONSTRAINT "fk_InterfacePanelSettingTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelSetting_InterfacePanel (OID = 23977) :
--
ALTER TABLE ONLY "InterfacePanelSetting"
    ADD CONSTRAINT "fk_InterfacePanelSetting_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelTemplate_InterfacePanelTemplate (OID = 23982) :
--
ALTER TABLE ONLY "InterfacePanelTemplate"
    ADD CONSTRAINT "fk_InterfacePanelTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("ParentIPTemplateID", "ParentIPTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanel_InterfacePanel (OID = 23987) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "fk_InterfacePanel_InterfacePanel"
    FOREIGN KEY ("ParentIPID", "ParentIPVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanel_InterfacePanelTemplate (OID = 23992) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "fk_InterfacePanel_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InvoiceLineItem_Account (OID = 23997) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Account"
    FOREIGN KEY ("AccountID") REFERENCES "Account"("AccountID");
--
-- Definition for index fk_InvoiceLineItem_CountryCode (OID = 24002) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_InvoiceLineItem_Invoice (OID = 24007) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_InvoiceLineItem_PlanSubscriptionPeriod (OID = 24012) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_PlanSubscriptionPeriod"
    FOREIGN KEY ("PlanSubscriptionPeriodID") REFERENCES "PlanSubscriptionPeriod"("PlanSubscriptionPeriodID");
--
-- Definition for index fk_InvoiceLineItem_Product (OID = 24017) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_InvoiceLog_Invoice (OID = 24022) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceLog_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_InvoiceLog_Notification (OID = 24027) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceLog_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_InvoiceProcessLog_StatusType (OID = 24032) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_InvoiceProcessLog_StatusTypeValue (OID = 24037) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_Invoice_CountryCode (OID = 24042) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_Invoice_Organisation (OID = 24047) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Invoice_OrganisationAccountingPeriod (OID = 24052) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_OrganisationAccountingPeriod"
    FOREIGN KEY ("OrganisationAccountingPeriodID", "OrganisationID") REFERENCES "OrganisationAccountingPeriod"("OrganisationAccountingPeriodID", "OrganisationID");
--
-- Definition for index fk_Invoice_ShoppingCart (OID = 24057) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_ShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_Invoice_UserAccountOrganisation (OID = 24062) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_LedgerAccountBalance_LedgerAccount (OID = 24067) :
--
ALTER TABLE ONLY "LedgerAccountBalance"
    ADD CONSTRAINT "fk_LedgerAccountBalance_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_LedgerAccountTransaction_LedgerAccount (OID = 24072) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "fk_LedgerAccountTransaction_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_LedgerAccountTransaction_TransactionOrder (OID = 24077) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "fk_LedgerAccountTransaction_TransactionOrder"
    FOREIGN KEY ("TransactionOrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_LedgerAccount_Organisation (OID = 24082) :
--
ALTER TABLE ONLY "OrganisationLedgerAccount"
    ADD CONSTRAINT "fk_LedgerAccount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Module333Dependency_Module (OID = 24087) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "fk_Module333Dependency_Module"
    FOREIGN KEY ("DependencyID", "DependencyVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleArtefactTemplate_ArtefactTemplate (OID = 24092) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "fk_ModuleArtefactTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ModuleArtefactTemplate_ModuleTemplate (OID = 24097) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "fk_ModuleArtefactTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleArtefact_Artefact (OID = 24102) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "fk_ModuleArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ModuleArtefact_Module (OID = 24107) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "fk_ModuleArtefact_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleClaimTemplate_ModuleRoleTemplate (OID = 24112) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaimTemplate_ModuleRoleTemplate"
    FOREIGN KEY ("ModuleRoleID") REFERENCES "ModuleRoleTemplate"("RoleID");
--
-- Definition for index fk_ModuleClaimTemplate_Role (OID = 24117) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleClaim_ModuleRole (OID = 24122) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaim_ModuleRole"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleClaim_ModuleRole (OID = 24127) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleClaim_ModuleRole"
    FOREIGN KEY ("ModuleRoleID") REFERENCES "ModuleRole"("RoleID");
--
-- Definition for index fk_ModuleClaim_Role (OID = 24132) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleDependencyTemplate_ModuleTemplate (OID = 24137) :
--
ALTER TABLE ONLY "ModuleDependencyTemplate"
    ADD CONSTRAINT "fk_ModuleDependencyTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleDependency_Module (OID = 24142) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "fk_ModuleDependency_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstructTemplate_ModuleTemplate (OID = 24147) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ModuleNotificationConstructTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstructTemplate_NotificationConstructTem (OID = 24152) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ModuleNotificationConstructTemplate_NotificationConstructTem"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstruct_Module (OID = 24157) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "fk_ModuleNotificationConstruct_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstruct_NotificationConstruct (OID = 24162) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "fk_ModuleNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_ModulePluginTemplate_ModuleTemplate (OID = 24167) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "fk_ModulePluginTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModulePluginTemplate_PluginTemplate (OID = 24172) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "fk_ModulePluginTemplate_PluginTemplate"
    FOREIGN KEY ("PluginTemplateID", "PluginVersionNumber") REFERENCES "PluginTemplate"("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index fk_ModulePlugin_Module (OID = 24177) :
--
ALTER TABLE ONLY "ModulePlugin"
    ADD CONSTRAINT "fk_ModulePlugin_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleProductTemplate_ModuleTemplate (OID = 24182) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "fk_ModuleProductTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleProductTemplate_ProductTemplate (OID = 24187) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "fk_ModuleProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ModuleProduct_Module (OID = 24192) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "fk_ModuleProduct_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleProduct_Product (OID = 24197) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "fk_ModuleProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_ModuleTemplate (OID = 24202) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleRoleClaimTemplate_Operation (OID = 24207) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_Resource (OID = 24212) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_State (OID = 24217) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_StateItem (OID = 24222) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ModuleRoleClaim_Module (OID = 24227) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleRoleClaim_Operation (OID = 24232) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ModuleRoleClaim_Resource (OID = 24237) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ModuleRoleClaim_State (OID = 24242) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ModuleRoleClaim_StateItem (OID = 24247) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ModuleRoleTemplate_ModuleTemplate (OID = 24252) :
--
ALTER TABLE ONLY "ModuleRoleTemplate"
    ADD CONSTRAINT "fk_ModuleRoleTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSettingTemplate_ModuleTemplate (OID = 24257) :
--
ALTER TABLE ONLY "ModuleSettingTemplate"
    ADD CONSTRAINT "fk_ModuleSettingTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSetting_Module (OID = 24262) :
--
ALTER TABLE ONLY "ModuleSetting"
    ADD CONSTRAINT "fk_ModuleSetting_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleStatusTypeTemplate_ModuleTemplate (OID = 24267) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "fk_ModuleStatusTypeTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleStatusTypeTemplate_StatusTypeTemplate (OID = 24272) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "fk_ModuleStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ModuleStatusType_Module (OID = 24277) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "fk_ModuleStatusType_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleStatusType_StatusType (OID = 24282) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "fk_ModuleStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ModuleSubscriptionTemplate_ModuleTemplate (OID = 24287) :
--
ALTER TABLE ONLY "ModuleSubscriptionTemplate"
    ADD CONSTRAINT "fk_ModuleSubscriptionTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSubscription_Module (OID = 24292) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "fk_ModuleSubscription_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleSubscription_PlanSubscription (OID = 24297) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "fk_ModuleSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_ModuleWorkflowTarget_ModuleWorkflow (OID = 24302) :
--
ALTER TABLE ONLY "ModuleWorkflowTarget"
    ADD CONSTRAINT "fk_ModuleWorkflowTarget_ModuleWorkflow"
    FOREIGN KEY ("ModuleWorkflowID") REFERENCES "ModuleWorkflow"("ModuleWorkflowID");
--
-- Definition for index fk_ModuleWorkflowTarget_ModuleWorkflowTemplate (OID = 24307) :
--
ALTER TABLE ONLY "ModuleWorkflowTargetTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTarget_ModuleWorkflowTemplate"
    FOREIGN KEY ("ModuleWorkflowTemplateID") REFERENCES "ModuleWorkflowTemplate"("ModuleWorkflowTemplateID");
--
-- Definition for index fk_ModuleWorkflowTemplate_ModuleTemplate (OID = 24312) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleWorkflowTemplate_WorkflowTemplate (OID = 24317) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_ModuleWorkflow_Module (OID = 24322) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "fk_ModuleWorkflow_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleWorkflow_Workflow (OID = 24327) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "fk_ModuleWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_NotificationConstificaoleTemplate (OID = 24332) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstificaoleTemplate"
    FOREIGN KEY ("NotificationConstructRoleID") REFERENCES "NotificationConstructRoleTemplate"("NotificationConstructRoleID");
--
-- Definition for index fk_NotificationConstructClaimTemplate_NotificationConstructTemp (OID = 24337) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructClaimTemplate_NotificationConstructTemp"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructClaim_NotificationConstruct (OID = 24342) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructClaim_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructClaim_Role (OID = 24347) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_NotificationConstructDataTemplate_NotificationConstructTempl (OID = 24352) :
--
ALTER TABLE ONLY "NotificationConstructDataTemplate"
    ADD CONSTRAINT "fk_NotificationConstructDataTemplate_NotificationConstructTempl"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructData_NotificationConstruct (OID = 24357) :
--
ALTER TABLE ONLY "NotificationConstructData"
    ADD CONSTRAINT "fk_NotificationConstructData_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructGroupNotificationConstructTemplate_Noti (OID = 24362) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "fk_NotificationConstructGroupNotificationConstructTemplate_Noti"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructGroupNotificationConstruct_Notification (OID = 24367) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "fk_NotificationConstructGroupNotificationConstruct_Notification"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructParameterTemplate_NotificationConstruct (OID = 24372) :
--
ALTER TABLE ONLY "NotificationConstructParameterTemplate"
    ADD CONSTRAINT "fk_NotificationConstructParameterTemplate_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructParameter_NotificationConstruct (OID = 24377) :
--
ALTER TABLE ONLY "NotificationConstructParameter"
    ADD CONSTRAINT "fk_NotificationConstructParameter_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_Operation (OID = 24382) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_Resource (OID = 24387) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_State (OID = 24392) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_StateItem (OID = 24397) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_NotificationConstructRoleClaim_NotificationConstructRole (OID = 24402) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_NotificationConstructRole"
    FOREIGN KEY ("NotificationRoleConstructID") REFERENCES "NotificationConstructRole"("NotificationRoleConstructID");
--
-- Definition for index fk_NotificationConstructRoleClaim_Operation (OID = 24407) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_NotificationConstructRoleClaim_Resource (OID = 24412) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_NotificationConstructRoleClaim_State (OID = 24417) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_NotificationConstructRoleClaim_StateItem (OID = 24422) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_NotificationConstructRoleTemplate_NotificationConstructTempl (OID = 24427) :
--
ALTER TABLE ONLY "NotificationConstructRoleTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleTemplate_NotificationConstructTempl"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructRole_NotificationConstruct (OID = 24432) :
--
ALTER TABLE ONLY "NotificationConstructRole"
    ADD CONSTRAINT "fk_NotificationConstructRole_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructTargetTemplate_NotificationConstructTem (OID = 24437) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_NotificationConstructTem"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructTargetTemplate_OrganisationType (OID = 24442) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_NotificationConstructTargetTemplate_UserType (OID = 24447) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_NotificationConstructTarget_NotificationConstruct (OID = 24452) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructTarget_OrganisationType (OID = 24457) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_NotificationConstructTarget_UserType (OID = 24462) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_NotificationConstructTemplate_Organisation (OID = 24467) :
--
ALTER TABLE ONLY "NotificationConstructTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTemplate_Organisation"
    FOREIGN KEY ("OwnerOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_NotificationConstruct_NotificationConstructTemplate (OID = 24472) :
--
ALTER TABLE ONLY "NotificationConstruct"
    ADD CONSTRAINT "fk_NotificationConstruct_NotificationConstructTemplate"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationRecipientLog_NotificationRecipient (OID = 24477) :
--
ALTER TABLE ONLY "NotificationRecipientLog"
    ADD CONSTRAINT "fk_NotificationRecipientLog_NotificationRecipient"
    FOREIGN KEY ("NotificationRecipientID") REFERENCES "NotificationRecipient"("NotificationRecipientID");
--
-- Definition for index fk_NotificationRecipient_Notification (OID = 24482) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "fk_NotificationRecipient_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_NotificationRecipient_UserAccountOrganisation (OID = 24487) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "fk_NotificationRecipient_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_Notification_NotificationConstruct (OID = 24492) :
--
ALTER TABLE ONLY "Notification"
    ADD CONSTRAINT "fk_Notification_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_OrderItem_Order (OID = 24497) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "fk_OrderItem_Order"
    FOREIGN KEY ("OrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_OrganisationAccountingPeriod_GlobalAccountingPeriod (OID = 24502) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "fk_OrganisationAccountingPeriod_GlobalAccountingPeriod"
    FOREIGN KEY ("GlobalAccountingPeriodID") REFERENCES "GlobalAccountingPeriod"("GlobalAccountingPeriodID");
--
-- Definition for index fk_OrganisationArtefact_Artefact (OID = 24507) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "fk_OrganisationArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_OrganisationArtefact_Organisation (OID = 24512) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "fk_OrganisationArtefact_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationBankAccount_Organisation (OID = 24517) :
--
ALTER TABLE ONLY "OrganisationBankAccount"
    ADD CONSTRAINT "fk_OrganisationBankAccount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDetail_OrganisationDefaultLogo (OID = 24522) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "fk_OrganisationDetail_OrganisationDefaultLogo"
    FOREIGN KEY ("OrganisationDefaultLogoID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_OrganisationDetail_Organisation_1 (OID = 24527) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "fk_OrganisationDetail_Organisation_1"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_NotificationRecipient (OID = 24532) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_NotificationRecipient"
    FOREIGN KEY ("NotificationRecipientID") REFERENCES "NotificationRecipient"("NotificationRecipientID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_OrganisationDirectDebi (OID = 24537) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_OrganisationDirectDebi"
    FOREIGN KEY ("OrganisationDirectDebitMandateID") REFERENCES "OrganisationDirectDebitMandate"("OrganisationDirectDebitMandateID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_StatusType (OID = 24542) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_StatusTypeValue (OID = 24547) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationDirectDebitMandate_DirectDebitMandate (OID = 24552) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_DirectDebitMandate"
    FOREIGN KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber") REFERENCES "DirectDebitMandate"("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index fk_OrganisationDirectDebitMandate_Notification (OID = 24557) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_OrganisationDirectDebitMandate_Organisation (OID = 24562) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDiscount_Discount (OID = 24567) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "fk_OrganisationDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_OrganisationDiscount_Organisation (OID = 24572) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "fk_OrganisationDiscount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationFinancialDetail_GlobalPaymentMethod (OID = 24577) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_OrganisationFinancialDetail_Organisation (OID = 24582) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationFinancialDetail_OrganisationBankAccount (OID = 24587) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_OrganisationBankAccount"
    FOREIGN KEY ("OrganisationBankAccountId") REFERENCES "OrganisationBankAccount"("OrganisationBankAccountId");
--
-- Definition for index fk_OrganisationFinancialDetail_StatusType (OID = 24592) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_StatusType"
    FOREIGN KEY ("FinancialStatusTypeID", "FinancialStatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationFinancialDetail_StatusTypeValue (OID = 24597) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_StatusTypeValue"
    FOREIGN KEY ("FinancialStatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationGroup (OID = 24602) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "fk_OrganisationGroupOrganisationRole_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationRole (OID = 24607) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "fk_OrganisationGroupOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationInsuranceDetails_Organisation (OID = 24612) :
--
ALTER TABLE ONLY "OrganisationInsuranceDetails"
    ADD CONSTRAINT "fk_OrganisationInsuranceDetails_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationOfflinePaymentMethod_OrganisationDirectDebitMand (OID = 24617) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationOfflinePaymentMethod_OrganisationDirectDebitMand"
    FOREIGN KEY ("OrganisationDirectDebitMandateID") REFERENCES "OrganisationDirectDebitMandate"("OrganisationDirectDebitMandateID");
--
-- Definition for index fk_OrganisationPaymentMethod_StatusType (OID = 24622) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationPaymentMethod_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationPaymentMethod_StatusTypeValue (OID = 24627) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationPaymentMethod_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationPlanSubscription_Organisation (OID = 24632) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "fk_OrganisationPlanSubscription_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationPlanSubscription_PlanSubscription (OID = 24637) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "fk_OrganisationPlanSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_OrganisationProductPurchase_InvoiceLineItem (OID = 24642) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_OrganisationProductPurchase_Organisation (OID = 24647) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationProductPurchase_Product (OID = 24652) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_OrganisationRoleClaim_Operation (OID = 24657) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_OrganisationRoleClaim_Organisation (OID = 24662) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationRoleClaim_OrganisationRole (OID = 24667) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationRoleClaim_Resource (OID = 24672) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_OrganisationRoleClaim_State (OID = 24677) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_OrganisationRoleClaim_StateItem (OID = 24682) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_OrganisationSetting_Organisation (OID = 24687) :
--
ALTER TABLE ONLY "OrganisationSetting"
    ADD CONSTRAINT "fk_OrganisationSetting_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationShoppingCartBlueprint_Organisation (OID = 24692) :
--
ALTER TABLE ONLY "OrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_OrganisationShoppingCartBlueprint_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationShoppingCartBlueprint_ShoppingCartBlueprint (OID = 24697) :
--
ALTER TABLE ONLY "OrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_OrganisationShoppingCartBlueprint_ShoppingCartBlueprint"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_OrganisationStatusType_Organisation (OID = 24702) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "fk_OrganisationStatusType_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationStatusType_StatusType (OID = 24707) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "fk_OrganisationStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationStatus_Organisation (OID = 24712) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationStatus_StatusType (OID = 24717) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationStatus_StatusTypeValue (OID = 24722) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationTaxRate_TaxRateTemplate (OID = 24727) :
--
ALTER TABLE ONLY "TaxRate"
    ADD CONSTRAINT "fk_OrganisationTaxRate_TaxRateTemplate"
    FOREIGN KEY ("TaxRateTemplateID") REFERENCES "TaxRateTemplate"("TaxRateTemplateID");
--
-- Definition for index fk_OrganisationTeamSetting_OrganisationTeam (OID = 24732) :
--
ALTER TABLE ONLY "OrganisationTeamSetting"
    ADD CONSTRAINT "fk_OrganisationTeamSetting_OrganisationTeam"
    FOREIGN KEY ("OrganisationTeamID") REFERENCES "OrganisationTeam"("OrganisationTeamID");
--
-- Definition for index fk_OrganisationTeam_Organisation (OID = 24737) :
--
ALTER TABLE ONLY "OrganisationTeam"
    ADD CONSTRAINT "fk_OrganisationTeam_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationTradingName_Organisation (OID = 24742) :
--
ALTER TABLE ONLY "OrganisationTradingName"
    ADD CONSTRAINT "fk_OrganisationTradingName_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationGroup (OID = 24747) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationGroup_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationUnit (OID = 24752) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationGroup_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationRole (OID = 24757) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationUnit (OID = 24762) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationRole_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_OrganisationUserType_Organisation (OID = 24767) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "fk_OrganisationUserType_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationUserType_UserType (OID = 24772) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "fk_OrganisationUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_OrganisationWorkflow_Organisation (OID = 24777) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "fk_OrganisationWorkflow_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationWorkflow_Workflow (OID = 24782) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "fk_OrganisationWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "VersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Organisation_Contact (OID = 24787) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_Contact"
    FOREIGN KEY ("PrimaryContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_Organisation_DefaultOrganisation (OID = 24792) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_Organisation_OrganisationType (OID = 24797) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_PackageProductRelationionship (OID = 24802) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprint"
    ADD CONSTRAINT "fk_PackageProductRelationionship"
    FOREIGN KEY ("PackageProductRelationshipID") REFERENCES "PackageProductRelationship"("PackageProductRelationshipID");
--
-- Definition for index fk_PackageProductRelationshipBlueprintTemplate_PackageProductRe (OID = 24807) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipBlueprintTemplate_PackageProductRe"
    FOREIGN KEY ("PackageProductRelationshipTemplateID") REFERENCES "PackageProductRelationshipTemplate"("PackageProductRelationshipTemplateID");
--
-- Definition for index fk_PackageProductRelationshipTemplate_PackageProductTemplate (OID = 24812) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_PackageProductTemplate"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductRelationshipTemplate_ProductTemplate1 (OID = 24817) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_ProductTemplate1"
    FOREIGN KEY ("ParentProductTemplateID", "ParentProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationshipTemplate_ProductTemplate22 (OID = 24822) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_ProductTemplate22"
    FOREIGN KEY ("ChildProductTemplateID", "ChildProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationship_PackageProduct (OID = 24827) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProductRelationship_Product (OID = 24832) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_Product"
    FOREIGN KEY ("ParentProductID", "ParentProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationship_ProductChild (OID = 24837) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_ProductChild"
    FOREIGN KEY ("ChildProductID", "ChildProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_PackageProductT (OID = 24842) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_PackageProductT"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_Prodlate (OID = 24847) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_Prodlate"
    FOREIGN KEY ("ProductSpecificationAttributeTemplate") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_Productlate (OID = 24852) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_Productlate"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionTemplateID") REFERENCES "ProductSpecificationAttributeOptionTemplate"("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_PackageProductSpecificationBlueprint_PackageProduct (OID = 24857) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprint_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProductSpecificationBlueprint_Pn (OID = 24862) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprint_Pn"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_PackageProductSpecificationute (OID = 24867) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_PackageProductTemplate_PackageTemplate (OID = 24872) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "fk_PackageProductTemplate_PackageTemplate"
    FOREIGN KEY ("PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageTemplate"("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductTemplate_ProductTemplate (OID = 24877) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "fk_PackageProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProduct_Package (OID = 24882) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "fk_PackageProduct_Package"
    FOREIGN KEY ("PackageID", "PackageVersionNumber") REFERENCES "Package"("PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProduct_Product (OID = 24887) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "fk_PackageProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageTemplate_ProductTemplate (OID = 24892) :
--
ALTER TABLE ONLY "PackageTemplate"
    ADD CONSTRAINT "fk_PackageTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_Package_PackageTemplate (OID = 24897) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "fk_Package_PackageTemplate"
    FOREIGN KEY ("PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageTemplate"("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_Package_Product (OID = 24902) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "fk_Package_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PlanBillingTemplate_BillingTemplate (OID = 24907) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "fk_PlanBillingTemplate_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_PlanBillingTemplate_PlanTemplate (OID = 24912) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "fk_PlanBillingTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanBilling_Billing (OID = 24917) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "fk_PlanBilling_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanBilling_Plan (OID = 24922) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "fk_PlanBilling_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanDiscountTemplate_DiscountTemplate (OID = 24927) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "fk_PlanDiscountTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_PlanDiscountTemplate_PlanTemplate (OID = 24932) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "fk_PlanDiscountTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanDiscount_Discount (OID = 24937) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "fk_PlanDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_PlanDiscount_Plan (OID = 24942) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "fk_PlanDiscount_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanGlobalPaymentMethodTemplate_BillingTemplate (OID = 24947) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethodTemplate_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_Billing (OID = 24952) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_GlobalPaymentMethod (OID = 24957) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_Plan (OID = 24962) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanGlobalPaymentTemplate_GlobalPaymentMethod (OID = 24967) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentTemplate_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanGlobalPaymentTemplate_PlanTemplate (OID = 24972) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanProductTemplate_PlanTemplate (OID = 24977) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "fk_PlanProductTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanProductTemplate_ProductTemplate (OID = 24982) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "fk_PlanProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PlanProduct_Plan (OID = 24987) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "fk_PlanProduct_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanProduct_Product (OID = 24992) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "fk_PlanProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_PlanSubscription (OID = 24997) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_StatusType (OID = 25002) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_StatusTypeValue (OID = 25007) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_Billing (OID = 25012) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_GlobalPaymentMethod (OID = 25017) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_PlanSubscription (OID = 25022) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionPeriod_PlanSubscription (OID = 25027) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "fk_PlanSubscriptionPeriod_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionPeriod_PlanSubscriptionBillingPeriod (OID = 25032) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "fk_PlanSubscriptionPeriod_PlanSubscriptionBillingPeriod"
    FOREIGN KEY ("PlanSubscriptionBillingPeriodID") REFERENCES "PlanSubscriptionBillingProcessLog"("PlanSubscriptionBillingPeriodID");
--
-- Definition for index fk_PlanSubscriptionProcessLog_PlanSubscription (OID = 25037) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionProcessLog_StatusType (OID = 25042) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_PlanSubscriptionProcessLog_StatusTypeValue (OID = 25047) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_PlanSubscription_CountryCode (OID = 25052) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_PlanSubscription_Organisation (OID = 25057) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_PlanSubscription_Plan (OID = 25062) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanTemplate_CountryCode (OID = 25067) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "fk_PlanTemplate_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_PlanTemplate_PlanGroup (OID = 25072) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "fk_PlanTemplate_PlanGroup"
    FOREIGN KEY ("PlanGroupID") REFERENCES "PlanGroup"("PlanGroupID");
--
-- Definition for index fk_PlanTransactionComponentTierTemplate_ComponentTierTemplate (OID = 25077) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "fk_PlanTransactionComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_PlanTransactionComponentTierTemplate_PlanTransactionTemplate (OID = 25082) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "fk_PlanTransactionComponentTierTemplate_PlanTransactionTemplate"
    FOREIGN KEY ("PlanTransactionTemplateID") REFERENCES "PlanTransactionTemplate"("PlanTransactionTemplateID");
--
-- Definition for index fk_PlanTransactionComponentTier_ComponentTier (OID = 25087) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "fk_PlanTransactionComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_PlanTransactionComponentTier_PlanTransaction (OID = 25092) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "fk_PlanTransactionComponentTier_PlanTransaction"
    FOREIGN KEY ("PlanTransactionID") REFERENCES "PlanTransaction"("PlanTransactionID");
--
-- Definition for index fk_PlanTransactionTemplate_PlanProductTemplate (OID = 25097) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "fk_PlanTransactionTemplate_PlanProductTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID") REFERENCES "PlanProductTemplate"("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PlanTransactionTemplate_PlanTemplate (OID = 25102) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "fk_PlanTransactionTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanTransaction_Plan (OID = 25107) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "fk_PlanTransaction_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanTransaction_PlanProduct (OID = 25112) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "fk_PlanTransaction_PlanProduct"
    FOREIGN KEY ("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID") REFERENCES "PlanProduct"("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index fk_Plan_CountryCode (OID = 25117) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_Plan_PlanGroup (OID = 25122) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_PlanGroup"
    FOREIGN KEY ("PlanGroupID") REFERENCES "PlanGroup"("PlanGroupID");
--
-- Definition for index fk_Plan_PlanTemplate (OID = 25127) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_ProductBusTaskTemplate_BusTask (OID = 25132) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "fk_ProductBusTaskTemplate_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_ProductBusTask_BusTask (OID = 25137) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "fk_ProductBusTask_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_ProductClaimTemplate_Operation (OID = 25142) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ProductClaimTemplate_ProductRoleTemplate (OID = 25147) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_ProductRoleTemplate"
    FOREIGN KEY ("ProductRoleTemplateID") REFERENCES "ProductRoleTemplate"("ProductRoleTemplateID");
--
-- Definition for index fk_ProductClaimTemplate_ProductTemplate (OID = 25152) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductClaimTemplate_Resource (OID = 25157) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ProductClaimTemplate_Role (OID = 25162) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ProductClaimTemplate_State (OID = 25167) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ProductClaimTemplate_StateItem (OID = 25172) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ProductClaim_Operation (OID = 25177) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ProductClaim_Product (OID = 25182) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductClaim_ProductRole (OID = 25187) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_ProductRole"
    FOREIGN KEY ("ProductRoleID") REFERENCES "ProductRole"("ProductRoleID");
--
-- Definition for index fk_ProductClaim_Resource (OID = 25192) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ProductClaim_Role (OID = 25197) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ProductClaim_State (OID = 25202) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ProductClaim_StateItem (OID = 25207) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ProductComponentTierTemplate_ComponentTierTemplate (OID = 25212) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "fk_ProductComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_ProductComponentTierTemplate_ProductTemplate (OID = 25217) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "fk_ProductComponentTierTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductComponentTier_ComponentTier (OID = 25222) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "fk_ProductComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_ProductComponentTier_Product (OID = 25227) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "fk_ProductComponentTier_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDeductionTemplate_DeductionTemplate (OID = 25232) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "fk_ProductDeductionTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_ProductDeduction_Deduction (OID = 25237) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "fk_ProductDeduction_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_ProductDeduction_Product (OID = 25242) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "fk_ProductDeduction_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDeduction_ProductTemplate (OID = 25247) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "fk_ProductDeduction_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDetailTemplate_ProductTemplate (OID = 25252) :
--
ALTER TABLE ONLY "ProductDetailTemplate"
    ADD CONSTRAINT "fk_ProductDetailTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDetail_Product (OID = 25257) :
--
ALTER TABLE ONLY "ProductDetail"
    ADD CONSTRAINT "fk_ProductDetail_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDiscountTemplate_DiscountTemplate (OID = 25262) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "fk_ProductDiscountTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_ProductDiscountTemplate_ProductTemplate (OID = 25267) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "fk_ProductDiscountTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDiscount_Discount (OID = 25272) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "fk_ProductDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_ProductDiscount_Product (OID = 25277) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "fk_ProductDiscount_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_PackageProductTemplate (OID = 25282) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_PackageProductTemplate"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_ProductFamilyTemplate (OID = 25287) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_ProductFamilyTemplate"
    FOREIGN KEY ("ProductFamilyTemplateID") REFERENCES "ProductFamilyTemplate"("ProductFamilyTemplateID");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_ProductTemplate (OID = 25292) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackage_PackageProduct (OID = 25297) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_ProductFamilyProductPackage_Product (OID = 25302) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackage_ProductFamily (OID = 25307) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_ProductFamily"
    FOREIGN KEY ("ProductFamilyID") REFERENCES "ProductFamily"("ProductFamilyID");
--
-- Definition for index fk_ProductPlanTemplate_PlanTemplate (OID = 25312) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "fk_ProductPlanTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_ProductPlanTemplate_ProductTemplate (OID = 25317) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "fk_ProductPlanTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductPlan_Plan (OID = 25322) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "fk_ProductPlan_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_ProductPlan_Product (OID = 25327) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "fk_ProductPlan_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttributeTemplate_ProductTemplate (OID = 25332) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "fk_ProductProductAttributeTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttribute_Product (OID = 25337) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "fk_ProductProductAttribute_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttribute_ProductAttribute (OID = 25342) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "fk_ProductProductAttribute_ProductAttribute"
    FOREIGN KEY ("ProductAttributeID") REFERENCES "ProductAttribute"("ProductAttributeID");
--
-- Definition for index fk_ProductProductAttribute_ProductAttributeTemplate (OID = 25347) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "fk_ProductProductAttribute_ProductAttributeTemplate"
    FOREIGN KEY ("ProductAttributeTemplateID") REFERENCES "ProductAttributeTemplate"("ProductAttributeTemplateID");
--
-- Definition for index fk_ProductPurchaseBusTaskProcessDetail_ProductPurchaseBusTaskPr (OID = 25352) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessDetail"
    ADD CONSTRAINT "fk_ProductPurchaseBusTaskProcessDetail_ProductPurchaseBusTaskPr"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES "ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_ProductPurchaseBusTask_ProductBusTask (OID = 25357) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseBusTask_ProductBusTask"
    FOREIGN KEY ("ProductBusTaskID") REFERENCES "ProductBusTask"("ProductBusTaskID");
--
-- Definition for index fk_ProductPurchaseProcessLog_ProductPurchase (OID = 25362) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_ProductPurchase"
    FOREIGN KEY ("ProductPurchaseID") REFERENCES "ProductPurchase"("ProductPurchaseID");
--
-- Definition for index fk_ProductPurchaseProcessLog_StatusType (OID = 25367) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ProductPurchaseProcessLog_StatusTypeValue (OID = 25372) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ProductPurchaseProductTask_ProductPurchase (OID = 25377) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_ProductPurchase"
    FOREIGN KEY ("ProductPurchaseID") REFERENCES "ProductPurchase"("ProductPurchaseID");
--
-- Definition for index fk_ProductPurchaseProductTask_StatusType (OID = 25382) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ProductPurchaseProductTask_StatusTypeValue (OID = 25387) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ProductPurchaseReference_InvoiceLineItem (OID = 25392) :
--
ALTER TABLE ONLY "ProductPurchaseReference"
    ADD CONSTRAINT "fk_ProductPurchaseReference_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_ProductRelationshipBlueprintTe (OID = 25397) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipBlueprintTe"
    FOREIGN KEY ("ProductRelationshipTemplateID") REFERENCES "ProductRelationshipTemplate"("ProductRelationshipTemplateID");
--
-- Definition for index fk_ProductRelationshipBlueprint_ProductRelationship (OID = 25402) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprint"
    ADD CONSTRAINT "fk_ProductRelationshipBlueprint_ProductRelationship"
    FOREIGN KEY ("ProductRelationshipID") REFERENCES "ProductRelationship"("ProductRelationshipID");
--
-- Definition for index fk_ProductRelationshipTemplate_ProductTemplate (OID = 25407) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipTemplate_ProductTemplate"
    FOREIGN KEY ("ParentProductTemplateID", "ParentProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationshipTemplate_ProductTemplate1 (OID = 25412) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipTemplate_ProductTemplate1"
    FOREIGN KEY ("ChildProductTemplateID", "ChildProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product (OID = 25417) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product"
    FOREIGN KEY ("ParentProductID", "ParentProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product1 (OID = 25422) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product1"
    FOREIGN KEY ("ChildProductID", "ChildProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product111 (OID = 25427) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product111"
    FOREIGN KEY ("ParentSpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductRoleTemplate_ProductTemplate (OID = 25432) :
--
ALTER TABLE ONLY "ProductRoleTemplate"
    ADD CONSTRAINT "fk_ProductRoleTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRole_Product (OID = 25437) :
--
ALTER TABLE ONLY "ProductRole"
    ADD CONSTRAINT "fk_ProductRole_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecficiationAttribute (OID = 25442) :
--
ALTER TABLE ONLY "SpecificiationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecficiationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttributeOe (OID = 25447) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOe"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_ProductSate (OID = 25452) :
--
ALTER TABLE ONLY "SpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_ProductSate"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_Proplate1 (OID = 25457) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_Proplate1"
    FOREIGN KEY ("ProductSpecificationAttributeTemplateID") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_Specificamplate1 (OID = 25462) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_Specificamplate1"
    FOREIGN KEY ("SpecificationAttributeOptionTemplateID") REFERENCES "SpecificationAttributeOptionTemplate"("SpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeTemplate_ProductTemplate (OID = 25467) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecificationAttributeTempte (OID = 25472) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeTempte"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttribute_Producte (OID = 25477) :
--
ALTER TABLE ONLY "SpecificationAttribute"
    ADD CONSTRAINT "fk_ProductSpecificationAttribute_Producte"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttribute_SpecificationAttribute (OID = 25482) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT "fk_ProductSpecificationAttribute_SpecificationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttritributeOption (OID = 25487) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecificationAttritributeOption"
    FOREIGN KEY ("SpecficiationAttributeOptionID") REFERENCES "SpecificiationAttributeOption"("SpecficiationAttributeOptionID");
--
-- Definition for index fk_ProductSpecificationBlueprintTemplate_Prod (OID = 25492) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprintTemplate_Prod"
    FOREIGN KEY ("ProductSpecificationAttributeTemplateID") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationBlueprintTemplate_ProductS (OID = 25497) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprintTemplate_ProductS"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionTemplateID") REFERENCES "ProductSpecificationAttributeOptionTemplate"("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_ProductSpecificationBlueprint_Product (OID = 25502) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecificationBlueprint_ProductSpecificationAttribute (OID = 25507) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_ProductSpecificationAttribute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationBlueprint_tion (OID = 25512) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_tion"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_ProductTFProductTaskTemplate_ProductTemplate (OID = 25517) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "fk_ProductTFProductTaskTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductTFProductTask_Product (OID = 25522) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "fk_ProductTFProductTask_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductTagTemplate_ProductTemplate (OID = 25527) :
--
ALTER TABLE ONLY "ProductTagTemplate"
    ADD CONSTRAINT "fk_ProductTagTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductTag_Product (OID = 25532) :
--
ALTER TABLE ONLY "ProductTag"
    ADD CONSTRAINT "fk_ProductTag_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeCombinationTemplate_ProductTemplate (OID = 25537) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombinationTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeCombinationTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeCombination_Product (OID = 25542) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombination"
    ADD CONSTRAINT "fk_ProductVariantAttributeCombination_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeValueTemplate_ProductProductAttribute (OID = 25547) :
--
ALTER TABLE ONLY "ProductVariantAttributeValueTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeValueTemplate_ProductProductAttribute"
    FOREIGN KEY ("ProductProductAttributeTemplateID") REFERENCES "ProductProductAttributeTemplate"("ProductProductAttributeTemplateID");
--
-- Definition for index fk_ProductVariantAttributeValueTemplate_ProductTemplateParent (OID = 25552) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeValueTemplate_ProductTemplateParent"
    FOREIGN KEY ("ParentSpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductVariantAttributeValue_ProductProductAttribute (OID = 25557) :
--
ALTER TABLE ONLY "ProductVariantAttributeValue"
    ADD CONSTRAINT "fk_ProductVariantAttributeValue_ProductProductAttribute"
    FOREIGN KEY ("ProductProductAttributeID") REFERENCES "ProductProductAttribute"("ProductProductAttributeID");
--
-- Definition for index fk_Product_ProductTemplate (OID = 25562) :
--
ALTER TABLE ONLY "Product"
    ADD CONSTRAINT "fk_Product_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductTemplateVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_RepositoryMap_Repository (OID = 25567) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "fk_RepositoryMap_Repository"
    FOREIGN KEY ("RepositoryID") REFERENCES "Repository"("RepositoryID");
--
-- Definition for index fk_RepositoryStructureGroup_OrganisationRole (OID = 25572) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "fk_RepositoryStructureGroup_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_RepositoryStructureGroup_RepositoryStructure (OID = 25577) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "fk_RepositoryStructureGroup_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_RepositoryStructureRole_OrganisationGroup (OID = 25582) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "fk_RepositoryStructureRole_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_RepositoryStructureRole_RepositoryStructure (OID = 25587) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "fk_RepositoryStructureRole_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_RepositoryStructure_Repository (OID = 25592) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "fk_RepositoryStructure_Repository"
    FOREIGN KEY ("RepositoryID") REFERENCES "Repository"("RepositoryID");
--
-- Definition for index fk_ResourceOperation_Operation (OID = 25597) :
--
ALTER TABLE ONLY "ResourceOperation"
    ADD CONSTRAINT "fk_ResourceOperation_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ResourceOperation_Resource (OID = 25602) :
--
ALTER TABLE ONLY "ResourceOperation"
    ADD CONSTRAINT "fk_ResourceOperation_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_Operation (OID = 25607) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_RoleTemplateClaim_Resource (OID = 25612) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_RoleTemplate (OID = 25617) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_RoleTemplate"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_RoleTemplateClaim_State (OID = 25622) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_RoleTemplateClaim_StateItem (OID = 25627) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_Role_Organisation (OID = 25632) :
--
ALTER TABLE ONLY "OrganisationRole"
    ADD CONSTRAINT "fk_Role_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ServiceDefinitionDetail_ServiceDefinition (OID = 25637) :
--
ALTER TABLE ONLY "ServiceDefinitionDetail"
    ADD CONSTRAINT "fk_ServiceDefinitionDetail_ServiceDefinition"
    FOREIGN KEY ("ServiceDefinitionID") REFERENCES "ServiceDefinition"("ServiceDefinitionID");
--
-- Definition for index fk_ServiceDefinition_ServiceInterface (OID = 25642) :
--
ALTER TABLE ONLY "ServiceDefinition"
    ADD CONSTRAINT "fk_ServiceDefinition_ServiceInterface"
    FOREIGN KEY ("ServiceInterfaceID") REFERENCES "ServiceInterface"("ServiceInterfaceID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_ProductPurchaseProductTask (OID = 25647) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES "ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_ServiceDefinition (OID = 25652) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_ServiceDefinition"
    FOREIGN KEY ("ServiceDefinitionID") REFERENCES "ServiceDefinition"("ServiceDefinitionID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_StatusType (OID = 25657) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ServiceInterfaceProcessLog_StatusTypeValue (OID = 25662) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ShoppingCartDeduction_CountryDeduction (OID = 25667) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "fk_ShoppingCartDeduction_CountryDeduction"
    FOREIGN KEY ("CountryDeductionID", "DeductionID", "DeductionVersionNumber") REFERENCES "CountryDeduction"("CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_ShoppingCartDeduction_ShoppingCart (OID = 25672) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "fk_ShoppingCartDeduction_ShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_ShoppingCartItem_Account (OID = 25677) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_ShoppingCartItem_Account"
    FOREIGN KEY ("AccountID") REFERENCES "Account"("AccountID");
--
-- Definition for index fk_ShoppingCartItem_InvoiceLineItem (OID = 25682) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_ShoppingCartItem_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_ShoppingCartProductProductTemplate_ProductTemplate (OID = 25687) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "fk_ShoppingCartProductProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ShoppingCartProductProductTemplate_ShoppingCartProductTempla (OID = 25692) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "fk_ShoppingCartProductProductTemplate_ShoppingCartProductTempla"
    FOREIGN KEY ("ShoppingCartBlueprintTemplateID") REFERENCES "ShoppingCartBlueprintTemplate"("ShoppingCartBlueprintTemplateID");
--
-- Definition for index fk_ShoppingCartProductProduct_Product (OID = 25697) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "fk_ShoppingCartProductProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ShoppingCartProductProduct_ShoppingCartProductTempla (OID = 25702) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "fk_ShoppingCartProductProduct_ShoppingCartProductTempla"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_ShoppingCart_GlobalPaymentMethod (OID = 25707) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_ShoppingCart_Organisation (OID = 25712) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ShoppingCart_UserAccountOrganisation (OID = 25717) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_SpecificationAttributeRelationshipTempTemplate (OID = 25722) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "fk_SpecificationAttributeRelationshipTempTemplate"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_SpecificationAttributeRelationship_SpecificationAttribute (OID = 25727) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "fk_SpecificationAttributeRelationship_SpecificationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Operation (OID = 25732) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Resource (OID = 25737) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Role (OID = 25742) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_StatusTypeClaimTemplate_State (OID = 25747) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StateItem (OID = 25752) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StatusTypeRoleTemplate (OID = 25757) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StatusTypeRoleTemplate"
    FOREIGN KEY ("StatusTypeRoleTemplateID") REFERENCES "StatusTypeRoleTemplate"("StatusTypeRoleTemplateID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StatusTypeTemplate (OID = 25762) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeClaim_Operation (OID = 25767) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_StatusTypeClaim_Resource (OID = 25772) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_StatusTypeClaim_State (OID = 25777) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_StatusTypeClaim_StateItem (OID = 25782) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_StatusTypeClaim_StatusType (OID = 25787) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeClaim_StatusTypeRole (OID = 25792) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StatusTypeRole"
    FOREIGN KEY ("StatusTypeRoleID") REFERENCES "StatusTypeRole"("StatusTypeRoleID");
--
-- Definition for index fk_StatusTypeRoleTemplate_StatusTypeTemplate (OID = 25797) :
--
ALTER TABLE ONLY "StatusTypeRoleTemplate"
    ADD CONSTRAINT "fk_StatusTypeRoleTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeRole_StatusType (OID = 25802) :
--
ALTER TABLE ONLY "StatusTypeRole"
    ADD CONSTRAINT "fk_StatusTypeRole_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeStructureMappeStructure (OID = 25807) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "fk_StatusTypeStructureMappeStructure"
    FOREIGN KEY ("NextStatusTypeStructureID") REFERENCES "StatusTypeStructure"("StatusTypeStructureID");
--
-- Definition for index fk_StatusTypeStructureMappeStructureTemplate (OID = 25812) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureMappeStructureTemplate"
    FOREIGN KEY ("NextStatusTypeStructureTemplateID") REFERENCES "StatusTypeStructureTemplate"("StatusTypeStructureTemplateID");
--
-- Definition for index fk_StatusTypeStructureMappingTemplate_StatusTypeStructureTempla (OID = 25817) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureMappingTemplate_StatusTypeStructureTempla"
    FOREIGN KEY ("CurrentStatusTypeStructureTemplateID") REFERENCES "StatusTypeStructureTemplate"("StatusTypeStructureTemplateID");
--
-- Definition for index fk_StatusTypeStructureMapping_StatusTypeStructureTempla (OID = 25822) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "fk_StatusTypeStructureMapping_StatusTypeStructureTempla"
    FOREIGN KEY ("CurrentStatusTypeStructureID") REFERENCES "StatusTypeStructure"("StatusTypeStructureID");
--
-- Definition for index fk_StatusTypeStructureTemplate_StatusTypeTemplate (OID = 25827) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeStructureTemplate_StatusTypeValueTemplateID (OID = 25832) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureTemplate_StatusTypeValueTemplateID"
    FOREIGN KEY ("StatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_StatusTypeStructure_StatusType (OID = 25837) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "fk_StatusTypeStructure_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeStructure_StatusTypeValueID (OID = 25842) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "fk_StatusTypeStructure_StatusTypeValueID"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StatusTypeValueID_StatusType (OID = 25847) :
--
ALTER TABLE ONLY "StatusTypeValue"
    ADD CONSTRAINT "fk_StatusTypeValueID_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeValueTemplateID_StatusTypeTemplate (OID = 25852) :
--
ALTER TABLE ONLY "StatusTypeValueTemplate"
    ADD CONSTRAINT "fk_StatusTypeValueTemplateID_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusType_StatusTypeTemplate (OID = 25857) :
--
ALTER TABLE ONLY "StatusType"
    ADD CONSTRAINT "fk_StatusType_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_TransactionOrderItem_InvoiceLineItem (OID = 25862) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "fk_TransactionOrderItem_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_TransactionOrderPaymentError_TransactionOrderPayment (OID = 25867) :
--
ALTER TABLE ONLY "TransactionOrderPaymentError"
    ADD CONSTRAINT "fk_TransactionOrderPaymentError_TransactionOrderPayment"
    FOREIGN KEY ("TransactionOrderPaymentID") REFERENCES "TransactionOrderPayment"("TransactionOrderPaymentID");
--
-- Definition for index fk_TransactionOrderProcessLog_StatusType (OID = 25872) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_TransactionOrderProcessLog_StatusTypeValue (OID = 25877) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_TransactionOrderProcessLog_TransactionOrder (OID = 25882) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_TransactionOrder"
    FOREIGN KEY ("TransactionOrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_TransactionOrderProcessLog_TransactionOrderPayment (OID = 25887) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_TransactionOrderPayment"
    FOREIGN KEY ("TransactionOrderPaymentID") REFERENCES "TransactionOrderPayment"("TransactionOrderPaymentID");
--
-- Definition for index fk_TransactionOrder_GlobalPaymentMethod (OID = 25892) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "fk_TransactionOrder_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_TransactionOrder_Invoice (OID = 25897) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "fk_TransactionOrder_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_UserAccountLedgerAccount_LedgerAccount (OID = 25902) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "fk_UserAccountLedgerAccount_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_UserAccountLedgerAccount_UserAccounts (OID = 25907) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "fk_UserAccountLedgerAccount_UserAccounts"
    FOREIGN KEY ("UserAccountID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserAccountLoginSessionData_UserAccountLoginSession (OID = 25912) :
--
ALTER TABLE ONLY "UserAccountLoginSessionData"
    ADD CONSTRAINT "fk_UserAccountLoginSessionData_UserAccountLoginSession"
    FOREIGN KEY ("UserAccountID", "UserSessionID") REFERENCES "UserAccountLoginSession"("UserAccountID", "UserSessionID");
--
-- Definition for index fk_UserAccountOrganisationGroup_UserAccountOrganisationUnit (OID = 25917) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "fk_UserAccountOrganisationGroup_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationProductPurchase_InvoiceLineItem (OID = 25922) :
--
ALTER TABLE ONLY "ProductPurchase"
    ADD CONSTRAINT "fk_UserAccountOrganisationProductPurchase_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_UserAccountOrganisationRole_OrganisationRole (OID = 25927) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "fk_UserAccountOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_UserAccountOrganisationRole_UserAccountOrganisationUnit (OID = 25932) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "fk_UserAccountOrganisationRole_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationSecondaryUserType_UserType (OID = 25937) :
--
ALTER TABLE ONLY "UserAccountOrganisationSecondaryUserType"
    ADD CONSTRAINT "fk_UserAccountOrganisationSecondaryUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_UserAccountOrganisationStatus_StatusType (OID = 25942) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_UserAccountOrganisationStatus_StatusTypeValue (OID = 25947) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_UserAccountOrganisationStatus_UserAccountOrganisation (OID = 25952) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationTeam_OrganisationTeam (OID = 25957) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "fk_UserAccountOrganisationTeam_OrganisationTeam"
    FOREIGN KEY ("OrganisationTeamID") REFERENCES "OrganisationTeam"("OrganisationTeamID");
--
-- Definition for index fk_UserAccountOrganisationTeam_UserAccountOrganisationUnit (OID = 25962) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "fk_UserAccountOrganisationTeam_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationUnit_Organisation (OID = 25967) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisationUnit_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_UserAccountOrganisationUnit_OrganisationUnit (OID = 25972) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisationUnit_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_UserAccountOrganisation_Contact (OID = 25977) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisation_Contact"
    FOREIGN KEY ("PrimaryContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_UserAccountOrganisation_UserType (OID = 25982) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisation_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_UserAccounts_ID (OID = 25987) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_UserAccounts_ID"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserAccunts (OID = 25992) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccunts"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserShoppingCartIteductSpecificationAttributeOption (OID = 25997) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingCartIteductSpecificationAttributeOption"
    FOREIGN KEY ("ProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_UserShoppingCartItemProductAttribute_ProductVariantAttribute (OID = 26002) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductAttribute_ProductVariantAttribute"
    FOREIGN KEY ("ProductVariantAttributeValueID") REFERENCES "ProductVariantAttributeValue"("ProductVariantAttributeValueID");
--
-- Definition for index fk_UserShoppingCartItemProductAttribute_UserShoppingCartItem (OID = 26007) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductAttribute_UserShoppingCartItem"
    FOREIGN KEY ("ShoppingCartItemID") REFERENCES "ShoppingCartItem"("ShoppingCartItemID");
--
-- Definition for index fk_UserShoppingCartItemProductSpecification_UserShoppingCartIte (OID = 26012) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductSpecification_UserShoppingCartIte"
    FOREIGN KEY ("ShoppingCartItemID") REFERENCES "ShoppingCartItem"("ShoppingCartItemID");
--
-- Definition for index fk_UserShoppingCartItem_Product (OID = 26017) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_UserShoppingCartItem_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_UserShoppingCartItem_UserShoppingCart (OID = 26022) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_UserShoppingCartItem_UserShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_UserShoppingroductSpecificationAttribute (OID = 26027) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingroductSpecificationAttribute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_WorflowParameterTemplate_WorkflowTemplate (OID = 26032) :
--
ALTER TABLE ONLY "WorflowParameterTemplate"
    ADD CONSTRAINT "fk_WorflowParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteConditionTe (OID = 26037) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionCompleteConditionTe"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteConditionTemate (OID = 26042) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionCompleteConditionTemate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteCondition_WorkflowAction (OID = 26047) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowActionCompleteCondition_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionCompleteCondition_WorkflowCondition (OID = 26052) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowActionCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate (OID = 26057) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate (OID = 26062) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowAction (OID = 26067) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowCommand (OID = 26072) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionNotificationTemplate_WorkflowActionTemplate (OID = 26077) :
--
ALTER TABLE ONLY "WorkflowActionNotificationTemplate"
    ADD CONSTRAINT "fk_WorkflowActionNotificationTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParameterNotificationConstructTemplate_Notific (OID = 26082) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParameterNotificationConstructTemplate_Notific"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParameterNotificationConstruct_NotificationCon (OID = 26087) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowActionParameterNotificationConstruct_NotificationCon"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_WorkflowActionParameter_WorkflowAction (OID = 26092) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "fk_WorkflowActionParameter_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionParameter_WorkflowParameter (OID = 26097) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "fk_WorkflowActionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowActionParamter_WorkflowActionTemplate (OID = 26102) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParamter_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParamter_WorkflowParameterTemplate (OID = 26107) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParamter_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate (OID = 26112) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate (OID = 26117) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommand_WorkflowAction (OID = 26122) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "fk_WorkflowActionPostCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate (OID = 26127) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate (OID = 26132) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommand_WorkflowAction (OID = 26137) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "fk_WorkflowActionPreCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommand_WorkflowCommand (OID = 26142) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "fk_WorkflowActionPreCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionProductPlaceholder_WorkflowActionTemplate (OID = 26147) :
--
ALTER TABLE ONLY "WorkflowActionProductPlaceholder"
    ADD CONSTRAINT "fk_WorkflowActionProductPlaceholder_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartConditionTememplate (OID = 26152) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStartConditionTememplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate (OID = 26157) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartCondition_WorkflowAction (OID = 26162) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "fk_WorkflowActionStartCondition_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionStartCondition_WorkflowCondition (OID = 26167) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "fk_WorkflowActionStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionStateExecutionTemplate_WorkflowActionTemplate (OID = 26172) :
--
ALTER TABLE ONLY "WorkflowActionExecutionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStateExecutionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate (OID = 26177) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionValidationTemplate_WorkflowActionTemplate (OID = 26182) :
--
ALTER TABLE ONLY "WorkflowActionValidationTemplate"
    ADD CONSTRAINT "fk_WorkflowActionValidationTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowAction_Workflow (OID = 26187) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "fk_WorkflowAction_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowAction_WorkflowObjectType (OID = 26192) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "fk_WorkflowAction_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowClaimTemplate_Role (OID = 26197) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_WorkflowClaimTemplate_WorkflowTemplate (OID = 26202) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowClaimTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowClaim_Role (OID = 26207) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_WorkflowClaim_Workflow (OID = 26212) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowClaim_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate (OID = 26217) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate (OID = 26222) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowTemplate (OID = 26227) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandCondition_Workflow (OID = 26232) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandCondition_WorkflowCommand (OID = 26237) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandCondition_WorkflowCondition (OID = 26242) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate (OID = 26247) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate (OID = 26252) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowTemplate (OID = 26257) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameter_Workflow (OID = 26262) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameter_WorkflowCommand (OID = 26267) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandParameter_WorkflowParameter (OID = 26272) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate (OID = 26277) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowTemplate (OID = 26282) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommand_Workflow (OID = 26287) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "fk_WorkflowCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommand_WorkflowObjectType (OID = 26292) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "fk_WorkflowCommand_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameterTemplate_WorkflowTemplate (OID = 26297) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_Workflow (OID = 26302) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowCondition (OID = 26307) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowConditionTemplate (OID = 26312) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowParameter (OID = 26317) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowParameterTemplate (OID = 26322) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate (OID = 26327) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowTemplate (OID = 26332) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCondition_Workflow (OID = 26337) :
--
ALTER TABLE ONLY "WorkflowCondition"
    ADD CONSTRAINT "fk_WorkflowCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionEflowDecision (OID = 26342) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionEflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorActionTemplate_WorkflowActionTemplate (OID = 26347) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorActionTemplate_WorkflowDecisionTemplate (OID = 26352) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorActionTemplate_WorkflowDecisionTemplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorAction_WorkflowAction (OID = 26357) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorAction_WorkflowDecision (OID = 26362) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorTDecisionTemplate (OID = 26367) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorTDecisionTemplate"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteCate_WorkflowDecisionTemplate (OID = 26372) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowDecisionExecuteCate_WorkflowDecisionTemplate"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTempl (OID = 26377) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTempl"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailukflowDecision (OID = 26382) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailukflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate (OID = 26387) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureAction_WorkflowAction (OID = 26392) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureAction_WorkflowDecision (OID = 26397) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFrkflowDecisionTemplate (OID = 26402) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionFrkflowDecisionTemplate"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate (OID = 26407) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionParameter_WorkflowParameter (OID = 26412) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "fk_WorkflowDecisionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate (OID = 26417) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessAction_WorkflowAction (OID = 26422) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowDecisionSuccessAction_WorkflowDecision (OID = 26427) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessTemp (OID = 26432) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessTemp"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate (OID = 26437) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowTemplate (OID = 26442) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecision_Workflow (OID = 26447) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowDecision_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecision_WorkflowObjectType (OID = 26452) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowDecision_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisioorkflowDecision (OID = 26457) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisioorkflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_Workflow (OID = 26462) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "fk_WorkflowHierarchy_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_WorkflowTransistion (OID = 26467) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "fk_WorkflowHierarchy_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceExecutionDataItem_Workfl (OID = 26472) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionDataItem"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionDataItem_Workfl"
    FOREIGN KEY ("WorkflowInstanceExecutionStatusEventID") REFERENCES "WorkflowInstanceExecutionStatusEvent"("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index fk_WorkflowInstanceExecutionSta (OID = 26477) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionSta"
    FOREIGN KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceExecution"("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceExecutionStatusEve (OID = 26482) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionStatusEve"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus (OID = 26487) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus"
    FOREIGN KEY ("WorkflowExecutionStatusID") REFERENCES "WorkflowExecutionStatus"("WorkflowExecutionStatusID");
--
-- Definition for index fk_WorkflowInstanceExecutionTrace_WorkflowInstanceExecution (OID = 26492) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionTrace"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionTrace_WorkflowInstanceExecution"
    FOREIGN KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceExecution"("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceExecution_WorkflowInstanceSession (OID = 26497) :
--
ALTER TABLE ONLY "WorkflowInstanceExecution"
    ADD CONSTRAINT "fk_WorkflowInstanceExecution_WorkflowInstanceSession"
    FOREIGN KEY ("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceSession"("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceRestriction_UserAccountOrganisation (OID = 26502) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "fk_WorkflowInstanceRestriction_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_WorkflowInstanceRestriction_WorkflowInstance (OID = 26507) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "fk_WorkflowInstanceRestriction_WorkflowInstance"
    FOREIGN KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowInstance"("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceSession_WorkflowInstance (OID = 26512) :
--
ALTER TABLE ONLY "WorkflowInstanceSession"
    ADD CONSTRAINT "fk_WorkflowInstanceSession_WorkflowInstance"
    FOREIGN KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowInstance"("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstance_Workflow (OID = 26517) :
--
ALTER TABLE ONLY "WorkflowInstance"
    ADD CONSTRAINT "fk_WorkflowInstance_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditionTem (OID = 26522) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainCompleteConditionTem"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate (OID = 26527) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_Workflow (OID = 26532) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowMainCompleteCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_WorkflowCondition (OID = 26537) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowMainCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate (OID = 26542) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate (OID = 26547) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_Workflow (OID = 26552) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_WorkflowCommand (OID = 26557) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate (OID = 26562) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowTemplate (OID = 26567) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowMainParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_Workflow (OID = 26572) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "fk_WorkflowMainParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_WorkflowParameter (OID = 26577) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "fk_WorkflowMainParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate (OID = 26582) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowTemplate (OID = 26587) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPostCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_Workflow (OID = 26592) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "fk_WorkflowMainPostCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_WorkflowCommand (OID = 26597) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "fk_WorkflowMainPostCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate (OID = 26602) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowTemplate (OID = 26607) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPreCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_Workflow (OID = 26612) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "fk_WorkflowMainPreCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_WorkflowCommand (OID = 26617) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "fk_WorkflowMainPreCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate (OID = 26622) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowTemplate (OID = 26627) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainStartConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_Workflow (OID = 26632) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "fk_WorkflowMainStartCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_WorkflowCondition (OID = 26637) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "fk_WorkflowMainStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowNotificationConstructTemplate_NotificationConstructT (OID = 26642) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowNotificationConstructTemplate_NotificationConstructT"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstructTemplate_WorkflowTemplate (OID = 26647) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowNotificationConstructTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstruct_NotificationConstruct (OID = 26652) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstruct_Workflow (OID = 26657) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowNotificationConstruct_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowObjectTypeTemplate_WorkflowTemplate1 (OID = 26662) :
--
ALTER TABLE ONLY "WorkflowObjectTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowObjectTypeTemplate_WorkflowTemplate1"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowObjectType_Workflow (OID = 26667) :
--
ALTER TABLE ONLY "WorkflowObjectType"
    ADD CONSTRAINT "fk_WorkflowObjectType_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowParameterTemplate_WorkflowTemplate (OID = 26672) :
--
ALTER TABLE ONLY "WorkflowParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowParameter_Workflow (OID = 26677) :
--
ALTER TABLE ONLY "WorkflowParameter"
    ADD CONSTRAINT "fk_WorkflowParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_Operation (OID = 26682) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_Resource (OID = 26687) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_State (OID = 26692) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_StateItem (OID = 26697) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_WorkflowRoleTemplate (OID = 26702) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_WorkflowRoleTemplate"
    FOREIGN KEY ("WorkflowRoleTemplateID") REFERENCES "WorkflowRoleTemplate"("WorkflowRoleTemplateID");
--
-- Definition for index fk_WorkflowRoleClaim_Operation (OID = 26707) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_WorkflowRoleClaim_Resource (OID = 26712) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_WorkflowRoleClaim_State (OID = 26717) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_WorkflowRoleClaim_StateItem (OID = 26722) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_WorkflowRoleClaim_WorkflowRole (OID = 26727) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_WorkflowRole"
    FOREIGN KEY ("WorkflowRoleID") REFERENCES "WorkflowRole"("WorkflowRoleID");
--
-- Definition for index fk_WorkflowRoleTemplate_WorkflowTemplate (OID = 26732) :
--
ALTER TABLE ONLY "WorkflowRoleTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowRole_Workflow (OID = 26737) :
--
ALTER TABLE ONLY "WorkflowRole"
    ADD CONSTRAINT "fk_WorkflowRole_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowStatusTypeTemplate_StatusTypeTemplate (OID = 26742) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_WorkflowStatusTypeTemplate_WorkflowTemplate (OID = 26747) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowStatusTypeTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowStatusType_StatusType (OID = 26752) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "fk_WorkflowStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_WorkflowStatusType_Workflow (OID = 26757) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "fk_WorkflowStatusType_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTempate (OID = 26762) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTempate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTemplat (OID = 26767) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTemplat"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTeplate (OID = 26772) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTeplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_Workflow (OID = 26777) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_WorkflowCondition (OID = 26782) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_WorkflowTransistion (OID = 26787) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemp (OID = 26792) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemp"
    FOREIGN KEY ("ParentComponentID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplamplate11 (OID = 26797) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemplamplate11"
    FOREIGN KEY ("ParentComponentID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate (OID = 26802) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTte (OID = 26807) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTte"
    FOREIGN KEY ("ChildComponentID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_Workflow (OID = 26812) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchy_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_WorkflowTransistion (OID = 26817) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchy_WorkflowTransistion"
    FOREIGN KEY ("ChildComponentID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTemplate_WorkflowTemplate (OID = 26822) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTemplate_ate (OID = 26827) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTemplate_ate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTempplate (OID = 26832) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTempplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_Workflow (OID = 26837) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_WorkflowParameter (OID = 26842) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_WorkflowTransistion (OID = 26847) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTeate (OID = 26852) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTeate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTemplate_WorkflowTemplate (OID = 26857) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTete (OID = 26862) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTete"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartCondition_Workflow (OID = 26867) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartCondition_WorkflowCondition (OID = 26872) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionStartCondition_WorkflowTransistion (OID = 26877) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowActionTemplate_WorkflowTemplate (OID = 26882) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowActionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_Workflow (OID = 26887) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_WorkflowAction (OID = 26892) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_WorkflowTransistion (OID = 26897) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_Workflow (OID = 26902) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_WorkflowDecision (OID = 26907) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion (OID = 26912) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistion_Workflow (OID = 26917) :
--
ALTER TABLE ONLY "WorkflowTransistion"
    ADD CONSTRAINT "fk_WorkflowTransistion_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Workflow_WorkflowTemplate (OID = 26922) :
--
ALTER TABLE ONLY "Workflow"
    ADD CONSTRAINT "fk_Workflow_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_Workfommand_WorkflowCommand (OID = 26927) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "fk_Workfommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_Workfommand_WorkflowCommand (OID = 26932) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "fk_Workfommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index productspecificationattribute_fk (OID = 26937) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT productspecificationattribute_fk
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index questionfk (OID = 26942) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT questionfk
    FOREIGN KEY ("QuestionID") REFERENCES "ClassificationType"("ClassificationTypeID") ON DELETE CASCADE;
--
-- Definition for index fk_AccountDocument_Account (OID = 26947) :
--
SET search_path = sts, pg_catalog;
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "fk_AccountDocument_Account"
    FOREIGN KEY ("AccountID") REFERENCES public."Account"("AccountID");
--
-- Definition for index fk_AccountDocument_StsDocument (OID = 26952) :
--
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "fk_AccountDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_LRDocument_Attachment (OID = 26957) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_Attachment"
    FOREIGN KEY ("AttachmentID") REFERENCES public."Attachment"("AttachmentID");
--
-- Definition for index fk_LRDocument_LRTitle (OID = 26962) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_LRTitle"
    FOREIGN KEY ("LRTitleID") REFERENCES "LRTitle"("LRTitleID");
--
-- Definition for index fk_LRDocument_ProductPurchaseProductTask (OID = 26967) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRRegisterExtract_LRTitle (OID = 26972) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "fk_LRRegisterExtract_LRTitle"
    FOREIGN KEY ("LRTitleID") REFERENCES "LRTitle"("LRTitleID");
--
-- Definition for index fk_LRRegisterExtract_ProductPurchaseProductTask (OID = 26977) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "fk_LRRegisterExtract_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRTitle_Address (OID = 26982) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_Address"
    FOREIGN KEY ("AddressID") REFERENCES public."Address"("AddressID");
--
-- Definition for index fk_LRTitle_ProductPurchaseProductTask (OID = 26987) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRTitle_StsProperty (OID = 26992) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_StsProperty"
    FOREIGN KEY ("StsPropertyID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_LRTitle_StsSearchProperty (OID = 26997) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_StsSearchProperty"
    FOREIGN KEY ("StsSearchPropertyID") REFERENCES "StsSearchPropertyDetail"("StsSearchPropertyDetailID");
--
-- Definition for index fk_StsActorAuthority_StsActor (OID = 27002) :
--
ALTER TABLE ONLY "StsActorAuthority"
    ADD CONSTRAINT "fk_StsActorAuthority_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorProcessLog_StatusType (OID = 27007) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorProcessLog_StatusTypeValue (OID = 27012) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorProcessLog_StsActor (OID = 27017) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorPurchase_StsActorStructure (OID = 27022) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsActorPurchase_StsActorStructure"
    FOREIGN KEY ("MortgageBrokerStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorPurchase_StsActorStructure22 (OID = 27027) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsActorPurchase_StsActorStructure22"
    FOREIGN KEY ("MortgageApplicantStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStructure_Account (OID = 27032) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_Account"
    FOREIGN KEY ("SecondaryStsActorAccountID") REFERENCES public."Account"("AccountID");
--
-- Definition for index fk_StsActorStructure_StsActor (OID = 27037) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_StsActor"
    FOREIGN KEY ("PrimaryStsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStructure_StsActorP (OID = 27042) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_StsActorP"
    FOREIGN KEY ("SecondaryStsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsSearch_StatusType (OID = 27047) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorStsSearch_StatusTypeValue (OID = 27052) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorStsSearch_StsActor (OID = 27057) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsSearch_StsActorStructure (OID = 27062) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsActorStructure"
    FOREIGN KEY ("StsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStsSearch_StsSearch (OID = 27067) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsActorStsTransaction_StatusType (OID = 27072) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorStsTransaction_StatusTypeValue (OID = 27077) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorStsTransaction_StsActor (OID = 27082) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsTransaction_StsActorStructure (OID = 27087) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsActorStructure"
    FOREIGN KEY ("StsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStsTransaction_StsTransaction (OID = 27092) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsActor_Contact (OID = 27097) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsActor_Contact"
    FOREIGN KEY ("ActorContactID") REFERENCES public."Contact"("ContactID");
--
-- Definition for index fk_StsActor_UserAccountOrganisation (OID = 27102) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsActor_UserAccountOrganisation"
    FOREIGN KEY ("CreatedBy") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsAuthorityStsDocument_StsAuthority (OID = 27107) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "fk_StsAuthorityStsDocument_StsAuthority"
    FOREIGN KEY ("StsAuthorityID") REFERENCES "StsAuthority"("StsAuthorityID");
--
-- Definition for index fk_StsAuthorityStsDocument_StsDocument (OID = 27112) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "fk_StsAuthorityStsDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsAuthority_StsActorAuthority (OID = 27117) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "fk_StsAuthority_StsActorAuthority"
    FOREIGN KEY ("StsActorAuthorityID") REFERENCES "StsActorAuthority"("StsActorAuthorityID");
--
-- Definition for index fk_StsAuthority_StsActorStructure (OID = 27122) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "fk_StsAuthority_StsActorStructure"
    FOREIGN KEY ("StsAuthorityStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsDocumentProcessLog_Contact (OID = 27127) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_Contact"
    FOREIGN KEY ("StatusChangedByContactID") REFERENCES public."Contact"("ContactID");
--
-- Definition for index fk_StsDocumentProcessLog_StatusType (OID = 27132) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsDocumentProcessLog_StatusTypeValue (OID = 27137) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsDocumentProcessLog_StsDocument (OID = 27142) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsDocumentProcessLog_UserAccountOrganisation (OID = 27147) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_UserAccountOrganisation"
    FOREIGN KEY ("StatusChangedBy") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsDocument_Attachment (OID = 27152) :
--
ALTER TABLE ONLY "StsDocument"
    ADD CONSTRAINT "fk_StsDocument_Attachment"
    FOREIGN KEY ("AttachmentID") REFERENCES public."Attachment"("AttachmentID");
--
-- Definition for index fk_StsInviteProcessLog_StatusType (OID = 27157) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsInviteProcessLog_StatusTypeValue (OID = 27162) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsInviteProcessLog_StsInvite (OID = 27167) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StsInvite"
    FOREIGN KEY ("StsInviteID") REFERENCES "StsInvite"("StsInviteID");
--
-- Definition for index fk_StsMortgageShare_StsActor (OID = 27172) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsMortgageShare_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsProperty_Address (OID = 27177) :
--
ALTER TABLE ONLY "PropertyDetail"
    ADD CONSTRAINT "fk_StsProperty_Address"
    FOREIGN KEY ("PropertyDetailAddressID") REFERENCES public."Address"("AddressID");
--
-- Definition for index fk_StsSearchActorDetailDeposit_StsActorPurchase (OID = 27182) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "fk_StsSearchActorDetailDeposit_StsActorPurchase"
    FOREIGN KEY ("StsActorPurchaseID") REFERENCES "StsActorPurchase"("StsActorPurchaseID");
--
-- Definition for index fk_StsSearchDetail_StsSearch (OID = 27187) :
--
ALTER TABLE ONLY "StsSearchDetail"
    ADD CONSTRAINT "fk_StsSearchDetail_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchOrganisationActor_Actor (OID = 27192) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchOrganisationActor_Actor"
    FOREIGN KEY ("ActorID") REFERENCES public."Actor"("ActorID");
--
-- Definition for index fk_StsSearchOrganisationActor_Organisation (OID = 27197) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchOrganisationActor_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index fk_StsSearchPrimaryActor_Invite (OID = 27202) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchPrimaryActor_Invite"
    FOREIGN KEY ("StsInviteID") REFERENCES "StsInvite"("StsInviteID");
--
-- Definition for index fk_StsSearchPrimaryActor_UserAccountOrganisation (OID = 27207) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchPrimaryActor_UserAccountOrganisation"
    FOREIGN KEY ("ActorUserAccountOrganisationID") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsSearchProcessLog_StatusType (OID = 27212) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsSearchProcessLog_StatusTypeValue (OID = 27217) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsSearchProcessLog_StsSearch (OID = 27222) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchProperty_StsProperty (OID = 27227) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "fk_StsSearchProperty_StsProperty"
    FOREIGN KEY ("PropertyDetailID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_StsSearchProperty_StsSearch (OID = 27232) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "fk_StsSearchProperty_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchRelation_StatusType (OID = 27237) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsSearchRelation_StatusTypeValue (OID = 27242) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsSearchRelation_StsSearch (OID = 27247) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StsSearch"
    FOREIGN KEY ("BuyerStsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchRelation_StsSearch2 (OID = 27252) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StsSearch2"
    FOREIGN KEY ("SellerStsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearch_UserAccountOrganisation (OID = 27257) :
--
ALTER TABLE ONLY "StsSearch"
    ADD CONSTRAINT "fk_StsSearch_UserAccountOrganisation"
    FOREIGN KEY ("AssignedToUserAccountOrganisationID") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsSourceOfFundsStsDocument_StsDocument (OID = 27262) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "fk_StsSourceOfFundsStsDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsSourceOfFundsStsDocument_StsSourceOfFunds (OID = 27267) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "fk_StsSourceOfFundsStsDocument_StsSourceOfFunds"
    FOREIGN KEY ("StsSourceOfFunds") REFERENCES "StsSourceOfFunds"("StsSourceOfFunds");
--
-- Definition for index fk_StsSourceOfFunds_StsActorStructure (OID = 27272) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "fk_StsSourceOfFunds_StsActorStructure"
    FOREIGN KEY ("SourceOfFundsStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsTransactionComponent_Artefact (OID = 27277) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "fk_StsTransactionComponent_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES public."Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_StsTransactionComponent_StsTransaction (OID = 27282) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "fk_StsTransactionComponent_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransactionProcessLog_StatusType (OID = 27287) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsTransactionProcessLog_StatusTypeValue (OID = 27292) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsTransactionProcessLog_StsTransaction (OID = 27297) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransactionPropertyDetail_PropertyDetail (OID = 27302) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "fk_StsTransactionPropertyDetail_PropertyDetail"
    FOREIGN KEY ("PropertyDetailID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_StsTransactionPropertyDetail_StsTransaction (OID = 27307) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "fk_StsTransactionPropertyDetail_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransaction_Organisation (OID = 27312) :
--
ALTER TABLE ONLY "StsTransaction"
    ADD CONSTRAINT "fk_StsTransaction_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index pkContactRegulator (OID = 27879) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "pkContactRegulator"
    PRIMARY KEY ("ContactID", "RegulatorID");
--
-- Definition for index ContactRegulator_RegulatorID_key (OID = 27882) :
--
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "ContactRegulator_RegulatorID_key"
    UNIQUE ("RegulatorID");
--
-- Definition for trigger "public_Plan_audit" (OID = 22350) :
--
CREATE TRIGGER """public_Plan_audit"""
    AFTER INSERT OR DELETE OR UPDATE ON "Plan"
    FOR EACH ROW
    EXECUTE PROCEDURE public_audit."Plan" ();
--
-- Definition for trigger "public_ProductDetail_audit" (OID = 22351) :
--
CREATE TRIGGER """public_ProductDetail_audit"""
    AFTER INSERT OR DELETE OR UPDATE ON "ProductDetail"
    FOR EACH ROW
    EXECUTE PROCEDURE public_audit."ProductDetail" ();
--
-- Comments
--
COMMENT ON SCHEMA public IS 'standard public schema';
COMMENT ON SCHEMA audit IS 'Out-of-table audit/history logging tables and trigger functions';
SET search_path = audit, pg_catalog;
COMMENT ON FUNCTION audit.audit_table (target_table varchar) IS '
Add auditing support to the given table. Row-level changes will be logged with full client query text. No cols are ignored.
';
COMMENT ON FUNCTION audit.audit_table (target_table varchar, audit_rows boolean, audit_query_text boolean, ignored_cols text[]) IS '
Add auditing support to a table.

Arguments:
   target_table:     Table name, schema qualified if not on search_path
   audit_rows:       Record each row change, or only audit at a statement level
   audit_query_text: Record the text of the client query that triggered the audit event?
   ignored_cols:     Columns to exclude from update diffs, ignore updates that change only ignored cols.
';
COMMENT ON FUNCTION audit.if_modified_func () IS '
Track changes to a table at the statement and/or row level.

Optional parameters to trigger in CREATE TRIGGER call:

param 0: boolean, whether to log the query text. Default ''t''.

param 1: text[], columns to ignore in updates. Default [].

         Updates to ignored cols are omitted from changed_fields.

         Updates with only ignored cols changed are not inserted
         into the audit log.

         Almost all the processing work is still done for updates
         that ignored. If you need to save the load, you need to use
         WHEN clause on the trigger instead.

         No warning or error is issued if ignored_cols contains columns
         that do not exist in the target table. This lets you specify
         a standard set of ignored columns.

There is no parameter to disable logging of values. Add this trigger as
a ''FOR EACH STATEMENT'' rather than ''FOR EACH ROW'' trigger if you do not
want to log row values.

Note that the user name logged is the login role for the session. The audit trigger
cannot obtain the active role because it i-- SQL Manager for PostgreSQL 5.5.1.45206
-- ---------------------------------------
-- Host      : bec-dev-01.bec.local:5433
-- Database  : TargetFramework
-- Version   : PostgreSQL 9.4.0, compiled by Visual C++ build 1800, 64-bit



CREATE SCHEMA legal AUTHORIZATION postgres;
CREATE SCHEMA public_audit AUTHORIZATION postgres;
CREATE SCHEMA sts AUTHORIZATION postgres;
CREATE SCHEMA audit AUTHORIZATION postgres;
--
-- Definition for function hstore_recv (OID = 16402) :
--
SET search_path = public, pg_catalog;
SET check_function_bodies = false;
CREATE FUNCTION public.hstore_recv (
  internal
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_recv'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_send (OID = 16403) :
--
CREATE FUNCTION public.hstore_send (
  hstore
)
RETURNS bytea
AS '$libdir/hstore', 'hstore_send'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_version_diag (OID = 16405) :
--
CREATE FUNCTION public.hstore_version_diag (
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_version_diag'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function slice_array (OID = 16408) :
--
CREATE FUNCTION public.slice_array (
  hstore,
  text[]
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_slice_to_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator -> (OID = 16409) :
--
CREATE OPERATOR -> (
    PROCEDURE = public.slice_array,
    LEFTARG = public.hstore,
    RIGHTARG = text[]
);
--
-- Definition for function slice (OID = 16410) :
--
CREATE FUNCTION public.slice (
  hstore,
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_slice_to_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function exists_any (OID = 16414) :
--
CREATE FUNCTION public.exists_any (
  hstore,
  text[]
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_exists_any'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator ?| (OID = 16415) :
--
CREATE OPERATOR ?| (
    PROCEDURE = public.exists_any,
    LEFTARG = public.hstore,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);
--
-- Definition for function exists_all (OID = 16416) :
--
CREATE FUNCTION public.exists_all (
  hstore,
  text[]
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_exists_all'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator ?& (OID = 16417) :
--
CREATE OPERATOR ?& (
    PROCEDURE = public.exists_all,
    LEFTARG = public.hstore,
    RIGHTARG = text[],
    RESTRICT = contsel,
    JOIN = contjoinsel
);
--
-- Definition for function delete (OID = 16421) :
--
CREATE FUNCTION public.delete (
  hstore,
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_delete_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function delete (OID = 16422) :
--
CREATE FUNCTION public.delete (
  hstore,
  hstore
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_delete_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator - (OID = 16423) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = text
);
--
-- Definition for operator - (OID = 16424) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = text[]
);
--
-- Definition for operator - (OID = 16425) :
--
CREATE OPERATOR - (
    PROCEDURE = public.delete,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore (OID = 16435) :
--
CREATE FUNCTION public.hstore (
  text,
  text
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_text'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore (OID = 16436) :
--
CREATE FUNCTION public.hstore (
  text[],
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_arrays'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore (OID = 16437) :
--
CREATE FUNCTION public.hstore (
  text[]
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16438)
--
CREATE CAST (text[] AS hstore) WITH FUNCTION hstore (text[]);
--
-- Definition for function hstore_to_json (OID = 16439) :
--
CREATE FUNCTION public.hstore_to_json (
  hstore
)
RETURNS json
AS '$libdir/hstore', 'hstore_to_json'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16440)
--
CREATE CAST (hstore AS json) WITH FUNCTION hstore_to_json (hstore);
--
-- Definition for function hstore_to_json_loose (OID = 16441) :
--
CREATE FUNCTION public.hstore_to_json_loose (
  hstore
)
RETURNS json
AS '$libdir/hstore', 'hstore_to_json_loose'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_to_jsonb (OID = 16442) :
--
CREATE FUNCTION public.hstore_to_jsonb (
  hstore
)
RETURNS jsonb
AS '$libdir/hstore', 'hstore_to_jsonb'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Data for cast  (OID = 16443)
--
CREATE CAST (hstore AS jsonb) WITH FUNCTION hstore_to_jsonb (hstore);
--
-- Definition for function hstore_to_jsonb_loose (OID = 16444) :
--
CREATE FUNCTION public.hstore_to_jsonb_loose (
  hstore
)
RETURNS jsonb
AS '$libdir/hstore', 'hstore_to_jsonb_loose'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore (OID = 16445) :
--
CREATE FUNCTION public.hstore (
  record
)
RETURNS hstore
AS '$libdir/hstore', 'hstore_from_record'
LANGUAGE c
IMMUTABLE;
--
-- Definition for function hstore_to_array (OID = 16446) :
--
CREATE FUNCTION public.hstore_to_array (
  hstore
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_to_array'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator %% (OID = 16447) :
--
CREATE OPERATOR %% (
    PROCEDURE = public.hstore_to_array,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore_to_matrix (OID = 16448) :
--
CREATE FUNCTION public.hstore_to_matrix (
  hstore
)
RETURNS text[]
AS '$libdir/hstore', 'hstore_to_matrix'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator %# (OID = 16449) :
--
CREATE OPERATOR %# (
    PROCEDURE = public.hstore_to_matrix,
    RIGHTARG = public.hstore
);
--
-- Definition for function populate_record (OID = 16455) :
--
CREATE FUNCTION public.populate_record (
  anyelement,
  hstore
)
RETURNS anyelement
AS '$libdir/hstore', 'hstore_populate_record'
LANGUAGE c
IMMUTABLE;
--
-- Definition for operator #= (OID = 16456) :
--
CREATE OPERATOR #= (
    PROCEDURE = public.populate_record,
    LEFTARG = anyelement,
    RIGHTARG = public.hstore
);
--
-- Definition for function hstore_eq (OID = 16457) :
--
CREATE FUNCTION public.hstore_eq (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_eq'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_ne (OID = 16458) :
--
CREATE FUNCTION public.hstore_ne (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_ne'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_gt (OID = 16459) :
--
CREATE FUNCTION public.hstore_gt (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_gt'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_ge (OID = 16460) :
--
CREATE FUNCTION public.hstore_ge (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_ge'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_lt (OID = 16461) :
--
CREATE FUNCTION public.hstore_lt (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_lt'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_le (OID = 16462) :
--
CREATE FUNCTION public.hstore_le (
  hstore,
  hstore
)
RETURNS boolean
AS '$libdir/hstore', 'hstore_le'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function hstore_cmp (OID = 16463) :
--
CREATE FUNCTION public.hstore_cmp (
  hstore,
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_cmp'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for operator <> (OID = 16464) :
--
CREATE OPERATOR <> (
    PROCEDURE = public.hstore_ne,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.<>,
    NEGATOR = public.=,
    RESTRICT = neqsel,
    JOIN = neqjoinsel
);
--
-- Definition for operator = (OID = 16465) :
--
CREATE OPERATOR = (
    PROCEDURE = public.hstore_eq,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.=,
    NEGATOR = public.<>,
    HASHES,
    RESTRICT = eqsel,
    JOIN = eqjoinsel
);
--
-- Definition for operator #># (OID = 16466) :
--
CREATE OPERATOR #># (
    PROCEDURE = public.hstore_gt,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#<#,
    NEGATOR = public.#<=#,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);
--
-- Definition for operator #>=# (OID = 16467) :
--
CREATE OPERATOR #>=# (
    PROCEDURE = public.hstore_ge,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#<=#,
    NEGATOR = public.#<#,
    RESTRICT = scalargtsel,
    JOIN = scalargtjoinsel
);
--
-- Definition for operator #<# (OID = 16468) :
--
CREATE OPERATOR #<# (
    PROCEDURE = public.hstore_lt,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#>#,
    NEGATOR = public.#>=#,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);
--
-- Definition for operator #<=# (OID = 16469) :
--
CREATE OPERATOR #<=# (
    PROCEDURE = public.hstore_le,
    LEFTARG = public.hstore,
    RIGHTARG = public.hstore,
    COMMUTATOR = public.#>=#,
    NEGATOR = public.#>#,
    RESTRICT = scalarltsel,
    JOIN = scalarltjoinsel
);
--
-- Definition for function hstore_hash (OID = 16478) :
--
CREATE FUNCTION public.hstore_hash (
  hstore
)
RETURNS integer
AS '$libdir/hstore', 'hstore_hash'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function ghstore_consistent (OID = 16493) :
--
CREATE FUNCTION public.ghstore_consistent (
  internal,
  internal,
  integer,
  oid,
  internal
)
RETURNS boolean
AS '$libdir/hstore', 'ghstore_consistent'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function gin_extract_hstore_query (OID = 16509) :
--
CREATE FUNCTION public.gin_extract_hstore_query (
  internal,
  internal,
  smallint,
  internal,
  internal
)
RETURNS internal
AS '$libdir/hstore', 'gin_extract_hstore_query'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function gin_consistent_hstore (OID = 16510) :
--
CREATE FUNCTION public.gin_consistent_hstore (
  internal,
  smallint,
  internal,
  integer,
  internal,
  internal
)
RETURNS boolean
AS '$libdir/hstore', 'gin_consistent_hstore'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_nil (OID = 16522) :
--
CREATE FUNCTION public.uuid_nil (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_nil'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_dns (OID = 16523) :
--
CREATE FUNCTION public.uuid_ns_dns (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_dns'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_url (OID = 16524) :
--
CREATE FUNCTION public.uuid_ns_url (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_url'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_oid (OID = 16525) :
--
CREATE FUNCTION public.uuid_ns_oid (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_oid'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_ns_x500 (OID = 16526) :
--
CREATE FUNCTION public.uuid_ns_x500 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_ns_x500'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_generate_v1 (OID = 16527) :
--
CREATE FUNCTION public.uuid_generate_v1 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v1'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v1mc (OID = 16528) :
--
CREATE FUNCTION public.uuid_generate_v1mc (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v1mc'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v3 (OID = 16529) :
--
CREATE FUNCTION public.uuid_generate_v3 (
  namespace uuid,
  name text
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v3'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function uuid_generate_v4 (OID = 16530) :
--
CREATE FUNCTION public.uuid_generate_v4 (
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v4'
LANGUAGE c
STRICT;
--
-- Definition for function uuid_generate_v5 (OID = 16531) :
--
CREATE FUNCTION public.uuid_generate_v5 (
  namespace uuid,
  name text
)
RETURNS uuid
AS '$libdir/uuid-ossp', 'uuid_generate_v5'
LANGUAGE c
IMMUTABLE STRICT;
--
-- Definition for function audit_table (OID = 16532) :
--
SET search_path = audit, pg_catalog;
CREATE FUNCTION audit.audit_table (
  target_table character varying
)
RETURNS void
AS
$body$
SELECT audit.audit_table($1, BOOLEAN 't', BOOLEAN 't');
$body$
LANGUAGE sql;
--
-- Definition for function audit_table (OID = 16533) :
--
CREATE FUNCTION audit.audit_table (
  target_table character varying,
  audit_rows boolean,
  audit_query_text boolean
)
RETURNS void
AS
$body$
SELECT audit.audit_table($1, $2, $3, ARRAY[]::text[]);
$body$
LANGUAGE sql;
--
-- Definition for function audit_table (OID = 16534) :
--
CREATE FUNCTION audit.audit_table (
  target_table character varying,
  audit_rows boolean,
  audit_query_text boolean,
  ignored_cols text[]
)
RETURNS void
AS
$body$
DECLARE
  stm_targets text = 'INSERT OR UPDATE OR DELETE OR TRUNCATE';
  _q_txt text;
  _ignored_cols_snip text = '';
BEGIN
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_row ON ' || target_table;
    EXECUTE 'DROP TRIGGER IF EXISTS audit_trigger_stm ON ' || target_table;

    IF audit_rows THEN
        IF array_length(ignored_cols,1) > 0 THEN
            _ignored_cols_snip = ', ' || quote_literal(ignored_cols);
        END IF;
        _q_txt = 'CREATE TRIGGER audit_trigger_row AFTER INSERT OR UPDATE OR DELETE ON ' ||
                 target_table ||
                 ' FOR EACH ROW EXECUTE PROCEDURE audit.if_modified_func(' ||
                 quote_literal(audit_query_text) || _ignored_cols_snip || ');';
        RAISE NOTICE '%',_q_txt;
        EXECUTE _q_txt;
        stm_targets = 'TRUNCATE';
    ELSE
    END IF;

    _q_txt = 'CREATE TRIGGER audit_trigger_stm AFTER ' || stm_targets || ' ON ' ||
             target_table ||
             ' FOR EACH STATEMENT EXECUTE PROCEDURE audit.if_modified_func('||
             quote_literal(audit_query_text) || ');';
    RAISE NOTICE '%',_q_txt;
    EXECUTE _q_txt;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function if_modified_func (OID = 16535) :
--
CREATE FUNCTION audit.if_modified_func (
)
RETURNS trigger
AS
$body$
DECLARE
    audit_row audit.logged_actions;
    include_values boolean;
    log_diffs boolean;
    h_old hstore;
    h_new hstore;
    excluded_cols text[] = ARRAY[]::text[];
BEGIN
    IF TG_WHEN <> 'AFTER' THEN
        RAISE EXCEPTION 'audit.if_modified_func() may only run as an AFTER trigger';
    END IF;

    audit_row = ROW(
        nextval('audit.logged_actions_event_id_seq'), -- event_id
        TG_TABLE_SCHEMA::text,                        -- schema_name
        TG_TABLE_NAME::text,                          -- table_name
        TG_RELID,                                     -- relation OID for much quicker searches
        session_user::text,                           -- session_user_name
        current_timestamp,                            -- action_tstamp_tx
        statement_timestamp(),                        -- action_tstamp_stm
        clock_timestamp(),                            -- action_tstamp_clk
        txid_current(),                               -- transaction ID
        (SELECT setting FROM pg_settings WHERE name = 'application_name'),
        inet_client_addr(),                           -- client_addr
        inet_client_port(),                           -- client_port
        current_query(),                              -- top-level query or queries (if multistatement) from client
        substring(TG_OP,1,1),                         -- action
        NULL, NULL,                                   -- row_data, changed_fields
        'f'                                           -- statement_only
        );

    IF NOT TG_ARGV[0]::boolean IS DISTINCT FROM 'f'::boolean THEN
        audit_row.client_query = NULL;
    END IF;

    IF TG_ARGV[1] IS NOT NULL THEN
        excluded_cols = TG_ARGV[1]::text[];
    END IF;

    IF (TG_OP = 'UPDATE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*);
        audit_row.changed_fields =  (hstore(NEW.*) - audit_row.row_data) - excluded_cols;
        IF audit_row.changed_fields = hstore('') THEN
            -- All changed fields are ignored. Skip this update.
            RETURN NULL;
        END IF;
    ELSIF (TG_OP = 'DELETE' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(OLD.*) - excluded_cols;
    ELSIF (TG_OP = 'INSERT' AND TG_LEVEL = 'ROW') THEN
        audit_row.row_data = hstore(NEW.*) - excluded_cols;
    ELSIF (TG_LEVEL = 'STATEMENT' AND TG_OP IN ('INSERT','UPDATE','DELETE','TRUNCATE')) THEN
        audit_row.statement_only = 't';
    ELSE
        RAISE EXCEPTION '[audit.if_modified_func] - Trigger func added as trigger for unhandled case: %, %',TG_OP, TG_LEVEL;
        RETURN NULL;
    END IF;
    INSERT INTO audit.logged_actions VALUES (audit_row.*);
    RETURN NULL;
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = pg_catalog, public;
--
-- Definition for function create_audit (OID = 16536) :
--
SET search_path = public, pg_catalog;
CREATE FUNCTION public.create_audit (
  enable_replica boolean,
  tablename character varying,
  schemaname character varying
)
RETURNS SETOF text
AS
$body$
SELECT format('CREATE SCHEMA IF NOT EXISTS %I;', nspname || '_audit')
FROM pg_catalog.pg_namespace n
WHERE
    n.nspname NOT IN ('pg_catalog','information_schema') AND /* Leave out the stuff in the catalog */
    n.nspname !~ '(^(pg|)_|_audit$)' /* Also omit anything that looks like PostgreSQL, Slony or Audit owns it. */
UNION ALL
(
    WITH t0 AS (
        SELECT
            n.nspname AS "schema",
            c.relname AS "table",
            a.attname AS "column_name",
            pg_catalog.format_type(a.atttypid, a.atttypmod) AS "column_type"
        FROM
            pg_catalog.pg_attribute a
        JOIN
            pg_catalog.pg_class c
            ON (
                c.relkind = 'r' AND
                c.oid = a.attrelid
            )
        JOIN
            pg_catalog.pg_namespace n
            ON (
                c.relnamespace = n.oid AND
                n.nspname NOT IN ('pg_catalog','information_schema') AND /* Leave out the stuff in the catalog */
                n.nspname !~ '(^(pg|)_|_audit$)' /* Also omit anything that looks like PostgreSQL, Slony or Audit owns it. */
            )
        WHERE
            a.attnum > 0 AND
            NOT a.attisdropped
            AND lower(n.nspname) = lower(schemaname)
            AND lower(c.relname) = lower(tablename)

        ORDER BY c.relname, a.attnum
    )
    SELECT
        format(
            $q$CREATE TABLE IF NOT EXISTS %I.%I (
    %s,
    stamp TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT current_timestamp,
    "current_user" TEXT NOT NULL DEFAULT current_user,
    "session_user" TEXT NOT NULL DEFAULT session_user,
    operation TEXT NOT NULL
);

CREATE OR REPLACE FUNCTION %I.%I()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
    v_old %I.%I%%ROWTYPE;
    v_new %I.%I%%ROWTYPE;
    v_ret %I.%I%%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO %I.%I (
        %s,
        operation
    )
    VALUES((v_old).*, TG_OP);
    RETURN v_ret;
END;
$$;

CREATE TRIGGER %I
AFTER INSERT OR UPDATE OR DELETE ON %I.%I
    FOR EACH ROW EXECUTE PROCEDURE %I.%I();
%s
INSERT INTO %I.%I (
    %s,
    operation
)
SELECT
    %s,
    'INSERT'
FROM %I.%I;

$q$,
        "schema" || '_audit', "table",
        string_agg(

            quote_ident("column_name") || ' ' || column_type, E',\n '
        ),
        "schema" || '_audit', "table",
        "schema", "table",
        "schema", "table",
        "schema", "table",
        "schema" || '_audit', "table",
        string_agg(quote_ident("column_name"), E',\n '),
        quote_ident("schema" || '_' || "table" || '_audit'),
        "schema", "table",
        "schema" || '_audit', "table",
        CASE
        WHEN enable_replica THEN
            format(
                '%sALTER TABLE %I.%I ENABLE REPLICA TRIGGER %I;%s',
                E'\n', "schema", "table", "schema" || '_' || "table" || '_audit', E'\n'
            )
        ELSE ''
        END,
        "schema" || '_audit', "table",
        string_agg(quote_ident("column_name"), E',\n '),
        string_agg(quote_ident("column_name"), E',\n '),
        "schema", "table"
        ) AS "table and trigger"
        FROM
            t0
        GROUP BY "schema", "table"
)
UNION ALL
/* Indexes for each unique key */
(
    WITH t1 AS (
        SELECT
            n.nspname::text,
            c.relname::text,
            array_agg(a.attname::text ORDER BY k.ord) AS "cols"
        FROM
            pg_catalog.pg_class c
        JOIN
            pg_catalog.pg_namespace n
            ON (
                c.relkind = 'r' AND
                c.relnamespace = n.oid AND
                n.nspname NOT IN ('pg_catalog','information_schema') AND
                n.nspname !~ '(^(pg|)_|_audit$)'
            )
        JOIN
            pg_catalog.pg_constraint co
            ON (
                c.oid = co.conrelid AND
                co.contype IN ('p','u')
            )
        CROSS JOIN LATERAL
            /*
* XXX In 9.4+, replace the hack below with
* UNNEST(co.conkey) WITH ORDINALITY AS k(col, ord)
*/
            (SELECT col, row_number() OVER () AS ord FROM UNNEST(co.conkey) AS u(col)) AS k
        JOIN
            pg_catalog.pg_attribute a
            ON (
                k.col = a.attnum AND
                c.oid = a.attrelid
            )
        WHERE lower(n.nspname) = lower(schemaname)
            AND lower(c.relname) = lower(tablename)
        GROUP BY n.nspname, c.relname, co.conname
    )
    SELECT
        format(
            'CREATE INDEX ON %I.%I (%s);',
            nspname || '_audit',
            relname,
            (SELECT string_agg(u || '_' || v, ', ') FROM UNNEST(cols) AS u(u))
        )
    FROM
        t1
    CROSS JOIN
        (VALUES('old'),('new')) AS o_n(v)
);
$body$
LANGUAGE sql
IMMUTABLE STRICT;
--
-- Definition for function fn_AddAudit (OID = 16538) :
--
CREATE FUNCTION public."fn_AddAudit" (
)
RETURNS void
AS
$body$
begin

  PERFORM public."fn_CreateAuditTableAndColumns"('Organisation','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('Plan','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('ProductDetail','Public');
  PERFORM public."fn_CreateAuditTableAndColumns"('UserAccounts','Public');
end
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddAuditColumnToTable (OID = 16539) :
--
CREATE FUNCTION public."fn_AddAuditColumnToTable" (
  tablename character varying,
  schemaname character varying
)
RETURNS void
AS
$body$
DECLARE my_row    RECORD;
begin
    FOR my_row IN
        SELECT t.table_name
        FROM   information_schema.tables t
        WHERE  lower(t.table_schema)  = lower(schemaname) and lower(t.table_name) = lower(tablename)
    LOOP

     IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'CreatedOn')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "CreatedOn" date NOT NULL DEFAULT CURRENT_DATE;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'CreatedBy')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "CreatedBy" varchar(200) NULL;');
    END IF;

     IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'ModifiedOn')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "ModifiedOn" date NULL;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'ModifiedBy')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "ModifiedBy" varchar(200) NULL;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'IsActive')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "IsActive" boolean NOT NULL DEFAULT true;');
    END IF;

    IF NOT EXISTS
    (
    SELECT attname FROM pg_attribute WHERE attrelid =
    (SELECT oid FROM pg_class  WHERE lower(relname) =  lower(tablename) )
     AND (attname = 'IsDeleted')
     )
     THEN
        EXECUTE('ALTER TABLE ' || 'public."' || my_row.table_name || '" ADD COLUMN "IsDeleted" boolean NOT NULL DEFAULT false;');
    END IF;

    END LOOP;

end
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddPlanSubscriptionToOrganisation (OID = 16540) :
--
CREATE FUNCTION public."fn_AddPlanSubscriptionToOrganisation" (
  organisationid uuid,
  planid uuid,
  planversionnumber integer,
  globalpaymentmethodid uuid,
  quantity integer,
  activate boolean,
  startimmediately boolean
)
RETURNS void
AS
$body$
DECLARE
  PlanSubscriptionID UUID;
  PlanSubscriptionVersionNumber integer;
  BillingID uuid;
  PlanHasTrial boolean;
BEGIN

PlanSubscriptionID := (select uuid_generate_v1());

PlanSubscriptionVersionNumber = 1;

BillingID := (select pb."BillingID" from "PlanBilling" pb where pb."PlanID" = planid and pb."PlanVersionNumber" = planversionnumber and pb."IsActive" = true and pb."IsDeleted" = false limit 1);

PlanHasTrial := (select (case when pb."TrialPeriod" > 0 then true else false end) from "Plan" pb where pb."PlanID" = planid and pb."PlanVersionNumber" = planversionnumber);

-- create subscription
INSERT INTO
  public."PlanSubscription"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "HasInfinitePeriods",
  "PlanQuantity",
  "CreatedOn",
  "CreatedBy",
  "ActivatedOn",
  "CountryCode",
  "IsFree",
  "PlanID",
  "PlanVersionNumber",
  "OrganisationID",
  "IsRenewal"
)
SELECT
   PlanSubscriptionID,
   PlanSubscriptionVersionNumber,
   p."HasInfinitePeriods",
   quantity,
   CURRENT_DATE,
   'system',
   (CASE WHEN activate = true then CURRENT_DATE else null end),
   p."CountryCode",
   p."IsFree",
   p."PlanID",
   p."PlanVersionNumber",
   organisationid,
   FALSE
FROM
  public."Plan" p

  where p."PlanID" = planid and p."PlanVersionNumber" = planversionnumber
  and not exists (select * from "PlanSubscription" ps where ps."PlanID" = planid and ps."PlanVersionNumber" = planversionnumber and ps."IsRenewal" = false limit 1);

-- first period
-- only supports month currently for period
INSERT INTO
  public."PlanSubscriptionPeriod"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "IsCancellationPeriod",
  "PeriodNumber",
  "IsTrialPeriod",
  "TrialPeriodNumber",
  "TrialStartDate",
  "TrialEndDate",
  "IsClosed"
)
SELECT
	PlanSubscriptionID,
    PlanSubscriptionVersionNumber,
    CURRENT_DATE,
   -- start date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    -- end date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    false,
    1,
    (CASE WHEN p."TrialPeriod" > 0 then true else false end),
    (CASE WHEN p."TrialPeriod" > 0 then 1 else null end),
    (CASE WHEN p."TrialPeriod" > 0 then CURRENT_DATE else NULL end),
    (CASE WHEN p."TrialPeriod" = 0 then null else
    	 (CASE WHEN tperiod."Name" = 'Month' then (current_date + interval '1 month' * p."TrialPeriod") end) end),
    false
FROM
   public."Plan" p

   left outer join "ClassificationType" period on period."ClassificationTypeID" = p."PeriodUnitID" and period."ClassificationTypeCategoryID" = 8006
   left outer join "ClassificationType" tperiod on tperiod."ClassificationTypeID" = p."TrialPeriodUnitID" and tperiod."ClassificationTypeCategoryID" = 8006

left outer join "GlobalAccountingPeriod" gap on gap."IsCurrentPeriod" = true

  where p."PlanID" = planid and p."PlanVersionNumber" = planversionnumber;

-- payment plan
INSERT INTO
  public."PlanSubscriptionPaymentPlan"
(
  "GlobalPaymentMethodID",
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "BillingID"
)
VALUES (
  globalpaymentmethodid,
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  BillingID
);

-- subscription process log, deal with trial status
IF (PlanHasTrial = true)
THEN


INSERT INTO
  public."PlanSubscriptionProcessLog"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "IsCancelled",
  "IsRenewed",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
VALUES (
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  CURRENT_DATE,
  false,
  false,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."Name" = 'Trialing' limit 1)
);



ELSE



INSERT INTO
  public."PlanSubscriptionProcessLog"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "IsCancelled",
  "IsRenewed",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
VALUES (
  PlanSubscriptionID,
  PlanSubscriptionVersionNumber,
  CURRENT_DATE,
  false,
  false,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionProcessLog Status' and st."IsStart" = true limit 1)
);



END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddUserToOrganisation (OID = 16541) :
--
CREATE FUNCTION public."fn_AddUserToOrganisation" (
  useraccountid uuid,
  organisationid uuid,
  usertypeid uuid,
  organisationbranchid uuid
)
RETURNS void
AS
$body$
DECLARE
	DefaultOrganisationID UUID;
    DefaultOrganisationVersionNumber INTEGER;
    UserExists BOOLEAN;
    UserAccountOrganisationID UUID;
BEGIN

DefaultOrganisationID := (select "DefaultOrganisationID"
	from "Organisation" where "OrganisationID" = organisationid);

DefaultOrganisationVersionNumber := (select "DefaultOrganisationVersionNumber"
	from "Organisation" where "OrganisationID" = organisationid);

-- Get UserType default if null
if(usertypeid is null)
THEN
	usertypeid := (select u."UserTypeID" from "DefaultOrganisationUserTarget" u where u."DefaultOrganisationID" = DefaultOrganisationID
    	and u."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber and u."IsDefault" = true and u."IsActive" = true and u."IsDeleted" = FALSE);
END IF;

-- check user doesnt exist
IF(EXISTS(select u."UserID" from "UserAccountOrganisation" u where u."UserID" = useraccountid and u."OrganisationID" = organisationbranchid))
THEN
	UserExists := true;
ELSE
	UserExists := false;
END IF;

-- Create UAO if doesnt exist
IF(UserExists = false)
THEN
INSERT INTO
  public."UserAccountOrganisation"
(
  "UserID",
  "OrganisationID",
  "IsActive",
  "IsDeleted",
  "UserTypeID",
  "ParentID"
)
values
(
  useraccountid,
  organisationbranchid,
  true,
  false,
  usertypeid,
  organisationid
);
END IF;
UserAccountOrganisationID := (select ua."UserAccountOrganisationID" from "UserAccountOrganisation" ua where ua."UserID" = useraccountid and ua."OrganisationID" = organisationbranchid);



-- Create Roles  for User
INSERT INTO
  public."UserAccountOrganisationRole"
(
  "OrganisationRoleID",
  "IsActive",
  "IsDeleted",
  "UserAccountOrganisationID"
)
SELECT
  COALESCE(or1."OrganisationRoleID",or2."OrganisationRoleID"),
  wt."IsActive",
  wt."IsDeleted",
  UserAccountOrganisationID
FROM
  public."DefaultOrganisationRoleTarget" wt

  left outer join "DefaultOrganisationRole" dor on dor."DefaultOrganisationRoleID" = wt."DefaultOrganisationRoleID"

  left outer join "OrganisationRole" or1 on or1."OrganisationID" = organisationid and or1."ParentID" = dor."DefaultOrganisationRoleID"
  left outer join "OrganisationRole" or2 on or2."OrganisationID" = organisationid and or2."ParentID" = dor."RoleID"

  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid

  where wt."DefaultOrganisationUserTargetID" in (select d."DefaultOrganisationUserTargetID" from "DefaultOrganisationUserTarget" d where d."UserTypeID" = usertypeid and d."DefaultOrganisationID" = DefaultOrganisationID
  	and d."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber)
  	and (not exists(select u."OrganisationRoleID" from "UserAccountOrganisationRole" u where u."OrganisationRoleID" = or1."OrganisationRoleID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")
    or not exists(select u."OrganisationRoleID" from "UserAccountOrganisationRole" u where u."OrganisationRoleID" = or2."OrganisationRoleID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID"));

-- Create Groups  for User
INSERT INTO
  public."UserAccountOrganisationGroup"
(
  "OrganisationGroupID",
  "IsActive",
  "IsDeleted",
  "UserAccountOrganisationID"
)
SELECT
  COALESCE(or1."OrganisationGroupID",or2."OrganisationGroupID"),
  wt."IsActive",
  wt."IsDeleted",
  UserAccountOrganisationID
FROM
  public."DefaultOrganisationGroupTarget" wt

  left outer join "DefaultOrganisationGroup" dor on dor."DefaultOrganisationGroupID" = wt."DefaultOrganisationGroupID"

  left outer join "OrganisationGroup" or1 on or1."OrganisationID" = organisationid and or1."ParentID" = dor."DefaultOrganisationGroupID"
  left outer join "OrganisationGroup" or2 on or2."OrganisationID" = organisationid and or2."ParentID" = dor."GroupID"

  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid

  where wt."DefaultOrganisationUserTargetID" in (select d."DefaultOrganisationUserTargetID" from "DefaultOrganisationUserTarget" d where d."UserTypeID" = usertypeid and d."DefaultOrganisationID" = DefaultOrganisationID
  	and d."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber)
  	and (not exists(select u."OrganisationGroupID" from "UserAccountOrganisationGroup" u where u."OrganisationGroupID" = or1."OrganisationGroupID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")
    or not exists(select u."OrganisationGroupID" from "UserAccountOrganisationGroup" u where u."OrganisationGroupID" = or2."OrganisationGroupID" and u."UserAccountOrganisationID" = uao."UserAccountOrganisationID")) ;

-- Create Status for user if it doesnt exist
if(UserExists = false)
THEN
	INSERT INTO
  public."UserAccountOrganisationStatus"
(
  "UserAccountOrganisationID",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "StatusChangedOn",
  "StatusChangedBy",
  "ParentID"
)
SELECT
  uao."UserAccountOrganisationID",
  wt."StatusTypeID",
  wt."StatusTypeVersionNumber",
  st."StatusTypeValueID",
  CURRENT_DATE,
  'System',
  wt."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationUserTarget" wt
  left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."IsStart" = true
  left outer join "UserAccountOrganisation" uao on uao."UserID" = useraccountid and uao."OrganisationID" = organisationbranchid
   where wt."DefaultOrganisationID" = DefaultOrganisationID and wt."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
   and not exists(select * from "UserAccountOrganisationStatus" us where us."UserAccountOrganisationID" = uao."UserAccountOrganisationID" and us."StatusTypeID" = wt."StatusTypeID"
   	and us."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and us."StatusTypeValueID" = st."StatusTypeValueID");


END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_AddUserToTemporaryOrganisation (OID = 16542) :
--
CREATE FUNCTION public."fn_AddUserToTemporaryOrganisation" (
  useraccountid uuid
)
RETURNS void
AS
$body$
DECLARE
  OrgID UUID;
  OrgBranchID UUID;
  UserTypeID UUID;
BEGIN
  UserTypeID := (select  "UserTypeID" from "UserType" where "Name" = 'Temporary');
  if(UserTypeID IS NOT NULL)
  THEN
  BEGIN
      SELECT   INTO  OrgID, OrgBranchID  "OrganisationID",  "organisationbranchid"
      FROM   public."vOrganisationUserType"  WHERE "UserTypeID" = UserTypeID and "Name" = 'Temporary' ;

      PERFORM public."fn_AddUserToOrganisation"(useraccountid, OrgID, UserTypeID, OrgBranchID);
  END;
  END IF;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_CreateAuditTableAndColumns (OID = 16543) :
--
CREATE FUNCTION public."fn_CreateAuditTableAndColumns" (
  tablename character varying,
  schemaname character varying
)
RETURNS void
AS
$body$
Declare
	DefaultOrganisationID uuid;
	audit_row    RECORD;
	index_row    RECORD;
begin
     -- Create Columns on target table
     PERFORM "fn_AddAuditColumnToTable"(tablename,schemaname);
     -- execute history tables

     FOR audit_row IN
         SELECT * FROM public.create_audit(false, tablename, schemaname)  where lower(create_audit ) like '%create table%'
     LOOP

     EXECUTE(audit_row.create_audit);

     END LOOP;

end;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_CreateOrganisationFromDefault (OID = 16544) :
--
CREATE FUNCTION public."fn_CreateOrganisationFromDefault" (
  organisationtypeid integer,
  defaultorganisationid uuid,
  organisationversionnumber integer,
  organisationname character varying = 'Organisation'::character varying,
  organisationdescription character varying = 'Organisation Description'::character varying
)
RETURNS uuid
AS
$body$
Declare
  OrganisationID uuid;
  LoopRow RECORD;
begin
  OrganisationID := uuid_generate_v1();

  -- If no defaultorgid then determine from orgtypeid
  if(defaultorganisationid is null) then
    Begin
      defaultorganisationid := (
      select
        DOrg."DefaultOrganisationID"
      from
        "DefaultOrganisation" DOrg
        inner join "DefaultOrganisationTarget" DOT on DOrg."DefaultOrganisationVersionNumber" = DOT."DefaultOrganisationVersionNumber" and DOrg."DefaultOrganisationID" = DOT."DefaultOrganisationID"
          and DOT."OrganisationTypeID" = organisationtypeid
      limit
        1);
    End;
  End if;

  -- create new organisation

  INSERT INTO
    "Organisation"("OrganisationID", "IsBranch", "IsHeadOffice", "IsActive", "IsDeleted", "IsUserOrganisation", "DefaultOrganisationID", "DefaultOrganisationVersionNumber", "OrganisationTypeID")
  SELECT
    OrganisationID,
    False,
    False,
    True,
    False,
    False,
    defaultorganisationid,
    organisationversionnumber,
    wt."OrganisationTypeID"
  FROM
    public."DefaultOrganisation" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;

  -- add org default

  INSERT INTO
    public."OrganisationDetail"("OrganisationID", "Name", "Description")
  VALUES
    (OrganisationID, organisationname, organisationdescription);

  -- add payment methods
  INSERT INTO
  public."OrganisationPaymentMethod"
(
  "OrganisationID",
  "GlobalPaymentMethodID",
  "OrganisationBankAccountId",
  "IsActive",
  "IsDeleted",
  "IsDirectDebit",
  "IsBACS",
  "OrganisationDirectDebitMandateID",
  "IsPrimary",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "DirectDebitMonthCollectionPeriodNumber",
  "BACSMonthPaymentDay",
  "DirectDebitNumberOfNotificationDaysBeforeCollection",
  "BACSNumberOfNotificationDaysBeforeExpectationOfPayment"
)
SELECT
  OrganisationID,
  wt."GlobalPaymentMethodID",
  null,
  true,
  false,
  pm."IsDirectDebit",
  (case when pm."IsDirectDebit" = false and pm."Name" <> 'BACS' then false else true end),
  null,
  (case when pm."Name" = 'BACS' then true else false end),
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  st."StatusTypeValueID",
  pm."DirectDebitDefaultMonthlyPeriodNumber",
  pm."BACSDefaultMonthlyPaymentDay",
  pm."DirectDebitDefaultNumberOfNotificationDaysBeforeCollection",
  pm."BACSDefaultNumberOfNotificationDaysBeforeExpectationOfPayment"
FROM
  public."DefaultOrganisationPaymentMethod" wt

  left outer join "GlobalPaymentMethod" pm on pm."GlobalPaymentMethodID" = wt."GlobalPaymentMethodID"
  left outer join "vStatusType" st on st."StatusTypeName" = 'OrganisationPaymentMethod Status' and st."IsStart" = true


  where wt."DefaultOrganisationID" = defaultorganisationid and wt."DefaultOrganisationVersionNumber" = organisationversionnumber
  and not exists (select * from "OrganisationPaymentMethod" dd where dd."OrganisationID" = OrganisationID and dd."GlobalPaymentMethodID" = wt."GlobalPaymentMethodID" limit 1)
  ;

-- add base financials
INSERT INTO
  public."OrganisationFinancialDetail"
(
  "OrganisationID",
  "FinancialStatusTypeID",
  "FinancialStatusTypeVersionNumber",
  "FinancialStatusTypeValueID",
  "HasACreditLimit",
  "CreditLimit",
  "NumberOfLatePayments",
  "HasLatePayments"
)
VALUES (
  OrganisationID,
  (select "StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  (select "StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  (select "StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'OrganisationFinancial Status' and st."IsStart" = true limit 1),
  false,
  0,
  0,
  false
);


-- add accounting periods
INSERT INTO
  public."OrganisationAccountingPeriod"
(
  "OrganisationID",
  "GlobalAccountingPeriodID"
)
SELECT
  OrganisationID,
  wt."GlobalAccountingPeriodID"
FROM
  public."GlobalAccountingPeriod" wt

  where not exists (select * from "OrganisationAccountingPeriod" gp where gp."OrganisationID" = OrganisatioNID and gp."GlobalAccountingPeriodID" = wt."GlobalAccountingPeriodID" limit 1)
  ;

INSERT INTO
  public."OrganisationLedgerAccount"
(
  "LedgerAccountTypeID",
  "LedgerAccountCategoryID",
  "Name",
  "Description",
  "ParentID",
  "CreatedOn",
  "CreatedBy",
  "Balance",
  "HandlesCredit",
  "HandlesDebit",
  "ClosedOn",
  "IsActive",
  "IsDeleted",
  "OrganisationID",
  "AccountingTypeID"
)
SELECT
  wt."LedgerAccountTypeID",
  null,
  wt."LedgerAccountName",
  '',
  null,
  CURRENT_DATE,
  'System',
  0,
  wt."HandlesCredit",
  wt."HandlesDebit",
  CURRENT_DATE,
  true,
  false,
  OrganisationID,
  0
FROM
  public."DefaultOrganisationLedger" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber

    and not exists(select * from "OrganisationLedgerAccount" le where le."LedgerAccountTypeID" = wt."LedgerAccountTypeID" and le."OrganisationID" = OrganisationID limit 1);



  -- create organisationroles which are not default organisation specific nad global, could be duplicates

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  from
    "Role" r
  where
    r."RoleID" in (
                    select
                      dor."RoleID"
                    from
                      "DefaultOrganisationRole" dor
                    where
                      dor."DefaultOrganisationID" = defaultorganisationid and
                      dor."IsActive" = true and
                      dor."IsDeleted" = false and
                      COALESCE(dor."IsDefaultOrganisationSpecific", false) = false
    ) and
    r."RoleID" not in (
                        select
                          org."ParentID"
                        from
                          "OrganisationRole" org
                        where
                          org."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    r."IsGlobal" = true;

  -- add roleclaims which are not default organisation specific, parentID is RoleID, and are global roles

  insert into
    "OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  select
    org."OrganisationRoleID",
    rc."ResourceID",
    rc."OperationID",
    rc."StateID",
    rc."StateItemID",
    true,
    false,
    OrganisationID
  from
    "RoleClaim" rc
    inner join "OrganisationRole" org on org."OrganisationID" = OrganisationID and org."IsActive" = true and org."IsDeleted" = false and org."ParentID" = rc."RoleID"
  where
    rc."RoleID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationRole" orgr
      where
        orgr."OrganisationRoleID" = org."OrganisationRoleID"
    ) and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = org."OrganisationRoleID" and
                   orc."OperationID" = rc."OperationID" and
                   orc."ResourceID" = rc."ResourceID" and
                   orc."StateID" = rc."StateID" and
                   orc."StateItemID" = rc."StateItemID"
    );

  -- add do specific roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    dor."RoleName",
    true,
    dor."RoleTypeID",
    true,
    false,
    dor."DefaultOrganisationRoleID"
  from
    "DefaultOrganisationRole" dor
  where
    dor."IsActive" = true and
    dor."IsDeleted" = false and
    dor."IsDefaultOrganisationSpecific" = true and
    dor."DefaultOrganisationID" = defaultorganisationid and
    dor."DefaultOrganisationRoleID" not in (
                                             select
                                               dor1."ParentID"
                                             from
                                               "OrganisationRole" dor1
                                             where
                                               dor1."OrganisationID" = OrganisationID
    );

  -- add do specific claims

  insert into
    "OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  select
    org."OrganisationRoleID",
    rc."ResourceID",
    rc."OperationID",
    rc."StateID",
    rc."StateItemID",
    true,
    false,
    OrganisationID
  from
    "DefaultOrganisationRoleClaim" rc
    inner join "OrganisationRole" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."DefaultOrganisationRoleID" and org."IsActive" = true and org."IsDeleted" = FALSE
  where
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = org."OrganisationRoleID" and
                   orc."OperationID" = rc."OperationID" and
                   orc."ResourceID" = rc."ResourceID" and
                   orc."StateID" = rc."StateID" and
                   orc."StateItemID" = rc."StateItemID"
    );

  -- add global groups
  -- create organisationroles which are not default organisation specific and global

  insert into
    public."OrganisationGroup"("OrganisationID", "GroupName", "IsManaged", "GroupTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    r."GroupName",
    true,
    r."GroupTypeID",
    true,
    false,
    r."GroupID"
  from
    "Group" r
  where
    r."GroupID" in (
                     select
                       dor."GroupID"
                     from
                       "DefaultOrganisationGroup" dor
                     where
                       dor."DefaultOrganisationID" = defaultorganisationid and
                       dor."IsActive" = true and
                       dor."IsDeleted" = false and
                       COALESCE(dor."IsDefaultOrganisationSpecific", false) = false
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    r."IsGlobal" = true and
    r."GroupID" not in (
                         select
                           rg."ParentID"
                         from
                           "OrganisationGroup" rg
                         where
                           rg."OrganisationID" = OrganisationID
    );

  -- add global group roles

  insert into
    "OrganisationGroupRole"("OrganisationGroupID", "OrganisationRoleID", "IsActive", "IsDeleted")
  select
    org."OrganisationGroupID",
    orgr."OrganisationRoleID",
    true,
    false
  from
    "GroupRole" rc
    inner join "OrganisationGroup" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."GroupID" and org."IsActive" = true and org."IsDeleted" = false
    inner join "OrganisationRole" orgr on orgr."OrganisationID" = OrganisationID and orgr."ParentID" = rc."RoleID" and orgr."IsActive" = true and orgr."IsDeleted" = false
  where
    rc."GroupID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationGroup" orgr
      where
        orgr."OrganisationGroupID" = org."OrganisationGroupID"
    );

  -- add do specific groups

  insert into
    public."OrganisationGroup"("OrganisationID", "GroupName", "IsManaged", "GroupTypeID", "IsActive", "IsDeleted", "ParentID")
  select
    OrganisationID,
    dor."GroupName",
    true,
    dor."GroupTypeID",
    true,
    false,
    dor."DefaultOrganisationGroupID"
  from
    "DefaultOrganisationGroup" dor
  where
    dor."IsActive" = true and
    dor."IsDeleted" = false and
    dor."IsDefaultOrganisationSpecific" = true and
    dor."DefaultOrganisationID" = defaultorganisationid and
    dor."DefaultOrganisationGroupID" not in (
                                              select
                                                dor1."ParentID"
                                              from
                                                "OrganisationGroup" dor1
                                              where
                                                dor1."OrganisationID" = OrganisationID
    );

  -- add do specific group roles

  insert into
    "OrganisationGroupRole"("OrganisationGroupID", "OrganisationRoleID", "IsActive", "IsDeleted")
  select
    org."OrganisationGroupID",
    orr."OrganisationRoleID",
    true,
    false
  from
    "DefaultOrganisationGroupRole" rc
    inner join "OrganisationGroup" org on org."OrganisationID" = OrganisationID and org."ParentID" = rc."DefaultOrganisationGroupID" and org."IsActive" = true and org."IsDeleted" = false
    left join "OrganisationRole" orr on orr."ParentID" = rc."DefaultOrganisationRoleID" and orr."IsActive" = true and orr."IsDeleted" = false and orr."OrganisationID" = OrganisationID
  where
    rc."DefaultOrganisationGroupID" =
    (
      select
        orgr."ParentID"
      from
        "OrganisationGroup" orgr
      where
        orgr."OrganisationGroupID" = org."OrganisationGroupID"
    );

  -- Organisation NC /  ROLE / CLAIM

/*  INSERT INTO
    public."OrganisationNotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber", "IsActive", "IsDeleted", "OrganisationID", "ParentID")
  SELECT
    "NotificationConstructID",
    "NotificationConstructVersionNumber",
    true,
    false,
    OrganisationID,
    "DefaultOrganisationNotificationConstructID"
  FROM
    public."DefaultOrganisationNotificationConstruct"
  where
    "DefaultOrganisationID" = defaultorganisationid;*/

  -- NC Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleSubTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."NotificationConstructRole" ncr
    inner join "DefaultOrganisationNotificationConstruct" donc on donc."NotificationConstructID" = ncr."NotificationConstructID" and donc."NotificationConstructVersionNumber" =
      ncr."NotificationConstructVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationNotificationConstruct" donc on donc."NotificationConstructID" = ncc."NotificationConstructID" and donc."NotificationConstructVersionNumber" =
      ncc."NotificationConstructVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."NotificationRoleConstructID" is null;

  -- NC CLAIMS THAT ARE DIRECT FROM NC ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false and
      ncc."IsActive" = true and ncc."IsDeleted" = false and ncc."RoleID" is null and not exists (
                                                                                                  select
                                                                                                    orc."OrganisationRoleClaimID"
                                                                                                  from
                                                                                                    "OrganisationRoleClaim" orc
                                                                                                  where
                                                                                                    orc."OrganisationID" = OrganisationID and
                                                                                                    orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                                                                                                    orc."OperationID" = ncc."OperationID" and
                                                                                                    orc."ResourceID" = ncc."ResourceID" and
                                                                                                    orc."StateID" = ncc."StateID" and
                                                                                                    orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;

  ----------------------- Artefact
  -- Org Artefact

  INSERT INTO
    public."OrganisationArtefact"("OrganisationID", "ArtefactID", "ArtefactVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "ArtefactID",
    "ArtefactVersionNumber",
    "IsActive",
    "IsDeleted",
    "ArtefactID"
  FROM
    public."DefaultOrganisationArtefact"
  where
    "DefaultOrganisationID" = defaultorganisationid and
    "IsActive" = true and
    "IsDeleted" = false;

  -- Artefact Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."ArtefactRoleID"
  FROM
    public."ArtefactRole" ncr
    inner join "DefaultOrganisationArtefact" donc on donc."ArtefactID" = ncr."ArtefactID" and donc."ArtefactVersionNumber" = ncr."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."ArtefactRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ArtefactClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationArtefact" donc on donc."ArtefactID" = ncc."ArtefactID" and donc."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ArtefactRoleID" is null;

  -- ARTEFACT CLAIMS THAT ARE DIRECT FROM ARTEFACT ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ArtefactRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ArtefactRoleID" is null;

  -------------------------- MODULE

  -- Module Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."RoleID"
  FROM
    public."ModuleRole" ncr
    inner join "DefaultOrganisationModule" donc on donc."ModuleID" = ncr."ModuleID" and donc."ModuleVersionNumber" = ncr."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."RoleID" not in (
                          select
                            orn."ParentID"
                          from
                            "OrganisationRole" orn
                          where
                            orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA MODULE CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ModuleClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationModule" donc on donc."ModuleID" = ncc."ModuleID" and donc."ModuleVersionNumber" = ncc."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ModuleRoleID" is null;

  -- Module CLAIMS THAT ARE DIRECT FROM Module ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ModuleClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ModuleRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA MODULE CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ModuleClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ModuleRoleID" is null;

  ----------------------------------- WORKFLOW

  INSERT INTO
    public."OrganisationWorkflow"("OrganisationID", "WorkflowID", "VersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "WorkflowID",
    "WorkflowVersionNumber",
    "IsActive",
    "IsDeleted",
    dow . "DefaultOrganisationID"
  FROM
    public."DefaultOrganisationWorkflow" dow
  where
    dow . "DefaultOrganisationID" = defaultorganisationid and
    dow . "IsActive" = true and
    dow . "IsDeleted" = FALSE and
    not exists (
                 select
                   dow1."OrganisationWorkflowID"
                 from
                   "OrganisationWorkflow" dow1
                 where
                   dow1."OrganisationID" = OrganisationID and
                   dow1."IsActive" = true and
                   dow1."IsDeleted" = false and
                   dow1."WorkflowID" = dow . "WorkflowID" and
                   dow1."VersionNumber" = dow . "WorkflowVersionNumber" and
                   dow1."ParentID" = dow . "DefaultOrganisationID"
    );

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."WorkflowRoleID"
  FROM
    public."WorkflowRole" ncr
    inner join "DefaultOrganisationWorkflow" donc on donc."WorkflowID" = ncr."WorkflowID" and donc."WorkflowVersionNumber" = ncr."WorkflowVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."WorkflowRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "DefaultOrganisationWorkflow" donc on donc."WorkflowID" = ncc."WorkflowID" and donc."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and donc."IsActive" = true and donc."IsDeleted"
      = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  ------------------------ MODULE WORKFLOW ROLECLAIMS

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

/*  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;*/

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );*/

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ModuleWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;*/

  --------------------------------    MODULE NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ModuleNotificationConstruct" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ModuleNotificationConstructID" and wr."NotificationConstructVersionNumber" = mw."NotificationConstructVersionNumber"
      and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

/*  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;*/

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );
*/
  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ModuleNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/

  ---------------------------------------------- ARTEFACT WORKFLOW AND NC ---------------
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  --------------------------------    Artefact NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ArtefactNotificationConstruct" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ArtefactNotificationConstructID" and wr."NotificationConstructVersionNumber" =
      mw."NotificationConstructVersionNumber" and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;

  ------------------------------------ ORGANISATION WORKFLOW NC ROLE / CLAIMS ---------------------------

  -- Workflow Specific Roles
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );
*/
  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;
*/
  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  /*INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );*/

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/
  -------------------------------------------------------
  ------------------------------------------------------- ARTEFACEWORKFLOW NC
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;
  -------------------------------------------------------
  ------------------------------------------------------- ORGANISATION WORKFLOW NC ROLE / CLAIMS
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."NotificationRoleConstructID"
  FROM
    public."OrganisationWorkflow" mw
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "NotificationConstructRole" ncr on ncr."NotificationConstructID" = wr."NotificationConstructID" and ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber"
      and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."NotificationRoleConstructID" not in (
                                               select
                                                 orn."ParentID"
                                               from
                                                 "OrganisationRole" orn
                                               where
                                                 orn."OrganisationID" = OrganisationID
    ) and
    mw."OrganisationID" = OrganisationID;

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "NotificationConstructClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."NotificationRoleConstructID" is null and ncr."NotificationConstructID" = wr."NotificationConstructID" and
      ncr."NotificationConstructVersionNumber" = wr."NotificationConstructVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowNotificationConstruct" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;
  -------------------------------------------------------
  ------------------------------------------------------- MODULE ARTEFACT
/*
  INSERT INTO
    public."OrganisationArtefact"("OrganisationID", "ArtefactID", "ArtefactVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "ArtefactID",
    "ArtefactVersionNumber",
    ma."IsActive",
    ma."IsDeleted",
    "ArtefactID"
  FROM
    public."ModuleArtefact" ma
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    ma."IsActive" = true and
    ma."IsDeleted" = FALSE and
    not exists (
                 select
                   ma1."ArtefactID"
                 from
                   "OrganisationArtefact" ma1
                 where
                   ma1."OrganisationID" = OrganisationID and
                   ma1."ArtefactID" = ma."ArtefactID" and
                   ma1."ArtefactVersionNumber" = ma."ArtefactVersionNumber"
    );

  -- Artefact Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."ArtefactRoleID"
  FROM
    public."ArtefactRole" ncr
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncr."ArtefactID" and ma."ArtefactVersionNumber" = ncr."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."ArtefactRoleID" not in (
                                  select
                                    orn."ParentID"
                                  from
                                    "OrganisationRole" orn
                                  where
                                    orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "ArtefactClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."ArtefactRoleID" is null;

  -- ARTEFACT CLAIMS THAT ARE DIRECT FROM ARTEFACT ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."ArtefactRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."ArtefactClaim" ncc
    inner join "ModuleArtefact" ma on ma."ArtefactID" = ncc."ArtefactID" and ma."ArtefactVersionNumber" = ncc."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."ArtefactRoleID" is null;

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."WorkflowRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowRole" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."WorkflowRoleID" not in (
                                 select
                                   orn."ParentID"
                                 from
                                   "OrganisationRole" orn
                                 where
                                   orn."OrganisationID" = OrganisationID
    );*/

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "WorkflowClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."WorkflowRoleID" is null
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;
*/
  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL
/*
  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."WorkflowRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."WorkflowClaim" ncc
    inner join "ArtefactWorkflow" mw on mw."WorkflowID" = ncc."WorkflowID" and mw."WorkflowVersionNumber" = ncc."WorkflowVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."WorkflowRoleID" is null;

  --------------------------------    Artefact NC ROLE/CLAIMS ----------------------

  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."NotificationRoleConstructID"
  FROM
    public."ArtefactNotificationConstruct" mw
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "NotificationConstructRole" wr on wr."NotificationConstructID" = mw."ArtefactNotificationConstructID" and wr."NotificationConstructVersionNumber" =
      mw."NotificationConstructVersionNumber" and wr."IsActive" = true and wr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    wr."NotificationRoleConstructID" not in (
                                              select
                                                orn."ParentID"
                                              from
                                                "OrganisationRole" orn
                                              where
                                                orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "NotificationConstructClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."NotificationRoleConstructID" is null
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."NotificationRoleConstructID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."NotificationConstructClaim" ncc
    inner join "ArtefactNotificationConstruct" mw on mw."NotificationConstructID" = ncc."NotificationConstructID" and mw."NotificationConstructVersionNumber" = ncc."NotificationConstructVersionNumber"
      and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "ModuleArtefact" ma on ma."ArtefactID" = mw."ArtefactID" and ma."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ma."IsActive" = true and ma."IsDeleted" = false
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false and ow."ModuleID" = ma."ModuleID" and
      ow."ModuleVersionNumber" = ma."ModuleVersionNumber"
    inner join "OrganisationArtefact" oa on oa."OrganisationID" = OrganisationID and oa."ArtefactID" = mw."ArtefactID" and oa."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and oa."IsActive" =
      true and oa."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."NotificationRoleConstructID" is null;*/

  ----------------------------------------------------------------------------
  -------------------------------------- ORG STATUS TYPE
  -- Org StatusType

  INSERT INTO
    public."OrganisationStatusType"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    "StatusTypeID",
    "StatusTypeVersionNumber",
    "IsActive",
    "IsDeleted",
    "DefaultOrganisationID"
  FROM
    public."DefaultOrganisationStatusType"
  where
    "DefaultOrganisationID" = defaultorganisationid and
    "IsActive" = true and
    "IsDeleted" = false;

  -- StatusType Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."StatusTypeRole" ncr
    inner join "DefaultOrganisationStatusType" donc on donc."StatusTypeID" = ncr."StatusTypeID" and donc."StatusTypeVersionNumber" = ncr."StatusTypeVersionNumber" and donc."IsActive" = true and
      donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA NC CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID"
    inner join "DefaultOrganisationStatusType" donc on donc."StatusTypeID" = ncc."StatusTypeID" and donc."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and donc."IsActive" = true and
      donc."IsDeleted" = false and donc."DefaultOrganisationID" = defaultorganisationid
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ncc."StatusTypeRoleID" is null;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA NC CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  -----------------------------------------------------------------
  ---------------- DO-WF
/*
  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    mw."RoleName",
    true,
    mw."RoleTypeID",
    true,
    false,
    mw."StatusTypeRoleID"
  FROM
    public."StatusTypeRole" mw
    inner join "ModuleStatusType" mst on mst."StatusTypeID" = mw."StatusTypeID" and mst."StatusTypeVersionNumber" = mw."StatusTypeVersionNumber" and mst."IsActive" = true and mst."IsDeleted" = false
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mst."ModuleID" and donc."ModuleVersionNumber" = mst."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    mw."StatusTypeRoleID" not in (
                                   select
                                     orn."ParentID"
                                   from
                                     "OrganisationRole" orn
                                   where
                                     orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."StatusTypeRoleID" is null
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ModuleStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."ModuleID" = mw."ModuleID" and ow."ModuleVersionNumber" = mw."ModuleVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;*/
  ----------------------------------------------------
  -------------------- DO - AR - STR
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    wr."RoleName",
    true,
    wr."RoleTypeID",
    true,
    false,
    wr."StatusTypeRoleID"
  FROM
    public."ArtefactStatusType" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "StatusTypeRole" wr on wr."StatusTypeID" = mw."StatusTypeID" and wr."StatusTypeVersionNumber" = mw."StatusTypeVersionNumber"
  where
    wr."StatusTypeRoleID" not in (
                                   select
                                     orn."ParentID"
                                   from
                                     "OrganisationRole" orn
                                   where
                                     orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "StatusTypeClaim" ncc on ncc."RoleID" is not null and ncc."RoleID" = r."RoleID" and ncc."StatusTypeRoleID" is null
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- StatusType CLAIMS THAT ARE DIRECT FROM StatusType ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "ArtefactStatusType" mw on mw."StatusTypeID" = ncc."StatusTypeID" and mw."StatusTypeVersionNumber" = ncc."StatusTypeVersionNumber"
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."ArtefactID" = mw."ArtefactID" and ow."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and ow."IsActive" =
      true and ow."IsDeleted" = false
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;
  -----------------------------------------------------
  --------------------- DO - M - WF - STR
  -- Workflow Specific Roles

 /* insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."ModuleWorkflow" mw
    inner join "OrganisationModuleSubscription" donc on donc."ModuleID" = mw."ModuleID" and donc."ModuleVersionNumber" = mw."ModuleVersionNumber" and donc."IsActive" = true and donc."IsDeleted" =
      false and donc."OrganisationID" = OrganisationID
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationModuleSubscription" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ModuleWorkflow" mw on mw."ModuleID" = ow."ModuleID" and mw."ModuleVersionNumber" = ow."ModuleVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;*/
  -----------------------------------------------------
  ---------------------------------- DO - AR -WF - STR

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."ArtefactWorkflow" mw
    inner join "OrganisationArtefact" donc on donc."ArtefactID" = mw."ArtefactID" and donc."ArtefactVersionNumber" = mw."ArtefactVersionNumber" and donc."IsActive" = true and donc."IsDeleted" = false
      and donc."OrganisationID" = OrganisationID
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationArtefact" ow on ow."OrganisationID" = OrganisationID and ow."IsActive" = true and ow."IsDeleted" = false
    inner join "ArtefactWorkflow" mw on mw."ArtefactID" = ow."ArtefactID" and mw."ArtefactVersionNumber" = ow."ArtefactVersionNumber" and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."WorkflowVersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  ----------------------------------------
  -------------------------- DO - WF - STR
  -- Workflow Specific Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."StatusTypeRoleID"
  FROM
    public."OrganisationWorkflow" mw
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "StatusTypeRole" ncr on ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" = wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    mw."IsActive" = true and
    mw."IsDeleted" = false and
    ncr."StatusTypeRoleID" not in (
                                    select
                                      orn."ParentID"
                                    from
                                      "OrganisationRole" orn
                                    where
                                      orn."OrganisationID" = OrganisationID
    ) and
    mw."OrganisationID" = OrganisationID;

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA WF CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "StatusTypeClaim" ncr on ncr."RoleID" = r."RoleID" and ncr."StatusTypeRoleID" is null and ncr."StatusTypeID" = wr."StatusTypeID" and ncr."StatusTypeVersionNumber" =
      wr."StatusTypeVersionNumber" and ncr."IsActive" = true and ncr."IsDeleted" = false
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false;

  -- Workflow CLAIMS THAT ARE DIRECT FROM Workflow ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."StatusTypeRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA WF CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."StatusTypeClaim" ncc
    inner join "OrganisationWorkflow" mw on mw."OrganisationID" = OrganisationID and mw."IsActive" = true and mw."IsDeleted" = FALSE
    inner join "WorkflowStatusType" wr on wr."WorkflowID" = mw."WorkflowID" and wr."WorkflowVersionNumber" = mw."VersionNumber"
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."StatusTypeRoleID" is null;

  -------------------------------
  ---------------------------------- INTERFACE PANEL
  -- IP Roles

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    ncr."RoleName",
    true,
    ncr."RoleTypeID",
    true,
    false,
    ncr."InterfacePanelRoleID"
  FROM
    public."InterfacePanelRole" ncr
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncr."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncr."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncr."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncr."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncr."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncr."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
  where
    ncr."IsActive" = true and
    ncr."IsDeleted" = false and
    ncr."InterfacePanelRoleID" not in (
                                        select
                                          orn."ParentID"
                                        from
                                          "OrganisationRole" orn
                                        where
                                          orn."OrganisationID" = OrganisationID
    );

  -- INSERT GLOBAL ROLES THAT ARE LINKED VIA IP CLAIMS

  insert into
    public."OrganisationRole"("OrganisationID", "RoleName", "IsManaged", "RoleTypeID", "IsActive", "IsDeleted", "ParentID")
  SELECT
    OrganisationID,
    r."RoleName",
    true,
    r."RoleTypeID",
    true,
    false,
    r."RoleID"
  FROM
    public."Role" r
    inner join "InterfacePanelClaim" ipc on ipc."RoleID" = r."RoleID" and ipc."IsActive" = true and ipc."IsDeleted" = false
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ipc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ipc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ipc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ipc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ipc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ipc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
  where
    r."RoleID" not in (
                        select
                          rr."ParentID"
                        from
                          "OrganisationRole" rr
                        where
                          rr."OrganisationID" = OrganisationID
    ) and
    r."IsActive" = true and
    r."IsDeleted" = false and
    ipc."InterfacePanelRoleID" is null;

  -- Module CLAIMS THAT ARE DIRECT FROM IP ROLES NOT GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."InterfacePanelClaim" ncc
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."InterfacePanelRoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    ncc."RoleID" is null and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    );

  -- INSERT CLAIMS LINKED VIA MODULE CLAIMS GLOBAL

  INSERT INTO
    public."OrganisationRoleClaim"("OrganisationRoleID", "ResourceID", "OperationID", "StateID", "StateItemID", "IsActive", "IsDeleted", "OrganisationID")
  SELECT
    nc."OrganisationRoleID",
    ncc."ResourceID",
    ncc."OperationID",
    ncc."StateID",
    ncc."StateItemID",
    ncc."IsActive",
    ncc."IsDeleted",
    OrganisationID
  FROM
    public."InterfacePanelClaim" ncc
    inner join "InterfacePanelOrganisationType" dpot on dpot."IsActive" = true and dpot."IsDeleted" = false and dpot."InterfacePanelID" = ncc."InterfacePanelID" and dpot."InterfacePanelVersionNumber"
      = ncc."InterfacePanelVersionNumber" and dpot."OrganisationTypeID" =
    (
      select
        do1."OrganisationTypeID"
      from
        "DefaultOrganisation" do1
      where
        do1."DefaultOrganisationID" = defaultorganisationid and
        do1."DefaultOrganisationVersionNumber" = organisationversionnumber
      order by
        do1."DefaultOrganisationVersionNumber" desc
      limit
        1
    ) and dpot."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "InterfacePanelOrganisationTypeUserType" dpotu on dpotu."IsActive" = true and dpotu."OrganisationTypeID" = dpot."OrganisationTypeID" and dpotu."IsDeleted" = false and
      dpotu."InterfacePanelID" = ncc."InterfacePanelID" and dpotu."InterfacePanelVersionNumber" = ncc."InterfacePanelVersionNumber" and dpotu."UserTypeID" in (
                                                                                                                                                                select
                                                                                                                                                                  do2."UserTypeID"
                                                                                                                                                                from
                                                                                                                                                                  "DefaultOrganisationUserType" do2
                                                                                                                                                                where
                                                                                                                                                                  do2."DefaultOrganisationID" =
                                                                                                                                                                    defaultorganisationid and
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    = organisationversionnumber and
                                                                                                                                                                  do2."IsActive" = true and
                                                                                                                                                                  do2."IsDeleted" = false
                                                                                                                                                                order by
                                                                                                                                                                  do2."DefaultOrganisationVersionNumber"
                                                                                                                                                                    desc
    ) and dpotu."InterfacePanelVersionNumber" =
    (
      select
        ip."InterfacePanelVersionNumber"
      from
        "InterfacePanel" ip
      where
        ip."InterfacePanelID" = ncc."InterfacePanelID" and
        ip."IsActive" = true and
        ip."IsDeleted" = false
      order by
        ip."InterfacePanelVersionNumber" desc
      limit
        1
    )
    inner join "OrganisationRole" nc on nc."OrganisationID" = OrganisationID and nc."ParentID" = ncc."RoleID" and nc."IsActive" = true and nc."IsDeleted" = false
  where
    ncc."IsActive" = true and
    ncc."IsDeleted" = false and
    not exists (
                 select
                   orc."OrganisationRoleClaimID"
                 from
                   "OrganisationRoleClaim" orc
                 where
                   orc."OrganisationID" = OrganisationID and
                   orc."OrganisationRoleID" = nc."OrganisationRoleID" and
                   orc."OperationID" = ncc."OperationID" and
                   orc."ResourceID" = ncc."ResourceID" and
                   orc."StateID" = ncc."StateID" and
                   orc."StateItemID" = ncc."StateItemID"
    ) and
    ncc."InterfacePanelRoleID" is null;

  ------------------------ Branch

  -- create branches as needed

  INSERT INTO
    public."Organisation"("OrganisationID", "OrganisationTypeID", "IsBranch", "IsHeadOffice", "CreatedOn", "CreatedBy", "DefaultOrganisationID", "DefaultOrganisationVersionNumber",
      "ParentOrganisationID", "ParentID")
  SELECT
    uuid_generate_v1(),
    (
      select
        "OrganisationTypeID"
      from
        "OrganisationType"
      where
        "Name" = 'Branch'
      limit
        1
    ),
    true,
    false,
    CURRENT_DATE,
    'System',
    defaultorganisationid,
    organisationversionnumber,
    OrganisationID,
    wt."DefaultOrganisationBranchID"
  FROM
    public."DefaultOrganisationBranch" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;
  INSERT INTO
    public."OrganisationDetail"("OrganisationID", "Name", "Description")
  SELECT
    org."OrganisationID",
    dob."BranchName",
    'Branch'
  FROM
    public."Organisation" org
    left outer join "DefaultOrganisationBranch" dob on dob."DefaultOrganisationBranchID" = org."ParentID"
  where
    org."ParentOrganisationID" = OrganisationID;

  -- User Type

  INSERT INTO
    public."OrganisationUserType"("OrganisationID", "UserTypeID", "IsActive", "IsDeleted", "IsForDefaultUser")
  SELECT
    OrganisationID,
    wt."UserTypeID",
    wt."IsActive",
    wt."IsDeleted",
    wt."IsForDefaultUser"
  FROM
    public."DefaultOrganisationUserType" wt
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber;

  -- Organisation Default Status

  INSERT INTO
    public."OrganisationStatus"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StatusChangedOn", "StatusChangedBy", "ParentID")
  SELECT
    OrganisationID,
    wt."StatusTypeID",
    wt."StatusTypeVersionNumber",
    st."StatusTypeValueID",
    CURRENT_DATE,
    'System',
    null
  FROM
    public."DefaultOrganisationTarget" wt
    left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."StatusTypeName" = 'Organisation Status' and
      st."IsStart" = true
  where
    wt."DefaultOrganisationID" = defaultorganisationid and
    wt."DefaultOrganisationVersionNumber" = organisationversionnumber and
    st."StatusTypeValueID" is not null;

  -- Organisation Branch Default Status, same as parent
  FOR LoopRow IN
  SELECT
    *
  FROM
    "Organisation"
  where
    "ParentOrganisationID" = OrganisationID
  LOOP
    INSERT INTO
      public."OrganisationStatus"("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StatusChangedOn", "StatusChangedBy", "ParentID")
    SELECT
      loopRow."OrganisationID",
      wt."StatusTypeID",
      wt."StatusTypeVersionNumber",
      st."StatusTypeValueID",
      CURRENT_DATE,
      'System',
      null
    FROM
      public."DefaultOrganisationTarget" wt
      left outer join "vStatusType" st on st."StatusTypeID" = wt."StatusTypeID" and st."StatusTypeVersionNumber" = wt."StatusTypeVersionNumber" and st."StatusTypeName" = 'Branch Status' and
        st."IsStart" = true
    where
      wt."DefaultOrganisationID" = defaultorganisationid and
      wt."DefaultOrganisationVersionNumber" = organisationversionnumber and
      st."StatusTypeValueID" is not null;

  END LOOP;

  RETURN OrganisationId;
end;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_GetLastDayOfMonth (OID = 16546) :
--
CREATE FUNCTION public."fn_GetLastDayOfMonth" (
  date
)
RETURNS date
AS
$body$
        SELECT (date_trunc('MONTH', $1) + INTERVAL '1 MONTH - 1 day')::date;
        $body$
LANGUAGE sql
IMMUTABLE STRICT;
--
-- Definition for function fn_GetUserClaims (OID = 16547) :
--
CREATE FUNCTION public."fn_GetUserClaims" (
  userid uuid,
  organisationid uuid
)
RETURNS TABLE (
  "ClaimType" character varying,
  "ClaimName" character varying
)
AS
$body$
BEGIN

if(organisationid is null)
THEN
	-- get default but check if temp or not
    IF((select ua."IsTemporaryAccount" from "UserAccounts" ua where ua."ID" = userid limit 1) = TRUE)
    THEN
    	organisationid := (select org."OrganisationID" from "Organisation" org where org."OrganisationTypeID" = (select "OrganisationTypeID" from "OrganisationType" where "Name" = 'Temporary' limit 1));
    ELSE
    	organisationid := (select org."ParentID" from "UserAccountOrganisation" org where org."UserID" = userid limit 1);
    END IF;

END IF;


return query SELECT

  orc."ClaimName",
  orc."ClaimSubName"

FROM
  public."vOrgansiationClaim" orc
  inner join public."UserAccountOrganisation" uao on uao."ParentID" = orc."OrganisationID"
  inner join public."UserAccountOrganisationRole" uaor on uaor."OrganisationRoleID" = orc."OrganisationRoleID" and uaor."UserAccountOrganisationID" = uao."UserAccountOrganisationID"
  where orc."OrganisationID" = organisationid and uao."UserID" = userid
 union

 SELECT

  orc."ClaimName",
  orc."ClaimSubName"

FROM
  public."vOrgansiationClaim" orc
  inner join public."UserAccountOrganisation" uao on uao."ParentID" = orc."OrganisationID"
  inner join public."UserAccountOrganisationGroup" uaog on uaog."UserAccountOrganisationID" = uao."UserAccountOrganisationID"
  inner join "OrganisationGroupRole" ogr on ogr."OrganisationGroupID" = uaog."OrganisationGroupID"
  where orc."OrganisationID" = organisationid and uao."UserID" = userid;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_GetWeekOfMonth (OID = 16548) :
--
CREATE FUNCTION public."fn_GetWeekOfMonth" (
  p_date date,
  p_direction integer
)
RETURNS integer
AS
$body$
  SELECT CASE WHEN $2 >= 0 THEN
    CEIL(EXTRACT(DAY FROM $1) / 7)::int
  ELSE
    0 - CEIL(
      (EXTRACT(DAY FROM fn_GetLastDayOfMonth($1)) - EXTRACT(DAY FROM $1) + 1) / 7
    )::int
  END
$body$
LANGUAGE sql
IMMUTABLE;
--
-- Definition for function fn_GetWorkFlowTreeStructure (OID = 16549) :
--
CREATE FUNCTION public."fn_GetWorkFlowTreeStructure" (
)
RETURNS void
AS
$body$
DECLARE
  WorkflowID uuid;
  WorkflowVersionNumber integer;
BEGIN
  SELECT
Level1."Name" Level1, Level1."ItemOrder", Level1."WorkflowTreeStructureID",Level1."WorkflowActionID",
Level2."Name" level2, Level2."ItemOrder" , Level2."WorkflowTreeStructureID",Level2."WorkflowActionID",
Level3."Name" level3 , Level3."ItemOrder" , Level3."WorkflowTreeStructureID", Level3."WorkflowActionID",
Level4."Name" level4 , Level4."ItemOrder", Level4."WorkflowTreeStructureID",  Level4."WorkflowActionID"
FROM  "WorkflowTreeStructure"  Level4
  LEFT JOIN "WorkflowTreeStructure"  Level3 ON Level4."ParentID" =  Level3."WorkflowTreeStructureID"
  and Level3."WorkflowID" =   WorkflowID and Level3."WorkflowVersionNumber" = WorkflowVersionNumber
  LEFT JOIN "WorkflowTreeStructure"  Level2 ON Level3."ParentID" =  Level2."WorkflowTreeStructureID"
  and Level2."WorkflowID" =   WorkflowID and Level2."WorkflowVersionNumber" = WorkflowVersionNumber
  LEFT JOIN "WorkflowTreeStructure"  Level1 ON  Level1."WorkflowTreeStructureID" = Level2."ParentID"
  and Level1."WorkflowID" =   WorkflowID and Level1."WorkflowVersionNumber" = WorkflowVersionNumber
where Level4."WorkflowID" =   WorkflowID  and Level4."WorkflowVersionNumber" = WorkflowVersionNumber
Order by Level1."ItemOrder", Level2."ItemOrder", Level3."ItemOrder" , Level4."ItemOrder" ;

END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_ProcessBillingAndPeriodForPlanSubscription (OID = 16550) :
--
CREATE FUNCTION public."fn_ProcessBillingAndPeriodForPlanSubscription" (
  plansubscriptionid uuid,
  plansubscriptionversionnumber integer,
  globalaccountingperiodidthatisclosing integer
)
RETURNS void
AS
$body$
DECLARE
  NumberOfBillingPeriods integer;
  BillingID uuid;
  PlanHasTrial boolean;
  AccountingPeriodStartDate date;
  AccountingPeriodEndDate date;
  GlobalPaymentMethodID uuid;
  OrganisationID uuid;
  BillingPeriodStartDate date;
  BillingPeriodEndDate date;
  PlanSubscriptionBillingPeriodID uuid;
  NextAccountingPeriod integer;
BEGIN

NextAccountingPeriod := (select "GlobalAccountingPeriodID" from "GlobalAccountingPeriod" gap where gap."GlobalAccountingPeriodID" = ( globalaccountingperiodidthatisclosing + 1) limit 1);

-- get current accounting period range
select to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
      to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text)

into AccountingPeriodStartDate,AccountingPeriodEndDate

from "GlobalAccountingPeriod" gap where gap."GlobalAccountingPeriodID" =  globalaccountingperiodidthatisclosing;

NumberOfBillingPeriods := (select (count(*)+1) from "PlanSubscriptionBillingProcessLog" pl where pl."PlanSubscriptionID" = plansubscriptionid and pl."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
	and pl."StatusTypeValueID" = (select "StatusTypeValueID" from "vStatusType" where "StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and "Name" = 'Paid' ) limit 1);

GlobalPaymentMethodID := (select pp."GlobalPaymentMethodID" from "PlanSubscriptionPaymentPlan" pp where pp."PlanSubscriptionID" = plansubscriptionid and pp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber limit 1);

OrganisationID := (select pp."OrganisationID" from "PlanSubscription" pp where pp."PlanSubscriptionID" = plansubscriptionid and pp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber limit 1);

-- set billing period dates
select
-- create billing period start date from existing period start date and add 1 if month
	(case when b."BillingPeriodUnitID" = 800501 then
		(AccountingPeriodStartDate + interval '1 month' * 1) else (AccountingPeriodStartDate + interval '1 month' * b."BillingPeriod") END),
    (case when b."BillingPeriodUnitID" = 800501 then
		(AccountingPeriodEndDate + interval '1 month' * 1) else (AccountingPeriodEndDate + interval '1 month' * b."BillingPeriod") END)

into

 BillingPeriodStartDate, BillingPeriodEndDate

 from

"OrganisationPaymentMethod" opm

left join "PlanSubscriptionPeriod" psp on psp."PlanSubscriptionID" = plansubscriptionid and psp."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and psp."StartDate" >=  AccountingPeriodStartDate and psp."EndDate" = AccountingPeriodEndDate and psp."IsClosed" = false and psp."IsActive" = true

left outer join "PlanSubscription" ps on ps."PlanSubscriptionID" = plansubscriptionid and ps."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber

left join "Billing" b on b."BillingID" = (select p."BillingID" from "PlanBilling" p where p."PlanID" = ps."PlanID" and p."PlanVersionNumber" = ps."PlanVersionNumber" limit 1)

where opm."GlobalPaymentMethodID" = GlobalPaymentMethodID and opm."OrganisationID" = OrganisationID;

PlanSubscriptionBillingPeriodID := (select uuid_generate_v1());

-- create billing process log entry
INSERT INTO
  public."PlanSubscriptionBillingProcessLog"
(
  "PlanSubscriptionBillingPeriodID",
  "BillingPeriodNumber",
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "StatusTypeValueID",
  "StatusTypeID",
  "StatusTypeVersionNumber"

)
VALUES(
  PlanSubscriptionBillingPeriodID,
  NumberOfBillingPeriods,
  plansubscriptionid,
  plansubscriptionversionnumber,
  CURRENT_DATE,
  BillingPeriodStartDate,
  BillingPeriodEndDate,
  (select st."StatusTypeValueID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1),
  (select st."StatusTypeID" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1),
  (select st."StatusTypeVersionNumber" from "vStatusType" st where st."StatusTypeName" = 'PlanSubscriptionBillingProcessLog Status' and st."Name" = 'Active' limit 1)
);


-- mark the current subscription period as closed for current account period add new billing period
UPDATE
  public."PlanSubscriptionPeriod"
SET
  "IsClosed" = true,
  "ClosedOn" = CURRENT_DATE,
  "PlanSubscriptionBillingPeriodID" = PlanSubscriptionBillingPeriodID

WHERE
  "PlanSubscriptionID" = plansubscriptionid and "PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and "StartDate" >=  AccountingPeriodStartDate and "EndDate" = AccountingPeriodEndDate
;

-- create next period
INSERT INTO
  public."PlanSubscriptionPeriod"
(
  "PlanSubscriptionID",
  "PlanSubscriptionVersionNumber",
  "CreatedOn",
  "StartDate",
  "EndDate",
  "IsCancellationPeriod",
  "PeriodNumber",
  "IsTrialPeriod",
  "TrialPeriodNumber",
  "IsClosed"
)
SELECT
	plansubscriptionid,
    plansubscriptionversionnumber,
    CURRENT_DATE,

    -- start date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."StartDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    -- end date
    to_date((((((((((gap."Year" || '-'::text) || gap."Month") || '-'::text) || gap."EndDay") ||
      ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0, 'YYYY-MM-DD HH24:MI:SS'::text),
    false,
    (select count(*) from "PlanSubscriptionPeriod" psp where psp."PlanSubscriptionID" = ps."PlanSubscriptionID" and psp."PlanSubscriptionVersionNumber" = ps."PlanSubscriptionVersionNumber"),
    (CASE WHEN ps."TrialEndDate" > BillingPeriodStartDate then true else false END),
    (CASE WHEN ps."TrialEndDate" > BillingPeriodStartDate THEN ps."TrialPeriodNumber" + 1 else null END),
    false
FROM
   public."PlanSubscriptionPeriod" ps

   left outer join "PlanSubscription" ps2 on ps2."PlanSubscriptionID" = plansubscriptionid and ps2."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber

   left outer join "Plan" p on p."PlanID" = ps2."PlanID" and p."PlanVersionNumber" = ps2."PlanVersionNumber"

   left outer join "ClassificationType" period on period."ClassificationTypeID" = p."PeriodUnitID" and period."ClassificationTypeCategoryID" = 8006
   left outer join "ClassificationType" tperiod on tperiod."ClassificationTypeID" = p."TrialPeriodUnitID" and tperiod."ClassificationTypeCategoryID" = 8006

   left outer join "GlobalAccountingPeriod" gap on gap."GlobalAccountingPeriodID" = NextAccountingPeriod

  where ps."PlanSubscriptionID" = plansubscriptionid and ps."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber
  and ps."CreatedOn" = (select max(psp1."CreatedOn") from "PlanSubscriptionPeriod" psp1  where psp1."PlanSubscriptionID" = plansubscriptionid and psp1."PlanSubscriptionVersionNumber" = plansubscriptionversionnumber);





END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_PromoteArtefactTemplate (OID = 16552) :
--
CREATE FUNCTION public."fn_PromoteArtefactTemplate" (
  artefacttemplateid uuid,
  artefacttemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  ArtefactID UUID;
  ArtefactVersionNumber integer;
  LoopRow RECORD;
BEGIN

ArtefactID := (select dorg."ArtefactID" from "Artefact" dorg
	where dorg."ArtefactTemplateID" = artefacttemplateid limit 1);

ArtefactVersionNumber := (select dorg."ArtefactVersionNumber" from "Artefact" dorg
	where dorg."ArtefactTemplateID" = artefacttemplateid order by dorg."ArtefactVersionNumber" desc limit 1);

-- create DO entry
BEGIN

IF(ArtefactID is null)
THEN
BEGIN
	ArtefactID := uuid_generate_v1();
END;
END IF;

ArtefactVersionNumber := artefacttemplateversionnumber;


INSERT INTO
  public."Artefact"
(
  "ArtefactID",
  "ArtefactVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "ArtefactTemplateID",
  "ArtefactTemplateVersionNumber"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  artefacttemplateid,
  artefacttemplateversionnumber
FROM
  public."ArtefactTemplate" wt where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber;


-- WF ROLE
INSERT INTO
  public."ArtefactRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ArtefactID",
  "ArtefactVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ArtefactID,
  ArtefactVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ArtefactRoleTemplate" wt where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber ;


-- WF CLAIM
  INSERT INTO
  public."ArtefactClaim"
(
"ArtefactID",
  "ArtefactVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "NotificationRoleConstructID"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
 mr."ArtefactRoleID"
FROM
  public."ArtefactClaimTemplate" wt

  inner join "ArtefactRoleTemplate" wrr on wrr."ArtefactRoleID" = wt."ArtefactRoleID" and wrr."ArtefactID" = ArtefactID and wrr."ArtefactVersionNumber" = ArtefactVersionNumber

  left outer join "ArtefactRole" mr on mr."ArtefactID" = ArtefactID and mr."ArtefactVersionNumber" = ArtefactVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber

  	and wrr."ArtefactRoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ArtefactClaim"
(
"ArtefactID",
  "ArtefactVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ArtefactID,
  ArtefactVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ArtefactClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber

  	and wt."ArtefactRoleID" is null and wt."RoleID" is not null;

INSERT INTO
  public."ArtefactDependency"
(
  "ArtefactID",
  "ArtefactVersionNumber",
  "DependencyID",
  "DependencyVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  ArtefactID,
  ArtefactVersionNumber,
  md."ArtefactID",
  md."ArtefactVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ArtefactDependencyTemplate" wt

  left outer join "ArtefactTemplate" mt on mt."ArtefactTemplateID" = wt."DependencyTemplateID" and mt."ArtefactTemplateVersionNumber" = wt."DependencyTemplateVersionNumber"

  left outer join "Artefact" md on md."ArtefactID" = ArtefactID and md."ArtefactVersionNumber" = ArtefactVersionNumber and md."Name" = mt."Name" and md."IsActive" = true and md."IsDeleted" = false

  where wt."ArtefactTemplateID" = artefacttemplateid and wt."ArtefactTemplateVersionNumber" = artefacttemplateversionnumber ;

-- ST Promotion
FOR LoopRow IN
	select * from "ArtefactStatusTypeTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."StatusTypeTemplateID" not in (select "StatusTypeTemplateID" from "StatusType" w where w."StatusTypeTemplateID"= aw."StatusTypeTemplateID" and w."StatusTypeTemplateVersionNumber" = aw."StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."ArtefactTemplateID", aw."ArtefactTemplateVersionNumber");
    END;
END LOOP;

-- NC Promotion
FOR LoopRow IN
	select * from "ArtefactNotificationConstructTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."NotificationConstructTemplateID" not in (select "NotificationConstructTemplateID" from "NotificationConstruct" w where w."NotificationConstructTemplateID"= aw."NotificationConstructTemplateID" and w."NotificationConstructTemplateVersionNumber" = aw."NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- WF Promotion
FOR LoopRow IN
	select * from "ArtefactWorkflowTemplate" aw
    	where aw."ArtefactTemplateID" =  artefacttemplateid and aw."ArtefactTemplateVersionNumber" =  artefacttemplateversionnumber and aw."WorkflowTemplateID" not in (select "WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID"= aw."WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = aw."WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;



END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteDefaultOrganisationTemplate (OID = 16553) :
--
CREATE FUNCTION public."fn_PromoteDefaultOrganisationTemplate" (
  defaultorganisationtemplateid uuid,
  defaultorganisationtemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  DefaultOrganisationID UUID;
  DefaultOrganisationVersionNumber integer;
  LoopRow RECORD;
  LoopUUID UUID;
BEGIN

DefaultOrganisationID := (select dorg."DefaultOrganisationID" from "DefaultOrganisation" dorg
	where dorg."DefaultOrganisationTemplateID" =  defaultorganisationtemplateid limit 1);

DefaultOrganisationVersionNumber := (select dorg."DefaultOrganisationVersionNumber" from "DefaultOrganisation" dorg
	where dorg."DefaultOrganisationTemplateID" = defaultorganisationtemplateid order by dorg."DefaultOrganisationVersionNumber" desc limit 1);

if(DefaultOrganisationID is null or (DefaultOrganisationID is not null and defaultorganisationtemplateversionnumber is null))
THEN
BEGIN

-- populate variables
IF(DefaultOrganisationID is null)
THEN
BEGIN
	DefaultOrganisationID := uuid_generate_v1();
END;
END IF;


	DefaultOrganisationVersionNumber := defaultorganisationtemplateversionnumber;


-- insert DO
INSERT INTO
  public."DefaultOrganisation"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationTemplateID",
  "DefaultOrganisationTemplateVersionNumber",
  "OrganisationTypeID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  defaultorganisationtemplateid,
  defaultorganisationtemplateversionnumber,
  wt."OrganisationTypeID"
FROM
  public."DefaultOrganisationTemplate" wt where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- DOT ART
-- Check ART version exists
FOR LoopRow IN
	select * from "DefaultOrganisationArtefactTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        	and "ArtefactTemplateID" not in (select ar."ArtefactTemplateID" from "Artefact" ar where ar."ArtefactTemplateID" = "ArtefactTemplateID" and ar."ArtefactTemplateVersionNumber" = "ArtefactTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteArtefactTemplate"(LoopRow."ArtefactTemplateID",LoopRow."ArtefactTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT ARTS to DO
INSERT INTO
  public."DefaultOrganisationArtefact"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "ArtefactID",
  "ArtefactVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  ar."ArtefactID",
  ar."ArtefactVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationArtefactTemplate"  wt

  left outer join "Artefact" ar on ar."ArtefactTemplateID" = wt."ArtefactTemplateID" and ar."ArtefactTemplateVersionNumber" = wt."ArtefactTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

---------------- END DOT ART
-- DOT MT
-- Check MT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationModuleTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "ModuleTemplateID" not in (select mt."ModuleTemplateID" from "Module" mt where mt."ModuleTemplateID" = "ModuleTemplateID" and mt."ModuleTemplateVersionNumber" = "ModuleTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteModuleTemplate"(LoopRow."ModuleTemplateID",LoopRow."ModuleTemplateVersionNumber");
	END;
END LOOP;

-- Add DOT MT to DO
INSERT INTO
  public."DefaultOrganisationModule"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "ModuleID",
  "ModuleVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  m."ModuleID",
  m."ModuleVersionNumber",
  null,
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationModuleTemplate"  wt

  left outer join "Module" m on m."ModuleTemplateID" = wt."ModuleTemplateID" and m."ModuleTemplateVersionNumber" = wt."ModuleTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT MT
---------------- END DOT ART
-- DOT STT
-- Check STT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationStatusTypeTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "StatusTypeTemplateID" not in (select st."StatusTypeTemplateID" from "StatusType" st where st."StatusTypeTemplateID" = "StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = "StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."StatusTypeTemplateID",LoopRow."StatusTypeTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT STT to DO
INSERT INTO
  public."DefaultOrganisationStatusType"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "DefaultStatusTypeValueID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted",
  stv."StatusTypeValueID"
FROM
  public."DefaultOrganisationStatusTypeTemplate" wt

  left outer join "StatusType" st on st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  left outer join "StatusTypeValueTemplate" stvt on stvt."StatusTypeValueTemplateID" = wt."DefaultStatusTypeValueTemplateID"

  left outer join "StatusTypeValue" stv on stv."StatusTypeID" = st."StatusTypeID" and stv."StatusTypeVersionNumber" = st."StatusTypeVersionNumber"
  	and stv."Name" = stvt."Name"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

------ End DOT STT

-- DOT NCT
-- Check NCT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationNotificationConstructTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "NotificationConstructTemplateID" not in (select nc."NotificationConstructTemplateID" from "NotificationConstruct" nc where nc."NotificationConstructTemplateID" = "NotificationConstructTemplateID"
        	and nc."NotificationConstructTemplateVersionNumber" = "NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT NCT to DO
INSERT INTO
  public."DefaultOrganisationNotificationConstruct"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."NotificationConstructID",
  st."NotificationConstructVersionNumber",
  wt."ParentID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationNotificationConstructTemplate" wt

  left outer join "NotificationConstruct" st on st."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and st."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT NCT

-- DOT WT
-- Check WT version exists
FOR LoopRow IN
	select * from "DefaultOrganisationWorkflowTemplate"
    	where "DefaultOrganisationTemplateID" = defaultorganisationtemplateid and "DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
        and "WorkflowTemplateID" not in (select w."WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID" = "WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = "WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;

-- Add DOT WT to DO
INSERT INTO
  public."DefaultOrganisationWorkflow"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "WorkflowID",
  "WorkflowVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  st."WorkflowID",
  st."WorkflowVersionNumber",
  "ParentID",
  "IsActive",
  "IsDeleted"
FROM
  public."DefaultOrganisationWorkflowTemplate"  wt

  left outer join "Workflow" st on st."WorkflowTemplateID" = wt."WorkflowTemplateID" and st."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;
------ End DOT WT

END;
END IF;
------ End MT

-- Branch
INSERT INTO
  public."DefaultOrganisationBranch"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "OrganisationTypeID",
  "BranchName",
  "BranchSubType"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."OrganisationTypeID",
  wt."BranchName",
  wt."BranchSubType"
FROM
  public."DefaultOrganisationBranchTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- INSERT BUCKETS
INSERT INTO
  public."Bucket"
(
  "BucketName",
  "BucketDescription",
  "BucketTypeID",
  "BucketSubTypeID",
  "BucketCategoryID",
  "BucketSubCategoryID",
  "IsGlobal",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."BucketName",
  wt."BucketDescription",
  wt."BucketTypeID",
  wt."BucketSubTypeID",
  wt."BucketCategoryID",
  wt."BucketSubCategoryID",
  wt."IsGlobal",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."BucketTemplate" wt

  inner join "DefaultOrganisationBucketTemplate" dt on dt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and dt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber
  	and dt."BucketTemplateID" = wt."BucketTemplateID"

  where wt."BucketName" not in (select "BucketName" from "Bucket");

-- Bucket
INSERT INTO
  public."DefaultOrganisationBucket"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "BucketTemplateID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  b."BucketID"
FROM
  public."DefaultOrganisationBucketTemplate" wt

  left outer join "BucketTemplate" bt on bt."BucketTemplateID" = wt."BucketTemplateID"
  left outer join "Bucket" b on b."BucketName" = bt."BucketName"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ROLE
INSERT INTO
  public."DefaultOrganisationRole"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "ParentID",
  "RoleID",
  "IsActive",
  "IsDeleted",
  "IsDefaultOrganisationSpecific"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."DefaultOrganisationRoleTemplateID",
  wt."RoleID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultOrganisationSpecific"
FROM
  public."DefaultOrganisationRoleTemplate"  wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ROLE CLAIM
INSERT INTO
  public."DefaultOrganisationRoleClaim"
(
  "DefaultOrganisationRoleID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted"
)
SELECT
  dor."DefaultOrganisationRoleID",
  dd."ResourceID",
  dd."OperationID",
  dd."StateID",
  dd."StateItemID",
  dd."IsActive",
  dd."IsDeleted"
FROM
  public."DefaultOrganisationRoleClaimTemplate" dd

  left outer join "DefaultOrganisationRoleTemplate" dort on dort."DefaultOrganisationRoleTemplateID" = dd."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationRole" dor on dor."RoleName" = dort."RoleName" and dor."DefaultOrganisationID" = DefaultOrganisationID and dor."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber

  where dort."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and dort."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;


-- GROUP
INSERT INTO
  public."DefaultOrganisationGroup"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "GroupName",
  "GroupDescription",
  "GroupTypeID",
  "GroupSubTypeID",
  "GroupCategoryID",
  "GroupSubCategoryID",
  "ParentID",
  "GroupID",
  "IsActive",
  "IsDeleted",
  "IsDefaultOrganisationSpecific"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."GroupName",
  wt."GroupDescription",
  wt."GroupTypeID",
  wt."GroupSubTypeID",
  wt."GroupCategoryID",
  wt."GroupSubCategoryID",
  wt."DefaultOrganisationGroupTemplateID",
  wt."GroupID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultOrganisationSpecific"
FROM
  public."DefaultOrganisationGroupTemplate"   wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- GROUPROLE
INSERT INTO
  public."DefaultOrganisationGroupRole"
(
  "DefaultOrganisationGroupID",
  "DefaultOrganisationRoleID"
)
SELECT
  dor1."DefaultOrganisationGroupID",
  dor."DefaultOrganisationRoleID"
FROM
  public."DefaultOrganisationGroupRoleTemplate" ddtt

  left outer join "DefaultOrganisationRoleTemplate" dort on dort."DefaultOrganisationRoleTemplateID" = ddtt."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationRole" dor on dor."RoleName" = dort."RoleName" and dor."ParentID" = dort."DefaultOrganisationRoleTemplateID"

  left outer join "DefaultOrganisationGroupTemplate" dort1 on dort1."DefaultOrganisationGroupTemplateID" = ddtt."DefaultOrganisationGroupTemplateID"

  left outer join "DefaultOrganisationGroup" dor1 on dor1."GroupName" = dort1."GroupName" and dor1."ParentID" = dort1."DefaultOrganisationGroupTemplateID"

  where dor1."DefaultOrganisationGroupID" is not null and dor."DefaultOrganisationRoleID" is not null;

-- TARGETS

INSERT INTO
  public."DefaultOrganisationUserTarget"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "UserSubTypeID",
  "UserCategoryID",
  "UserSubCategoryID",
  "IsActive",
  "IsDeleted",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "UserTypeID",
  "ParentID",
  "IsDefault"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."UserSubTypeID",
  wt."UserCategoryID",
  wt."UserSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  st."StatusTypeID",
  st."StatusTypeVersionNumber",
  wt."UserTypeID",
  wt."DefaultOrganisationUserTargetTemplateID",
  wt."IsDefault"
FROM
  public."DefaultOrganisationUserTargetTemplate"  wt

  left outer join "StatusType" st on st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

INSERT INTO
  public."DefaultOrganisationUserType"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "UserTypeID",
  "IsActive",
  "IsDeleted",
  "IsForDefaultUser"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."UserTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsForDefaultUser"
FROM
  public."DefaultOrganisationUserTypeTemplate"  wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

INSERT INTO
  public."DefaultOrganisationRoleTarget"
(
  "DefaultOrganisationRoleID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationUserTargetID"
)
SELECT
  COALESCE(rg."DefaultOrganisationRoleID" ,rg1."DefaultOrganisationRoleID"),
  wt."IsActive",
  wt."IsDeleted",
  dut."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationRoleTargetTemplate" wt
  left outer join "DefaultOrganisationUserTargetTemplate" ut on ut."DefaultOrganisationUserTargetTemplateID" = wt."DefaultOrganisationUserTargetTemplateID"
  left outer join "DefaultOrganisationRoleTemplate" dor on dor."DefaultOrganisationRoleTemplateID" = wt."DefaultOrganisationRoleTemplateID"
  left outer join "DefaultOrganisationRole" rg on rg."RoleName" = dor."RoleName" and rg."DefaultOrganisationID" = DefaultOrganisationID and rg."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
  left outer join "DefaultOrganisationRole" rg1 on rg1."RoleID" = dor."RoleID" and rg1."DefaultOrganisationID" = DefaultOrganisationID and rg1."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
   left outer join "DefaultOrganisationUserTarget" dut on dut."ParentID" = ut."DefaultOrganisationUserTargetTemplateID"
  where ut."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and ut."DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
  	and ut."DefaultOrganisationUserTargetTemplateID" is not null and COALESCE(rg."DefaultOrganisationRoleID" ,rg1."DefaultOrganisationRoleID") is not null
  ;

INSERT INTO
  public."DefaultOrganisationGroupTarget"
(
  "DefaultOrganisationGroupID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationUserTargetID"
)
SELECT
  dor."DefaultOrganisationGroupID",
  wt."IsActive",
  wt."IsDeleted",
  dut."DefaultOrganisationUserTargetID"
FROM
  public."DefaultOrganisationGroupTargetTemplate" wt
  left outer join "DefaultOrganisationUserTargetTemplate" ut on ut."DefaultOrganisationUserTargetTemplateID" = wt."DefaultOrganisationUserTargetTemplateID"
  left outer join "DefaultOrganisationGroupTemplate" dorr on dorr."DefaultOrganisationGroupTemplateID" = wt."DefaultOrganisationGroupTemplateID"
  left outer join "DefaultOrganisationGroup" dor on dor."GroupName" = dorr."GroupName" and dor."DefaultOrganisationID" = DefaultOrganisationID and dor."DefaultOrganisationVersionNumber" = DefaultOrganisationVersionNumber
 left outer join "DefaultOrganisationUserTarget" dut on dut."ParentID" = ut."DefaultOrganisationUserTargetTemplateID"
  where ut."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and ut."DefaultOrganisationTemplateVersionNumber" = defaultorganisationtemplateversionnumber
  	and ut."DefaultOrganisationUserTargetTemplateID" is not null and dor."DefaultOrganisationGroupID" is not null
;

-- DO ORganisationtarget
INSERT INTO
  public."DefaultOrganisationTarget"
(
  "OrganisationTypeID",
  "DefaultOrganisationID",
  "IsActive",
  "IsDeleted",
  "DefaultOrganisationVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
SELECT
  "OrganisationTypeID",
  DefaultOrganisationID,
  wt."IsActive",
  wt."IsDeleted",
  DefaultOrganisationVersionNumber,
  stt."StatusTypeID",
  stt."StatusTypeVersionNumber"
FROM
  public."DefaultOrganisationTargetTemplate" wt

  left outer join "StatusType" stt on stt."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and stt."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber"

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber ;

-- ledger accounts
INSERT INTO
  public."DefaultOrganisationLedger"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "LedgerAccountTypeID",
  "LedgerAccountName",
  "HandlesCredit",
  "HandlesDebit",
  "IsActive",
  "IsDeleted",
  "ParentID"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."LedgerAccountTypeID",
  wt."LedgerAccountName",
  wt."HandlesCredit",
  wt."HandlesDebit",
  wt."IsActive",
  wt."IsDeleted",
  wt."DefaultOrganisationLedgerTemplateID"
FROM
  public."DefaultOrganisationLedgerTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber
  and not exists(select * from "DefaultOrganisationLedger" dol where dol."ParentID" = wt."DefaultOrganisationLedgerTemplateID" limit 1);

-- payment method
INSERT INTO
  public."DefaultOrganisationPaymentMethod"
(
  "DefaultOrganisationID",
  "DefaultOrganisationVersionNumber",
  "GlobalPaymentMethodID",
  "IsActive",
  "IsDeleted"
)
SELECT
  DefaultOrganisationID,
  DefaultOrganisationVersionNumber,
  wt."GlobalPaymentMethodID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."DefaultOrganisationPaymentMethodTemplate" wt

  where wt."DefaultOrganisationTemplateID" = defaultorganisationtemplateid and wt."DefaultOrganisationTemplateVersionNumber" =defaultorganisationtemplateversionnumber

  ;


--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function fn_PromoteInterfacePanelTemplate (OID = 16555) :
--
CREATE FUNCTION public."fn_PromoteInterfacePanelTemplate" (
  interfacepaneltemplateid uuid,
  interfacepaneltemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  InterfacePanelID UUID;
  InterfacePanelVersionNumber integer;
BEGIN

InterfacePanelID := (select dorg."InterfacePanelID" from "InterfacePanel" dorg
	where dorg."InterfacePanelTemplateID" = interfacepaneltemplateid limit 1);

InterfacePanelVersionNumber := (select dorg."InterfacePanelVersionNumber" from "InterfacePanel" dorg
	where dorg."InterfacePanelTemplateID" = interfacepaneltemplateid order by dorg."InterfacePanelVersionNumber" desc limit 1);

-- create DO entry
BEGIN


-- copy WF
IF(InterfacePanelID is null)
THEN
BEGIN
	InterfacePanelID := (select "InterfacePanelTemplateID" from "InterfacePanelTemplate" where "InterfacePanelTemplateID" = interfacepaneltemplateid limit 1);
END;
END IF;


InterfacePanelVersionNumber := interfacepaneltemplateversionnumber;


END;

INSERT INTO
  public."InterfacePanel"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Name",
  "Description",
  "InterfacePanelTypeID",
  "InterfacePanelSubTypeID",
  "InterfacePanelCategoryID",
  "InterfacePanelSubCategoryID",
  "IsActive",
  "IsDeleted",
  "ParentIPID",
  "ParentIPVersionNumber",
  "IsSecuredByClaim",
  "IsGridPanel",
  "IsGlobal",
  "InterfacePanelTemplateID",
  "InterfacePanelTemplateVersionNumber",
  "InterfacePanelLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."Name",
  wt."Description",
  wt."InterfacePanelTypeID",
  wt."InterfacePanelSubTypeID",
  wt."InterfacePanelCategoryID",
  wt."InterfacePanelSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  wt."ParentIPTemplateID",
  wt."ParentIPTemplateVersionNumber",
  wt."IsSecuredByClaim",
  wt."IsGridPanel",
  wt."IsGlobal",
  interfacepaneltemplateid,
  interfacepaneltemplateversionnumber,
  "InterfacePanelTemplateLabel"
FROM
  public."InterfacePanelTemplate"  wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
  --and wt."ParentIPTemplateID" is null

  ;

 /* INSERT INTO
  public."InterfacePanel"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Name",
  "Description",
  "InterfacePanelTypeID",
  "InterfacePanelSubTypeID",
  "InterfacePanelCategoryID",
  "InterfacePanelSubCategoryID",
  "IsActive",
  "IsDeleted",
  "ParentIPID",
  "ParentIPVersionNumber",
  "IsSecuredByClaim",
  "IsGridPanel",
  "IsGlobal",
  "InterfacePanelTemplateID",
  "InterfacePanelTemplateVersionNumber"
)
SELECT
  wt."InterfacePanelTemplateID",
  wt."InterfacePanelTemplateVersionNumber",
  wt."Name",
  wt."Description",
  wt."InterfacePanelTypeID",
  wt."InterfacePanelSubTypeID",
  wt."InterfacePanelCategoryID",
  wt."InterfacePanelSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."IsSecuredByClaim",
  wt."IsGridPanel",
  wt."IsGlobal",
  wt."InterfacePanelTemplateID",
  wt."InterfacePanelTemplateVersionNumber"
FROM
  public."InterfacePanelTemplate"  wt

  left outer join "InterfacePanel" ip on ip."Name" = wt."Name" and ip."InterfacePanelTemplateID" =  wt."InterfacePanelTemplateID"
  	and ip."InterfacePanelTemplateVersionNumber" = wt."ParentIPTemplateVersionNumber"

  where wt."ParentIPTemplateID" = interfacepaneltemplateid and wt."ParentIPTemplateVersionNumber" = interfacepaneltemplateversionnumber
  and wt."ParentIPTemplateID" is not null;*/


INSERT INTO
  public."InterfacePanelRole"
(
  "InterfacePanelRoleID",
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."InterfacePanelRoleTemplateID",
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."InterfacePanelRoleTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;


  INSERT INTO
  public."InterfacePanelClaim"
(
"InterfacePanelID",
  "InterfacePanelVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "InterfacePanelRoleID"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."InterfacePanelRoleID"
FROM
  public."InterfacePanelClaimTemplate" wt

  inner join "InterfacePanelRoleTemplate" wrr on wrr."InterfacePanelRoleTemplateID" = wt."InterfacePanelRoleTemplateID" and wrr."InterfacePanelTemplateID" = interfacepaneltemplateid and wrr."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  left outer join "InterfacePanelRole" mr on mr."InterfacePanelID" = InterfacePanelID and mr."InterfacePanelVersionNumber" = InterfacePanelVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  	and wrr."InterfacePanelRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."InterfacePanelClaim"
(
"InterfacePanelID",
  "InterfacePanelVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID",
  "ClaimID",
  "InterfacePanelRoleID"
)
SELECT
InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID",
  wt."ClaimID",
  wt."InterfacePanelRoleTemplateID"
FROM
  public."InterfacePanelClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber

  	and wt."InterfacePanelRoleTemplateID" is null and wt."RoleID" is not null;
INSERT INTO
  public."InterfacePanelOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "OrganisationTypeID",
  "IsActive",
  "IsDeleted",
  "IsVisible",
  "ParentID",
  "InterfacePanelOrganisationTypeLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."OrganisationTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsVisible",
  wt."ParentID",
  wt."InterfacePanelOrganisationTypeTemplateLabel"
FROM
  public."InterfacePanelOrganisationTypeTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

INSERT INTO
  public."InterfacePanelOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "OrganisationTypeID",
  "UserTypeID",
  "IsActive",
  "IsDeleted",
  "IsVisible",
  "ParentID",
  "InterfacePanelOrganisationTypeUserTypeLabel"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsVisible",
  wt."ParentID",
  wt."InterfacePanelOrganisationTypeUserTypeTemplateLabel"
FROM
  public."InterfacePanelOrganisationTypeUserTypeTemplate" wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

INSERT INTO
  public."InterfacePanelSetting"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "IsVisible",
  "IsActive",
  "IsDeleted"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."InterfacePanelSettingTemplate"  wt where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber ;

-- DEAL WITH FIELD DETAILS
INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  --inner join "InterfacePanelFieldDetailTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");

/*INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  inner join public."InterfacePanelFDOrganaisationTypeUserTypeTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");

INSERT INTO
  public."FieldDetail"
(
  "FieldDetailID",
  "Name",
  "Description",
  "FieldLabelValue",
  "DefaultValue",
  "IsActive",
  "IsDeleted",
  "ToolTipValue",
  "ToolTipHTML",
  "ToolTipIsHTML",
  "InformationValue",
  "InformationHTML",
  "InformationIsHTML",
  "HelpValue",
  "HelpHTML",
  "HelpIsHTML",
  "IsSecuredByClaim",
  "IsGlobal",
  "IsGridColumn",
  "FieldDetailTemplateID",
  "FieldTypeID",
  "IconAlignmentTypeID",
  "IconFileName",
  "FieldMask"
)


SELECT
  fdt."FieldDetailTemplateID",
  fdt."Name",
  fdt."Description",
  fdt."FieldLabelValue",
  fdt."DefaultValue",
  fdt."IsActive",
  fdt."IsDeleted",
  fdt."ToolTipValue",
  fdt."ToolTipHTML",
  fdt."ToolTipIsHTML",
  fdt."InformationValue",
  fdt."InformationHTML",
  fdt."InformationIsHTML",
  fdt."HelpValue",
  fdt."HelpHTML",
  fdt."HelpIsHTML",
  fdt."IsSecuredByClaim",
  fdt."IsGlobal",
  fdt."IsGridColumn",
  fdt."FieldDetailTemplateID",
  fdt."FieldTypeID",
  fdt."IconAlignmentTypeID",
  fdt."IconFileName",
  fdt."FieldMask"
FROM
  public."FieldDetailTemplate" fdt

  inner join public."InterfacePanelFieldDetailOrganaisationTypeTemplate" ip on ip."FieldDetailTemplateID" = fdt."FieldDetailTemplateID" and ip."IsActive" = true and ip."IsDeleted" = false

  where fdt."FieldDetailTemplateID" not in (select "FieldDetailTemplateID" from public."FieldDetail");*/

INSERT INTO
  public."InterfacePanelFieldDetail"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFieldDetailTemplate" wt

  --left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");




INSERT INTO
  public."InterfacePanelFDOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "OrganisationTypeID",
  "UserTypeID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFDOrganisationTypeUserTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
INSERT INTO
  public."InterfacePanelFieldDetailOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "FieldDetailID",
  "OrganisationTypeID",
  "IsVisible",
  "IsActive",
  "IsDeleted",
  "IsMandatory",
  "IsFilterable",
  "OverrideDefaultValue",
  "OverrideToolTipValue",
  "OverrideToolTipHTML",
  "OverrideToolTipIsHTML",
  "OverrideInformationValue",
  "OverrideInformationHTML",
  "OverrideInformationIsHTML",
  "OverrideHelpValue",
  "OverrideHelpHTML",
  "OverrideHelpIsHTML",
  "OverrideFieldLabelValue"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."IsVisible",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsMandatory",
  wt."IsFilterable",
  wt."OverrideDefaultValue",
  wt."OverrideToolTipValue",
  wt."OverrideToolTipHTML",
  wt."OverrideToolTipIsHTML",
  wt."OverrideInformationValue",
  wt."OverrideInformationHTML",
  wt."OverrideInformationIsHTML",
  wt."OverrideHelpValue",
  wt."OverrideHelpHTML",
  wt."OverrideHelpIsHTML",
  wt."OverrideFieldLabelValue"
FROM
  public."InterfacePanelFieldDetailOrganisationTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
-- Validations related tables


   INSERT INTO
  public."InterfacePanelFieldDetailValidation"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFieldDetailValidationID",
  "InterfacePanelFieldDetailValidationVersion",
  "FieldDetailID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFieldDetailValidationName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFieldDetailValidationTemplateID",
  wt."InterfacePanelFieldDetailValidationTemplateVersion",
  wt."FieldDetailTemplateID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFieldDetailValidationTemplateName"
FROM
  public."InterfacePanelFieldDetailValidationTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");


INSERT INTO
public."InterfacePanelFDValidationOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFDValidationOrganisationTypeUserTypeID",
  "InterfacePanelFDValidationOrganisationTypeUserTypeVersion",
  "FieldDetailID",
  "OrganisationTypeID",
  "UserTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFDValidationOrganisationTypeUserTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateID",
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion",
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFDValidationOrgTypeUserTypeTemplateName"
FROM
  public."InterfacePanelFDValidationOrgTypeUserTypeTemplate" wt

 -- left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");
INSERT INTO
  public."InterfacePanelFieldDetailValidationOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelFieldDetailValidationOrganisationTypeID",
  "InterfacePanelFieldDetailValidationOrganisationTypeVersion",
  "FieldDetailID",
  "OrganisationTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelFieldDetailValidationOrganisationTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateID",
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers",
  wt."FieldDetailTemplateID",
  wt."OrganisationTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelFieldDetailValidationOrganisationTypeTemplateName"
FROM
  public."InterfacePanelFieldDetailValidationOrganisationTypeTemplate" wt

  --left outer join "FieldDetail" fd on fd."FieldDetailTemplateID" = wt."FieldDetailTemplateID"

   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
and wt."FieldDetailTemplateID" in (Select "FieldDetailID" from "FieldDetail");

   --InterfacePanelValidation

      INSERT INTO
 public."InterfacePanelValidation"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationID",
  "InterfacePanelValidationVersionNumber",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationTemplateID",
  wt."InterfacePanelValidationTemplateVersionNumber",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationTemplateName"
FROM
  public."InterfacePanelValidationTemplate" wt
  where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
  and wt."InterfacePanelValidationTemplateID" not in (Select "InterfacePanelValidationID" from "InterfacePanelValidation");

INSERT INTO
  public."InterfacePanelValidationOrganisationTypeUserType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationOrganisationTypeUserTypeID",
  "InterfacePanelValidationOrganisationTypeUserTypeVersion",
  "OrganisationTypeID",
  "UserTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationOrganisationTypeUserTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateID",
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateName"
FROM
  public."InterfacePanelValidationOrganisationTypeUserTypeTemplate" wt
   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
    and wt."InterfacePanelValidationOrganisationTypeUserTypeTemplateID" not in (Select "InterfacePanelValidationOrganisationTypeUserTypeID" from "InterfacePanelValidationOrganisationTypeUserType");
INSERT INTO
   public."InterfacePanelValidationOrganisationType"
(
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "InterfacePanelValidationOrganisationTypeID",
  "InterfacePanelValidationOrganisationTypeVersion",
  "OrganisationTypeID",
  "OverrideValidationMessage",
  "OverrideValidationMessageHTML",
  "OverrideValidationIsHTML",
  "ValidationType",
  "ValidationSubType",
  "ValidationCategory",
  "ValidationSubCategory",
  "SourceErrorCodes",
  "IsActive",
  "IsDeleted",
  "InterfacePanelValidationOrganisationTypeName"
)
SELECT
  InterfacePanelID,
  InterfacePanelVersionNumber,
  wt."InterfacePanelValidationOrganisationTypeTemplateID",
  wt."InterfacePanelValidationOrganisationTypeTemplateVers",
  wt."OrganisationTypeID",
  wt."OverrideValidationMessage",
  wt."OverrideValidationMessageHTML",
  wt."OverrideValidationIsHTML",
  wt."ValidationType",
  wt."ValidationSubType",
  wt."ValidationCategory",
  wt."ValidationSubCategory",
  wt."SourceErrorCodes",
  wt."IsActive",
  wt."IsDeleted",
  wt."InterfacePanelValidationOrganisationTypeTemplateName"
FROM
  public."InterfacePanelValidationOrganisationTypeTemplate" wt
   where wt."InterfacePanelTemplateID" = interfacepaneltemplateid and wt."InterfacePanelTemplateVersionNumber" = interfacepaneltemplateversionnumber
   and wt."InterfacePanelValidationOrganisationTypeTemplateID" not in (Select "InterfacePanelValidationOrganisationTypeID" from "InterfacePanelValidationOrganisationType");

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteModuleTemplate (OID = 16557) :
--
CREATE FUNCTION public."fn_PromoteModuleTemplate" (
  moduletemplateid uuid,
  moduletemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  ModuleID UUID;
  ModuleVersionNumber integer;
  LoopRow RECORD;
BEGIN

ModuleID := (select dorg."ModuleID" from "Module" dorg
	where dorg."ModuleTemplateID" = moduletemplateid limit 1);

ModuleVersionNumber := (select dorg."ModuleVersionNumber" from "Module" dorg
	where dorg."ModuleTemplateID" = moduletemplateid order by dorg."ModuleVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(ModuleID is null)
THEN
BEGIN
	ModuleID := uuid_generate_v1();
END;
END IF;


ModuleVersionNumber := moduletemplateversionnumber;


INSERT INTO
  public."Module"
(
  "ModuleID",
  "ModuleVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "ModuleTemplateID",
  "ModuleTemplateVersionNumber"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  moduletemplateid,
  moduletemplateversionnumber
FROM
  public."ModuleTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;


-- WF ROLE
INSERT INTO
  public."ModuleRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ModuleID",
  "ModuleVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ModuleID,
  ModuleVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ModuleRoleTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-------------- Claim
INSERT INTO
  public."ModuleClaim"
(
"ModuleID",
  "ModuleVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "ModuleRoleID"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."RoleID"
FROM
  public."ModuleClaimTemplate" wt

  inner join "ModuleRoleTemplate" wrr on wrr."RoleID" = wt."ModuleRoleID" and wrr."ModuleTemplateID" = wt."ModuleTemplateID"
  and wrr."ModuleTemplateVersionNumber" = wt."ModuleTemplateVersionNumber"

  left outer join "ModuleRole" mr on mr."ModuleID" = ModuleID and mr."ModuleVersionNumber" = ModuleVersionNumber and mr."RoleName" = wrr."RoleName"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber
  	and wrr."RoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ModuleClaim"
(
"ModuleID",
  "ModuleVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ModuleID,
  ModuleVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ModuleClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber
  	and wt."ModuleRoleID" is null and wt."RoleID" is not null
    and not exists(select dd."ClaimID" from "ModuleClaim" dd where dd."RoleID" = wt."RoleID" and dd."ModuleID" = ModuleID and dd."ModuleVersionNumber" =  ModuleVersionNumber);

----



INSERT INTO
  public."ModuleDependency"
(
  "ModuleID",
  "ModuleVersionNumber",
  "DependencyID",
  "DependencyVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
   ModuleID,
  ModuleVersionNumber,
  md."ModuleID",
  md."ModuleVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ModuleDependencyTemplate" wt

  left outer join "ModuleTemplate" mt on mt."ModuleTemplateID" = wt."DependencyID" and mt."ModuleTemplateVersionNumber" = wt."DependencyVersionNumber"

  left outer join "Module" md on md."ModuleID" = ModuleID and md."ModuleVersionNumber" = ModuleVersionNumber and md."Name" = mt."Name" and md."IsActive" = true and md."IsDeleted" = false

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-- deal with plugins

INSERT INTO
  public."Plugin"
(
  "PluginVersionNumber",
  "Name",
  "Description",
  "Version",
  "VersionNumber",
  "Author",
  "SystemName",
  "DisplayOrder",
  "PluginFileName",
  "PluginTemplateID",
  "PluginTemplateVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  pt."PluginTemplateVersionNumber",
  pt."Name",
  pt."Description",
  pt."Version",
  pt."VersionNumber",
  pt."Author",
  pt."SystemName",
  pt."DisplayOrder",
  pt."PluginFileName",
  pt."PluginTemplateID",
  pt."PluginTemplateVersionNumber",
  pt."IsActive",
  pt."IsDeleted"
FROM
  public."PluginTemplate" pt

  inner join "ModulePluginTemplate" mt on mt."ModuleTemplateID" = moduletemplateid and mt."ModuleTemplateVersionNumber" = moduletemplateversionnumber and mt."PluginTemplateID" = pt."PluginTemplateID" and mt."PluginVersionNumber" = pt."PluginTemplateVersionNumber"

  where pt."PluginTemplateID" not in (select ptt."PluginTemplateID" from "Plugin" ptt where ptt."PluginTemplateID" = pt."PluginTemplateID" and ptt."PluginTemplateVersionNumber" = pt."PluginTemplateVersionNumber");


INSERT INTO
  public."ModulePlugin"
(
  "ModuleID",
  "ModuleVersionNumber",
  "PluginID",
  "PluginVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  pg."PluginID",
  pg."PluginVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ModulePluginTemplate" wt

  left outer join "Plugin" pg on pg."PluginTemplateID" = wt."PluginTemplateID" and pg."PluginTemplateVersionNumber" = wt."PluginVersionNumber"

  where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

/*INSERT INTO
  public."ModuleSubscription"
(
  "ModuleID",
  "ModuleVersionNumber",
  "RegularPeriodLength",
  "RegularPeriodRecurringPrice",
  "IsFixedPrice",
  "FixedPrice",
  "FirstPeriodLength",
  "FirstPeriodPrice",
  "TotalNumberOfPeriods",
  "HasInfinitePeriods",
  "IsActive",
  "IsDeleted",
  "IsModuleFree"
)
SELECT
  ModuleID,
  ModuleVersionNumber,
  wt."RegularPeriodLength",
  wt."RegularPeriodRecurringPrice",
  wt."IsFixedPrice",
  wt."FixedPrice",
  wt."FirstPeriodLength",
  wt."FirstPeriodPrice",
  wt."TotalNumberOfPeriods",
  wt."HasInfinitePeriods",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsModuleFree"
FROM
  public."ModuleSubscriptionTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;
  */
INSERT INTO
  public."ModuleSetting"
(
  "Name",
  "Value",
  "IsActive",
  "IsDeleted",
  "CanOrganisationChange",
  "CanUserChange",
  "ModuleID",
  "ModuleVersionNumber"
)
SELECT
  wt."Name",
  wt."Value",
  wt."IsActive",
  wt."IsDeleted",
  wt."CanOrganisationChange",
  wt."CanUserChange",
  ModuleID,
  ModuleVersionNumber
FROM
  public."ModuleSettingTemplate" wt where wt."ModuleTemplateID" = moduletemplateid and wt."ModuleTemplateVersionNumber" = moduletemplateversionnumber ;

-- ST Promotion
FOR LoopRow IN
	select * from "ModuleStatusTypeTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."StatusTypeTemplateID" not in (select "StatusTypeTemplateID" from "StatusType" w where w."StatusTypeTemplateID"= aw."StatusTypeTemplateID" and w."StatusTypeTemplateVersionNumber" = aw."StatusTypeTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteStatusTypeTemplate"(LoopRow."ModuleTemplateID", aw."ModuleTemplateVersionNumber");
    END;
END LOOP;

-- NC Promotion
FOR LoopRow IN
	select * from "ModuleNotificationConstructTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."NotificationConstructTemplateID" not in (select "NotificationConstructTemplateID" from "NotificationConstruct" w where w."NotificationConstructTemplateID"= aw."NotificationConstructTemplateID" and w."NotificationConstructTemplateVersionNumber" = aw."NotificationConstructTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteNotificationConstructTemplate"(LoopRow."NotificationConstructTemplateID",LoopRow."NotificationConstructTemplateVersionNumber");
    END;
END LOOP;

-- WF Promotion
FOR LoopRow IN
	select * from "ModuleWorkflowTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."WorkflowTemplateID" not in (select "WorkflowTemplateID" from "Workflow" w where w."WorkflowTemplateID"= aw."WorkflowTemplateID" and w."WorkflowTemplateVersionNumber" = aw."WorkflowTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteWorkflowTemplate"(LoopRow."WorkflowTemplateID",LoopRow."WorkflowTemplateVersionNumber");
    END;
END LOOP;

-- AR Promotion
FOR LoopRow IN
	select * from "ModuleArtefactTemplate" aw
    	where aw."ModuleTemplateID" =  moduletemplateid and aw."ModuleTemplateVersionNumber" =  moduletemplateversionnumber and aw."ArtefactTemplateID" not in (select "ArtefactTemplateID" from "Artefact" w where w."ArtefactTemplateID"= aw."ArtefactTemplateID" and w."ArtefactTemplateVersionNumber" = aw."ArtefactTemplateVersionNumber")
LOOP
    BEGIN
    	perform "fn_PromoteArtefactTemplate"(LoopRow."ArtefactTemplateID",LoopRow."ArtefactTemplateVersionNumber");
    END;
END LOOP;


END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteNotificationConstructTemplate (OID = 16559) :
--
CREATE FUNCTION public."fn_PromoteNotificationConstructTemplate" (
  notificationconstructtemplateid uuid,
  notificationconstructtemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  NotificationConstructID UUID;
  NotificationConstructVersionNumber integer;
BEGIN

NotificationConstructID := (select dorg."NotificationConstructID" from "NotificationConstruct" dorg
	where dorg."NotificationConstructTemplateID" = notificationconstructtemplateid limit 1);

NotificationConstructVersionNumber := (select dorg."NotificationConstructVersionNumber" from "NotificationConstruct" dorg
	where dorg."NotificationConstructTemplateID" = notificationconstructtemplateid order by dorg."NotificationConstructVersionNumber" desc limit 1);

-- create DO entry
BEGIN


-- copy WF
IF(NotificationConstructID is null)
THEN
BEGIN
	NotificationConstructID := uuid_generate_v1();
END;
END IF;


NotificationConstructVersionNumber := notificationconstructtemplateversionnumber;


END;

INSERT INTO
  public."NotificationConstruct"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "NotificationConstructTemplateID",
  "NotificationConstructTemplateVersionNumber",
  "NotificationConstructTypeID",
  "NotificationConstructSubTypeID",
  "NotificationConstructCategoryID",
  "NotificationConstructSubCategoryID",
  "DefaultNotificationExportFormatID",
  "ExternalRelatedNotificationConstructID",
  "ExternalRelatedNotificationConstructVersionNumber",
  "DefaultNotificationDeliveryMethodID",
  "NotificationSubject",
  "NotificationTitle",
  "NotificationDetails",
  "NotificationConstructMutatorObjectType",
  "NotificationReference",
  "NotificationAdditionalDetails",
  "ParentID",
  "OwnerOrganisationID",
  "CanBeIncludedInBatchNotification"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  notificationconstructtemplateid,
  notificationconstructtemplateversionnumber,
  wt."NotificationConstructTypeID",
  wt."NotificationConstructSubTypeID",
  wt."NotificationConstructCategoryID",
  wt."NotificationConstructSubCategoryID",
  wt."DefaultNotificationExportFormatID",
  einc."NotificationConstructID",
  einc."NotificationConstructVersionNumber",
  wt."DefaultNotificationDeliveryMethodID",
  wt."NotificationSubject",
  wt."NotificationTitle",
  wt."NotificationDetails",
  wt."NotificationConstructMutatorObjectType",
  wt."NotificationReference",
  wt."NotificationAdditionalDetails",
  wt."ParentID",
  wt."OwnerOrganisationID",
  wt."CanBeIncludedInBatchNotification"
FROM
  public."NotificationConstructTemplate"  wt

  left outer join "NotificationConstruct" einc on einc."NotificationConstructTemplateID" = wt."ExternalRelatedNotificationConstructTemplateID" and einc."NotificationConstructTemplateVersionNumber" = wt."ExternalRelatedNotificationConstructTemplateVersionNumber"

  where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructData"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "NotificationData",
  "NotificationDataLength",
  "NotificationDataMimeType",
  "NotificationDataFileName",
  "IsActive",
  "IsDeleted",
  "CreatedOn" ,
  "UsesBusinessObjects",
  "UsesDataSources"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."NotificationData",
  wt."NotificationDataLength",
  wt."NotificationDataMimeType",
  wt."NotificationDataFileName",
  wt."IsActive",
  wt."IsDeleted",
  CURRENT_DATE ,
  wt."UsesBusinessObjects",
  wt."UsesDataSources"
FROM
  public."NotificationConstructDataTemplate"  wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructParameter"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ParameterOrBusinessObjectName",
  "DefaultValue",
  "ObjectType",
  "ObjectName",
  "ObjectNameSpace",
  "ObjectAssembly",
  "ObjectParentName",
  "ObjectParentNameSpace",
  "ObjectParentAssembly",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "ObjectParentType",
  "IsBusinessObject",
  "BusinessObjectCategoryName"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ParameterOrBusinessObjectName",
  wt."DefaultValue",
  wt."ObjectType",
  wt."ObjectName",
  wt."ObjectNameSpace",
  wt."ObjectAssembly",
  wt."ObjectParentName",
  wt."ObjectParentNameSpace",
  wt."ObjectParentAssembly",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  wt."ObjectParentType",
  wt."IsBusinessObject",
  wt."BusinessObjectCategoryName"
FROM
  public."NotificationConstructParameterTemplate"  wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;


INSERT INTO
  public."NotificationConstructRole"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."NotificationConstructRoleTemplate" wt where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber ;

INSERT INTO
  public."NotificationConstructClaim"
(
"NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "NotificationRoleConstructID"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."NotificationRoleConstructID"
FROM
  public."NotificationConstructClaimTemplate" wt

  inner join "NotificationConstructRoleTemplate" wrr on wrr."NotificationConstructRoleID" = wt."NotificationConstructRoleID" and wrr."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and wrr."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"

  left outer join "NotificationConstructRole" mr on mr."NotificationConstructID" = NotificationConstructID and mr."NotificationConstructVersionNumber" = NotificationConstructVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

  	and wrr."NotificationConstructRoleID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."NotificationConstructClaim"
(
"NotificationConstructID",
  "NotificationConstructVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."NotificationConstructClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

  	and wt."NotificationConstructRoleID" is null and wt."RoleID" is not null;

----

INSERT INTO
  public."NotificationConstructTarget"
(
  "NotificationConstructID",
  "NotificationConstructVersionNumber",
  "OrganisationTypeID",
  "UserTypeID",
  "IsSingleUser",
  "IsOrganisationBranchOnly",
  "IsDefaultTarget",
  "IsActive",
  "IsDeleted"
)
SELECT
  NotificationConstructID,
  NotificationConstructVersionNumber,
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsSingleUser",
  wt."IsOrganisationBranchOnly",
  wt."IsDefaultTarget",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."NotificationConstructTargetTemplate" wt

   where wt."NotificationConstructTemplateID" = notificationconstructtemplateid and wt."NotificationConstructTemplateVersionNumber" = notificationconstructtemplateversionnumber

   and not exists (select * from "NotificationConstructTarget" nct where nct."OrganisationTypeID" = wt."OrganisationTypeID" and nct."UserTypeID" = wt."UserTypeID"
   	and nct."NotificationConstructID" = NotificationConstructID and nct."NotificationConstructVersionNumber" = NotificationConstructVersionNumber limit 1)
  ;


--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteProductTemplate (OID = 16561) :
--
CREATE FUNCTION public."fn_PromoteProductTemplate" (
  producttemplateid uuid,
  producttemplateversionnumber integer,
  processpackage boolean,
  processrelationship boolean,
  processfamily boolean
)
RETURNS void
AS
$body$
DECLARE
  ProductID UUID;
  ProductVersionNumber integer;
  LoopRow RECORD;
BEGIN


ProductID := (select dorg."ProductID" from "Product" dorg
	where dorg."ProductTemplateID" = producttemplateid limit 1);

ProductVersionNumber := (select dorg."ProductVersionID" from "Product" dorg
	where dorg."ProductTemplateID" = producttemplateid order by dorg."ProductVersionID" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(ProductID is null)
THEN
BEGIN
	ProductID := uuid_generate_v1();
END;
END IF;

IF((ProductVersionNumber is null) or (ProductVersionNumber <> producttemplateversionnumber))
THEN
BEGIN

ProductVersionNumber := producttemplateversionnumber;

-- PRODUCT DEFAULTS
-- Attribute make sure unique
INSERT INTO
  public."ProductAttribute"
(
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductAttributeTemplate" wt
  where not exists(select pt."Name" from "ProductAttribute" pt where pt."Name" = wt."Name" limit 1);


-- spec
INSERT INTO
  public."SpecificationAttribute"
(
  "SpecificationAttributeTemplateID",
  "Name",
  "Description",
  "DisplayOrder",
  "IsActive",
  "IsDeleted",
  "SpecificationAttributeTypeID",
  "SpecificationAttributeCategoryID",
  "SpecificationAttributeSubTypeID",
  "SpecificationAttributeSubCategoryID"
)
SELECT
  wt."SpecificationAttributeTemplateID",
  wt."Name",
  wt."Description",
  wt."DisplayOrder",
  wt."IsActive",
  wt."IsDeleted",
  wt."SpecificationAttributeTypeID",
  wt."SpecificationAttributeCategoryID",
  wt."SpecificationAttributeSubTypeID",
  wt."SpecificationAttributeSubCategoryID"
FROM
  public."SpecificationAttributeTemplate" wt
   where not exists(select pt."SpecificationAttributeTemplateID" from "SpecificationAttribute" pt where pt."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID" limit 1);

-- spec option
INSERT INTO
  public."SpecificiationAttributeOption"
(
  "SpecificationAttributeOptionTemplateID",
  "SpecificationAttributeID",
  "DisplayOrder",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  wt."SpecificationAttributeOptionTemplateID",
  (select sa1."SpecificationAttributeID" from "SpecificationAttribute" sa1 where sa1."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID" limit 1),
  wt."DisplayOrder",
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"

FROM
  public."SpecificationAttributeOptionTemplate"  wt
   where not exists(select pt."SpecificationAttributeOptionTemplateID" from "SpecificiationAttributeOption" pt where pt."SpecificationAttributeOptionTemplateID" = wt."SpecificationAttributeOptionTemplateID" limit 1);

-- spec relationship
INSERT INTO
  public."SpecificationAttributeRelationship"
(
  "SpecificationAttributeID",
  "ParentSpecificationAttributeID",
  "IsMandatory",
  "IsInverse",
  "IsActive",
  "IsDeleted"
)
SELECT
  sp."SpecificationAttributeID",
  spp."SpecificationAttributeID",
  wt."IsMandatory",
  wt."IsInverse",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."SpecificationAttributeRelationshipTemplate" wt

  left outer join "SpecificationAttribute" sp on sp."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID"
  left outer join "SpecificationAttribute" spp on spp."SpecificationAttributeTemplateID" = wt."ParentSpecificationAttributeTemplateID"

  where sp."SpecificationAttributeID" is not null and spp."SpecificationAttributeID" is not null

  and not exists(select * from "SpecificationAttributeRelationship" ss where ss."SpecificationAttributeID" = sp."SpecificationAttributeID" and ss."ParentSpecificationAttributeID" = spp."SpecificationAttributeID" limit 1)
 ;




-- Product
INSERT INTO
  public."Product"
(
  "ProductID",
  "ProductTemplateID",
  "IsActive",
  "IsDeleted",
  "IsPackage",
  "IsDeposit",
  "ProductVersionID",
  "ProductTemplateVersionID",
  "ParentID",
  "OwnerOrganisationID",
  "CanBeResold",
  "IsDeductionProduct"
)
SELECT
 ProductID,
  wt."ProductTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsPackage",
  false,
  ProductVersionNumber,
  wt."ProductVersionID",
  wt."ParentID",
  wt."OwnerOrganisationID",
  wt."CanBeResold",
  wt."IsDeductionProduct"
FROM
  public."ProductTemplate" wt
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-- PRoduct Attri
INSERT INTO
  public."ProductProductAttribute"
(
  "ProductID",
  "ProductAttributeID",
  "IsRequired",
  "DisplayOrder",
  "ProductVersionID",
  "IsActive",
  "IsDeleted"
)
SELECT
  ProductID,
  pa."ProductAttributeID",
  wt."IsRequired",
  wt."DisplayOrder",
  ProductVersionNumber,
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductProductAttributeTemplate" wt
  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = wt."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pa on pa."Name" = pat."Name"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber and pa."ProductAttributeID" is not null;

-- tag
INSERT INTO
  public."ProductTag"
(
  "Name",
  "ProductID",
  "ProductVersionID"
)
SELECT
  wt."Name",
  ProductID,
  ProductVersionNumber
FROM
  public."ProductTagTemplate" wt
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

-- deduction
INSERT INTO
  public."ProductDeduction"
(
  "ProductID",
  "ProductVersionID",
  "DeductionID",
  "DeductionPercentage",
  "DeductionValue",
  "IsActive",
  "IsDeleted",
  "DeductionVersionNumber"
)
SELECT
  ProductID,
  ProductVersionNumber,
  de."DeductionID",
  wt."DeductionPercentage",
  wt."DeductionValue",
  wt."IsActive",
  wt."IsDeleted",
  de."DeductionVersionNumber"
FROM
  public."ProductDeductionTemplate" wt
  left outer join "DeductionTemplate" dt on dt."DeductionTemplateID" = wt."DeductionTemplateID" and dt."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"
  left outer join "Deduction" de on de."Name" = dt."Name"
  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

-- WF ROLE
INSERT INTO
  public."ProductRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "ProductID",
  "ProductVersionID",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  ProductID,
  ProductVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."ProductRoleTemplate" wt where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-------------- Claim
INSERT INTO
  public."ProductClaim"
(
"ProductID",
  "ProductVersionID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "ProductRoleID"
)
SELECT
  ProductID,
  ProductVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."ProductRoleID"
FROM
  public."ProductClaimTemplate" wt

  inner join "ProductRoleTemplate" wrr on wrr."ProductRoleTemplateID" = wt."ProductRoleTemplateID" and wrr."ProductTemplateID" = wt."ProductTemplateID"
  and wrr."ProductVersionID" = wt."ProductVersionID"

  left outer join "ProductRole" mr on mr."ProductID" = ProductID and mr."ProductVersionID" = ProductVersionNumber and mr."RoleName" = wrr."RoleName"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  	and wrr."ProductRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."ProductClaim"
(
"ProductID",
  "ProductVersionID",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
ProductID,
  ProductVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."ProductClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  	and wt."ProductRoleTemplateID" is null and wt."RoleID" is not null
    and not exists(select dd."ProductClaimID" from "ProductClaim" dd where dd."RoleID" = wt."RoleID" and dd."ProductID" = ProductID and dd."ProductVersionID" =  ProductVersionNumber);

----
INSERT INTO
  public."ProductDetail"
(
  "Name",
  "Description",
  "ProductID",
  "IsActive",
  "IsDeleted",
  "ShortDescription",
  "LongDescription",
  "MetaKeywords",
  "MetaDescription",
  "MetaTitle",
  "RequireOtherProducts",
  "AutomaticallyAddRequiredProducts",
  "HasUserAgreement",
  "UserAgreementText",
  "IsRecurring",
  "RecurringCycleLength",
  "RecurringCyclePeriodID",
  "RecurringTotalCycle",
  "IsTaxExempt",
  "TaxCategoryID",
  "OrderMinimumQuantity",
  "OrderMaximumQuantity",
  "CallForPrice",
  "Price",
  "ProductCost",
  "CustomerEntersPrice",
  "HasTierPrices",
  "HasDiscountsApplied",
  "MinimumCustomerEnteredPrice",
  "MaximumCustomerEnteredPrice",
  "DisplayOrder",
  "AvailableStartDate",
  "AvailableEndDate",
  "ProductTypeID",
  "ProductSubTypeID",
  "ProductCategoryID",
  "ProductSubCategoryID",
  "ProductVersionID",
  "CurrencyCode",
  "CurrencyRate",
  "CurrencyRateDate",
  "CurrencyRateToGBP",
  "CurrencyRateToUSD",
  "InvoiceName",
  "IsDepositProduct"
)
SELECT
  wt."Name",
  wt."Description",
  ProductID,
  wt."IsActive",
  wt."IsDeleted",
  wt."ShortDescription",
  wt."LongDescription",
  wt."MetaKeywords",
  wt."MetaDescription",
  wt."MetaTitle",
  wt."RequireOtherProducts",
  wt."AutomaticallyAddRequiredProducts",
  wt."HasUserAgreement",
  wt."UserAgreementText",
  wt."IsRecurring",
  wt."RecurringCycleLength",
  wt."RecurringCyclePeriodID",
  wt."RecurringTotalCycles",
  wt."IsTaxExempt",
  wt."TaxCategoryID",
  wt."OrderMinimumQuantity",
  wt."OrderMaximumQuantity",
  wt."CallForPrice",
  wt."Price",
  wt."ProductCost",
  wt."CustomerEntersPrice",
  wt."HasTierPrices",
  wt."HasDiscountsApplied",
  wt."MinimumCustomerEnteredPrice",
  wt."MaximumCustomerEnteredPrice",
  wt."DisplayOrder",
  wt."AvailableStartDate",
  wt."AvailableEndDate",
  wt."ProductTypeID",
  wt."ProductSubTypeID",
  wt."ProductCategoryID",
  wt."ProductSubCategoryID",
  ProductVersionNumber,
  wt."CurrencyCode",
  wt."CurrencyRate",
  wt."CurrencyRateDate",
  wt."CurrencyRateToGBP",
  wt."CurrencyRateToUSD",
  wt."InvoiceName",
  wt."IsDepositProduct"
FROM
  public."ProductDetailTemplate" wt where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber ;

-- spec attrs
INSERT INTO
  public."ProductSpecificationAttribute"
(
  "ProductID",
  "IsMandatory",
  "IsMultiSelect",
  "DisplayOrder",
  "IsPreSelected",
  "MinimumSelectionLimit",
  "MaximumSelectionLimit",
  "IsUserDefined",
  "IsPriceDriven",
  "SpecificationAttributeID",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  wt."IsMandatory",
  wt."IsMultiSelect",
  wt."DisplayOrder",
  wt."IsPreSelected",
  wt."MinimumSelectionLimit",
  wt."MaximumSelectionLimit",
  wt."IsUserDefined",
  wt."IsPriceDriven",
  sp."SpecificationAttributeID",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductSpecificationAttributeTemplate" wt

  left outer join "SpecificationAttribute" sp on sp."SpecificationAttributeTemplateID" = wt."SpecificationAttributeTemplateID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber;

INSERT INTO
  public."ProductSpecificationAttributeOption"
(
  "ProductSpecificationAttributeID",
  "SpecficiationAttributeOptionID",
  "PriceAdjustment",
  "WeightAdjustment",
  "Cost",
  "DefaultValue",
  "DefaultQuantity",
  "DisplayOrder",
  "IsActive",
  "IsDeleted"
)
SELECT
  psa."ProductSpecificationAttributeID",
  sao."SpecficiationAttributeOptionID",
  wt."PriceAdjustement",
  wt."WeightAdjustment",
  wt."Cost",
  wt."DefaultValue",
  wt."DefaultQuantity",
  wt."DisplayOrder",
  wt. "IsActive",
  wt."IsDeleted"
FROM
  public."ProductSpecificationAttributeOptionTemplate" wt

  left outer join "SpecificiationAttributeOption" sao on sao."SpecificationAttributeOptionTemplateID" = wt."SpecificationAttributeOptionTemplateID"

  left outer join "ProductSpecificationAttributeTemplate" psat on psat."ProductSpecificationAttributeTemplateID" = wt."ProductSpecificationAttributeTemplateID"

  left outer join "ProductSpecificationAttribute" psa on psa."ProductID" = ProductID and psa."ProductVersionID" = ProductVersionNumber
  	and psa."SpecificationAttributeID" = sao."SpecificationAttributeID"

  where psat."ProductTemplateID" = producttemplateid and psat."ProductVersionID" = producttemplateversionnumber
  and psa."ProductSpecificationAttributeID" is not null
  ;

INSERT INTO
  public."ProductSpecificationBlueprint"
(
  "ProductID",
  "ProductSpecificationAttributeID",
  "DefaultProductSpecificationAttributeOptionID",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  psa."ProductSpecificationAttributeID",
  psao."ProductSpecificationAttributeOptionID",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductSpecificationBlueprintTemplate" wt
  left outer join "ProductSpecificationAttributeOptionTemplate" sao on sao."ProductSpecificationAttributeOptionTemplateID" = wt."DefaultProductSpecificationAttributeOptionTemplateID"
  left outer join "SpecificiationAttributeOption" saa on saa."SpecificationAttributeOptionTemplateID" = sao."SpecificationAttributeOptionTemplateID"

  left outer join "ProductSpecificationAttributeTemplate" psat on psat."ProductSpecificationAttributeTemplateID" = wt."ProductSpecificationAttributeTemplateID"

  left outer join "ProductSpecificationAttribute" psa on psa."ProductID" = ProductID and psa."ProductVersionID" = ProductVersionNumber
  	and psa."SpecificationAttributeID" = saa."SpecificationAttributeID"
  left outer join "ProductSpecificationAttributeOption" psao on psao."ProductSpecificationAttributeID" = psa."ProductSpecificationAttributeID" and psao."SpecficiationAttributeOptionID" = saa."SpecficiationAttributeOptionID"

  where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."ProductVariantAttributeValue"
(
  "ProductProductAttributeID",
  "AttributeValueTypeID",
  "Name",
  "PriceAdjustment",
  "WeightAdjustement",
  "Cost",
  "Quantity",
  "IsPreSelected",
  "DisplayOrder",
  "IsActive",
  "IsDeleted"
)
SELECT
  ppa."ProductProductAttributeID",
  wt."AttributeValueTypeID",
  wt."Name",
  wt."PriceAdjustment",
  wt."WeightAdjustment",
  wt."Cost",
  wt."Quantity",
  wt."IsPreSelected",
  wt."DisplayOrder",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductVariantAttributeValueTemplate" wt

  left outer join "ProductProductAttributeTemplate" ppt on ppt."ProductProductAttributeTemplateID" = wt."ProductProductAttributeTemplateID"

  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = ppt."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pa on pa."Name" = pat."Name"

  left outer join "ProductProductAttribute" ppa on ppa."ProductID" =ProductID and ppa."ProductVersionID" = ProductVersionNumber
  	and ppa."ProductAttributeID" = pa."ProductAttributeID"

   where ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."ProductVariantAttributeCombination"
(
  "ProductID",
  "AllowOutOfStockOrders",
  "StockQuantity",
  "Sku",
  "ManufacturerPartNumber",
  "Gtin",
  "OverridenPrice",
  "IsActive",
  "IsDeleted",
  "ProductVersionID"
)
SELECT
  ProductID,
  wt."AllowOutOfStockOrders",
  wt."StockQuantity",
  wt."Sku",
  wt."ManufacturerPartNumber",
  wt."Gtin",
  wt."OverriddenPrice",
  wt."IsActive",
  wt."IsDeleted",
  ProductVersionNumber
FROM
  public."ProductVariantAttributeCombinationTemplate" wt

   where wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

-- Plan
INSERT INTO
  public."Plan"
(
  "PlanVersionNumber",
  "Name",
  "Description",
  "InvoiceName",
  "Price",
  "Period",
  "TrialPeriod",
  "PeriodUnitID",
  "TrialPeriodUnitID",
  "FreeQuantity",
  "SetupCost",
  "DowngradePenalty",
  "CreatedOn",
  "CreatedBy",
  "IsActive",
  "IsDeleted",
  "CountryCode",
  "CurrencyCode",
  "CancellationPeriod",
  "CancellationPeriodUnitID",
  "IsFree",
  "HasInfinitePeriods",
  "ParentID",
  "PlanStatusID",
  "IsTransactionBased",
  "PlanTemplateID",
  "PlanTemplateVersionNumber",
  "PlanGroupID",
  "PlanCategoryID"
)
SELECT
 	1,
  wt."Name",
  wt."Description",
  wt."InvoiceName",
  wt."Price",
  wt."Period",
  wt."TrialPeriod",
  wt."PeriodUnitID",
  wt."TrialPeriodUnitID",
  wt."FreeQuantity",
  wt."SetupCost",
  wt."DowngradePenalty",
  wt."CreatedOn",
  wt."CreatedBy",
  wt."IsActive",
  wt."IsDeleted",
  wt."CountryCode",
  wt."CurrencyCode",
  wt."CancellationPeriod",
  wt."CancellationPeriodUnitID",
  wt."IsFree",
  wt."HasInfinitePeriods",
  wt."ParentID",
  wt."PlanStatusID",
  wt."IsTransactionBased",
  wt."PlanTemplateID",
  wt."PlanTemplateVersionNumber",
  wt."PlanGroupID",
  wt."PlanCategoryID"
FROM
  public."PlanTemplate" wt

  left outer join "PlanProductTemplate" ppt on ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  	and ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"

  where not exists(select pt."PlanTemplateID" from "Plan" pt where pt."PlanTemplateID" = wt."PlanTemplateID" and pt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber")
  and ppt."ProductTemplateID" =  producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  ;

INSERT INTO
  public."PlanProduct"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "Period",
  "PeriodUnitID",
  "IsActive",
  "IsDeleted",
  "PlanProductStatusID"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  pr."ProductID",
  pr."ProductVersionID",
  wt."Period",
  wt."PeriodUnitID",
  wt."IsActive",
  wt."IsDeleted",
  wt."PlanProductStatusID"
FROM
  public."PlanProductTemplate" wt

   left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductVersionID" = wt."ProductVersionID"

  where wt."ProductTemplateID" = producttemplateid and wt."PlanTemplateVersionNumber" = producttemplateversionnumber

  and not exists(select pt."PlanID" from "PlanProduct" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber" = p."PlanVersionNumber"
  	and pt."ProductID" = pr."ProductID" and pt."ProductVersionID" = pr."ProductVersionID")

  and wt."ProductTemplateID" is not null;


-- plan transaction
INSERT INTO
  public."PlanTransaction"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "IsTotalValuePricingBound",
  "IsTransactionCountPricingBound",
  "IsActive",
  "IsDeleted",
  "ParentID",
  "ApplyTransactionTierPricingPerTransaction"
)
SELECT
   p."PlanID",
 p."PlanVersionNumber",
   pr."ProductID",
  pr."ProductVersionID",
 ptt. "IsTotalValuePricingBound",
  ptt."IsTransactionCountPricingBound",
  ptt."IsActive",
  ptt."IsDeleted",
  ptt."PlanTransactionTemplateID",
  ptt."ApplyTransactionTierPricingPerTransaction"
FROM
  public."PlanTransactionTemplate" ptt

  left outer join "Plan" p on p."PlanTemplateID" = ptt."PlanTemplateID" and p."PlanTemplateVersionNumber" = ptt."PlanTemplateVersionNumber"
  left outer join "PlanProductTemplate" ppt on ptt."PlanTemplateID" = ptt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = ptt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber

  left outer join "Product" pr on pr."ProductTemplateID" = ptt."ProductTemplateID" and pr."ProductVersionID" = ptt."ProductVersionID"

   where not exists(select pt."PlanTransactionID" from "PlanTransaction" pt where pt."ParentID" = ptt."PlanTransactionTemplateID")

   and p."PlanID" is not null and pr."ProductID" is not null and ppt."ProductTemplateID" is not null;

-- deal with component tiers

-- component tiers missing
INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "PlanTransactionComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"
   left outer join "PlanTransactionTemplate" tran on tran."PlanTransactionTemplateID" = tem."PlanTransactionTemplateID"
   left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = tran."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = tran."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber

  left outer join "PlanTransaction" p on p."ParentID" = tran."PlanTransactionTemplateID"

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and p."PlanTransactionID" is not null and tran."PlanTransactionTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."PlanTransactionComponentTier"
(
  "ComponentTierID",
  "PlanTransactionID"
)
SELECT
  ct."ComponentTierID",
  p."PlanTransactionID"
FROM
  public."PlanTransactionComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "PlanTransaction" p on p."ParentID" = wt."PlanTransactionTemplateID"

  where not exists (select * from "PlanTransactionComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."PlanTransactionID" = p."PlanTransactionID" limit 1)
    and ct."ComponentTierID" is not null and p."PlanTransactionID" is not null
  ;

-- billing
INSERT INTO
  public."Billing"
(
  "BillingPeriod",
  "BillingPeriodUnitID",
  "BillingLagPeriod",
  "BillingLagPeriodUnitID",
  "BillingPeriodDayOfMonth",
  "DelayedBillingPeriod",
  "DelayedBillingPeriodUnitID",
  "HasDelayedBilling",
  "BillingTemplateID",
  "NumberOfBillingPeriods",
  "InvoiceToProcessingDelayPeriod",
  "InvoiceToProcessingDelayPeriodUnitID",
  "InvoiceNotificationConstructID",
  "InvoiceNotificationConstructVersionNumber",
  "EstimatedProcessingPeriod",
  "EstimatedProcessingPeriodUnitID",
  "IsActive",
  "IsDeleted"
)
SELECT
  bt."BillingPeriod",
  bt."BillingPeriodUnitID",
  bt."BillingLagPeriod",
  bt."BillingLagPeriodUnitID",
  bt."BillingPeriodDayOfMonth",
  bt."DelayedBillingPeriod",
  bt."DelayedBillingPeriodUnitID",
  bt."HasDelayedBilling",
  bt."BillingTemplateID",
  bt."NumberOfBillingPeriods",
  bt."InvoiceToProcessingDelayPeriod",
  bt."InvoiceToProcessingDelayPeriodUnitID",
  nc."NotificationConstructID",
  nc."NotificationConstructVersionNumber",
  bt."EstimatedProcessingPeriod",
  bt."EstimatedProcessingPeriodUnitID",
  bt."IsActive",
  bt."IsDeleted"
FROM
  public."BillingTemplate" bt

  left outer join "NotificationConstruct" nc on nc."NotificationConstructTemplateID" = "InvoiceNotificationConstructTemplateID"
  	and nc."NotificationConstructTemplateVersionNumber" = "InvoiceNotificationConstructTemplateVersionNumber"

  where not exists(select * from "Billing" pt where pt."BillingTemplateID" = bt."BillingTemplateID")
  ;

INSERT INTO
  public."PlanBilling"
(
  "PlanID",
  "PlanVersionNumber",
  "BillingID",
  "IsActive",
  "IsDeleted",
  "IsDefaultBilling"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  b."BillingID",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsDefaultBilling"
FROM
  public."PlanBillingTemplate" wt
 left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
  left outer join "Billing" b on b."BillingTemplateID" = wt."BillingTemplateID"


   where not exists(select * from "PlanBilling" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber"= p."PlanVersionNumber" and pt."BillingID" = b."BillingID")

   and ppt."ProductTemplateID" is not null
  ;

INSERT INTO
  public."PlanProduct"
(
  "PlanID",
  "PlanVersionNumber",
  "ProductID",
  "ProductVersionID",
  "Period",
  "PeriodUnitID",
  "IsActive",
  "IsDeleted",
  "PlanProductStatusID"
)
SELECT
  p."PlanID",
  p."PlanVersionNumber",
  pr."ProductID",
  pr."ProductVersionID",
  wt."Period",
  wt."PeriodUnitID",
  wt."IsActive",
  wt."IsDeleted",
  wt."PlanProductStatusID"
FROM
  public."PlanProductTemplate" wt
left outer join "PlanProductTemplate" ppt on ppt."PlanTemplateID" = wt."PlanTemplateID" and ppt."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber" and  ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber
  left outer join "Plan" p on p."PlanTemplateID" = wt."PlanTemplateID" and p."PlanTemplateVersionNumber" = wt."PlanTemplateVersionNumber"
  left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

   where not exists(select * from "PlanProduct" pt where pt."PlanID" = p."PlanID" and pt."PlanVersionNumber"= p."PlanVersionNumber" and pt."ProductID" = pr."ProductID"
   	and pt."ProductVersionID" = pr."ProductVersionID")
    and ppt."ProductTemplateID" is not null
    and p."PlanID" is not null and pr."ProductID" is not null
  ;

-- product tiers
INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "ProductComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"
   left outer join "ProductTemplate" ppt on ppt."ProductTemplateID" = producttemplateid and ppt."ProductVersionID" = producttemplateversionnumber and ppt."ProductTemplateID" = tem."ProductTemplateID" and ppt."ProductVersionID" = tem."ProductVersionID"


  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and ppt."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."ProductComponentTier"
(
  "ComponentTierID",
  "ProductID",
  "ProductVersionID"
)
SELECT
  ct."ComponentTierID",
  p."ProductID",
  p."ProductVersionID"
FROM
  public."ProductComponentTierTemplate" wt
  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."ProductID" = p."ProductID" and tt."ProductVersionID" = p."ProductVersionID" limit 1)
    and ct."ComponentTierID" is not null and p."ProductID" is not null
    and wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;

-- product discount
INSERT INTO
  public."Discount"
(
  "DiscountVersionNumber",
  "Name",
  "Description",
  "InvoiceName",
  "DiscountTypeID",
  "DiscountPercentage",
  "DiscountAmount",
  "DiscountQuantity",
  "DiscountPeriod",
  "DisocuntPeriodUnitID",
  "ValidTill",
  "MaxRedemptions",
  "DiscountApplyOnID",
  "CreatedOn",
  "IsActive",
  "IsDeleted",
  "IsRecurring",
  "IsPercentage",
  "DiscountStatusID",
  "IsSingleProductDiscount",
  "IsCheckoutDiscount",
  "IsSingleProductQuantityDiscount",
  "SingleProductQuantityDiscountDivisor",
  "IsSingleProductQuantityDiscountPercentageBased",
  "IsSingleProductQuantityDiscountAdditionalQuantityBased",
  "SingleProductQuantityDiscountAdditionalQuantity",
  "IsMultipleProductCombinationDiscount",
  "IsMultipleProductCombinationDiscountPercentageBased",
  "IsMultipleProductCombinationDiscountCheapestFreeBased",
  "HasTiers",
  "OrganisationTypeID",
  "UserTypeID",
  "ParentID",
  "ParentVersionNumber"
)
SELECT
  1,
  wt."Name",
  wt."Description",
  wt."InvoiceName",
  wt."DiscountTypeID",
  wt."DiscountPercentage",
  wt."DiscountAmount",
  wt."DiscountQuantity",
  wt."DiscountDurationTypeID",
  wt."DiscountDurationMonth",
  wt."ValidTill",
  wt."MaxRedemptions",
  wt."DiscountApplyOnID",
  wt."CreatedOn",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsRecurring",
  wt."IsPercentage",
  wt."DiscountStatusID",
  wt."IsSingleProductDiscount",
  wt."IsCheckoutDiscount",
  wt."IsSingleProductQuantityDiscount",
  wt."SingleProductQuantityDiscountDivisor",
  wt."IsSingleProductQuantityDiscountPercentageBased",
  wt."IsSingleProductQuantityDiscountAdditionalQuantityBased",
  wt."SingleProductQuantityDiscountAdditionalQuantity",
  wt."IsMultipleProductCombinationDiscount",
  wt."IsMultipleProductCombinationDiscountPercentageBased",
  wt."IsMultipleProductCombinationDiscountCheapestFreeBased",
  wt."HasTiers",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."DiscountTemplateID",
  wt."DiscountTemplateVersionNumber"
FROM
  public."DiscountTemplate" wt

   inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = wt."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= wt."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "Discount" d where d."ParentID" = wt."DiscountTemplateID" and d."ParentVersionNumber" =
  	wt."DiscountTemplateVersionNumber" limit 1) and pd."ProductTemplateID" is not null
  ;

INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "DiscountComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"

  inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = tem."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= tem."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and pd."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."DiscountComponentTier"
(
  "ComponentTierID",
  "DiscountID",
  "DiscountVersionNumber"
)
SELECT
  ct."ComponentTierID",
  p."DiscountID",
  p."DiscountVersionNumber"
FROM
  public."DiscountComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Discount" p on p."ParentID" = wt."DiscountTemplateID" and p."ParentVersionNumber" = wt."DiscountTemplateVersionNumber"

  inner join "ProductDiscountTemplate" pd on pd."DiscountTemplateID" = wt."DiscountTemplateID" and pd."DiscountTemplateVersionNumber"
   	= wt."DiscountTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "DiscountComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."DiscountID" = p."DiscountID" and tt."DiscountVersionNumber" = p."DiscountVersionNumber" limit 1)
    and ct."ComponentTierID" is not null and p."DiscountID" is not null
  ;

-- product discount
INSERT INTO
  public."ProductDiscount"
(
  "ProductID",
  "ProductVersionID",
  "DiscountID",
  "DiscountVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  pr."ProductID",
  pr."ProductVersionID",
  p."DiscountID",
  p."DiscountVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductDiscountTemplate" wt

   left outer join "Discount" p on p."ParentID" = wt."DiscountTemplateID" and p."ParentVersionNumber" = wt."DiscountTemplateVersionNumber"

   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductDiscount" pd where pd."DiscountID" = p."DiscountID" and pd."DiscountVersionNumber" = p."DiscountVersionNumber"
  	and pd."ProductID" = pr."ProductID" and pd."ProductVersionID"  = pr."ProductVersionID" limit 1)
    and pr."ProductID" is not null
    and  wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;


-- product deduction
INSERT INTO
  public."Deduction"
(
  "DeductionVersionNumber",
  "DeductionTypeID",
  "DeductionSubTypeID",
  "DeductionCategoryID",
  "DeductionSubCategoryID",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "IsPercentageBased",
  "OrganisationTypeID",
  "UserTypeID",
  "IsTierDeduction",
  "IsCheckoutDeduction",
  "ParentID",
  "DeductionTemplateID",
  "DeductionTemplateVersionNumber"
)
SELECT
  1,
  wt."DeductionTypeID",
  wt."DeductionSubTypeID",
  wt."DeductionCategoryID",
  wt."DeductionSubCategoryID",
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  wt."IsPercentageBased",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."IsTierDeduction",
  wt."IsCheckoutDeduction",
  wt."ParentID",
  wt."DeductionTemplateID",
  wt."DeductionTemplateVersionNumber"
FROM
  public."DeductionTemplate" wt


   inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = wt."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= wt."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "Deduction" d where d."DeductionTemplateID" = wt."DeductionTemplateID" and d."DeductionTemplateVersionNumber" =
  	wt."DeductionTemplateVersionNumber" limit 1) and pd."ProductTemplateID" is not null
  ;

INSERT INTO
  public."ComponentTier"
(
  "TotalValueLowerBound",
  "TotalValueUpperBound",
  "QuantityCountLowerBound",
  "QuantityCountUpperBound",
  "IsPercentageBased",
  "TierPrice",
  "TierPercentage",
  "ApplyToTotal",
  "ApplyOnPaymentMethodTypeID",
  "ApplyPerTransaction",
  "Name",
  "Description",
  "Order",
  "TierOrder",
  "ParentID",
  "IsActive",
  "IsDeleted",
  "OrganisationTypeID",
  "UserTypeID",
  "HasNoUpperBound",
  "ParentVersionNumber",
  "ApplyOnPaymentCardTypeID"
)
SELECT
  wt."TotalValueLowerBound",
  wt."TotalValueUpperBound",
  wt."QuantityCountLowerBound",
  wt."QuantityCountUpperBound",
  wt."IsPercentageBased",
  wt."TierPrice",
  wt."TierPercentage",
  wt."ApplyToTotal",
  wt."ApplyOnPaymentMethodTypeID",
  wt."ApplyPerTransaction",
  wt."Name",
  wt."Description",
  wt."Order",
  wt."TierOrder",
  wt."ComponentTierTemplateID",
  wt."IsActive",
  wt."IsDeleted",
  wt."OrganisationTypeID",
  wt."UserTypeID",
  wt."HasNoUpperBound",
  wt."ParentVersionNumber",
  wt."ApplyOnPaymentCardTypeID"
FROM
  public."ComponentTierTemplate" wt

  left outer join "DeductionComponentTierTemplate" tem on tem."ComponentTierTemplateID" = wt."ComponentTierTemplateID"

  inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = tem."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= tem."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "ComponentTier" ct where ct."ParentID" = wt."ComponentTierTemplateID" limit 1)
  and pd."ProductTemplateID" is not null
  ;

-- now add join table for componen tier  etc
INSERT INTO
  public."DeductionComponentTier"
(
  "ComponentTierID",
  "DeductionID",
  "DeductionVersionNumber"
)
SELECT
  ct."ComponentTierID",
  p."DeductionID",
  p."DeductionVersionNumber"
FROM
  public."DeductionComponentTierTemplate" wt

  left outer join "ComponentTier" ct on ct."ParentID" = wt."ComponentTierTemplateID"
  left outer join "Deduction" p on p."DeductionTemplateID" = wt."DeductionTemplateID" and p."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"

  inner join "ProductDeductionTemplate" pd on pd."DeductionTemplateID" = wt."DeductionTemplateID" and pd."DeductionTemplateVersionNumber"
   	= wt."DeductionTemplateVersionNumber" and pd."ProductTemplateID" = producttemplateid and pd."ProductVersionID" = producttemplateversionnumber

  where not exists (select * from "DeductionComponentTier" tt where tt."ComponentTierID" = ct."ComponentTierID"
  	and tt."DeductionID" = p."DeductionID" and tt."DeductionVersionNumber" = p."DeductionVersionNumber" limit 1)
    and ct."ComponentTierID" is not null and p."DeductionID" is not null
  ;

-- product discount
INSERT INTO
  public."ProductDeduction"
(
  "ProductID",
  "ProductVersionID",
  "DeductionID",
  "DeductionPercentage",
  "DeductionValue",
  "IsActive",
  "IsDeleted",
  "DeductionVersionNumber"
)
SELECT
  pr."ProductID",
  pr."ProductVersionID",
  p."DeductionID",
  wt."DeductionPercentage",
  wt."DeductionValue",
  wt."IsActive",
  wt."IsDeleted",
  p."DeductionVersionNumber"
FROM
  public."ProductDeductionTemplate" wt

    left outer join "Deduction" p on p."DeductionTemplateID" = wt."DeductionTemplateID" and p."DeductionTemplateVersionNumber" = wt."DeductionTemplateVersionNumber"

   left outer join "Product" pr on pr."ProductTemplateID" = wt."ProductTemplateID" and pr."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists (select * from "ProductDeduction" pd where pd."DeductionID" = p."DeductionID" and pd."DeductionVersionNumber" = p."DeductionVersionNumber"
  	and pd."ProductID" = pr."ProductID" and pd."ProductVersionID"  = pr."ProductVersionID" limit 1)
    and pr."ProductID" is not null
    and  wt."ProductTemplateID" = producttemplateid and wt."ProductVersionID" = producttemplateversionnumber
  ;














IF(ProcessRelationship = true)
THEN
BEGIN

-- first promote all parent products
FOR LoopRow IN
	select aw."ParentProductTemplateID",aw."ParentProductVersionID" from "ProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ParentProductTemplateID" and p."ProductTemplateVersionID" = aw."ParentProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ParentProductTemplateID",LoopRow."ParentProductVersionID",false,false,false);
    END;
END LOOP;
-- first promote all child products
FOR LoopRow IN
	select aw."ChildProductTemplateID",aw."ChildProductVersionID" from "ProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ChildProductTemplateID" and p."ProductTemplateVersionID" = aw."ChildProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ChildProductTemplateID",LoopRow."ChildProductVersionID",false,false,false);
    END;
END LOOP;


INSERT INTO
  public."ProductRelationship"
(
  "ParentProductID",
  "ChildProductID",
  "ProductRelationshipTypeID",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "ParentProductVersionID",
  "ChildProductVersionID"
)
SELECT
  pr."ProductID",
  cpr."ProductID",
  wt."ProductRelationshipTypeID",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  pr."ProductVersionID",
  cpr."ProductVersionID"
FROM
  public."ProductRelationshipTemplate" wt

  left outer join "Product" pr on pr."ProductTemplateID" = wt."ParentProductTemplateID" and pr."ProductTemplateVersionID" = wt."ParentProductVersionID"
  left outer join "Product" cpr on cpr."ProductTemplateID" = wt."ChildProductTemplateID" and cpr."ProductTemplateVersionID" = wt."ChildProductVersionID"

   where wt."ParentProductTemplateID" = producttemplateid and wt."ParentProductVersionID" = producttemplateversionnumber
   and pr."ProductID" is not null and cpr."ProductID" is not null
   and not exists(select * from "ProductRelationship" prr where prr."ParentProductID" = pr."ProductID" and prr."ParentProductVersionID" = pr."ProductVersionID"
   	and prr."ChildProductID" = cpr."ProductID" and prr."ChildProductVersionID" = cpr."ProductVersionID" limit 1)
  ;

INSERT INTO
  public."ProductRelationshipBlueprint"
(
  "ProductRelationshipID",
  "DefaultQuantity",
  "IsActive",
  "IsDeleted"
)
SELECT
  prr."ProductRelationshipID",
  wt."DefaultQuantity",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."ProductRelationshipBlueprintTemplate" wt

  left outer join "ProductRelationshipTemplate" rt on rt."ProductRelationshipTemplateID" = wt."ProductRelationshipTemplateID"

   left outer join "Product" pr on pr."ProductTemplateID" = rt."ParentProductTemplateID" and pr."ProductTemplateVersionID" = rt."ParentProductVersionID"
  left outer join "Product" cpr on cpr."ProductTemplateID" = rt."ChildProductTemplateID" and cpr."ProductTemplateVersionID" = rt."ChildProductVersionID"

  left outer join "ProductRelationship" prr on prr."ChildProductID" = cpr."ProductID" and prr."ChildProductVersionID" = cpr."ProductVersionID"
  	and prr."ParentProductID" = pr."ProductID" and prr."ParentProductVersionID" = pr."ProductVersionID"

   where rt."ParentProductTemplateID" = producttemplateid and rt."ParentProductVersionID" = producttemplateversionnumber
   and not exists(select * from "ProductRelationshipBlueprint" prr1 WHERE prr1."ProductRelationshipID" = prr."ProductRelationshipID" limit 1)
   ;





END;
END IF;

-- Package
IF(ProcessPackage = true)
THEN
BEGIN

-- first promote all package related products
FOR LoopRow IN
	select aw."ProductTemplateID",aw."ProductVersionID" from "PackageTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ProductTemplateID" and p."ProductTemplateVersionID" = aw."ProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ProductTemplateID",LoopRow."ProductVersionID",false,false,false);
    END;
END LOOP;
-- product all package child products
FOR LoopRow IN
	select aw."ProductTemplateID",aw."ProductVersionID" from "PackageProductTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ProductTemplateID" and p."ProductTemplateVersionID" = aw."ProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ProductTemplateID",LoopRow."ProductVersionID",false,false,false);
    END;
END LOOP;
-- package relationship products
FOR LoopRow IN
	select aw."ParentProductTemplateID",aw."ParentProductVersionID" from "PackageProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ParentProductTemplateID" and p."ProductTemplateVersionID" = aw."ParentProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ParentProductTemplateID",LoopRow."ParentProductVersionID",false,false,false);
    END;
END LOOP;
-- first promote all child products
FOR LoopRow IN
	select aw."ChildProductTemplateID",aw."ChildProductVersionID" from "PackageProductRelationshipTemplate" aw
    	where not exists(select * from "Product" p where p."ProductTemplateID" = aw."ChildProductTemplateID" and p."ProductTemplateVersionID" = aw."ChildProductVersionID" limit 1)
LOOP
    BEGIN
    	perform "fn_PromoteProductTemplate"(LoopRow."ChildProductTemplateID",LoopRow."ChildProductVersionID",false,false,false);
    END;
END LOOP;

INSERT INTO
  public."Package"
(
  "ProductID",
  "ProductVersionID",
  "IsActive",
  "IsDeleted",
  "PackageVersionNumber",
  "PackageTemplateID",
  "PackageTemplateVersionNumber"
)
SELECT
  p."ProductID",
  p."ProductVersionID",
  wt."IsActive",
  wt."IsDeleted",
  1,
  wt."PackageTemplateID",
  wt."PackageTemplateVersionNumber"
FROM
  public."PackageTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"

  where not exists(select * from "Package" p1 where p1."PackageTemplateID" = wt."PackageTemplateID" and p1."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber" limit 1)
  ;

INSERT INTO
  public."PackageProduct"
(
  "PackageID",
  "UseProductDefaultBlueprint",
  "UseDefaultProductPricing",
  "IsFixedPrice",
  "ProductPriceModifierPercentage",
  "ProductPriceModifierValue",
  "DefaultQuantity",
  "UserDefinableQuantity",
  "IsActive",
  "IsDeleted",
  "ProductID",
  "ProductVersionID",
  "PackageVersionNumber",
  "RelatedProductProductAttributeID"
)
SELECT
  pa."PackageID",
  wt."UseProductDefaultBlueprint",
  wt."UseDefaultProductPricing",
  wt."IsFixedPrice",
  wt."ProductPriceModifierPercentage",
  wt."ProductPriceModifierValue",
  wt."DefaultQuantity",
  wt."UserDefinableQuantity",
  wt."IsActive",
  wt."IsDeleted",
  p."ProductID",
  p."ProductVersionID",
  pa."PackageVersionNumber",
  wt."RelatedProductProductAttributeTemplateID"
FROM
  public."PackageProductTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ProductTemplateID" and p."ProductTemplateVersionID" = wt."ProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =wt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber"
  left outer join "ProductProductAttributeTemplate" ppat on ppat."ProductProductAttributeTemplateID" = wt."RelatedProductProductAttributeTemplateID"
  left outer join "ProductAttributeTemplate" pat on pat."ProductAttributeTemplateID" = ppat."ProductAttributeTemplateID"
  left outer join "ProductAttribute" pt on pt."Name" = pat."Name"
  left outer join "ProductProductAttribute" ppa on ppa."ProductID" = p."ProductID" and ppa."ProductVersionID" = p."ProductVersionID" and ppa."ProductAttributeID" = pt."ProductAttributeID"

  where not exists(select * from "PackageProduct" p1 where p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ProductID" = p."ProductID" and p1."ProductVersionID" = p."ProductVersionID" limit 1)
  ;

INSERT INTO
  public."PackageProductRelationship"
(
  "ParentProductID",
  "ChildProductID",
  "ProductRelationshipTypeID",
  "IsMandatory",
  "IsActive",
  "IsDeleted",
  "PackageProductID",
  "ParentProductVersionID",
  "ChildProductVersionID",
  "PackageID",
  "PackageVersionNumber"
)
SELECT
  p."ProductID",
  xp."ProductID",
  wt."ProductRelationshipTypeID",
  wt."IsMandatory",
  wt."IsActive",
  wt."IsDeleted",
  pp."PackageProductID",
  p."ProductVersionID",
  xp."ProductVersionID",
  pa."PackageID",
  pa."PackageVersionNumber"
FROM
  public."PackageProductRelationshipTemplate" wt

  left outer join "Product" p on p."ProductTemplateID" = wt."ParentProductTemplateID" and p."ProductTemplateVersionID" = wt."ParentProductVersionID"
  left outer join "Product" xp on xp."ProductTemplateID" = wt."ChildProductTemplateID" and xp."ProductTemplateVersionID" = wt."ChildProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =wt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = wt."PackageTemplateVersionNumber"
  left outer join "PackageProductTemplate" ppt on ppt."PackageProductTemplateID" = wt."PackageProductTemplateID"
  left outer join "Product" xp1 on xp1."ProductTemplateID" = ppt."ProductTemplateID" and xp1."ProductTemplateVersionID" =ppt."ProductVersionID"
  left outer join "PackageProduct" pp on pp."PackageID" = pa."PackageID" and pp."PackageVersionNumber" = pa."PackageVersionNumber"
  	and pp."ProductID" = xp1."ProductID" and pp."ProductVersionID" = xp1."ProductVersionID"

   where not exists(select * from "PackageProductRelationship" p1 where p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ChildProductID" = p."ProductID" and p1."ChildProductVersionID" = p."ProductVersionID" and p1."ParentProductID" = xp."ProductID" and p1."ParentProductVersionID" = xp."ProductVersionID"
    and p1."PackageProductID" = pp."PackageProductID"  limit 1)
  ;

INSERT INTO
  public."PackageProductRelationshipBlueprint"
(
  "PackageProductRelationshipID",
  "DefaultQuantity",
  "IsActive",
  "IsDeleted"
)
SELECT
  p1."PackageProductRelationshipID",
  wt."DefaultQuantity",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."PackageProductRelationshipBlueprintTemplate" wt

  left outer join "PackageProductRelationshipTemplate" pprt on  pprt."PackageProductRelationshipTemplateID" = wt."PackageProductRelationshipTemplateID"
  left outer join "PackageProductTemplate" ppt on ppt."PackageProductTemplateID" =  pprt."PackageProductTemplateID"
   left outer join "Product" p on p."ProductTemplateID" = pprt."ParentProductTemplateID" and p."ProductTemplateVersionID" = pprt."ParentProductVersionID"
  left outer join "Product" xp on xp."ProductTemplateID" = pprt."ChildProductTemplateID" and xp."ProductTemplateVersionID" = pprt."ChildProductVersionID"
  left outer join "Package" pa on pa."PackageTemplateID" =ppt."PackageTemplateID" and pa."PackageTemplateVersionNumber" = ppt."PackageTemplateVersionNumber"
  left outer join "Product" xp1 on xp1."ProductTemplateID" = ppt."ProductTemplateID" and xp1."ProductTemplateVersionID" =ppt."ProductVersionID"
  left outer join "PackageProduct" pp on pp."PackageID" = pa."PackageID" and pp."PackageVersionNumber" = pa."PackageVersionNumber"
  	and pp."ProductID" = xp1."ProductID" and pp."ProductVersionID" = xp1."ProductVersionID"

  left outer join "PackageProductRelationship" p1 on p1."PackageID" = pa."PackageID" and p1."PackageVersionNumber" = pa."PackageVersionNumber"
  	and p1."ChildProductID" = p."ProductID" and p1."ChildProductVersionID" = p."ProductVersionID" and p1."ParentProductID" = xp."ProductID" and p1."ParentProductVersionID" = xp."ProductVersionID"
    and p1."PackageProductID" = pp."PackageProductID"

  where not exists(select * from "PackageProductRelationshipBlueprint" pps where pps."PackageProductRelationshipID" = p1."PackageProductRelationshipID" limit 1)

  ;

END;
END IF;

END;
END IF;

END;



END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteShoppingCartBlueprintTemplate (OID = 16563) :
--
CREATE FUNCTION public."fn_PromoteShoppingCartBlueprintTemplate" (
  shoppingcartblueprinttemplateid uuid
)
RETURNS void
AS
$body$
DECLARE
  ShoppingCartBlueprintID UUID;
BEGIN

ShoppingCartBlueprintID := (select dorg."ShoppingCartBlueprintID" from "ShoppingCartBlueprint" dorg
	where dorg."ParentID" = shoppingcartblueprinttemplateid limit 1);

-- create DO entry
BEGIN

IF(ShoppingCartBlueprintID is null)
THEN
BEGIN
	ShoppingCartBlueprintID := uuid_generate_v1();

    INSERT INTO
        public."ShoppingCartBlueprint"
      (
        "ShoppingCartBlueprintID",
        "ParentID",
        "IsActive",
        "IsDeleted",
        "Name"
      )
      SELECT
      ShoppingCartBlueprintID,
      shoppingcartblueprinttemplateid,
      bt."IsActive",
      bt."IsDeleted",
      bt."Name"
		FROM
  		public."ShoppingCartBlueprintTemplate" bt

        where not exists (select * from "ShoppingCartBlueprint" where "ParentID" = shoppingcartblueprinttemplateid limit 1)
        ;

      INSERT INTO
        public."ShoppingCartBlueprintProduct"
      (
        "ShoppingCartBlueprintID",
        "ProductID",
        "ProductVersionID",
        "Quantity",
        "IsActive",
        "IsDeleted"
      )
      SELECT
        cb."ShoppingCartBlueprintID",
        p."ProductID",
        p."ProductVersionID",
        dt."Quantity",
        dt."IsActive",
        dt."IsDeleted"
      FROM
        public."ShoppingCartBlueprintProductTemplate" dt

      left outer join "Product" p on p."ProductTemplateID" = dt."ProductTemplateID" and p."ProductTemplateVersionID" = dt."ProductVersionID"
      left outer join "ShoppingCartBlueprint" cb on cb."ParentID" = dt."ShoppingCartBlueprintTemplateID"

        where not exists (select * from "ShoppingCartBlueprintProduct" sb where sb."ProductID" = p."ProductID" and sb."ProductVersionID" = p."ProductVersionID" and sb."ShoppingCartBlueprintID" = sb."ShoppingCartBlueprintID" limit 1)

        and p."ProductID" is not null and cb."ShoppingCartBlueprintID" is not null
        ;

END;
END IF;





END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteStatusTypeTemplate (OID = 16564) :
--
CREATE FUNCTION public."fn_PromoteStatusTypeTemplate" (
  statustypetemplateid uuid,
  statustypetemplateversionnumber integer
)
RETURNS void
AS
$body$
DECLARE
  StatusTypeID UUID;
  StatusTypeVersionNumber integer;

BEGIN

StatusTypeID := (select dorg."StatusTypeID" from "StatusType" dorg
	where dorg."StatusTypeTemplateID" = statustypetemplateid limit 1);

StatusTypeVersionNumber := (select dorg."StatusTypeVersionNumber" from "StatusType" dorg
	where dorg."StatusTypeTemplateID" = statustypetemplateid order by dorg."StatusTypeVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(StatusTypeID is null)
THEN
BEGIN
	StatusTypeID := uuid_generate_v1();
END;
END IF;


StatusTypeVersionNumber := statustypetemplateversionnumber;


INSERT INTO
  public."StatusType"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted",
  "StatusTypeTemplateID",
  "StatusTypeTemplateVersionNumber"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted",
  statustypetemplateid,
  statustypetemplateversionnumber
FROM
  public."StatusTypeTemplate" wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

INSERT INTO
  public."StatusTypeValue"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "Name",
  "Description",
  "IsActive",
  "IsDeleted"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."StatusTypeValueTemplate" wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

INSERT INTO
  public."StatusTypeStructure"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "StatusTypeValueID",
  "StatusOrder",
  "IsStart",
  "IsEnd"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  stv."StatusTypeValueID",
  wt."StatusOrder",
  wt."IsStart",
  wt."IsEnd"
FROM
  public."StatusTypeStructureTemplate" wt

  left outer join "StatusTypeValueTemplate" stt on stt."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and stt."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and stt."StatusTypeTemplateVersionNumber" = stt."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv on stv."StatusTypeID" = StatusTypeID and stv."StatusTypeVersionNumber" = StatusTypeVersionNumber
  	and stv."Name" = stt."Name"

  where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;

/*INSERT INTO
  public."StatusTypeStructureTransition"
(
  "CurrentStatusTypeStructureID",
  "NextStatusTypeStructureID"
)
SELECT
  sts."StatusTypeStructureID",
  sts1."StatusTypeStructureID"
FROM
  public."StatusTypeStructureTransitionTemplate" wt


  left outer join "StatusTypeStructureTemplate" stt on stt."StatusTypeStructureTemplateID" = wt."CurrentStatusTypeStructureTemplateID"
  left outer join "StatusTypeStructureTemplate" stt1 on stt1."StatusTypeStructureTemplateID" = wt."NextStatusTypeStructureTemplateID"

left outer join "StatusTypeValueTemplate" st on st."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and st."StatusTypeTemplateID" = stt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = stt."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv on stv."Name" = st."Name" and stv."StatusTypeVersionNumber" = StatusTypeVersionNumber and stv."StatusTypeValueID" = StatusTypeValueID

  left outer join "StatusTypeStructure" sts on sts."StatusTypeValueID" = stv."StatusTypeValueID" and sts."StatusTypeID" = StatusTypeID and sts."StatusTypeVersionNumber" = StatusTypeVersionNumber

    left outer join "StatusTypeValueTemplate" st1 on st1."StatusTypeValueTemplateID" = wt."StatusTypeValueTemplateID" and st."StatusTypeTemplateID" = st1."StatusTypeTemplateID" and st1."StatusTypeTemplateVersionNumber" = stt1."StatusTypeTemplateVersionNumber"
  left outer  join "StatusTypeValue" stv1 on stv1."Name" = st1."Name" and stv1."StatusTypeVersionNumber" = StatusTypeVersionNumber and stv1."StatusTypeValueID" = StatusTypeValueID

    left outer join "StatusTypeStructure" sts on sts."StatusTypeValueID" = stv."StatusTypeValueID" and sts."StatusTypeID" = StatusTypeID and sts."StatusTypeVersionNumber" = StatusTypeVersionNumber


    left outer join "StatusTypeStructure" sts1 on sts1."StatusTypeValueID" = stv1."StatusTypeValueID" and sts1."StatusTypeID" = StatusTypeID and sts1."StatusTypeVersionNumber" = StatusTypeVersionNumber

where stt."StatusTypeTemplateID" = statustypetemplateid
	and stt1."StatusTypeTemplateID" = statustypetemplateid
    and stt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber
    and stt1."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;*/

INSERT INTO
  public."StatusTypeRole"
(
  "RoleName",
  "RoleDescription",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID",
  "IsActive",
  "IsDeleted",
  "StatusTypeID",
  "StatusTypeVersionNumber"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID",
  wt."IsActive",
  wt."IsDeleted",
   StatusTypeID,
  StatusTypeVersionNumber
FROM
  public."StatusTypeRoleTemplate"  wt where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber;


  INSERT INTO
  public."StatusTypeClaim"
(
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "StatusTypeRoleID"
)
SELECT
  StatusTypeID,
  StatusTypeVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
 mr."StatusTypeRoleID"
FROM
  public."StatusTypeClaimTemplate" wt

  inner join "StatusTypeRoleTemplate" wrr on wrr."StatusTypeRoleTemplateID" = wt."StatusTypeRoleTemplateID" and wrr."StatusTypeTemplateID" = statustypetemplateid and wrr."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  left outer join "StatusTypeRole" mr on mr."StatusTypeID" = StatusTypeID and mr."StatusTypeVersionNumber" = StatusTypeVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."StatusTypeTemplateID" = statustypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  	and wt."StatusTypeRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."StatusTypeClaim"
(
"StatusTypeID",
  "StatusTypeVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
StatusTypeID,
  StatusTypeVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."StatusTypeClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."StatusTypeTemplateID" = StatusTypetemplateid and wt."StatusTypeTemplateVersionNumber" = statustypetemplateversionnumber

  	and wt."StatusTypeRoleTemplateID" is null and wt."RoleID" is not null;


END;
------ End DO

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_PromoteWorkflowTemplate (OID = 16565) :
--
CREATE FUNCTION public."fn_PromoteWorkflowTemplate" (
  "WorkflowTemplateID" uuid,
  "WorkflowTemplateVersionNumber" integer
)
RETURNS void
AS
$body$
DECLARE
  WorkflowID UUID;
  WorkflowVersionNumber integer;
  WorkflowTemplateID uuid;
  WorkflowTemplateVersionNumber integer;
BEGIN

WorkflowTemplateID := "WorkflowTemplateID";
WorkflowTemplateVersionNumber := "WorkflowTemplateVersionNumber";

WorkflowID := (select dorg."WorkflowID" from "Workflow" dorg
	where dorg."WorkflowTemplateID" = WorkflowTemplateID limit 1);

WorkflowVersionNumber := (select dorg."WorkflowVersionNumber" from "Workflow" dorg
	where dorg."WorkflowTemplateID" = WorkflowTemplateID order by dorg."WorkflowVersionNumber" desc limit 1);

-- create DO entry
BEGIN

-- copy WF
IF(WorkflowID is null)
THEN
BEGIN
	WorkflowID := uuid_generate_v1();
END;
END IF;

WorkflowVersionNumber := WorkflowTemplateVersionNumber;


-- INSERT WF
INSERT INTO
  public."Workflow"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "WorkflowTypeID",
  "WorkflowSubTypeID",
  "WorkflowCategoryID",
  "WorkflowSubCategoryID",
  "WorkflowTemplateID",
  "WorkflowTemplateVersionNumber"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."WorkflowTypeID",
  wt."WorkflowSubTypeID",
  wt."WorkflowCategoryID",
  wt."WorkflowSubCategoryID",
  WorkflowTemplateID,
  WorkflowTemplateVersionNumber
FROM
  public."WorkflowTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ROLE
INSERT INTO
  public."WorkflowRole"
(
  "RoleName",
  "RoleDescription",
  "IsActive",
  "IsDeleted",
  "WorkflowID",
  "WorkflowVersionNumber",
  "RoleTypeID",
  "RoleSubTypeID",
  "RoleCategoryID",
  "RoleSubCategoryID"
)
SELECT
  wt."RoleName",
  wt."RoleDescription",
  wt."IsActive",
  wt."IsDeleted",
  WorkflowID,
  WorkflowVersionNumber,
  wt."RoleTypeID",
  wt."RoleSubTypeID",
  wt."RoleCategoryID",
  wt."RoleSubCategoryID"
FROM
  public."WorkflowRoleTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


-- WF CLAIM
  INSERT INTO
  public."WorkflowClaim"
(
"WorkflowClaimID",
"WorkflowID",
  "WorkflowVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "WorkflowRoleID"
)
SELECT
  wt."WorkflowClaimTemplateID",
  WorkflowID,
  WorkflowVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  mr."WorkflowRoleID"
FROM
  public."WorkflowClaimTemplate" wt

  inner join "WorkflowRoleTemplate" wrr on wrr."WorkflowRoleTemplateID" = wt."WorkflowRoleTemplateID" and wrr."WorkflowTemplateID" = WorkflowID and wrr."WorkflowTemplateVersionNumber" = WorkflowVersionNumber

  left outer join "WorkflowRole" mr on mr."WorkflowID" = WorkflowID and mr."WorkflowVersionNumber" = WorkflowVersionNumber and mr."RoleName" = wrr."RoleName"

 where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber

  	and wrr."WorkflowRoleTemplateID" is not null and wt."RoleID" is null ;

INSERT INTO
  public."WorkflowClaim"
(
"WorkflowClaimID",
"WorkflowID",
  "WorkflowVersionNumber",
  "ResourceID",
  "OperationID",
  "StateID",
  "StateItemID",
  "IsActive",
  "IsDeleted",
  "RoleID"
)
SELECT
wt."WorkflowClaimTemplateID",
WorkflowID,
  WorkflowVersionNumber,
  wt."ResourceID",
  wt."OperationID",
  wt."StateID",
  wt."StateItemID",
  wt."IsActive",
  wt."IsDeleted",
  wt."RoleID"
FROM
  public."WorkflowClaimTemplate" wt

  inner join "Role" wrr on wrr."RoleID" = wt."RoleID"

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber

  	and wt."WorkflowRoleTemplateID" is null and wt."RoleID" is not null;

-- WF OT
INSERT INTO
  public."WorkflowObjectType"
(
  "Name",
  "Description",
  "ObjectTypeName",
  "ObjectTypeNameSpace",
  "ObjectTypeAssembly",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wt."ObjectTypeName",
  wt."ObjectTypeNameSpace",
  wt."ObjectTypeAssembly",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowObjectTypeTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ST
INSERT INTO
  public."WorkflowStatusType"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "StatusTypeID",
  "StatusTypeVersionNumber",
  "IsActive",
  "IsDeleted"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  (select st."StatusTypeID" from "StatusType" st where st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber" limit 1),
   (select st."StatusTypeVersionNumber" from "StatusType" st where st."StatusTypeTemplateID" = wt."StatusTypeTemplateID" and st."StatusTypeTemplateVersionNumber" = wt."StatusTypeTemplateVersionNumber" and st."IsActive" = true and st."IsDeleted" =false order by st."StatusTypeTemplateVersionNumber" desc limit 1),
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."WorkflowStatusTypeTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

END;

-- WF NC
INSERT INTO
  public."WorkflowNotificationConstruct"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "NotificationConstructID",
  "NotificationConstructVersionNumber",

  "IsActive",
  "IsDeleted"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  nc."NotificationConstructID",
  nc."NotificationConstructVersionNumber",
  wt."IsActive",
  wt."IsDeleted"
FROM
  public."WorkflowNotificationConstructTemplate" wt
  inner join "NotificationConstruct" nc on nc."NotificationConstructTemplateID" = wt."NotificationConstructTemplateID" and nc."NotificationConstructTemplateVersionNumber" = wt."NotificationConstructTemplateVersionNumber"
   where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF WP
INSERT INTO
  public."WorkflowParameter"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "ObjectType",
  "ObjectValue"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."ObjectType",
  wt."ObjectValue"
FROM
  public."WorkflowParameterTemplate" wt where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF TRANS
INSERT INTO
  public."WorkflowTransistion"
(
  "Name",
  "Description",
  "IsWorkflowStart",
  "IsWorkflowEnd",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsWorkflowStart",
  wt."IsWorkflowEnd",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionTemplate" wt  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF ACTION
INSERT INTO
  public."WorkflowAction"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "IsTransistionStart",
  "IsTransistionEnd",
  "WorkflowActionTypeID",
  "IsManual",
  "WorkflowObjectTypeID"
)
SELECT
WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."IsTransistionStart",
  wt."IsTransistionEnd",
  wt."WorkflowActionTypeTemplateID",
  wt."IsManual",
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowActionTemplate" wt

  inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF DECISION
INSERT INTO
  public."WorkflowDecision"
(
  "Name",
  "Description",
  "IsTransistionStart",
  "IsTransistionEnd",
  "WorkflowDecisionTypeID",
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowObjectTypeID"
)
SELECT
  wt."Name",
  wt."Description",
  wt."IsTransistionStart",
  wt."IsTransistionEnd",
  wt."WorkflowDecisionTypeTemplateID",
  WorkflowID,
  WorkflowVersionNumber,
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowDecisionTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF COND
INSERT INTO
  public."WorkflowCondition"
(
  "Name",
  "Description",
  "WorkflowObjectTypeID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wt."Name",
  wt."Description",
  wot."WorkflowObjectTypeID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowConditionTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- WF COMMAND
INSERT INTO
  public."WorkflowCommand"
(
  "Name",
  "Description",
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowObjectTypeID"
)
SELECT
  wt."Name",
  wt."Description",
   WorkflowID,
  WorkflowVersionNumber,
  wot."WorkflowObjectTypeID"
FROM
  public."WorkflowCommandTemplate" wt

    inner join "WorkflowObjectTypeTemplate" wott on wott."WorkflowTemplateID" = wt."WorkflowTemplateID" and wott."WorkflowTemplateVersionNumber" = wt."WorkflowTemplateVersionNumber"
  	and wott."WorkflowObjectTypeTemplateID" = wt."WorkflowObjectTypeTemplateID"
  inner join "WorkflowObjectType" wot on wot."WorkflowID" = WorkflowID and wot."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wot."Name" = wott."Name" and wot."ObjectTypeName" = wott."ObjectTypeName"

where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

---------------- PARAMETER
INSERT INTO
  public."WorkflowCommandParameter"
(
  "WorkflowCommandID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowCommandID",
  wp."WorkflowParameterID",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowCommandParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
    and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowCommand" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowCommandTemplate" wptc where wptc."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowActionParameter"
(
  "WorkflowActionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
    and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowConditionParameter"
(
  "WorkflowConditionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowConditionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowConditionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowCondition" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowConditionTemplate" wptc where wptc."WorkflowConditionTemplateID"= wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionParameter"
(
  "WorkflowDecisionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowDecisionID",
  wp."WorkflowParameterID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowDecisionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainParameter"
(
 "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowParameterID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowParameterID"
FROM
  public."WorkflowMainParameterTemplate" wt

    left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

   where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionParameter"
(
  "WorkflowTransistionID",
  "WorkflowParameterID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
 wp."WorkflowParameterID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionParameterTemplate" wt

  left outer join "WorkflowParameter" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)
	and wp."ObjectValue" = (select wpt."ObjectValue" from "WorkflowParameterTemplate" wpt where wpt."WorkflowParameterTemplateID" = wt."WorkflowParameterTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

------------- CONDITIONS
INSERT INTO
  public."WorkflowActionCompleteCondition"
(
  "WorkflowActionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowConditionID",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionStartCondition"
(
  "WorkflowActionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowConditionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowCommandCondition"
(
  "WorkflowCommandID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowCommandID",
  wp."WorkflowConditionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowCommandConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowCommand" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowCommandTemplate" wptc where wptc."WorkflowCommandTemplateID"= wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowMainCompleteCondition"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowConditionID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowConditionID"
FROM
  public."WorkflowMainCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainStartCondition"
(
  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowConditionID"
)
SELECT
  WorkflowID,
  WorkflowVersionNumber,
  wp."WorkflowConditionID"
FROM
  public."WorkflowMainStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionCompleteCondition"
(
  "WorkflowTransistionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
  wp."WorkflowConditionID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionCompleteConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionStartCondition"
(
  "WorkflowTransistionID",
  "WorkflowConditionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowTransistionID",
  wp."WorkflowConditionID",
 WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionStartConditionTemplate" wt

  left outer join "WorkflowCondition" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowConditionTemplate" wpt where wpt."WorkflowConditionTemplateID" = wt."WorkflowConditionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- COMMANDS
INSERT INTO
  public."WorkflowActionExecuteCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionPostCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionPostCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowActionPreCommand"
(
  "WorkflowActionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowActionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowActionPreCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowAction" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowActionTemplate" wptc where wptc."WorkflowActionTemplateID"= wt."WorkflowActionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionExecuteCommand"
(
  "WorkflowDecisionID",
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wpc."WorkflowDecisionID",
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowDecisionExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowMainExecuteCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainExecuteCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainPostCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainPostCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowMainPreCommand"
(
  "WorkflowCommandID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wp."WorkflowCommandID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowMainPreCommandTemplate" wt

  left outer join "WorkflowCommand" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowCommandTemplate" wpt where wpt."WorkflowCommandTemplateID" = wt."WorkflowCommandTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

-- DECISION ETC
INSERT INTO
  public."WorkflowDecisionError"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionErrorTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionFailure"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionFailureTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowDecisionSuccess"
(

  "WorkflowID",
  "WorkflowVersionNumber",
  "WorkflowDecisionID",
  "NextWorkflowActionID",
  "NextWorkflowDecisionID"
)
SELECT
 WorkflowID,
  WorkflowVersionNumber,
  wpc."WorkflowDecisionID",
  wp."WorkflowActionID",
  wpc2."WorkflowDecisionID"
FROM
  public."WorkflowDecisionSuccessTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."NextWorkflowActionTemplateID" limit 1)

    left outer join "WorkflowDecision" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."WorkflowDecisionTemplateID" limit 1)

   left outer join "WorkflowDecision" wpc2 on wpc2."WorkflowID" = WorkflowID and wpc2."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc2."Name" = (select wptc."Name" from "WorkflowDecisionTemplate" wptc where wptc."WorkflowDecisionTemplateID"= wt."NextWorkflowDecisionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

------ End DO

INSERT INTO
  public."WorkflowTransistionWorkflowAction"
(
  "WorkflowTransistionID",
  "WorkflowActionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
 wpc."WorkflowTransistionID",
  wp."WorkflowActionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionWorkflowActionTemplate" wt

  left outer join "WorkflowAction" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."WorkflowActionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

INSERT INTO
  public."WorkflowTransistionWorkflowDecision"
(
  "WorkflowTransistionID",
  "WorkflowDecisionID",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
 wpc."WorkflowTransistionID",
  wp."WorkflowDecisionID",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionWorkflowDecisionTemplate" wt

  left outer join "WorkflowDecision" wp on wp."WorkflowID" = WorkflowID and wp."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wp."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."WorkflowDecisionTemplateID" limit 1)

    left outer join "WorkflowTransistion" wpc on wpc."WorkflowID" = WorkflowID and wpc."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wpc."Name" = (select wptc."Name" from "WorkflowTransistionTemplate" wptc where wptc."WorkflowTransistionTemplateID"= wt."WorkflowTransistionTemplateID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


----------- HIERARCY
INSERT INTO
  public."WorkflowTransistionHierarchy"
(
  "ChildComponentID",
  "ParentComponentID",
  "IsWorkflowStart",
  "IsWorkflowEnd",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  ct."WorkflowTransistionID",
  pt."WorkflowTransistionID",
  wt."IsWorkflowStart",
  wt."IsWorkflowEnd",
  WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowTransistionHierarchyTemplate" wt

  left outer join "WorkflowTransistion" pt on pt."WorkflowID" = WorkflowID and pt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowTransistion" ct on ct."WorkflowID" = WorkflowID and ct."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."ChildComponentID" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;


INSERT INTO
  public."WorkflowHierarchy"
(
  "WorkflowTransistionID",
  "ChildComponentID",
  "ParentComponentID",
  "IsTransistionStart",
  "IsTranistionEnd",
  "IsChildDependentOnParent",
  "WorkflowID",
  "WorkflowVersionNumber"
)
SELECT
  wtt."WorkflowTransistionID",
	COALESCE(ct."WorkflowActionID",ct1."WorkflowDecisionID"),
  COALESCE(pt."WorkflowActionID",pt1."WorkflowDecisionID"),
  wt."IsTransistionStart",
  wt."IsTranistionEnd",
  wt."IsChildDependentOnParent",
   WorkflowID,
  WorkflowVersionNumber
FROM
  public."WorkflowHierarchyTemplate" wt

left outer join "WorkflowTransistion" wtt on wtt."WorkflowID" = WorkflowID and wtt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and wtt."Name" = (select wpt."Name" from "WorkflowTransistionTemplate" wpt where wpt."WorkflowTransistionTemplateID" = wt."WorkflowTransistionTemplateID" limit 1)


  left outer join "WorkflowAction" pt on pt."WorkflowID" = WorkflowID and pt."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowAction" ct on ct."WorkflowID" = WorkflowID and ct."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."ChildComponentID" limit 1)

     left outer join "WorkflowDecision" pt1 on pt1."WorkflowID" = WorkflowID and pt1."WorkflowVersionNumber" = WorkflowVersionNumber
  	and pt1."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."ParentComponentID" limit 1)

  left outer join "WorkflowDecision" ct1 on ct1."WorkflowID" = WorkflowID and ct1."WorkflowVersionNumber" = WorkflowVersionNumber
  	and ct1."Name" = (select wpt."Name" from "WorkflowDecisionTemplate" wpt where wpt."WorkflowDecisionTemplateID" = wt."ChildComponentID" limit 1)


  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber ;

--Tree Structure


INSERT INTO
  public."WorkflowTreeStructure"
  (
  "WorkflowTreeStructureID",
  "WorkflowID",
  "WorkflowVersionNumber",
  "Name",
  "Description",
  "ItemOrder",
  "IsLeafNode",
  "IsActive" ,
  "IsDeleted",
  "ParentID" ,
  "InterfacePanelID",
  "InterfacePanelVersionNumber",
  "Level"
  )
  select
  wt."WorkflowTreeStructureTemplateID",
   WorkflowID,
  WorkflowVersionNumber,
  wt."Name",
  wt."Description",
  wt."ItemOrder",
  wt."IsLeafNode",
  wt."IsActive" ,
  wt."IsDeleted",
  wt."ParentID",
  ip."InterfacePanelID",
  ip."InterfacePanelVersionNumber",
  wt."Level"
   from "WorkflowTreeStructureTemplate" wt

  left outer join "InterfacePanel" ip on ip."InterfacePanelTemplateID" = wt."InterfacePanelTemplateID" and ip."InterfacePanelTemplateVersionNumber" = wt."InterfacePanelTemplateVersionNumber"
  	and ip."Name" = (select ipt."Name" from "InterfacePanelTemplate" ipt where ipt."InterfacePanelTemplateID" = wt."InterfacePanelTemplateID" and ip."InterfacePanelTemplateVersionNumber" = wt."InterfacePanelTemplateVersionNumber" limit 1)

  where wt."WorkflowTemplateID" = WorkflowTemplateID and wt."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber;

  --Tree Structure Action mapping
  INSERT INTO
  public."WorkflowTreeStructureAction"
  (
  "WorkflowTreeStructureActionID",
  "WorkflowTreeStructureID",
  "IsVisible" ,
  "IsActive" ,
  "IsDeleted",
  "WorkflowActionID",
  "ConditionString"
  )
  select
  wt."WorkflowTreeStructureActionTemplateID",
  wtst."WorkflowTreeStructureTemplateID",
  wt."IsVisible",
  wt."IsActive" ,
  wt."IsDeleted",
  wa."WorkflowActionID",
  wt."ConditionString"
  from "WorkflowTreeStructureActionTemplate" wt
  Left JOIN "WorkflowTreeStructureTemplate" wtst on wt."WorkflowTreeStructureTemplateID" = wtst."WorkflowTreeStructureTemplateID"
  Left Join "WorkflowTreeStructure" wts on wtst."WorkflowTreeStructureTemplateID" = wts."WorkflowTreeStructureID"
  left outer join "WorkflowAction" wa on wa."WorkflowID" = WorkflowID   and wa."WorkflowVersionNumber" = WorkflowVersionNumber
  and wa."Name" = (select wpt."Name" from "WorkflowActionTemplate" wpt where wpt."WorkflowActionTemplateID" = wt."WorkflowActionTemplateID" limit 1)
  where wtst."WorkflowTemplateID" = WorkflowTemplateID and wtst."WorkflowTemplateVersionNumber" = WorkflowTemplateVersionNumber;

--EXCEPTION
--	WHEN
END;
$body$
LANGUAGE plpgsql
SECURITY DEFINER;
--
-- Definition for function fn_newid (OID = 16567) :
--
CREATE FUNCTION public.fn_newid (
)
RETURNS varchar
AS
$body$
	SELECT LOWER(
        REPLACE(
        CAST(uuid_generate_v1() As varchar(50))
            , '-','')
    );

$body$
LANGUAGE sql;
--
-- Definition for function truncate_tables (OID = 16568) :
--
CREATE FUNCTION public.truncate_tables (
  username character varying
)
RETURNS void
AS
$body$
DECLARE
    statements CURSOR FOR
        SELECT tablename FROM pg_tables
        WHERE tableowner = username AND schemaname = 'public';
BEGIN
    FOR stmt IN statements LOOP
        EXECUTE 'TRUNCATE TABLE ' || quote_ident(stmt.tablename) || ' CASCADE;';
    END LOOP;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function Plan (OID = 16569) :
--
SET search_path = public_audit, pg_catalog;
CREATE FUNCTION public_audit."Plan" (
)
RETURNS trigger
AS
$body$
DECLARE
    v_old public."Plan"%ROWTYPE;
    v_new public."Plan"%ROWTYPE;
    v_ret public."Plan"%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO public_audit."Plan" (
        "PlanID",
 "PlanVersionNumber",
 "Name",
 "Description",
 "InvoiceName",
 "Price",
 "Period",
 "TrialPeriod",
 "PeriodUnitID",
 "TrialPeriodUnitID",
 "FreeQuantity",
 "SetupCost",
 "DowngradePenalty",
 "CreatedOn",
 "CreatedBy",
 "IsActive",
 "IsDeleted",
 "CountryCode",
 "CurrencyCode",
 "CancellationPeriod",
 "CancellationPeriodUnitID",
 "IsFree",
 "HasInfinitePeriods",
 "ParentID",
 "PlanTemplateID",
 "PlanTemplateVersionNumber",
 "PlanStatusID",
 "IsTransactionBased",
 "CoolOffPeriod",
 "CoolOffPeriodUnitID",
 "RenewalPrice",
 "RenewalPercentage",
 "RenewalIsPercentageOfOriginalPrice",
 "HasForwardCycleFee",
 "ForwardCycleFee",
 "ForwardCycleFreeIsSameAsPrice",
 "RenewalOfferPeriod",
 "RenewalOfferPeriodUnitID",
 "ForwardCycleFeePeriod",
 "ForwardCycleFeePeriodUnitID",
 "HasRenewalOffer",
 "PriceDailyProRata",
 "IsAutoRenew",
 "AutoRenewDecisionPeriod",
 "AutoRenewDecisionUnitID",
 "AutoRenewPeriod",
 "AutoRenewPeriodUnitID",
 "PlanGroupID",
 "PlanTypeID",
 "PlanCategoryID",
 "ModifiedOn",
 "ModifiedBy",
        operation
    )
    VALUES((v_old).*, TG_OP);
    RETURN v_ret;
END;
$body$
LANGUAGE plpgsql;
--
-- Definition for function ProductDetail (OID = 16570) :
--
CREATE FUNCTION public_audit."ProductDetail" (
)
RETURNS trigger
AS
$body$
DECLARE
    v_old public."ProductDetail"%ROWTYPE;
    v_new public."ProductDetail"%ROWTYPE;
    v_ret public."ProductDetail"%ROWTYPE;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        v_old := OLD;
        v_new := NULL;
        v_ret := OLD;
    ELSIF (TG_OP = 'INSERT') THEN
        v_old := NULL;
        v_new := NEW;
        v_ret := NEW;
    ELSIF (TG_OP = 'UPDATE') THEN
        v_old := OLD;
        v_new := NEW;
        v_ret := NEW;
    END IF;
    INSERT INTO public_audit."ProductDetail" (

        "ProductDetailID",
 "Name",
 "Description",
 "ProductID",
 "IsActive",
 "IsDeleted",
 "ShortDescription",
 "LongDescription",
 "MetaKeywords",
 "MetaDescription",
 "MetaTitle",
 "RequireOtherProducts",
 "AutomaticallyAddRequiredProducts",
 "HasUserAgreement",
 "UserAgreementText",
 "IsRecurring",
 "RecurringCycleLength",
 "RecurringCyclePeriodID",
 "RecurringTotalCycle",
 "IsTaxExempt",
 "TaxCategoryID",
 "OrderMinimumQuantity",
 "OrderMaximumQuantity",
 "CallForPrice",
 "Price",
 "ProductCost",
 "CustomerEntersPrice",
 "HasTierPrices",
 "HasDiscountsApplied",
 "MinimumCustomerEnteredPrice",
 "MaximumCustomerEnteredPrice",
 "DisplayOrder",
 "AvailableStartDate",
 "AvailableEndDate",
 "ProductTypeID",
 "ProductSubTypeID",
 "ProductCategoryID",
 "ProductSubCategoryID",
 "ProductVersionID",
 "CurrencyCode",
 "CurrencyRate",
 "CurrencyRateDate",
 "CurrencyRateToGBP",
 "CurrencyRateToUSD",
 "InvoiceName",
 "IsDepositProduct",
        operation
    )
    VALUES( (v_old).*, TG_OP);
    RETURN v_ret;
END;
$body$
LANGUAGE plpgsql;
--
-- Structure for table logged_actions (OID = 16571) :
--
SET search_path = audit, pg_catalog;
CREATE TABLE audit.logged_actions (
    event_id bigserial NOT NULL,
    schema_name text NOT NULL,
    table_name text NOT NULL,
    relid oid NOT NULL,
    session_user_name text,
    action_tstamp_tx timestamp with time zone NOT NULL,
    action_tstamp_stm timestamp with time zone NOT NULL,
    action_tstamp_clk timestamp with time zone NOT NULL,
    transaction_id bigint,
    application_name text,
    client_addr inet,
    client_port integer,
    client_query text NOT NULL,
    action text NOT NULL,
    row_data public.hstore,
    changed_fields public.hstore,
    statement_only boolean NOT NULL,
    CONSTRAINT logged_actions_action_check CHECK ((action = ANY (ARRAY['I'::text, 'D'::text, 'U'::text, 'T'::text])))
)
WITH (oids = false);
--
-- Structure for table LegalOrganisationDetails (OID = 16580) :
--
SET search_path = legal, pg_catalog;
CREATE TABLE legal."LegalOrganisationDetails" (
    "OrganisationID" uuid NOT NULL,
    "IsVATRegistered" boolean DEFAULT false NOT NULL,
    "VATNumber" varchar(50) NOT NULL,
    "IsCompanyHouseRegistered" boolean DEFAULT false NOT NULL,
    "RegisteredCompanyNumber" varchar(100),
    "PartnersCount" integer,
    "RegisteredPractitionersCount" integer,
    "StaffCount" integer,
    "MonthlyCompletionsCount" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Account (OID = 16587) :
--
SET search_path = public, pg_catalog;
CREATE TABLE public."Account" (
    "AccountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "AccountName" varchar(100) NOT NULL,
    "CountryTypeID" integer NOT NULL,
    "AccountClassificationTypeID" integer,
    "CustomerTypeID" integer,
    "BusinessTypeID" integer,
    "PreferredContactMethodID" integer,
    "IndustryTypeID" integer,
    "AccountTypeID" integer NOT NULL,
    "AccountSubTypeID" integer,
    "Description" varchar,
    "EmailAddress1" varchar,
    "EmailAddress2" varchar,
    "EmailAddress3" varchar,
    "DoNotPhone" boolean DEFAULT false,
    "DoNotEmail" boolean DEFAULT false,
    "Fax" varchar(100),
    "IsPrivate" boolean DEFAULT false NOT NULL,
    "Telephone1" varchar(100),
    "Telephone2" varchar(100),
    "Telephone3" varchar(100),
    "StateTypeID" integer NOT NULL,
    "OwnerID" uuid NOT NULL,
    "ContactID" uuid,
    "ParentAccountID" uuid,
    "MasterID" uuid,
    "DoNotTelephone" boolean DEFAULT false,
    "MobileNumber1" varchar(100),
    "MobileNumber2" varchar(100),
    "MobileNumber3" varchar(100),
    "ParentID" uuid,
    "AccountCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AccountRelationshipTypeID" integer,
    "ContactOrganisationID" uuid,
    "ParentOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table Actor (OID = 16600) :
--
CREATE TABLE public."Actor" (
    "ActorID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ActorName" varchar(300) NOT NULL,
    "ActorDescription" varchar(2000),
    "ActorTypeID" integer,
    "ActorSubTypeID" integer,
    "ActorCategoryID" integer,
    "ActorSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table ActorClaimRoleMapping (OID = 16610) :
--
CREATE TABLE public."ActorClaimRoleMapping" (
    "ActorClaimRoleMappingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ActorID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Address (OID = 16616) :
--
CREATE TABLE public."Address" (
    "AddressID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(100) NOT NULL,
    "PrimaryContactName" varchar(100),
    "Line1" varchar(500) NOT NULL,
    "Line2" varchar(500),
    "Line3" varchar(500),
    "City" varchar(200),
    "StateOrProvince" varchar(200),
    "County" varchar(200),
    "Country" varchar(200),
    "PostOfficeBox" varchar(200),
    "PostalCode" varchar(200),
    "UTCOffSet" varchar(200),
    "Latitude" double precision,
    "Longitude" double precision,
    "Telephone1" varchar(200),
    "Telephone2" varchar(200),
    "Telephone3" varchar(200),
    "Fax" varchar(200),
    "ParentID" uuid NOT NULL,
    "AddressTypeID" integer NOT NULL,
    "AddressNumber" integer DEFAULT 0 NOT NULL,
    "IsPrimaryAddress" boolean DEFAULT false,
    "AddressCategoryID" integer,
    "AddressSubTypeID" integer,
    "BuildingName" varchar(500),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Order" integer,
    "CountryCode" varchar(300),
    "AdditionalAddressInformation" varchar(1000),
    "Town" varchar(200)
)
WITH (oids = false);
--
-- Structure for table AddressChronology (OID = 16627) :
--
CREATE TABLE public."AddressChronology" (
    "AddressChronologyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid NOT NULL,
    "DataFrom" timestamp without time zone NOT NULL,
    "DateTo" timestamp without time zone,
    "IsCurrentAddress" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ApplicationStage (OID = 16634) :
--
CREATE TABLE public."ApplicationStage" (
    "ApplicationStageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(50) NOT NULL,
    "Description" varchar(500),
    "Order" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ApplicationStageWorkflow (OID = 16644) :
--
CREATE TABLE public."ApplicationStageWorkflow" (
    "ApplicationStageWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ApplicationStageID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "VersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Artefact (OID = 16648) :
--
CREATE TABLE public."Artefact" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactClaim (OID = 16657) :
--
CREATE TABLE public."ArtefactClaim" (
    "ArtefactClaimID" uuid NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactRoleID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ArtefactClaimTemplate (OID = 16662) :
--
CREATE TABLE public."ArtefactClaimTemplate" (
    "ArtefactClaimTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid,
    "ArtefactTemplateVersionNumber" integer,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactRoleTemplateID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ArtefactDependency (OID = 16667) :
--
CREATE TABLE public."ArtefactDependency" (
    "ArtefactDependencyID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "DependencyArtefactID" uuid NOT NULL,
    "DependencyArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactDependencyTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyStatusType (OID = 16672) :
--
CREATE TABLE public."ArtefactDependencyStatusType" (
    "ArtefactDependencyStatusTypeID" uuid NOT NULL,
    "ArtefactDependencyID" uuid,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "DependencyCanBeCreated" boolean DEFAULT false,
    "DependencyCanBeEdited" boolean DEFAULT false NOT NULL,
    "DependencyCanBeDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyStatusTypeTemplate (OID = 16680) :
--
CREATE TABLE public."ArtefactDependencyStatusTypeTemplate" (
    "ArtefactDependencyStatusTypeTemplate" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ArtefactDependencyTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "StatusTypeValueTemplateID" uuid,
    "DependencyCanBeCreated" boolean DEFAULT true NOT NULL,
    "DependencyCanBeEdited" boolean DEFAULT false NOT NULL,
    "DependencyCanBeDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactDependencyTemplate (OID = 16689) :
--
CREATE TABLE public."ArtefactDependencyTemplate" (
    "ArtefactDependencyTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "DependencyArtefactTemplateID" uuid NOT NULL,
    "DependencyArtefactTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactNotificationConstruct (OID = 16694) :
--
CREATE TABLE public."ArtefactNotificationConstruct" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ArtefactNotificationConstructID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactNotificationConstructTemplate (OID = 16699) :
--
CREATE TABLE public."ArtefactNotificationConstructTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ArtefactNotificationConstructTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactProduct (OID = 16704) :
--
CREATE TABLE public."ArtefactProduct" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactProductTemplate (OID = 16709) :
--
CREATE TABLE public."ArtefactProductTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactRole (OID = 16714) :
--
CREATE TABLE public."ArtefactRole" (
    "ArtefactRoleID" uuid NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactRoleTemplate (OID = 16722) :
--
CREATE TABLE public."ArtefactRoleTemplate" (
    "ArtefactRoleTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid,
    "ArtefactTemplateVersionNumber" integer,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactStatusType (OID = 16730) :
--
CREATE TABLE public."ArtefactStatusType" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactStatusTypeTemplate (OID = 16733) :
--
CREATE TABLE public."ArtefactStatusTypeTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactSubscription (OID = 16736) :
--
CREATE TABLE public."ArtefactSubscription" (
    "ArtefactSubscriptionID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactSubscriptionTemplate (OID = 16741) :
--
CREATE TABLE public."ArtefactSubscriptionTemplate" (
    "ArtefactSubscriptionTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionTemplateID" uuid NOT NULL,
    "PlanSubscriptionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactTemplate (OID = 16746) :
--
CREATE TABLE public."ArtefactTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactWorkflow (OID = 16755) :
--
CREATE TABLE public."ArtefactWorkflow" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ArtefactWorkflowID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ArtefactWorkflowTemplate (OID = 16760) :
--
CREATE TABLE public."ArtefactWorkflowTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ArtefactWorkflowTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Attachment (OID = 16765) :
--
CREATE TABLE public."Attachment" (
    "AttachmentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "MimeType" varchar(256),
    "Body" bytea,
    "Subject" varchar(2000),
    "FileName" varchar(2000),
    "FileSize" integer,
    "AttachmentDetailID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table AttachmentDetail (OID = 16774) :
--
CREATE TABLE public."AttachmentDetail" (
    "AttachmentDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid,
    "AttachmentTypeID" integer NOT NULL,
    "AttachmentSubTypeID" integer,
    "AttachmentCategoryID" integer,
    "RepositoryStructureID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table AttachmentDetailGroup (OID = 16780) :
--
CREATE TABLE public."AttachmentDetailGroup" (
    "AttachmentDetailGroupID" serial NOT NULL,
    "AttachmentDetailID" uuid NOT NULL,
    "OrganisationGroupID" uuid,
    "OrganisationExternalGroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table AttachmentDetailRole (OID = 16787) :
--
CREATE TABLE public."AttachmentDetailRole" (
    "AttachmentDetailID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "OrganisationExternalRoleID" uuid,
    "AttachmentDetailRoleID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BankSortCode (OID = 16794) :
--
CREATE TABLE public."BankSortCode" (
    "SortCode" varchar NOT NULL,
    "Address" varchar(2000) NOT NULL,
    "BankName" varchar(300) NOT NULL
)
WITH (oids = false);
--
-- Structure for table Billing (OID = 16800) :
--
CREATE TABLE public."Billing" (
    "BillingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BillingPeriod" integer NOT NULL,
    "BillingPeriodUnitID" integer NOT NULL,
    "BillingLagPeriod" integer,
    "BillingLagPeriodUnitID" integer,
    "BillingPeriodDayOfMonth" integer,
    "DelayedBillingPeriod" integer,
    "DelayedBillingPeriodUnitID" integer,
    "HasDelayedBilling" boolean DEFAULT false,
    "BillingTemplateID" uuid,
    "NumberOfBillingPeriods" integer,
    "InvoiceToProcessingDelayPeriod" integer,
    "InvoiceToProcessingDelayPeriodUnitID" integer,
    "InvoiceNotificationConstructID" uuid,
    "InvoiceNotificationConstructVersionNumber" integer,
    "EstimatedProcessingPeriod" integer,
    "EstimatedProcessingPeriodUnitID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BillingTemplate (OID = 16807) :
--
CREATE TABLE public."BillingTemplate" (
    "BillingTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BillingPeriod" integer NOT NULL,
    "BillingPeriodUnitID" integer NOT NULL,
    "ParentID" uuid,
    "BillingLagPeriod" integer,
    "BillingLagPeriodUnitID" integer,
    "BillingPeriodDayOfMonth" integer,
    "DelayedBillingPeriod" integer,
    "DelayedBillingPeriodUnitID" integer,
    "HasDelayedBilling" boolean DEFAULT false,
    "NumberOfBillingPeriods" integer,
    "InvoiceToProcessingDelayPeriod" integer,
    "InvoiceToProcessingDelayPeriodUnitID" integer,
    "InvoiceNotificationConstructTemplateID" uuid,
    "InvoiceNotificationConstructTemplateVersionNumber" integer,
    "EstimatedProcessingPeriod" integer,
    "EstimatedProcessingPeriodUnitID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Bucket (OID = 16814) :
--
CREATE TABLE public."Bucket" (
    "BucketID" uuid NOT NULL,
    "BucketName" varchar(500) NOT NULL,
    "BucketDescription" varchar(5000),
    "BucketTypeID" integer,
    "BucketSubTypeID" integer,
    "BucketCategoryID" integer,
    "BucketSubCategoryID" integer,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BucketTemplate (OID = 16823) :
--
CREATE TABLE public."BucketTemplate" (
    "BucketTemplateID" uuid NOT NULL,
    "BucketName" varchar(500) NOT NULL,
    "BucketDescription" varchar(5000),
    "BucketTypeID" integer,
    "BucketSubTypeID" integer,
    "BucketCategoryID" integer,
    "BucketSubCategoryID" integer,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusMessage (OID = 16832) :
--
CREATE TABLE public."BusMessage" (
    "MessageId" uuid NOT NULL,
    "CorrelationId" uuid NOT NULL,
    "BusMessageID" uuid NOT NULL,
    "ConversationId" uuid NOT NULL,
    "TimeSent" timestamp without time zone,
    "EnclosedMessageTypes" varchar NOT NULL,
    "WinIdName" varchar NOT NULL,
    "ProcessingMachine" varchar NOT NULL,
    "ProcessingStarted" timestamp without time zone,
    "BusMessageTypeID" integer NOT NULL,
    "MessageSentFrom" varchar(300),
    "Source" varchar(300),
    "ParentID" uuid,
    "EventReference" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table BusMessageContent (OID = 16838) :
--
CREATE TABLE public."BusMessageContent" (
    "BusMessageContentID" integer DEFAULT nextval(('public.busmessagecontent_busmessagecontentid_seq'::text)::regclass) NOT NULL,
    "BusMessageContent" bytea NOT NULL,
    "BusMessageID" uuid NOT NULL,
    "BusMessageContentType" varchar(500) NOT NULL,
    "BusMessageHeader" json
)
WITH (oids = false);
--
-- Structure for table BusMessageProcessLog (OID = 16845) :
--
CREATE TABLE public."BusMessageProcessLog" (
    "BusMessageID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "BusMessageProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProcessDetail" json,
    "ProcessMessage" varchar(2000),
    "ParentID" uuid,
    "BusMessageSubscriber" varchar(300) NOT NULL,
    "BusMessageHandler" varchar(300) NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "HasError" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTask (OID = 16856) :
--
CREATE TABLE public."BusTask" (
    "BusTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskHandlerID" uuid NOT NULL,
    "BusTaskVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTaskHandler (OID = 16866) :
--
CREATE TABLE public."BusTaskHandler" (
    "BusTaskHandlerID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "ObjectTypeName" varchar(500) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectTypeAssembly" varchar(300),
    "MessageTypeName" varchar(300),
    "MessageTypeAssembly" varchar(300),
    "HandlerMessageTypeName" varchar(500),
    "HandlerMessageTypeAssembly" varchar(500),
    "IsHandlerBasedTask" boolean DEFAULT false,
    "NumberOfRetries" integer DEFAULT 1,
    "TaskDataHasExpiry" boolean DEFAULT false NOT NULL,
    "TaskDataExpiryPeriodUnitID" integer,
    "TaskDataExpiryPeriod" integer,
    "DefaultProcessDataTypeID" integer,
    "DefaultProcessDataCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table BusTaskSchedule (OID = 16878) :
--
CREATE TABLE public."BusTaskSchedule" (
    "BusTaskScheduleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "BusTaskID" uuid NOT NULL,
    "IntervalInMinutes" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table BusTaskScheduleProcessLog (OID = 16885) :
--
CREATE TABLE public."BusTaskScheduleProcessLog" (
    "CreatedOn" timestamp without time zone NOT NULL,
    "HasError" boolean DEFAULT false NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "ProcessMessage" varchar(2000),
    "ProcessDetail" json,
    "BusTaskScheduleID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "BusTaskScheduleProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ClassificationType (OID = 16895) :
--
CREATE TABLE public."ClassificationType" (
    "ClassificationTypeID" serial NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar,
    "ClassificationTypeCategoryID" integer NOT NULL,
    "ParentClassificationTypeCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ClassificationTypeCategory (OID = 16903) :
--
CREATE TABLE public."ClassificationTypeCategory" (
    "ClassificationTypeCategoryID" serial NOT NULL,
    "Name" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table CompanyHouse (OID = 16912) :
--
CREATE TABLE public."CompanyHouse" (
    companyname varchar(250) NOT NULL,
    companynumber varchar(25),
    "regaddress.careof" varchar(50),
    "regaddress.pobox" varchar(25),
    "regaddress.addressline1" varchar(100),
    " regaddress.addressline2" varchar(50),
    "regaddress.posttown" varchar(50),
    "regaddress.county" varchar(50),
    "regaddress.country" varchar(25),
    "regaddress.postcode" varchar(25),
    companycategory varchar(100),
    companystatus varchar(50),
    countryoforigin varchar(25),
    dissolutiondate varchar(25),
    incorporationdate varchar(25),
    "accounts.accountrefday" varchar(25),
    "accounts.accountrefmonth" varchar(25),
    "accounts.nextduedate" varchar(25),
    "accounts.lastmadeupdate" varchar(25),
    "accounts.accountcategory" varchar(50),
    "returns.nextduedate" varchar(25),
    "returns.lastmadeupdate" varchar(25),
    "mortgages.nummortcharges" integer,
    "mortgages.nummortoutstanding" integer,
    "mortgages.nummortpartsatisfied" integer,
    "mortgages.nummortsatisfied" integer,
    "siccode.sictext_1" varchar(250),
    "siccode.sictext_2" varchar(250),
    "siccode.sictext_3" varchar(100),
    "siccode.sictext_4" varchar(100),
    "limitedpartnerships.numgenpartners" integer,
    "limitedpartnerships.numlimpartners" integer,
    uri varchar(50),
    "previousname_1.condate" varchar(25),
    " previousname_1.companyname" varchar(100),
    " previousname_2.condate" varchar(25),
    " previousname_2.companyname" varchar(50),
    "previousname_3.condate" varchar(25),
    " previousname_3.companyname" varchar(50),
    "previousname_4.condate" varchar(25),
    " previousname_4.companyname" varchar(25),
    "previousname_5.condate" varchar(25),
    " previousname_5.companyname" varchar(50),
    "previousname_6.condate" varchar(25),
    " previousname_6.companyname" varchar(25),
    "previousname_7.condate" varchar(25),
    " previousname_7.companyname" varchar(25),
    "previousname_8.condate" varchar(25),
    " previousname_8.companyname" varchar(25),
    "previousname_9.condate" varchar(25),
    " previousname_9.companyname" varchar(25),
    "previousname_10.condate" varchar(25),
    " previousname_10.companyname" varchar(25)
)
WITH (oids = false);
--
-- Structure for table ComponentTier (OID = 16918) :
--
CREATE TABLE public."ComponentTier" (
    "ComponentTierID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TotalValueLowerBound" numeric(30,8),
    "TotalValueUpperBound" numeric(30,8),
    "QuantityCountLowerBound" integer,
    "QuantityCountUpperBound" integer,
    "IsPercentageBased" boolean DEFAULT false NOT NULL,
    "TierPrice" numeric(30,8),
    "TierPercentage" numeric(30,8),
    "ApplyToTotal" boolean DEFAULT false NOT NULL,
    "ApplyOnPaymentMethodTypeID" integer,
    "ApplyPerTransaction" boolean DEFAULT false NOT NULL,
    "Name" varchar(400),
    "Description" varchar(2000),
    "Order" integer NOT NULL,
    "TierOrder" integer,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "HasNoUpperBound" boolean DEFAULT false NOT NULL,
    "ParentVersionNumber" integer,
    "ApplyOnPaymentCardTypeID" integer
)
WITH (oids = false);
--
-- Structure for table ComponentTierTemplate (OID = 16931) :
--
CREATE TABLE public."ComponentTierTemplate" (
    "ComponentTierTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TotalValueLowerBound" numeric(30,8),
    "TotalValueUpperBound" numeric(30,8),
    "QuantityCountLowerBound" integer,
    "QuantityCountUpperBound" integer,
    "IsPercentageBased" boolean DEFAULT false NOT NULL,
    "TierPrice" numeric(30,8),
    "TierPercentage" numeric(30,8),
    "ApplyToTotal" boolean DEFAULT false NOT NULL,
    "ApplyOnPaymentMethodTypeID" integer,
    "ApplyPerTransaction" boolean DEFAULT false NOT NULL,
    "Name" varchar(400),
    "Description" varchar(2000),
    "Order" integer NOT NULL,
    "TierOrder" integer,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "HasNoUpperBound" boolean DEFAULT false NOT NULL,
    "ParentVersionNumber" integer,
    "ApplyOnPaymentCardTypeID" integer
)
WITH (oids = false);
--
-- Structure for table Contact (OID = 16944) :
--
CREATE TABLE public."Contact" (
    "ContactID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ContactName" varchar(100) NOT NULL,
    "MasterContactID" uuid,
    "ParentID" uuid NOT NULL,
    "OwnerID" uuid,
    "CustomerTypeID" varchar,
    "PreferredContactMethodID" integer,
    "IsBackOfficeCustomer" boolean DEFAULT false,
    "Salutation" varchar(100),
    "JobTitle" varchar(100),
    "FirstName" varchar(100),
    "Department" varchar(100),
    "NickName" varchar(100),
    "MiddleName" varchar(100),
    "LastName" varchar(100),
    "BirthDate" timestamp without time zone,
    "Description" varchar,
    "GenderTypeID" integer,
    "HasChildren" boolean,
    "EducationTypeID" integer,
    "WebSiteURL" varchar,
    "EmailAddress1" varchar(200),
    "EmailAddress2" varchar(200),
    "EmailAddress3" varchar(200),
    "AssistantName" varchar(200),
    "AssistantPhone" varchar(200),
    "ManagerName" varchar(200),
    "ManagerPhone" varchar(200),
    "CountryTypeID" integer,
    "DoNotFax" boolean,
    "DoNotEmail" boolean DEFAULT false,
    "DoNotTelephone" boolean DEFAULT false,
    "IsPrivate" boolean DEFAULT false,
    "Telephone1" varchar(50),
    "Telephone2" varchar(50),
    "Telephone3" varchar(50),
    "Fax" varchar(50),
    "MobileNumber1" varchar(50),
    "MobileNumber2" varchar(50),
    "MobileNumber3" varchar(50),
    "OrganisationUnitID" integer,
    "ParentContactID" uuid,
    "IsPrimaryContact" boolean DEFAULT false NOT NULL,
    "ContactTypeID" integer,
    "ContactSubTypeID" integer,
    "ContactCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "FirmName" varchar(500)
)
WITH (oids = false);
--
-- Structure for table ContactName (OID = 16958) :
--
CREATE TABLE public."ContactName" (
    "ContactNameID" uuid NOT NULL,
    "ContactID" uuid NOT NULL,
    "SalutationTypeID" integer NOT NULL,
    "FirstName" varchar(200) NOT NULL,
    "MiddleName" varchar(200) NOT NULL,
    "LastName" varchar(200) NOT NULL,
    "NickName" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ContactPhone (OID = 16966) :
--
CREATE TABLE public."ContactPhone" (
    "ContactPhoneId" integer NOT NULL,
    "ContactID" uuid,
    "PhoneTypeID" integer NOT NULL,
    "PhoneNumber" integer NOT NULL,
    "CountryCode" varchar(15),
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ContactRegulator (OID = 16972) :
--
CREATE TABLE public."ContactRegulator" (
    "ContactID" uuid NOT NULL,
    "RegulatorID" integer DEFAULT nextval(('public.contactregulator_regulatorid_seq'::text)::regclass) NOT NULL,
    "RegulatorNumber" varchar(50),
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "DateQualified" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RegulatorName" varchar(500) NOT NULL,
    "RegulatorOtherName" varchar(500)
)
WITH (oids = false);
--
-- Structure for table CountryCode (OID = 16978) :
--
CREATE TABLE public."CountryCode" (
    "CountryCode" varchar(300) NOT NULL,
    "CountryName" varchar(400) NOT NULL,
    "CurrencyCode" varchar(30)
)
WITH (oids = false);
--
-- Structure for table CountryDeduction (OID = 16984) :
--
CREATE TABLE public."CountryDeduction" (
    "CountryCode" varchar(300) NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsAppliedToAllOrders" boolean DEFAULT true NOT NULL,
    "DeductionID" uuid NOT NULL,
    "CountryDeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table CountryDeductionTemplate (OID = 16991) :
--
CREATE TABLE public."CountryDeductionTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsAppliedToAllOrders" boolean DEFAULT true NOT NULL,
    "CountryDeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table CurrencyCode (OID = 16998) :
--
CREATE TABLE public."CurrencyCode" (
    "CurrencyCode" varchar(150) NOT NULL,
    "CurrencyName" varchar(400) NOT NULL
)
WITH (oids = false);
--
-- Structure for table CurrencyRate (OID = 17004) :
--
CREATE TABLE public."CurrencyRate" (
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric(30,8) NOT NULL,
    "CurrencyRateToGBP" numeric(30,8),
    "CurrencyRateToUSD" numeric(30,8) NOT NULL,
    "CurrencyRateID" integer DEFAULT nextval('"CurrencyRate_currencyrateid_seq"'::regclass) NOT NULL
)
WITH (oids = false);
--
-- Structure for table Deduction (OID = 17009) :
--
CREATE TABLE public."Deduction" (
    "DeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTypeID" integer,
    "DeductionSubTypeID" integer,
    "DeductionCategoryID" integer,
    "DeductionSubCategoryID" integer,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPercentageBased" boolean DEFAULT true NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsTierDeduction" boolean DEFAULT false NOT NULL,
    "IsCheckoutDeduction" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "DeductionTemplateID" uuid,
    "DeductionTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table DeductionComponentTier (OID = 17021) :
--
CREATE TABLE public."DeductionComponentTier" (
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionComponentTierTemplate (OID = 17024) :
--
CREATE TABLE public."DeductionComponentTierTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionProduct (OID = 17027) :
--
CREATE TABLE public."DeductionProduct" (
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionProductTemplate (OID = 17030) :
--
CREATE TABLE public."DeductionProductTemplate" (
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DeductionTemplate (OID = 17033) :
--
CREATE TABLE public."DeductionTemplate" (
    "DeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTypeID" integer,
    "DeductionSubTypeID" integer,
    "DeductionCategoryID" integer,
    "DeductionSubCategoryID" integer,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPercentageBased" boolean DEFAULT true NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsTierDeduction" boolean DEFAULT false NOT NULL,
    "IsCheckoutDeduction" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisation (OID = 17045) :
--
CREATE TABLE public."DefaultOrganisation" (
    "DefaultOrganisationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "DefaultOrganisationTemplateID" uuid,
    "DefaultOrganisationTemplateVersionNumber" integer,
    "OrganisationTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationArtefact (OID = 17054) :
--
CREATE TABLE public."DefaultOrganisationArtefact" (
    "DefaultOrganisationID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationArtefactTemplate (OID = 17059) :
--
CREATE TABLE public."DefaultOrganisationArtefactTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBranch (OID = 17064) :
--
CREATE TABLE public."DefaultOrganisationBranch" (
    "DefaultOrganisationBranchID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "BranchName" varchar(30),
    "BranchSubType" integer,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBranchTemplate (OID = 17068) :
--
CREATE TABLE public."DefaultOrganisationBranchTemplate" (
    "DefaultOrganisationBranchTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "BranchName" varchar(200),
    "BranchSubType" integer NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBucket (OID = 17072) :
--
CREATE TABLE public."DefaultOrganisationBucket" (
    "DefaultOrganisationID" uuid NOT NULL,
    "BucketTemplateID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationBucketTemplate (OID = 17075) :
--
CREATE TABLE public."DefaultOrganisationBucketTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "BucketTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroup (OID = 17078) :
--
CREATE TABLE public."DefaultOrganisationGroup" (
    "DefaultOrganisationGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "GroupName" varchar(300),
    "GroupDescription" varchar(2000),
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "ParentID" uuid,
    "GroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupRole (OID = 17088) :
--
CREATE TABLE public."DefaultOrganisationGroupRole" (
    "DefaultOrganisationGroupID" uuid NOT NULL,
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupRoleTemplate (OID = 17093) :
--
CREATE TABLE public."DefaultOrganisationGroupRoleTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid NOT NULL,
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTarget (OID = 17098) :
--
CREATE TABLE public."DefaultOrganisationGroupTarget" (
    "DefaultOrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTargetTemplate (OID = 17103) :
--
CREATE TABLE public."DefaultOrganisationGroupTargetTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationGroupTemplate (OID = 17108) :
--
CREATE TABLE public."DefaultOrganisationGroupTemplate" (
    "DefaultOrganisationGroupTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "GroupName" varchar(300),
    "GroupDescription" varchar(2000),
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "ParentID" uuid,
    "GroupID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationLedger (OID = 17118) :
--
CREATE TABLE public."DefaultOrganisationLedger" (
    "DefaultOrganisationLedgerID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountName" varchar(200) NOT NULL,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationLedgerTemplate (OID = 17126) :
--
CREATE TABLE public."DefaultOrganisationLedgerTemplate" (
    "DefaultOrganisationLedgerTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountName" varchar(200) NOT NULL,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationModule (OID = 17134) :
--
CREATE TABLE public."DefaultOrganisationModule" (
    "DefaultOrganisationID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationModuleTemplate (OID = 17139) :
--
CREATE TABLE public."DefaultOrganisationModuleTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationNotificationConstruct (OID = 17144) :
--
CREATE TABLE public."DefaultOrganisationNotificationConstruct" (
    "DefaultOrganisationNotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationNotificationConstructTemplate (OID = 17150) :
--
CREATE TABLE public."DefaultOrganisationNotificationConstructTemplate" (
    "DefaultOrganisationNotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationPaymentMethod (OID = 17156) :
--
CREATE TABLE public."DefaultOrganisationPaymentMethod" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationPaymentMethodTemplate (OID = 17161) :
--
CREATE TABLE public."DefaultOrganisationPaymentMethodTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationProduct (OID = 17166) :
--
CREATE TABLE public."DefaultOrganisationProduct" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationProductTemplate (OID = 17171) :
--
CREATE TABLE public."DefaultOrganisationProductTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRole (OID = 17176) :
--
CREATE TABLE public."DefaultOrganisationRole" (
    "DefaultOrganisationRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "RoleName" varchar(300),
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ParentID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleClaim (OID = 17186) :
--
CREATE TABLE public."DefaultOrganisationRoleClaim" (
    "DefaultOrganisationRoleClaimID" serial NOT NULL,
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleClaimTemplate (OID = 17191) :
--
CREATE TABLE public."DefaultOrganisationRoleClaimTemplate" (
    "DefaultOrganisationRoleClaimTemplateID" integer DEFAULT nextval('"DefaultOrganisationRoleClaimT_DefaultOrganisationRoleClaimT_seq"'::regclass) NOT NULL,
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTarget (OID = 17200) :
--
CREATE TABLE public."DefaultOrganisationRoleTarget" (
    "DefaultOrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTargetTemplate (OID = 17205) :
--
CREATE TABLE public."DefaultOrganisationRoleTargetTemplate" (
    "DefaultOrganisationRoleTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationUserTargetTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationRoleTemplate (OID = 17210) :
--
CREATE TABLE public."DefaultOrganisationRoleTemplate" (
    "DefaultOrganisationRoleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "RoleName" varchar(300),
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ParentID" uuid,
    "RoleID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultOrganisationSpecific" boolean DEFAULT false,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationShoppingCartBlueprint (OID = 17220) :
--
CREATE TABLE public."DefaultOrganisationShoppingCartBlueprint" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ShoppingCartBlueprintID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationShoppingCartBlueprintTemplate (OID = 17225) :
--
CREATE TABLE public."DefaultOrganisationShoppingCartBlueprintTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "ShoppingCartBlueprintTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationStatusType (OID = 17230) :
--
CREATE TABLE public."DefaultOrganisationStatusType" (
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "DefaultStatusTypeValueID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationStatusTypeTemplate (OID = 17235) :
--
CREATE TABLE public."DefaultOrganisationStatusTypeTemplate" (
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "DefaultStatusTypeValueTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTarget (OID = 17240) :
--
CREATE TABLE public."DefaultOrganisationTarget" (
    "DefaultOrganisationTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTargetTemplate (OID = 17246) :
--
CREATE TABLE public."DefaultOrganisationTargetTemplate" (
    "DefaultOrganisationTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationTemplate (OID = 17252) :
--
CREATE TABLE public."DefaultOrganisationTemplate" (
    "DefaultOrganisationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTarget (OID = 17261) :
--
CREATE TABLE public."DefaultOrganisationUserTarget" (
    "DefaultOrganisationUserTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "ParentID" uuid,
    "IsDefault" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTargetTemplate (OID = 17268) :
--
CREATE TABLE public."DefaultOrganisationUserTargetTemplate" (
    "DefaultOrganisationUserTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsDefault" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserType (OID = 17275) :
--
CREATE TABLE public."DefaultOrganisationUserType" (
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationUserTypeTemplate (OID = 17281) :
--
CREATE TABLE public."DefaultOrganisationUserTypeTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationWorkflow (OID = 17287) :
--
CREATE TABLE public."DefaultOrganisationWorkflow" (
    "DefaultOrganisationID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DefaultOrganisationWorkflowTemplate (OID = 17292) :
--
CREATE TABLE public."DefaultOrganisationWorkflowTemplate" (
    "DefaultOrganisationTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "ParentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultOrganisationTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitMandate (OID = 17297) :
--
CREATE TABLE public."DirectDebitMandate" (
    "DirectDebitMandateID" uuid NOT NULL,
    "DirectDebitMandateVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DirectDebitMandateTemplateID" uuid NOT NULL,
    "DirectDebitMandateTemplateVersionNumber" integer NOT NULL,
    "IsDefaultMandate" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitMandateTemplate (OID = 17306) :
--
CREATE TABLE public."DirectDebitMandateTemplate" (
    "DirectDebitMandateTemplateID" uuid NOT NULL,
    "DirectDebitMandateTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "IsDefaultMandate" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DirectDebitSchedule (OID = 17315) :
--
CREATE TABLE public."DirectDebitSchedule" (
    "DirectDebitScheduleID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table Discount (OID = 17318) :
--
CREATE TABLE public."Discount" (
    "DiscountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "DiscountTypeID" integer NOT NULL,
    "DiscountPercentage" numeric(30,8),
    "DiscountAmount" numeric(30,8),
    "DiscountQuantity" integer,
    "DiscountPeriod" integer,
    "DisocuntPeriodUnitID" integer,
    "ValidTill" timestamp without time zone,
    "MaxRedemptions" integer DEFAULT 1,
    "DiscountApplyOnID" integer,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsRecurring" boolean DEFAULT false,
    "IsPercentage" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "DiscountStatusID" integer NOT NULL,
    "IsSingleProductDiscount" boolean DEFAULT false NOT NULL,
    "IsCheckoutDiscount" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscount" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountDivisor" integer DEFAULT 0 NOT NULL,
    "IsSingleProductQuantityDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscountAdditionalQuantityBased" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountAdditionalQuantity" integer DEFAULT 0 NOT NULL,
    "IsMultipleProductCombinationDiscount" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountCheapestFreeBased" boolean DEFAULT false NOT NULL,
    "HasTiers" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "ParentVersionNumber" integer,
    "OwnerOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table DiscountComponentTier (OID = 17342) :
--
CREATE TABLE public."DiscountComponentTier" (
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountComponentTierTemplate (OID = 17345) :
--
CREATE TABLE public."DiscountComponentTierTemplate" (
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountRelatedProduct (OID = 17348) :
--
CREATE TABLE public."DiscountRelatedProduct" (
    "DiscountRelatedProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountRelatedProductTemplate (OID = 17354) :
--
CREATE TABLE public."DiscountRelatedProductTemplate" (
    "DiscountRelatedProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table DiscountTemplate (OID = 17360) :
--
CREATE TABLE public."DiscountTemplate" (
    "DiscountTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DiscountTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "DiscountTypeID" integer NOT NULL,
    "DiscountPercentage" numeric(30,8),
    "DiscountAmount" numeric(30,8),
    "DiscountQuantity" integer,
    "DiscountDurationTypeID" integer,
    "DiscountDurationMonth" integer,
    "ValidTill" timestamp without time zone,
    "MaxRedemptions" integer DEFAULT 1,
    "DiscountApplyOnID" integer,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsRecurring" boolean DEFAULT false,
    "IsPercentage" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "DiscountStatusID" integer NOT NULL,
    "IsSingleProductDiscount" boolean DEFAULT false NOT NULL,
    "IsCheckoutDiscount" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscount" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountDivisor" integer DEFAULT 0 NOT NULL,
    "IsSingleProductQuantityDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsSingleProductQuantityDiscountAdditionalQuantityBased" boolean DEFAULT false NOT NULL,
    "SingleProductQuantityDiscountAdditionalQuantity" integer DEFAULT 0 NOT NULL,
    "IsMultipleProductCombinationDiscount" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountPercentageBased" boolean DEFAULT false NOT NULL,
    "IsMultipleProductCombinationDiscountCheapestFreeBased" boolean DEFAULT false NOT NULL,
    "HasTiers" boolean DEFAULT false NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid
)
WITH (oids = false);
--
-- Structure for table ErrorCode (OID = 17384) :
--
CREATE TABLE public."ErrorCode" (
    "ErrorCodeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ErrorCode" varchar(50) NOT NULL,
    "Explanation" varchar(1000),
    "ErrorMessage" varchar(2000),
    "ErrorMapping" varchar(200),
    "Notes" varchar(2000),
    "ErrorCodeTypeID" integer,
    "ErrorCodeCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table FieldDetail (OID = 17391) :
--
CREATE TABLE public."FieldDetail" (
    "FieldDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "FieldLabelValue" varchar(2000),
    "DefaultValue" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ToolTipValue" varchar(5000),
    "ToolTipHTML" varchar(10000),
    "ToolTipIsHTML" boolean DEFAULT false NOT NULL,
    "InformationValue" varchar(5000),
    "InformationHTML" varchar(10000),
    "InformationIsHTML" boolean DEFAULT false NOT NULL,
    "HelpValue" varchar(5000),
    "HelpHTML" varchar(10000),
    "HelpIsHTML" boolean DEFAULT false NOT NULL,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "FieldTypeID" integer,
    "IconAlignmentTypeID" integer,
    "IconFileName" varchar(100),
    "IsGridColumn" boolean DEFAULT false,
    "FieldMask" varchar(10000)
)
WITH (oids = false);
--
-- Structure for table FieldDetailTemplate (OID = 17406) :
--
CREATE TABLE public."FieldDetailTemplate" (
    "FieldDetailTemplateID" uuid NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "FieldLabelValue" varchar(2000),
    "DefaultValue" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ToolTipValue" varchar(5000),
    "ToolTipHTML" varchar(10000),
    "ToolTipIsHTML" boolean DEFAULT false NOT NULL,
    "InformationValue" varchar(5000),
    "InformationHTML" varchar(10000),
    "InformationIsHTML" boolean DEFAULT false NOT NULL,
    "HelpValue" varchar(5000),
    "HelpHTML" varchar(10000),
    "HelpIsHTML" boolean DEFAULT false NOT NULL,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "FieldTypeID" integer,
    "IconAlignmentTypeID" integer,
    "IconFileName" varchar(100),
    "IsGridColumn" boolean DEFAULT false,
    "FieldMask" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table GlobalAccountingPeriod (OID = 17420) :
--
CREATE TABLE public."GlobalAccountingPeriod" (
    "GlobalAccountingPeriodID" integer DEFAULT nextval(('public.globalaccountingperiod_globalaccountingperiodid_seq'::text)::regclass) NOT NULL,
    "PeriodNumber" integer NOT NULL,
    "StartDay" integer NOT NULL,
    "EndDay" integer NOT NULL,
    "Month" integer NOT NULL,
    "Year" integer NOT NULL,
    "IsFinancialClosePeriod" boolean DEFAULT false NOT NULL,
    "IsCurrentPeriod" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table GlobalDirectDebitCollectionPeriod (OID = 17427) :
--
CREATE TABLE public."GlobalDirectDebitCollectionPeriod" (
    "GlobalDirectDebitCollectionPeriodID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PeriodNumber" integer NOT NULL,
    "CollectionDay" integer NOT NULL,
    "CollectionMonth" integer NOT NULL,
    "CollectionYear" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsCurrentPeriod" boolean DEFAULT false NOT NULL,
    "IsManuallyDrivenOnly" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table GlobalPaymentMethod (OID = 17436) :
--
CREATE TABLE public."GlobalPaymentMethod" (
    "GlobalPaymentMethodID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "PaymentMethodID" integer NOT NULL,
    "IsDefaultForOnlinePayments" boolean DEFAULT false NOT NULL,
    "Description" varchar(2000),
    "IsDefaultForOfflinePayments" boolean DEFAULT true NOT NULL,
    "DirectDebitMandateID" uuid,
    "DirectDebitMandateVersionNumber" integer,
    "IsDirectDebit" boolean DEFAULT false NOT NULL,
    "DirectDebitDefaultMonthlyPeriodNumber" integer DEFAULT 3,
    "DirectDebitMaxDaysAwaitingCollectionFromMonthPeriodNumber" integer,
    "BACSDefaultMonthlyPaymentDay" integer,
    "BACSMaxDaysAwaitingPaymentFromMonthlyPaymentDay" integer,
    "DirectDebitDefaultNumberOfNotificationDaysBeforeCollection" integer,
    "BACSDefaultNumberOfNotificationDaysBeforeExpectationOfPayment" integer
)
WITH (oids = false);
--
-- Structure for table Group (OID = 17447) :
--
CREATE TABLE public."Group" (
    "GroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "GroupName" varchar(300) NOT NULL,
    "GroupDescription" varchar(500) NOT NULL,
    "GroupTypeID" integer NOT NULL,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "GroupSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table GroupRole (OID = 17457) :
--
CREATE TABLE public."GroupRole" (
    "GroupID" uuid NOT NULL,
    "RoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table InterfacePanel (OID = 17463) :
--
CREATE TABLE public."InterfacePanel" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(500),
    "InterfacePanelTypeID" integer,
    "InterfacePanelSubTypeID" integer,
    "InterfacePanelCategoryID" integer,
    "InterfacePanelSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentIPID" uuid,
    "ParentIPVersionNumber" integer,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGridPanel" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "InterfacePanelLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelClaim (OID = 17474) :
--
CREATE TABLE public."InterfacePanelClaim" (
    "ClaimID" uuid NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer DEFAULT 0 NOT NULL,
    "InterfacePanelRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table InterfacePanelClaimTemplate (OID = 17480) :
--
CREATE TABLE public."InterfacePanelClaimTemplate" (
    "ClaimID" uuid NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "InterfacePanelRoleTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDOrganisationTypeUserType (OID = 17486) :
--
CREATE TABLE public."InterfacePanelFDOrganisationTypeUserType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDOrganisationTypeUserTypeTemplate (OID = 17500) :
--
CREATE TABLE public."InterfacePanelFDOrganisationTypeUserTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDValidationOrgTypeUserTypeTemplate (OID = 17514) :
--
CREATE TABLE public."InterfacePanelFDValidationOrgTypeUserTypeTemplate" (
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateID" uuid NOT NULL,
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFDValidationOrgTypeUserTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFDValidationOrganisationTypeUserType (OID = 17520) :
--
CREATE TABLE public."InterfacePanelFDValidationOrganisationTypeUserType" (
    "InterfacePanelFDValidationOrganisationTypeUserTypeID" uuid NOT NULL,
    "InterfacePanelFDValidationOrganisationTypeUserTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFDValidationOrganisationTypeUserTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetail (OID = 17526) :
--
CREATE TABLE public."InterfacePanelFieldDetail" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(2000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailOrganisationType (OID = 17540) :
--
CREATE TABLE public."InterfacePanelFieldDetailOrganisationType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailOrganisationTypeTemplate (OID = 17554) :
--
CREATE TABLE public."InterfacePanelFieldDetailOrganisationTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(5000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailTemplate (OID = 17568) :
--
CREATE TABLE public."InterfacePanelFieldDetailTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsFilterable" boolean DEFAULT false NOT NULL,
    "OverrideDefaultValue" varchar(2000),
    "OverrideToolTipValue" varchar(5000),
    "OverrideToolTipHTML" varchar(10000),
    "OverrideToolTipIsHTML" boolean DEFAULT false,
    "OverrideInformationValue" varchar(5000),
    "OverrideInformationHTML" varchar(10000),
    "OverrideInformationIsHTML" boolean DEFAULT false,
    "OverrideHelpValue" varchar(5000),
    "OverrideHelpHTML" varchar(10000),
    "OverrideHelpIsHTML" boolean DEFAULT false,
    "OverrideFieldLabelValue" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidation (OID = 17582) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidation" (
    "InterfacePanelFieldDetailValidationID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "InterfacePanelFieldDetailValidationVersion" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "InterfacePanelID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "InterfacePanelVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "FieldDetailID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidation" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
--
-- Structure for table InterfacePanelFieldDetailValidationOrganisationType (OID = 17588) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationOrganisationType" (
    "InterfacePanelFieldDetailValidationOrganisationTypeID" uuid NOT NULL,
    "InterfacePanelFieldDetailValidationOrganisationTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "FieldDetailID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationOrganisationTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidationOrganisationTypeTemplate (OID = 17594) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationOrganisationTypeTemplate" (
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateID" uuid NOT NULL,
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationOrganisationTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelFieldDetailValidationTemplate (OID = 17600) :
--
CREATE TABLE public."InterfacePanelFieldDetailValidationTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "InterfacePanelFieldDetailValidationTemplateVersion" integer NOT NULL,
    "FieldDetailTemplateID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelFieldDetailValidationTemplateID" uuid NOT NULL,
    "ValidationSubCategory" integer,
    "InterfacePanelFieldDetailValidationTemplateName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "InterfacePanelTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "InterfacePanelTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "FieldDetailTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelFieldDetailValidationTemplate" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
--
-- Structure for table InterfacePanelOrganisationType (OID = 17606) :
--
CREATE TABLE public."InterfacePanelOrganisationType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeTemplate (OID = 17612) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeUserType (OID = 17618) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeUserType" (
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeUserTypeLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelOrganisationTypeUserTypeTemplate (OID = 17624) :
--
CREATE TABLE public."InterfacePanelOrganisationTypeUserTypeTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "ParentID" uuid,
    "InterfacePanelOrganisationTypeUserTypeTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelRole (OID = 17630) :
--
CREATE TABLE public."InterfacePanelRole" (
    "InterfacePanelRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table InterfacePanelRoleTemplate (OID = 17639) :
--
CREATE TABLE public."InterfacePanelRoleTemplate" (
    "InterfacePanelRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table InterfacePanelSetting (OID = 17648) :
--
CREATE TABLE public."InterfacePanelSetting" (
    "InterfacePanelSettingID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "IsVisible" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table InterfacePanelSettingTemplate (OID = 17654) :
--
CREATE TABLE public."InterfacePanelSettingTemplate" (
    "InterfacePanelSettingTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "IsVisible" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table InterfacePanelTemplate (OID = 17660) :
--
CREATE TABLE public."InterfacePanelTemplate" (
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(500),
    "InterfacePanelTypeID" integer,
    "InterfacePanelSubTypeID" integer,
    "InterfacePanelCategoryID" integer,
    "InterfacePanelSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentIPTemplateID" uuid,
    "ParentIPTemplateVersionNumber" integer,
    "IsSecuredByClaim" boolean DEFAULT false NOT NULL,
    "IsGridPanel" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true NOT NULL,
    "InterfacePanelTemplateLabel" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidation (OID = 17671) :
--
CREATE TABLE public."InterfacePanelValidation" (
    "InterfacePanelValidationID" uuid NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "InterfacePanelValidationVersionNumber" integer,
    "OverrideValidationMessage" varchar(1000),
    "OverrideValidationMessageHTML" varchar(1000),
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "OverrideValidationIsHTML" boolean,
    "InterfacePanelValidationName" varchar(200)
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelValidationID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "InterfacePanelValidationVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "OverrideValidationMessage" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "OverrideValidationMessageHTML" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "ValidationSubCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "SourceErrorCodes" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "IsActive" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidation" ALTER COLUMN "IsDeleted" SET STATISTICS 0;
--
-- Structure for table InterfacePanelValidationOrganisationType (OID = 17677) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationType" (
    "InterfacePanelValidationOrganisationTypeID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeTemplate (OID = 17683) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeTemplate" (
    "InterfacePanelValidationOrganisationTypeTemplateID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeTemplateVers" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeUserType (OID = 17689) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeUserType" (
    "InterfacePanelValidationOrganisationTypeUserTypeID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeUserTypeVersion" integer NOT NULL,
    "InterfacePanelID" uuid NOT NULL,
    "InterfacePanelVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeUserTypeName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationOrganisationTypeUserTypeTemplate (OID = 17695) :
--
CREATE TABLE public."InterfacePanelValidationOrganisationTypeUserTypeTemplate" (
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateID" uuid NOT NULL,
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion" integer NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "OverrideValidationMessage" varchar,
    "OverrideValidationMessageHTML" varchar,
    "OverrideValidationIsHTML" boolean,
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "InterfacePanelValidationOrganisationTypeUserTypeTemplateName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table InterfacePanelValidationTemplate (OID = 17701) :
--
CREATE TABLE public."InterfacePanelValidationTemplate" (
    "InterfacePanelValidationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "InterfacePanelTemplateID" uuid NOT NULL,
    "InterfacePanelTemplateVersionNumber" integer,
    "InterfacePanelValidationTemplateVersionNumber" integer NOT NULL,
    "OverrideValidationMessage" varchar(1000),
    "OverrideValidationMessageHTML" varchar(1000),
    "ValidationType" integer,
    "ValidationSubType" integer,
    "ValidationCategory" integer,
    "ValidationSubCategory" integer,
    "SourceErrorCodes" varchar(100),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "OverrideValidationIsHTML" boolean,
    "InterfacePanelValidationTemplateName" varchar(200) NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "InterfacePanelValidationTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "OverrideValidationMessage" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "OverrideValidationMessageHTML" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationSubType" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "ValidationSubCategory" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "SourceErrorCodes" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "IsActive" SET STATISTICS 0;
ALTER TABLE ONLY public."InterfacePanelValidationTemplate" ALTER COLUMN "IsDeleted" SET STATISTICS 0;
--
-- Structure for table Invoice (OID = 17708) :
--
CREATE TABLE public."Invoice" (
    "InvoiceID" uuid NOT NULL,
    "VatNumber" varchar(200),
    "StartDate" timestamp without time zone,
    "EndDate" timestamp without time zone NOT NULL,
    "Total" numeric(30,8) NOT NULL,
    "LastReminder" timestamp without time zone,
    "Balance" numeric(30,8),
    "ParentID" uuid,
    "DueDate" timestamp without time zone,
    "CountryCode" varchar(300) NOT NULL,
    "NumberOfPaymentAttempts" integer DEFAULT 0 NOT NULL,
    "CarriedBalance" numeric(30,8),
    "InvoiceTypeID" integer,
    "InvoiceNumber" integer,
    "InvoiceName" varchar(200),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" timestamp without time zone NOT NULL,
    "CurrencyRate" numeric(30,8) DEFAULT 0 NOT NULL,
    "CurrencyRateToGBP" numeric(30,8),
    "CurrencyRateToUSD" numeric(30,8),
    "InvoiceSubTotalInclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalDiscountsInclTaxAndDeduct" numeric(30,8) NOT NULL,
    "InvoiceSubTotalDiscountsExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "PaymentMethodAdditionalFeesInclTax" numeric(30,8) NOT NULL,
    "PaymentMethodAdditionalFeesExclTax" numeric(30,8) NOT NULL,
    "TaxTotal" numeric(30,8),
    "DiscountTotal" numeric(30,8),
    "OrganisationID" uuid,
    "ShoppingCartID" uuid,
    "OrganisationAccountingPeriodID" integer,
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "InvoiceReference" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "IsFrozenPendingPayment" boolean DEFAULT false NOT NULL,
    "GlobalPaymentMethodID" uuid,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table InvoiceLineItem (OID = 17720) :
--
CREATE TABLE public."InvoiceLineItem" (
    "InvoiceLineItemID" uuid NOT NULL,
    "InvoiceID" uuid,
    "DateFrom" timestamp without time zone NOT NULL,
    "DateTo" timestamp without time zone NOT NULL,
    "SingleProductPrice" numeric(30,8) NOT NULL,
    "Quantity" numeric(30,8) NOT NULL,
    "TaxTotal" numeric(30,8),
    "Price" numeric(30,8) NOT NULL,
    "Description" varchar(2000) NOT NULL,
    "InvoiceLineItemTypeID" integer NOT NULL,
    "ParentID" uuid,
    "PriceInclTax" numeric(30,8) NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "IsCredit" boolean DEFAULT false NOT NULL,
    "IsDebit" boolean DEFAULT false NOT NULL,
    "ProductID" uuid,
    "ProductVersionID" integer,
    "PriceExclTax" numeric(30,8) NOT NULL,
    "SingleProductPriceInclTaxAndDeduct" numeric(30,8),
    "SingleProductPriceExclTaxAndDeduct" numeric(30,8) NOT NULL,
    "DiscountTotal" numeric(30,8),
    "IsDepositProduct" boolean DEFAULT false NOT NULL,
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionPeriodID" uuid,
    "IsFrozenPendingPayment" boolean DEFAULT false NOT NULL,
    "AccountID" uuid
)
WITH (oids = false);
--
-- Structure for table InvoiceProcessLog (OID = 17733) :
--
CREATE TABLE public."InvoiceProcessLog" (
    "InvoiceID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "NotificationID" uuid,
    "InvoiceStatusDetail" varchar(2000),
    "PaidOn" timestamp without time zone,
    "IsInvoiceProcessed" boolean DEFAULT false NOT NULL,
    "IsPaid" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "ClosedOn" timestamp without time zone,
    "InvoiceAccountingStatusID" integer
)
WITH (oids = false);
--
-- Structure for table LedgerAccountBalance (OID = 17742) :
--
CREATE TABLE public."LedgerAccountBalance" (
    "LedgerAccountID" uuid NOT NULL,
    "BalanceOn" timestamp without time zone NOT NULL,
    "Balance" numeric(30,8) NOT NULL,
    "BalanceAvailableAdjusted" numeric(30,8),
    "BalanceAvailableClosing" numeric(30,8),
    "BalanceBookAdjusted" numeric(30,8),
    "BalanceBookClosing" numeric(30,8),
    "BalanceCollectedAdjusted" numeric(30,8),
    "BalanceCollectedClosing" numeric(30,8),
    "IsDebit" boolean DEFAULT false NOT NULL,
    "IsCredit" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table LedgerAccountTransaction (OID = 17747) :
--
CREATE TABLE public."LedgerAccountTransaction" (
    "LedgerAccountID" uuid NOT NULL,
    "TransactionOrderID" uuid NOT NULL,
    "BalanceOn" timestamp without time zone NOT NULL
)
WITH (oids = false);
--
-- Structure for table LinkedAccountClaims (OID = 17750) :
--
CREATE TABLE public."LinkedAccountClaims" (
    "LinkedAccount_ProviderName" varchar(30) NOT NULL,
    "LinkedAccount_ProviderAccountID" varchar(100) NOT NULL,
    "Type" varchar(150) NOT NULL,
    "Value" varchar(150) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table LinkedAccounts (OID = 17755) :
--
CREATE TABLE public."LinkedAccounts" (
    "UserAccount_ID" uuid NOT NULL,
    "ProviderName" varchar(30) NOT NULL,
    "ProviderAccountID" varchar(100) NOT NULL,
    "LastLogin" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Module (OID = 17760) :
--
CREATE TABLE public."Module" (
    "ModuleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleArtefact (OID = 17770) :
--
CREATE TABLE public."ModuleArtefact" (
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleArtefactTemplate (OID = 17775) :
--
CREATE TABLE public."ModuleArtefactTemplate" (
    "ArtefactTemplateID" uuid NOT NULL,
    "ArtefactTemplateVersionNumber" integer NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleClaim (OID = 17780) :
--
CREATE TABLE public."ModuleClaim" (
    "ClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "ModuleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "ModuleRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ModuleClaimTemplate (OID = 17787) :
--
CREATE TABLE public."ModuleClaimTemplate" (
    "ClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "ModuleRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table ModuleDependency (OID = 17794) :
--
CREATE TABLE public."ModuleDependency" (
    "ModuleDependencyID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "DependencyID" uuid NOT NULL,
    "DependencyVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleDependencyTemplate (OID = 17799) :
--
CREATE TABLE public."ModuleDependencyTemplate" (
    "ModuleDependencyTemplateID" uuid NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "DependencyID" uuid NOT NULL,
    "DependencyVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleNotificationConstruct (OID = 17804) :
--
CREATE TABLE public."ModuleNotificationConstruct" (
    "ModuleNotificationConstructID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleNotificationConstructTemplate (OID = 17809) :
--
CREATE TABLE public."ModuleNotificationConstructTemplate" (
    "ModuleNotificationConstructTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModulePlugin (OID = 17814) :
--
CREATE TABLE public."ModulePlugin" (
    "ModulePluginID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "PluginID" uuid NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModulePluginTemplate (OID = 17820) :
--
CREATE TABLE public."ModulePluginTemplate" (
    "ModulePluginTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "PluginTemplateID" uuid NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleProduct (OID = 17826) :
--
CREATE TABLE public."ModuleProduct" (
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleProductTemplate (OID = 17831) :
--
CREATE TABLE public."ModuleProductTemplate" (
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleRole (OID = 17836) :
--
CREATE TABLE public."ModuleRole" (
    "RoleID" uuid NOT NULL,
    "ModuleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleRoleTemplate (OID = 17845) :
--
CREATE TABLE public."ModuleRoleTemplate" (
    "RoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleSetting (OID = 17854) :
--
CREATE TABLE public."ModuleSetting" (
    "ModuleSettingID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Value" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CanOrganisationChange" boolean DEFAULT false NOT NULL,
    "CanUserChange" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSettingTemplate (OID = 17866) :
--
CREATE TABLE public."ModuleSettingTemplate" (
    "ModuleSettingTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Value" varchar NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CanOrganisationChange" boolean DEFAULT false NOT NULL,
    "CanUserChange" boolean DEFAULT false NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleStatusType (OID = 17878) :
--
CREATE TABLE public."ModuleStatusType" (
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleStatusTypeTemplate (OID = 17883) :
--
CREATE TABLE public."ModuleStatusTypeTemplate" (
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSubscription (OID = 17888) :
--
CREATE TABLE public."ModuleSubscription" (
    "ModuleSubscriptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleID" uuid NOT NULL,
    "ModuleVersionNumber" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleSubscriptionTemplate (OID = 17895) :
--
CREATE TABLE public."ModuleSubscriptionTemplate" (
    "ModuleSubscriptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "ModuleTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionTemplateID" uuid NOT NULL,
    "PlanSubscriptionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleTemplate (OID = 17901) :
--
CREATE TABLE public."ModuleTemplate" (
    "ModuleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflow (OID = 17911) :
--
CREATE TABLE public."ModuleWorkflow" (
    "ModuleWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ModuleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AppliesToAllOrganisations" boolean DEFAULT false NOT NULL,
    "AppliesToAllUsers" boolean DEFAULT false NOT NULL,
    "ModuleVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTarget (OID = 17919) :
--
CREATE TABLE public."ModuleWorkflowTarget" (
    "ModuleWorkflowTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleWorkflowID" uuid NOT NULL,
    "OrganisationTypeID" integer,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "UserTypeID" integer,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTargetTemplate (OID = 17923) :
--
CREATE TABLE public."ModuleWorkflowTargetTemplate" (
    "ModuleWorkflowTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleWorkflowTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "OrganisationSubCategoryID" integer,
    "UserTypeID" integer,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table ModuleWorkflowTemplate (OID = 17927) :
--
CREATE TABLE public."ModuleWorkflowTemplate" (
    "ModuleWorkflowTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ModuleTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AppliesToAllOrganisations" boolean DEFAULT false NOT NULL,
    "AppliesToAllUsers" boolean DEFAULT false NOT NULL,
    "ModuleTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Notification (OID = 17936) :
--
CREATE TABLE public."Notification" (
    "NotificationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "FromParentID" uuid,
    "DateSent" date NOT NULL,
    "ParentID" uuid,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ModuleNotificationConstructID" uuid,
    "ModuleNotificationConstructVersionNumber" integer,
    "IsSent" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsInternal" boolean DEFAULT false NOT NULL,
    "IsExternal" boolean DEFAULT false NOT NULL,
    "IsVisible" boolean DEFAULT true NOT NULL,
    "NotificationData" json NOT NULL,
    "NotificationStatusID" integer
)
WITH (oids = false);
--
-- Structure for table NotificationConstruct (OID = 17949) :
--
CREATE TABLE public."NotificationConstruct" (
    "NotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTypeID" integer,
    "NotificationConstructSubTypeID" integer,
    "NotificationConstructCategoryID" integer,
    "NotificationConstructSubCategoryID" integer,
    "DefaultNotificationExportFormatID" integer,
    "ExternalRelatedNotificationConstructID" uuid,
    "ExternalRelatedNotificationConstructVersionNumber" integer,
    "DefaultNotificationDeliveryMethodID" integer,
    "NotificationSubject" varchar(200),
    "NotificationTitle" varchar(300),
    "NotificationDetails" varchar(2000),
    "NotificationConstructMutatorObjectType" varchar(500),
    "NotificationReference" varchar(200),
    "NotificationAdditionalDetails" varchar(2000),
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeIncludedInBatchNotification" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructClaim (OID = 17959) :
--
CREATE TABLE public."NotificationConstructClaim" (
    "NotificationConstructClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "NotificationRoleConstructID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationConstructClaimTemplate (OID = 17965) :
--
CREATE TABLE public."NotificationConstructClaimTemplate" (
    "NotificationConstructClaimTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationConstructData (OID = 17971) :
--
CREATE TABLE public."NotificationConstructData" (
    "NotificationConstructDataID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "NotificationData" bytea,
    "NotificationDataLength" integer,
    "NotificationDataMimeType" varchar(100),
    "NotificationDataFileName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date,
    "UsesBusinessObjects" boolean DEFAULT true,
    "UsesDataSources" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table NotificationConstructDataTemplate (OID = 17983) :
--
CREATE TABLE public."NotificationConstructDataTemplate" (
    "NotificationConstructDataTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "NotificationData" bytea,
    "NotificationDataLength" integer,
    "NotificationDataMimeType" varchar(100),
    "NotificationDataFileName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date,
    "UsesBusinessObjects" boolean DEFAULT true,
    "UsesDataSources" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table NotificationConstructGroup (OID = 17995) :
--
CREATE TABLE public."NotificationConstructGroup" (
    "NotificationConstructGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupVersion" integer NOT NULL,
    "Name" varchar(200),
    "Description" varchar(200),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "NotificationConstructGroupTemplateID" uuid,
    "NotificationConstructGroupTemplateVersion" integer,
    "NotificationConstructGroupTypeID" integer,
    "NotificationConstructGroupCategoryID" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "NotificationConstructGroupID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "NotificationConstructGroupVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "Name" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "Description" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroup" ALTER COLUMN "ParentID" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupNotificationConstruct (OID = 18001) :
--
CREATE TABLE public."NotificationConstructGroupNotificationConstruct" (
    "NotificationConstructGroupNotificationConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupNotificationConstructVersion" integer NOT NULL,
    "NotificationConstructGroupID" uuid,
    "NotificationConstructGroupVersion" integer,
    "UserTypeID" uuid,
    "NotificationConstructID" uuid NOT NULL,
    "WorkflowID" uuid,
    "WorkflowVersionNumber" integer,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(200),
    "OrganisationTypeID" integer,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupNotificationConstructID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupNotificationConstructVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructGroupVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "NotificationConstructID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "WorkflowID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "WorkflowVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstruct" ALTER COLUMN "ConditionString" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupNotificationConstructTemplate (OID = 18007) :
--
CREATE TABLE public."NotificationConstructGroupNotificationConstructTemplate" (
    "NotificationConstructGroupNotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructGroupTemplateID" uuid,
    "NotificationConstructGroupTemplateVersion" integer,
    "UserTypeID" uuid,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(200),
    "OrganisationTypeID" integer,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupNotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupNotificationConstructTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructGroupTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "NotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupNotificationConstructTemplate" ALTER COLUMN "ConditionString" SET STATISTICS 0;
--
-- Structure for table NotificationConstructGroupTemplate (OID = 18013) :
--
CREATE TABLE public."NotificationConstructGroupTemplate" (
    "NotificationConstructGroupTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructGroupTemplateVersion" integer NOT NULL,
    "Name" varchar(200),
    "Description" varchar(200),
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "NotificationConstructGroupTypeID" integer,
    "NotificationConstructGroupCategoryID" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "NotificationConstructGroupTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "NotificationConstructGroupTemplateVersion" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "Name" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "Description" SET STATISTICS 0;
ALTER TABLE ONLY public."NotificationConstructGroupTemplate" ALTER COLUMN "ParentID" SET STATISTICS 0;
--
-- Structure for table NotificationConstructParameter (OID = 18019) :
--
CREATE TABLE public."NotificationConstructParameter" (
    "NotificationConstructParameterID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "ParameterOrBusinessObjectName" varchar(300) NOT NULL,
    "DefaultValue" varchar(2000),
    "ObjectType" varchar(300),
    "ObjectName" varchar(300),
    "ObjectNameSpace" varchar(300),
    "ObjectAssembly" varchar(300),
    "ObjectParentName" varchar(300),
    "ObjectParentNameSpace" varchar(300),
    "ObjectParentAssembly" varchar(300),
    "IsMandatory" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectParentType" varchar(300),
    "IsBusinessObject" boolean DEFAULT true,
    "BusinessObjectCategoryName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table NotificationConstructParameterTemplate (OID = 18030) :
--
CREATE TABLE public."NotificationConstructParameterTemplate" (
    "NotificationConstructParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "ParameterOrBusinessObjectName" varchar(300) NOT NULL,
    "DefaultValue" varchar(2000),
    "ObjectType" varchar(300),
    "ObjectName" varchar(300),
    "ObjectNameSpace" varchar(300),
    "ObjectAssembly" varchar(300),
    "ObjectParentName" varchar(300),
    "ObjectParentNameSpace" varchar(300),
    "ObjectParentAssembly" varchar(300),
    "IsMandatory" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ObjectParentType" varchar(300),
    "IsBusinessObject" boolean DEFAULT true,
    "BusinessObjectCategoryName" varchar(200)
)
WITH (oids = false);
--
-- Structure for table NotificationConstructRole (OID = 18041) :
--
CREATE TABLE public."NotificationConstructRole" (
    "NotificationRoleConstructID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructRoleTemplate (OID = 18050) :
--
CREATE TABLE public."NotificationConstructRoleTemplate" (
    "NotificationConstructRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTarget (OID = 18059) :
--
CREATE TABLE public."NotificationConstructTarget" (
    "NotificationConstructTargetID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsSingleUser" boolean DEFAULT false NOT NULL,
    "IsOrganisationBranchOnly" boolean DEFAULT false NOT NULL,
    "IsDefaultTarget" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTargetTemplate (OID = 18068) :
--
CREATE TABLE public."NotificationConstructTargetTemplate" (
    "NotificationConstructTargetTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsSingleUser" boolean DEFAULT false NOT NULL,
    "IsOrganisationBranchOnly" boolean DEFAULT false NOT NULL,
    "IsDefaultTarget" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table NotificationConstructTemplate (OID = 18077) :
--
CREATE TABLE public."NotificationConstructTemplate" (
    "NotificationConstructTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "NotificationConstructTypeID" integer,
    "NotificationConstructSubTypeID" integer,
    "NotificationConstructCategoryID" integer,
    "NotificationConstructSubCategoryID" integer,
    "DefaultNotificationExportFormatID" integer,
    "ExternalRelatedNotificationConstructTemplateID" uuid,
    "ExternalRelatedNotificationConstructTemplateVersionNumber" integer,
    "DefaultNotificationDeliveryMethodID" integer,
    "NotificationSubject" varchar(200) DEFAULT 200,
    "NotificationAdditionalDetails" varchar(2000),
    "NotificationConstructMutatorObjectType" varchar(500),
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeIncludedInBatchNotification" boolean DEFAULT false NOT NULL,
    "NotificationDetails" varchar(2000),
    "NotificationReference" varchar(200),
    "NotificationTitle" varchar(300)
)
WITH (oids = false);
--
-- Structure for table NotificationRecipient (OID = 18088) :
--
CREATE TABLE public."NotificationRecipient" (
    "NotificationRecipientID" uuid NOT NULL,
    "NotificationID" uuid NOT NULL,
    "ToParentID" uuid,
    "OrganisationID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "IsAccepted" boolean,
    "AcceptedDate" date,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table NotificationRecipientLog (OID = 18093) :
--
CREATE TABLE public."NotificationRecipientLog" (
    "NotificationRecipientID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "SentOn" timestamp without time zone,
    "NotificationExportFormatID" integer,
    "IsSent" boolean DEFAULT false,
    "IsRead" boolean DEFAULT false,
    "ErrorOccured" boolean DEFAULT false,
    "DateRead" timestamp without time zone,
    "NotificationDeliveryMethodID" integer,
    "NotificationRecipientLogID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table Operation (OID = 18100) :
--
CREATE TABLE public."Operation" (
    "OperationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OperationName" varchar(150) NOT NULL,
    "OperationDescription" varchar(500),
    "SourceID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table Organisation (OID = 18109) :
--
CREATE TABLE public."Organisation" (
    "OrganisationID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "OrganisationSubTypeID" integer,
    "OrganisationCategoryID" integer,
    "IsBranch" boolean DEFAULT false NOT NULL,
    "IsHeadOffice" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsUserOrganisation" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    "OrganisationSubCategoryID" integer,
    "DefaultOrganisationID" uuid NOT NULL,
    "DefaultOrganisationVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "ParentOrganisationID" uuid,
    "IsPaymentProvider" boolean DEFAULT false,
    "PrimaryContactID" uuid,
    "CompanyPinCode" varchar(40) DEFAULT ''::character varying,
    "CompanyPinCreated" date DEFAULT ('now'::text)::date,
    "IsCompanyVerified" boolean DEFAULT false,
    "IsCompanyPinCreated" boolean DEFAULT false,
    "ReturnUrl" varchar(250) DEFAULT ''::character varying
)
WITH (oids = false);
--
-- Structure for table OrganisationAccountingPeriod (OID = 18119) :
--
CREATE TABLE public."OrganisationAccountingPeriod" (
    "OrganisationAccountingPeriodID" integer DEFAULT nextval(('public.organisationaccountingperiod_organisationaccountingperiodid_seq'::text)::regclass) NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "GlobalAccountingPeriodID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationArtefact (OID = 18123) :
--
CREATE TABLE public."OrganisationArtefact" (
    "OrganisationID" uuid NOT NULL,
    "ArtefactID" uuid NOT NULL,
    "ArtefactVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationBankAccount (OID = 18128) :
--
CREATE TABLE public."OrganisationBankAccount" (
    "OrganisationBankAccountId" integer NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "BankAccountTypeID" integer NOT NULL,
    "SortCode" varchar(10),
    "BankAccountNumber" varchar(20) NOT NULL,
    "IBANNumber" varchar(20),
    "SwiftCode" varchar(20),
    "BankAccountDurationTypeID" integer NOT NULL,
    "BankAccountOpeningYear" integer,
    "BankAccountOpeningMonth" integer,
    "IsPrimary" boolean DEFAULT true NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDirectDebtAccount" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDetail (OID = 18135) :
--
CREATE TABLE public."OrganisationDetail" (
    "OrganisationDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "Name" varchar(2000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationDefaultLogoID" uuid,
    "OrganisationLegalBlurb" varchar
)
WITH (oids = false);
--
-- Structure for table OrganisationDirectDebitMandate (OID = 18144) :
--
CREATE TABLE public."OrganisationDirectDebitMandate" (
    "OrganisationID" uuid NOT NULL,
    "DirectDebitMandateID" uuid NOT NULL,
    "DirectDebitMandateVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "DirectDebitMandateStatusID" integer NOT NULL,
    "IsSigned" boolean DEFAULT false NOT NULL,
    "SignedOn" timestamp without time zone,
    "NotificationID" uuid,
    "OrganisationDirectDebitMandateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDirectDebitMandateProcessLog (OID = 18149) :
--
CREATE TABLE public."OrganisationDirectDebitMandateProcessLog" (
    "OrganisationDirectDebitMandateID" uuid NOT NULL,
    "NotificationRecipientID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationDiscount (OID = 18152) :
--
CREATE TABLE public."OrganisationDiscount" (
    "OrganisationID" uuid NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationFinancialDetail (OID = 18157) :
--
CREATE TABLE public."OrganisationFinancialDetail" (
    "OrganisationFinancialDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "FinancialStatusTypeID" uuid,
    "FinancialStatusTypeVersionNumber" integer,
    "FinancialStatusTypeValueID" uuid,
    "HasACreditLimit" boolean DEFAULT false NOT NULL,
    "CreditLimit" numeric(30,8),
    "NumberOfLatePayments" integer DEFAULT 0 NOT NULL,
    "HasLatePayments" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationGroup (OID = 18164) :
--
CREATE TABLE public."OrganisationGroup" (
    "OrganisationGroupID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "GroupName" varchar(300) NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "ParentID" uuid,
    "ParentOrganisationGroupID" uuid,
    "ParentRootGroupID" uuid,
    "IsManaged" boolean DEFAULT false NOT NULL,
    "GroupTypeID" integer,
    "GroupSubTypeID" integer,
    "GroupCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "GroupDescription" varchar(2000),
    "GroupSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table OrganisationGroupRole (OID = 18174) :
--
CREATE TABLE public."OrganisationGroupRole" (
    "OrganisationGroupID" uuid NOT NULL,
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationInsuranceDetails (OID = 18179) :
--
CREATE TABLE public."OrganisationInsuranceDetails" (
    "OrganisationID" uuid,
    "InsuranceProviderID" integer,
    "InsuranceProviderName" varchar(500),
    "InsuranceTypeID" integer,
    "PolicyNumber" varchar(100),
    "PolicyRenewalDate" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationLedgerAccount (OID = 18187) :
--
CREATE TABLE public."OrganisationLedgerAccount" (
    "OrganisationLedgerAccountID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "LedgerAccountTypeID" integer NOT NULL,
    "LedgerAccountCategoryID" integer,
    "Name" varchar(3000),
    "Description" varchar(3000),
    "ParentID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(150) NOT NULL,
    "Balance" numeric(30,8) DEFAULT 0 NOT NULL,
    "UpdatedOn" timestamp without time zone,
    "HandlesCredit" boolean DEFAULT false NOT NULL,
    "HandlesDebit" boolean DEFAULT false NOT NULL,
    "OpenedOn" timestamp without time zone,
    "ClosedOn" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "AccountingTypeID" integer NOT NULL,
    "IsPrimaryAccount" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationPaymentMethod (OID = 18200) :
--
CREATE TABLE public."OrganisationPaymentMethod" (
    "OrganisationID" uuid NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrganisationBankAccountId" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDirectDebit" boolean DEFAULT true NOT NULL,
    "IsBACS" boolean DEFAULT false NOT NULL,
    "OrganisationDirectDebitMandateID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "DirectDebitMonthCollectionPeriodNumber" integer,
    "BACSMonthPaymentDay" integer,
    "DirectDebitNumberOfNotificationDaysBeforeCollection" integer,
    "BACSNumberOfNotificationDaysBeforeExpectationOfPayment" integer
)
WITH (oids = false);
--
-- Structure for table OrganisationPlanSubscription (OID = 18208) :
--
CREATE TABLE public."OrganisationPlanSubscription" (
    "OrganisationID" uuid NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationProductPurchase (OID = 18213) :
--
CREATE TABLE public."OrganisationProductPurchase" (
    "OrganisationID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationRole (OID = 18216) :
--
CREATE TABLE public."OrganisationRole" (
    "OrganisationRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "ParentOrganisationRoleID" uuid,
    "RoleName" varchar(300) NOT NULL,
    "ParentRootRoleID" uuid,
    "IsManaged" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleDescription" varchar(2000),
    "RoleSubCategoryID" integer,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationRoleClaim (OID = 18226) :
--
CREATE TABLE public."OrganisationRoleClaim" (
    "OrganisationRoleClaimID" serial NOT NULL,
    "OrganisationRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationSetting (OID = 18233) :
--
CREATE TABLE public."OrganisationSetting" (
    "OrganisationSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationSettingTemplate (OID = 18241) :
--
CREATE TABLE public."OrganisationSettingTemplate" (
    "OrganisationSettingTemplateID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationShoppingCartBlueprint (OID = 18249) :
--
CREATE TABLE public."OrganisationShoppingCartBlueprint" (
    "OrganisationID" uuid,
    "ShoppingCartBlueprintID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationStatus (OID = 18254) :
--
CREATE TABLE public."OrganisationStatus" (
    "OrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "StatusChangedOn" timestamp without time zone NOT NULL,
    "StatusChangedBy" varchar(200) NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table OrganisationStatusType (OID = 18257) :
--
CREATE TABLE public."OrganisationStatusType" (
    "OrganisationStatusTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationStructure (OID = 18263) :
--
CREATE TABLE public."OrganisationStructure" (
    "OrganisationStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentOrganisationStructureID" uuid,
    "Name" varchar(100),
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeam (OID = 18270) :
--
CREATE TABLE public."OrganisationTeam" (
    "OrganisationTeamID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar,
    "EmailAddress" varchar,
    "IsDefault" boolean DEFAULT false NOT NULL,
    "TeamTypeID" integer,
    "TeamSubTypeID" integer,
    "TeamCategoryID" integer,
    "TeamSubCategoryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeamSetting (OID = 18280) :
--
CREATE TABLE public."OrganisationTeamSetting" (
    "OrganisationTeamSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "OrganisationTeamID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationTeamSettingTemplate (OID = 18288) :
--
CREATE TABLE public."OrganisationTeamSettingTemplate" (
    "OrganisationTeamSettingID" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence OrganisationTeam_OrganisationTeamID_seq (OID = 18296) :
--
CREATE SEQUENCE public."OrganisationTeam_OrganisationTeamID_seq"
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Structure for table OrganisationTradingName (OID = 18298) :
--
CREATE TABLE public."OrganisationTradingName" (
    "OrganisationTradingNameID" integer NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationType (OID = 18303) :
--
CREATE TABLE public."OrganisationType" (
    "OrganisationTypeID" integer DEFAULT nextval(('public.organisationtype_organisationtypeid_seq'::text)::regclass) NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnit (OID = 18312) :
--
CREATE TABLE public."OrganisationUnit" (
    "OrganisationUnitID" serial NOT NULL,
    "Name" varchar(50) NOT NULL,
    "Description" varchar(500),
    "DivisionName" varchar(500),
    "OrganisationID" uuid,
    "OrganisationUnitTypeID" integer,
    "OrganisationUnitCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitOrganisationGroup (OID = 18320) :
--
CREATE TABLE public."OrganisationUnitOrganisationGroup" (
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitOrganisationRole (OID = 18325) :
--
CREATE TABLE public."OrganisationUnitOrganisationRole" (
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUnitStructure (OID = 18330) :
--
CREATE TABLE public."OrganisationUnitStructure" (
    "OrganisationUnitStructureID" serial NOT NULL,
    "OrganisationUnitID" integer NOT NULL,
    "OrganisationID" uuid,
    "ParentOrganisationUnitStructureID" integer,
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "Name" varchar(100) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationUserType (OID = 18340) :
--
CREATE TABLE public."OrganisationUserType" (
    "OrganisationID" uuid NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsForDefaultUser" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table OrganisationWorkflow (OID = 18346) :
--
CREATE TABLE public."OrganisationWorkflow" (
    "OrganisationWorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OrganisationID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "VersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table Package (OID = 18352) :
--
CREATE TABLE public."Package" (
    "PackageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageVersionNumber" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProduct (OID = 18358) :
--
CREATE TABLE public."PackageProduct" (
    "PackageProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageID" uuid NOT NULL,
    "UseProductDefaultBlueprint" boolean DEFAULT false NOT NULL,
    "UseDefaultProductPricing" boolean DEFAULT false NOT NULL,
    "IsFixedPrice" boolean DEFAULT false NOT NULL,
    "ProductPriceModifierPercentage" numeric NOT NULL,
    "ProductPriceModifierValue" numeric NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "UserDefinableQuantity" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageVersionNumber" integer NOT NULL,
    "RelatedProductProductAttributeID" uuid
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationship (OID = 18372) :
--
CREATE TABLE public."PackageProductRelationship" (
    "PackageProductRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductID" uuid NOT NULL,
    "ChildProductID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipBlueprint (OID = 18379) :
--
CREATE TABLE public."PackageProductRelationshipBlueprint" (
    "PackageProductRelationshipBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductRelationshipID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipBlueprintTemplate (OID = 18386) :
--
CREATE TABLE public."PackageProductRelationshipBlueprintTemplate" (
    "PackageProductRelationshipBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductRelationshipTemplateID" uuid,
    "DefaultQuantity" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductRelationshipTemplate (OID = 18392) :
--
CREATE TABLE public."PackageProductRelationshipTemplate" (
    "PackageProductRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductTemplateID" uuid NOT NULL,
    "ChildProductTemplateID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductSpecificationBlueprint (OID = 18399) :
--
CREATE TABLE public."PackageProductSpecificationBlueprint" (
    "PackageProductSpecificationBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DefaultProductSpecificationAttributeOptionID" uuid NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductSpecificationBlueprintTemplate (OID = 18405) :
--
CREATE TABLE public."PackageProductSpecificationBlueprintTemplate" (
    "PackageProductSpecificationBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeTemplate" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PackageProductTemplate (OID = 18411) :
--
CREATE TABLE public."PackageProductTemplate" (
    "PackageProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "UseProductDefaultBlueprint" boolean DEFAULT true NOT NULL,
    "UseDefaultProductPricing" boolean DEFAULT true NOT NULL,
    "IsFixedPrice" boolean DEFAULT false NOT NULL,
    "ProductPriceModifierPercentage" numeric NOT NULL,
    "ProductPriceModifierValue" numeric NOT NULL,
    "DefaultQuantity" integer NOT NULL,
    "UserDefinableQuantity" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL,
    "RelatedProductProductAttributeTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table PackageTemplate (OID = 18424) :
--
CREATE TABLE public."PackageTemplate" (
    "PackageTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PasswordResetSecrets (OID = 18430) :
--
CREATE TABLE public."PasswordResetSecrets" (
    "PasswordResetSecretID" uuid NOT NULL,
    "QuestionID" integer NOT NULL,
    "Answer" varchar(150) NOT NULL,
    "UserAccount_ID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Plan (OID = 18435) :
--
CREATE TABLE public."Plan" (
    "PlanID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8) DEFAULT 0 NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "TrialPeriod" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer DEFAULT 0 NOT NULL,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean DEFAULT false NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "PlanStatusID" integer NOT NULL,
    "IsTransactionBased" boolean DEFAULT false NOT NULL,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean DEFAULT false,
    "HasForwardCycleFee" boolean DEFAULT false,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFreeIsSameAsPrice" numeric(30,8),
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean DEFAULT false,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean DEFAULT false,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer NOT NULL,
    "PlanTypeID" integer,
    "PlanCategoryID" integer NOT NULL,
    "ModifiedOn" date,
    "ModifiedBy" varchar(200)
)
WITH (oids = false);
--
-- Structure for table PlanBilling (OID = 18455) :
--
CREATE TABLE public."PlanBilling" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "BillingID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultBilling" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanBillingTemplate (OID = 18461) :
--
CREATE TABLE public."PlanBillingTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "BillingTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsDefaultBilling" boolean DEFAULT true NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanDiscount (OID = 18467) :
--
CREATE TABLE public."PlanDiscount" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanDiscountTemplate (OID = 18472) :
--
CREATE TABLE public."PlanDiscountTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanGlobalPaymentMethod (OID = 18477) :
--
CREATE TABLE public."PlanGlobalPaymentMethod" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsDefaultPaymentMethod" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BillingID" uuid
)
WITH (oids = false);
--
-- Structure for table PlanGlobalPaymentMethodTemplate (OID = 18483) :
--
CREATE TABLE public."PlanGlobalPaymentMethodTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "IsDefaultPaymentMethod" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BillingTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table PlanGroup (OID = 18489) :
--
CREATE TABLE public."PlanGroup" (
    "PlanGroupID" integer DEFAULT nextval(('public.plangroup_plangroupid_seq'::text)::regclass) NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ParentID" uuid,
    "HasSameGlobalPaymentMethodForAllPlans" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanProduct (OID = 18497) :
--
CREATE TABLE public."PlanProduct" (
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanProductStatusID" integer
)
WITH (oids = false);
--
-- Structure for table PlanProductTemplate (OID = 18503) :
--
CREATE TABLE public."PlanProductTemplate" (
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "PlanProductStatusID" integer
)
WITH (oids = false);
--
-- Structure for table PlanSubscription (OID = 18509) :
--
CREATE TABLE public."PlanSubscription" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "PlanQuantity" integer DEFAULT 1 NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200),
    "ActivatedOn" timestamp without time zone,
    "CancelledOn" timestamp without time zone,
    "CancelReasonID" integer,
    "DueInvoicesCount" integer,
    "DueSince" timestamp without time zone,
    "DueAmount" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "CountryCode" varchar(300) NOT NULL,
    "IsFree" boolean DEFAULT false NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ParentVersionNumber" integer,
    "OrganisationID" uuid NOT NULL,
    "IsRenewal" boolean DEFAULT false NOT NULL,
    "RenewedOn" timestamp without time zone,
    "PlanSubscriptionReference" varchar(50)
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionBillingProcessLog (OID = 18521) :
--
CREATE TABLE public."PlanSubscriptionBillingProcessLog" (
    "BillingPeriodNumber" integer NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "PlanSubscriptionBillingPeriodID" uuid NOT NULL,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "ClosedOn" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionPaymentPlan (OID = 18527) :
--
CREATE TABLE public."PlanSubscriptionPaymentPlan" (
    "PlanSubscriptionPaymentPlanID" uuid NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "BillingID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionPeriod (OID = 18532) :
--
CREATE TABLE public."PlanSubscriptionPeriod" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone NOT NULL,
    "IsCancellationPeriod" boolean DEFAULT false NOT NULL,
    "CancellationPeriodNumber" integer,
    "PeriodNumber" integer NOT NULL,
    "IsTrialPeriod" boolean DEFAULT false NOT NULL,
    "TrialPeriodNumber" integer,
    "TrialStartDate" timestamp without time zone,
    "TrialEndDate" timestamp without time zone,
    "CancellationStartDate" timestamp without time zone,
    "CancellationEndDate" timestamp without time zone,
    "PlanSubscriptionPeriodID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionBillingPeriodID" uuid,
    "ClosedOn" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table PlanSubscriptionProcessLog (OID = 18540) :
--
CREATE TABLE public."PlanSubscriptionProcessLog" (
    "PlanSubscriptionID" uuid NOT NULL,
    "PlanSubscriptionVersionNumber" integer NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsRenewed" boolean DEFAULT false NOT NULL,
    "PlanSubscriptionStatusDetail" varchar(2000),
    "StatusTypeValueID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTemplate (OID = 18548) :
--
CREATE TABLE public."PlanTemplate" (
    "PlanTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8) DEFAULT 0 NOT NULL,
    "Period" integer DEFAULT 1 NOT NULL,
    "TrialPeriod" integer DEFAULT 1 NOT NULL,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer DEFAULT 0 NOT NULL,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CountryCode" varchar(300) NOT NULL,
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean DEFAULT false NOT NULL,
    "HasInfinitePeriods" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "PlanStatusID" integer NOT NULL,
    "IsTransactionBased" boolean DEFAULT false NOT NULL,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean DEFAULT false,
    "HasForwardCycleFee" boolean DEFAULT false,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFeeIsSameAsPrice" boolean DEFAULT false,
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean DEFAULT false,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean DEFAULT false,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionPeriodUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer,
    "PlanTypeID" integer,
    "PlanCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table PlanTransaction (OID = 18569) :
--
CREATE TABLE public."PlanTransaction" (
    "PlanTransactionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsTotalValuePricingBound" boolean DEFAULT false,
    "IsTransactionCountPricingBound" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "ApplyTransactionTierPricingPerTransaction" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionComponentTier (OID = 18578) :
--
CREATE TABLE public."PlanTransactionComponentTier" (
    "ComponentTierID" uuid NOT NULL,
    "PlanTransactionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionComponentTierTemplate (OID = 18581) :
--
CREATE TABLE public."PlanTransactionComponentTierTemplate" (
    "ComponentTierTemplateID" uuid NOT NULL,
    "PlanTransactionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table PlanTransactionTemplate (OID = 18584) :
--
CREATE TABLE public."PlanTransactionTemplate" (
    "PlanTransactionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsTotalValuePricingBound" boolean DEFAULT false,
    "IsTransactionCountPricingBound" boolean DEFAULT false,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ParentID" uuid,
    "ApplyTransactionTierPricingPerTransaction" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Plugin (OID = 18593) :
--
CREATE TABLE public."Plugin" (
    "PluginID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PluginVersionNumber" integer NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar,
    "Version" varchar(50),
    "VersionNumber" integer NOT NULL,
    "Author" varchar(200),
    "SystemName" varchar(2000),
    "DisplayOrder" integer NOT NULL,
    "PluginFileName" varchar(2000) NOT NULL,
    "PluginTemplateID" uuid NOT NULL,
    "PluginTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PluginTemplate (OID = 18602) :
--
CREATE TABLE public."PluginTemplate" (
    "PluginTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PluginTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar,
    "Version" varchar(50),
    "VersionNumber" integer NOT NULL,
    "Author" varchar(200),
    "SystemName" varchar(2000),
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "PluginFileName" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Product (OID = 18613) :
--
CREATE TABLE public."Product" (
    "ProductID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPackage" boolean DEFAULT false NOT NULL,
    "IsDeposit" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ProductTemplateVersionID" integer NOT NULL,
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "CanBeResold" boolean DEFAULT false NOT NULL,
    "IsDeductionProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductAttribute (OID = 18623) :
--
CREATE TABLE public."ProductAttribute" (
    "ProductAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductAttributeTemplate (OID = 18632) :
--
CREATE TABLE public."ProductAttributeTemplate" (
    "ProductAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductBusTask (OID = 18641) :
--
CREATE TABLE public."ProductBusTask" (
    "ProductBusTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskID" uuid,
    "Order" bigint DEFAULT 0 NOT NULL,
    "BusTaskVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table ProductBusTaskTemplate (OID = 18648) :
--
CREATE TABLE public."ProductBusTaskTemplate" (
    "ProductBusTaskTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "BusTaskID" uuid,
    "Order" integer DEFAULT 0 NOT NULL,
    "BusTaskVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table ProductClaim (OID = 18655) :
--
CREATE TABLE public."ProductClaim" (
    "ProductClaimID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "RoleID" uuid,
    "ProductRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductClaimTemplate (OID = 18660) :
--
CREATE TABLE public."ProductClaimTemplate" (
    "ProductClaimTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "RoleID" uuid,
    "ProductRoleTemplateID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductComponentTier (OID = 18665) :
--
CREATE TABLE public."ProductComponentTier" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ComponentTierID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductComponentTierTemplate (OID = 18668) :
--
CREATE TABLE public."ProductComponentTierTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ComponentTierTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDeduction (OID = 18671) :
--
CREATE TABLE public."ProductDeduction" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DeductionID" uuid NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductDeductionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDeductionTemplate (OID = 18677) :
--
CREATE TABLE public."ProductDeductionTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DeductionTemplateID" uuid NOT NULL,
    "DeductionPercentage" numeric(30,8),
    "DeductionValue" numeric(30,8),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductDeductionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "DeductionTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetail (OID = 18683) :
--
CREATE TABLE public."ProductDetail" (
    "ProductDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "ProductID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "RequireOtherProducts" boolean DEFAULT false NOT NULL,
    "AutomaticallyAddRequiredProducts" boolean DEFAULT false NOT NULL,
    "HasUserAgreement" boolean DEFAULT false NOT NULL,
    "UserAgreementText" varchar,
    "IsRecurring" boolean DEFAULT false NOT NULL,
    "RecurringCycleLength" integer NOT NULL,
    "RecurringCyclePeriodID" integer NOT NULL,
    "RecurringTotalCycle" integer NOT NULL,
    "IsTaxExempt" boolean DEFAULT false,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer DEFAULT 0 NOT NULL,
    "OrderMaximumQuantity" integer DEFAULT 0 NOT NULL,
    "CallForPrice" boolean DEFAULT false NOT NULL,
    "Price" numeric NOT NULL,
    "ProductCost" numeric NOT NULL,
    "CustomerEntersPrice" boolean DEFAULT false NOT NULL,
    "HasTierPrices" boolean DEFAULT false NOT NULL,
    "HasDiscountsApplied" boolean DEFAULT false NOT NULL,
    "MinimumCustomerEnteredPrice" numeric NOT NULL,
    "MaximumCustomerEnteredPrice" numeric NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer NOT NULL,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "ProductVersionID" integer NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRate" numeric,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetailTemplate (OID = 18704) :
--
CREATE TABLE public."ProductDetailTemplate" (
    "ProductDetailTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "AutomaticallyAddRequiredProducts" boolean DEFAULT false NOT NULL,
    "HasUserAgreement" boolean DEFAULT false NOT NULL,
    "UserAgreementText" varchar,
    "IsRecurring" boolean DEFAULT false NOT NULL,
    "RecurringCycleLength" integer DEFAULT 0 NOT NULL,
    "RecurringCyclePeriodID" integer DEFAULT 0 NOT NULL,
    "RecurringTotalCycles" integer DEFAULT 0 NOT NULL,
    "IsTaxExempt" boolean DEFAULT false NOT NULL,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer DEFAULT 0 NOT NULL,
    "OrderMaximumQuantity" integer DEFAULT 0 NOT NULL,
    "CallForPrice" boolean DEFAULT false NOT NULL,
    "Price" numeric NOT NULL,
    "ProductCost" numeric NOT NULL,
    "CustomerEntersPrice" boolean DEFAULT false NOT NULL,
    "HasTierPrices" boolean DEFAULT false NOT NULL,
    "HasDiscountsApplied" boolean DEFAULT false NOT NULL,
    "MinimumCustomerEnteredPrice" numeric DEFAULT 0 NOT NULL,
    "MaximumCustomerEnteredPrice" numeric DEFAULT 0 NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer NOT NULL,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "RequireOtherProducts" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "CurrencyCode" varchar(30),
    "CurrencyRate" numeric NOT NULL,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDiscount (OID = 18730) :
--
CREATE TABLE public."ProductDiscount" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DiscountID" uuid NOT NULL,
    "DiscountVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDiscountTemplate (OID = 18735) :
--
CREATE TABLE public."ProductDiscountTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "DiscountTemplateID" uuid NOT NULL,
    "DiscountTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamily (OID = 18740) :
--
CREATE TABLE public."ProductFamily" (
    "ProductFamilyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyProductPackage (OID = 18749) :
--
CREATE TABLE public."ProductFamilyProductPackage" (
    "ProductFamilyProductPackageID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductFamilyID" uuid NOT NULL,
    "PackageProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageID" uuid NOT NULL,
    "PackageVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyProductPackageTemplate (OID = 18753) :
--
CREATE TABLE public."ProductFamilyProductPackageTemplate" (
    "ProductFamilyProductPackageTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "PackageProductTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductFamilyTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PackageTemplateID" uuid NOT NULL,
    "PackageTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductFamilyTemplate (OID = 18757) :
--
CREATE TABLE public."ProductFamilyTemplate" (
    "ProductFamilyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPlan (OID = 18766) :
--
CREATE TABLE public."ProductPlan" (
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PlanID" uuid NOT NULL,
    "PlanVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPlanTemplate (OID = 18771) :
--
CREATE TABLE public."ProductPlanTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "PlanTemplateID" uuid NOT NULL,
    "PlanTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductProductAttribute (OID = 18776) :
--
CREATE TABLE public."ProductProductAttribute" (
    "ProductProductAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductAttributeID" uuid NOT NULL,
    "IsRequired" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductProductAttributeTemplate (OID = 18783) :
--
CREATE TABLE public."ProductProductAttributeTemplate" (
    "ProductProductAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductAttributeTemplateID" uuid NOT NULL,
    "IsRequired" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPurchase (OID = 18791) :
--
CREATE TABLE public."ProductPurchase" (
    "ProductPurchaseID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL,
    "PurchaseDate" timestamp without time zone NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseBusTaskProcessDetail (OID = 18795) :
--
CREATE TABLE public."ProductPurchaseBusTaskProcessDetail" (
    "ProductPurchaseBusTaskProcessDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseProductTaskID" uuid,
    "StartDate" timestamp without time zone NOT NULL,
    "EndDate" timestamp without time zone,
    "CreatedBy" varchar DEFAULT 200,
    "MessageDetail" varchar,
    "MessageJsonDetail" json,
    "MessageAdditionalDetail" varchar,
    "MessageJsonAdditionalDetail" json,
    "TaskDataHasExpiry" boolean DEFAULT false NOT NULL,
    "TaskDataExpiryDate" timestamp without time zone,
    "ProcessDataTypeID" integer,
    "ProcessDataCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseBusTaskProcessLog (OID = 18806) :
--
CREATE TABLE public."ProductPurchaseBusTaskProcessLog" (
    "ProductPurchaseProductTaskID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "ProcessMessage" varchar(2000) NOT NULL,
    "ProcessDetail" json NOT NULL,
    "ProductBusTaskID" uuid,
    "HasError" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0 NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseProcessLog (OID = 18816) :
--
CREATE TABLE public."ProductPurchaseProcessLog" (
    "ProductPurchaseProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "ProductPurchaseID" uuid NOT NULL,
    "ProcessMessage" varchar(2000),
    "ProcessDetail" json,
    "HasError" boolean DEFAULT false NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer DEFAULT 0,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ProductPurchaseReference (OID = 18826) :
--
CREATE TABLE public."ProductPurchaseReference" (
    "ProductPurchaseReferenceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseReferenceTypeID" integer NOT NULL,
    "ProductPurchaseReferenceValue" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InvoiceLineItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationship (OID = 18832) :
--
CREATE TABLE public."ProductRelationship" (
    "ProductRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductID" uuid NOT NULL,
    "ChildProductID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipBlueprint (OID = 18839) :
--
CREATE TABLE public."ProductRelationshipBlueprint" (
    "ProductRelationshipBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductRelationshipID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipBlueprintTemplate (OID = 18846) :
--
CREATE TABLE public."ProductRelationshipBlueprintTemplate" (
    "ProductRelationshipBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductRelationshipTemplateID" uuid NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRelationshipTemplate (OID = 18853) :
--
CREATE TABLE public."ProductRelationshipTemplate" (
    "ProductRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentProductTemplateID" uuid NOT NULL,
    "ChildProductTemplateID" uuid NOT NULL,
    "ProductRelationshipTypeID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentProductVersionID" integer NOT NULL,
    "ChildProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRole (OID = 18860) :
--
CREATE TABLE public."ProductRole" (
    "ProductRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductRoleTemplate (OID = 18868) :
--
CREATE TABLE public."ProductRoleTemplate" (
    "ProductRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttribute (OID = 18876) :
--
CREATE TABLE public."ProductSpecificationAttribute" (
    "ProductSpecificationAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "IsMultiSelect" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "MinimumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "MaximumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "IsUserDefined" boolean DEFAULT false NOT NULL,
    "IsPriceDriven" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeOption (OID = 18890) :
--
CREATE TABLE public."ProductSpecificationAttributeOption" (
    "ProductSpecificationAttributeOptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "SpecficiationAttributeOptionID" uuid NOT NULL,
    "PriceAdjustment" numeric DEFAULT 0 NOT NULL,
    "WeightAdjustment" numeric,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "DefaultValue" numeric DEFAULT 0 NOT NULL,
    "DefaultQuantity" integer DEFAULT 0 NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeOptionTemplate (OID = 18904) :
--
CREATE TABLE public."ProductSpecificationAttributeOptionTemplate" (
    "SpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "PriceAdjustement" numeric DEFAULT 0 NOT NULL,
    "WeightAdjustment" numeric,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "DefaultValue" numeric DEFAULT 0 NOT NULL,
    "DefaultQuantity" numeric NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT false NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeOptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationAttributeTemplate (OID = 18917) :
--
CREATE TABLE public."ProductSpecificationAttributeTemplate" (
    "ProductTemplateID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsMultiSelect" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "MinimumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "MaximumSelectionLimit" integer DEFAULT 0 NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsUserDefined" boolean DEFAULT false NOT NULL,
    "IsPriceDriven" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationBlueprint (OID = 18931) :
--
CREATE TABLE public."ProductSpecificationBlueprint" (
    "ProductSpecificationBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductSpecificationBlueprintTemplate (OID = 18937) :
--
CREATE TABLE public."ProductSpecificationBlueprintTemplate" (
    "ProductSpecificationBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductSpecificationAttributeTemplateID" uuid NOT NULL,
    "DefaultProductSpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTag (OID = 18943) :
--
CREATE TABLE public."ProductTag" (
    "ProductTagID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTagTemplate (OID = 18947) :
--
CREATE TABLE public."ProductTagTemplate" (
    "ProductTagTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductTemplate (OID = 18951) :
--
CREATE TABLE public."ProductTemplate" (
    "ProductTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsPackage" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ParentID" uuid,
    "OwnerOrganisationID" uuid,
    "IsDefaultTemplate" boolean DEFAULT false NOT NULL,
    "CanBeResold" boolean DEFAULT false NOT NULL,
    "IsDeductionProduct" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeCombination (OID = 18961) :
--
CREATE TABLE public."ProductVariantAttributeCombination" (
    "ProductVariantAttributeCombinationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductID" uuid NOT NULL,
    "AllowOutOfStockOrders" boolean DEFAULT false NOT NULL,
    "StockQuantity" integer DEFAULT 0 NOT NULL,
    "Sku" varchar(4000),
    "ManufacturerPartNumber" varchar(4000),
    "Gtin" varchar(4000),
    "OverridenPrice" numeric NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeCombinationTemplate (OID = 18972) :
--
CREATE TABLE public."ProductVariantAttributeCombinationTemplate" (
    "ProductVariantAttributeCombinationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "AllowOutOfStockOrders" boolean DEFAULT false NOT NULL,
    "StockQuantity" integer NOT NULL,
    "Sku" varchar(4000),
    "ManufacturerPartNumber" varchar(4000),
    "Gtin" varchar(4000),
    "OverriddenPrice" numeric DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductVersionID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeValue (OID = 18983) :
--
CREATE TABLE public."ProductVariantAttributeValue" (
    "ProductVariantAttributeValueID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductProductAttributeID" uuid,
    "AttributeValueTypeID" integer,
    "Name" varchar(400) NOT NULL,
    "PriceAdjustment" numeric,
    "WeightAdjustement" numeric DEFAULT 0,
    "Cost" numeric DEFAULT 0 NOT NULL,
    "Quantity" integer DEFAULT 0 NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductVariantAttributeValueTemplate (OID = 18997) :
--
CREATE TABLE public."ProductVariantAttributeValueTemplate" (
    "ProductVariantAttributeValueTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductProductAttributeTemplateID" uuid NOT NULL,
    "AttributeValueTypeID" integer,
    "Name" varchar(400) NOT NULL,
    "PriceAdjustment" numeric,
    "WeightAdjustment" numeric DEFAULT 0,
    "Cost" numeric NOT NULL,
    "Quantity" integer NOT NULL,
    "IsPreSelected" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RelationshipRole (OID = 19008) :
--
CREATE TABLE public."RelationshipRole" (
    "RelationshipRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar,
    "RelationshipRoleStatusID" integer NOT NULL,
    "RelationshipRoleStateID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Repository (OID = 19017) :
--
CREATE TABLE public."Repository" (
    "RepositoryID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "OwnerID" uuid NOT NULL,
    "Name" varchar(256) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructure (OID = 19026) :
--
CREATE TABLE public."RepositoryStructure" (
    "RepositoryStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RepositoryID" uuid NOT NULL,
    "OwnerID" uuid NOT NULL,
    "ParentRepositoryStructureID" uuid,
    "IsLeafNode" boolean DEFAULT false NOT NULL,
    "Name" varchar(256) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructureGroup (OID = 19033) :
--
CREATE TABLE public."RepositoryStructureGroup" (
    "RepositoryStructureID" uuid NOT NULL,
    "OrganisationGroupID" uuid,
    "OrganisationExternalGroupID" uuid,
    "RepositoryStructureGroupID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table RepositoryStructureRole (OID = 19040) :
--
CREATE TABLE public."RepositoryStructureRole" (
    "RepositoryStructureID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "RepositoryStructureRoleID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Resource (OID = 19047) :
--
CREATE TABLE public."Resource" (
    "ResourceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ResourceName" varchar(150) NOT NULL,
    "ResourceDescription" varchar(500),
    "SourceID" uuid,
    "ResourceTypeID" integer,
    "ResourceCategoryID" integer,
    "ResourceSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table ResourceOperation (OID = 19056) :
--
CREATE TABLE public."ResourceOperation" (
    "ResourceID" uuid NOT NULL,
    "OperationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ResourceOperationTarget (OID = 19059) :
--
CREATE TABLE public."ResourceOperationTarget" (
    "ResourceID" uuid NOT NULL,
    "OperationID" uuid NOT NULL,
    "OrganisationTypeID" integer,
    "UserTypeID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Role (OID = 19064) :
--
CREATE TABLE public."Role" (
    "RoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500) NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table RoleClaim (OID = 19074) :
--
CREATE TABLE public."RoleClaim" (
    "RoleClaimID" integer DEFAULT nextval('"RoleTemplateClaim_RoleTemplateClaimID_seq"'::regclass) NOT NULL,
    "RoleID" uuid NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT true
)
WITH (oids = false);
--
-- Structure for table ServiceDefinition (OID = 19082) :
--
CREATE TABLE public."ServiceDefinition" (
    "ServiceDefinitionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ServiceDefinitionTypeID" integer NOT NULL,
    "ServiceDefinitionCategoryID" integer,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ServiceInterfaceID" uuid NOT NULL,
    "IsPollingService" boolean DEFAULT false NOT NULL,
    "NumberOfRetriesPerCall" integer DEFAULT 1 NOT NULL,
    "ServiceEngineObjectName" varchar(1000),
    "ServiceDefinitionObjectName" varchar(1000),
    "ServiceMutatorObjectName" varchar(1000),
    "RetryPeriodPerCallInMinutes" integer DEFAULT 180,
    "RetryFailedCalls" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table ServiceDefinitionDetail (OID = 19093) :
--
CREATE TABLE public."ServiceDefinitionDetail" (
    "ServiceDefinitionDetailID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "EnvironmentName" varchar(50),
    "ServicePartialURL" varchar(500) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ServiceDefinitionID" uuid NOT NULL,
    "ServerURL" varchar(500) NOT NULL
)
WITH (oids = false);
--
-- Structure for table ServiceInterface (OID = 19102) :
--
CREATE TABLE public."ServiceInterface" (
    "ServiceInterfaceID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "ServiceInterfaceTypeID" integer NOT NULL,
    "ServiceInterfaceCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ServiceInterfaceProcessLog (OID = 19111) :
--
CREATE TABLE public."ServiceInterfaceProcessLog" (
    "ServiceInterfaceProcessLogID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ProductPurchaseProductTaskID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsComplete" boolean DEFAULT false NOT NULL,
    "NumberOfRetries" integer,
    "HasError" boolean DEFAULT false NOT NULL,
    "ServiceDefinitionID" uuid NOT NULL,
    "ParentID" uuid,
    "ProcessDetail" json,
    "ProcessMessage" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table ServiceProvider (OID = 19120) :
--
CREATE TABLE public."ServiceProvider" (
    "ServiceProviderID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Setting (OID = 19126) :
--
CREATE TABLE public."Setting" (
    "Id" serial NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Value" varchar(2000) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCart (OID = 19136) :
--
CREATE TABLE public."ShoppingCart" (
    "ShoppingCartID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "CreatedOn" date NOT NULL,
    "HasBeenConvertedToTransactionOrder" boolean DEFAULT false NOT NULL,
    "HasExpired" boolean DEFAULT false NOT NULL,
    "CurrencyCode" varchar(30) NOT NULL,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric(30,8) DEFAULT 0 NOT NULL,
    "CurrencyRateToGBP" numeric(30,8) NOT NULL,
    "CurrencyRateToUSD" numeric(30,8) NOT NULL,
    "CountryCode" varchar(30),
    "PaymentCardTypeID" integer NOT NULL,
    "PaymentMethodTypeID" integer NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrganisationID" uuid,
    "UserAccountOrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprint (OID = 19144) :
--
CREATE TABLE public."ShoppingCartBlueprint" (
    "ShoppingCartBlueprintID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Name" varchar(400)
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintProduct (OID = 19150) :
--
CREATE TABLE public."ShoppingCartBlueprintProduct" (
    "ShoppingCartBlueprintID" uuid NOT NULL,
    "ProductID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Quantity" integer DEFAULT 1 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintProductTemplate (OID = 19156) :
--
CREATE TABLE public."ShoppingCartBlueprintProductTemplate" (
    "ShoppingCartBlueprintTemplateID" uuid NOT NULL,
    "ProductTemplateID" uuid NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "Quantity" integer DEFAULT 1 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartBlueprintTemplate (OID = 19162) :
--
CREATE TABLE public."ShoppingCartBlueprintTemplate" (
    "ShoppingCartBlueprintTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ParentID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "Name" varchar(400)
)
WITH (oids = false);
--
-- Structure for table ShoppingCartDeduction (OID = 19168) :
--
CREATE TABLE public."ShoppingCartDeduction" (
    "ShoppingCartID" uuid NOT NULL,
    "CountryDeductionID" uuid NOT NULL,
    "DeductionID" uuid NOT NULL,
    "DeductionVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItem (OID = 19171) :
--
CREATE TABLE public."ShoppingCartItem" (
    "ShoppingCartItemID" uuid NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "ProductID" uuid NOT NULL,
    "Quantity" integer NOT NULL,
    "ProductVersionID" integer NOT NULL,
    "ShoppingCartID" uuid NOT NULL,
    "InvoiceLineItemID" uuid,
    "AccountID" uuid
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItemProductAttribute (OID = 19176) :
--
CREATE TABLE public."ShoppingCartItemProductAttribute" (
    "ShoppingCartItemProductAttributeID" uuid NOT NULL,
    "ProductVariantAttributeValueID" uuid,
    "Quantity" numeric(30,8) DEFAULT 0 NOT NULL,
    "ShoppingCartItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table ShoppingCartItemProductSpecification (OID = 19180) :
--
CREATE TABLE public."ShoppingCartItemProductSpecification" (
    "ShoppingCartItemProductSpecificationID" uuid NOT NULL,
    "ProductSpecificationAttributeID" uuid NOT NULL,
    "ProductSpecificationAttributeOptionID" uuid NOT NULL,
    "Quantity" numeric(30,8) DEFAULT 0 NOT NULL,
    "ShoppingCartItemID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttribute (OID = 19184) :
--
CREATE TABLE public."SpecificationAttribute" (
    "SpecificationAttributeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "DisplayOrder" integer DEFAULT 0 NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTypeID" integer,
    "SpecificationAttributeCategoryID" integer,
    "SpecificationAttributeSubTypeID" integer,
    "SpecificationAttributeSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeOptionTemplate (OID = 19194) :
--
CREATE TABLE public."SpecificationAttributeOptionTemplate" (
    "SpecificationAttributeOptionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "Order" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeRelationship (OID = 19203) :
--
CREATE TABLE public."SpecificationAttributeRelationship" (
    "SpecificationAttributeRelationshipID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "ParentSpecificationAttributeID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsInverse" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeRelationshipTemplate (OID = 19211) :
--
CREATE TABLE public."SpecificationAttributeRelationshipTemplate" (
    "SpecificationAttributeRelationshipTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeTemplateID" uuid NOT NULL,
    "ParentSpecificationAttributeTemplateID" uuid NOT NULL,
    "IsMandatory" boolean DEFAULT false NOT NULL,
    "IsInverse" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificationAttributeTemplate (OID = 19219) :
--
CREATE TABLE public."SpecificationAttributeTemplate" (
    "SpecificationAttributeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "DisplayOrder" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "SpecificationAttributeTypeID" integer,
    "SpecificationAttributeCategoryID" integer,
    "SpecificationAttributeSubTypeID" integer,
    "SpecificationAttributeSubCategoryID" integer,
    "Order" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table SpecificiationAttributeOption (OID = 19228) :
--
CREATE TABLE public."SpecificiationAttributeOption" (
    "SpecficiationAttributeOptionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "SpecificationAttributeOptionTemplateID" uuid NOT NULL,
    "SpecificationAttributeID" uuid NOT NULL,
    "DisplayOrder" integer NOT NULL,
    "Name" varchar(1000) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table State (OID = 19237) :
--
CREATE TABLE public."State" (
    "StateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StateName" varchar(150) NOT NULL,
    "StateDescription" varchar(500),
    "StateTypeID" integer,
    "StateCategoryID" integer,
    "StateSubCategoryID" integer,
    "ParentStateID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table StateItem (OID = 19246) :
--
CREATE TABLE public."StateItem" (
    "StateItemID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StateItemName" varchar(150) NOT NULL,
    "StateItemDescription" varchar(500),
    "StateID" uuid NOT NULL,
    "SourceTableName" varchar(50),
    "SourceTableField" varchar(50),
    "SourceTableFieldValue" varchar(50),
    "ParentStateItemID" uuid,
    "StateItemOrder" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusType (OID = 19255) :
--
CREATE TABLE public."StatusType" (
    "StatusTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeClaim (OID = 19265) :
--
CREATE TABLE public."StatusTypeClaim" (
    "StatusTypeClaimID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid,
    "StatusTypeRoleID" uuid
)
WITH (oids = false);
--
-- Structure for table StatusTypeClaimTemplate (OID = 19271) :
--
CREATE TABLE public."StatusTypeClaimTemplate" (
    "StatusTypeClaimTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "RoleID" uuid,
    "StatusTypeRoleTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table StatusTypeRole (OID = 19277) :
--
CREATE TABLE public."StatusTypeRole" (
    "StatusTypeRoleID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeRoleTemplate (OID = 19286) :
--
CREATE TABLE public."StatusTypeRoleTemplate" (
    "StatusTypeRoleTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(500),
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructure (OID = 19295) :
--
CREATE TABLE public."StatusTypeStructure" (
    "StatusTypeStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid,
    "StatusOrder" integer DEFAULT 0 NOT NULL,
    "IsStart" boolean DEFAULT false NOT NULL,
    "IsEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTemplate (OID = 19302) :
--
CREATE TABLE public."StatusTypeStructureTemplate" (
    "StatusTypeStructureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "StatusTypeValueTemplateID" uuid,
    "StatusOrder" integer DEFAULT 0 NOT NULL,
    "IsStart" boolean DEFAULT false NOT NULL,
    "IsEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTransition (OID = 19309) :
--
CREATE TABLE public."StatusTypeStructureTransition" (
    "StatusTypeStructureTransitionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CurrentStatusTypeStructureID" uuid NOT NULL,
    "NextStatusTypeStructureID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeStructureTransitionTemplate (OID = 19313) :
--
CREATE TABLE public."StatusTypeStructureTransitionTemplate" (
    "StatusTypeStructureTransitionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "CurrentStatusTypeStructureTemplateID" uuid NOT NULL,
    "NextStatusTypeStructureTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeTemplate (OID = 19317) :
--
CREATE TABLE public."StatusTypeTemplate" (
    "StatusTypeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateVersionNumber" integer DEFAULT 1 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeValue (OID = 19327) :
--
CREATE TABLE public."StatusTypeValue" (
    "StatusTypeValueID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StatusTypeValueTemplate (OID = 19336) :
--
CREATE TABLE public."StatusTypeValueTemplate" (
    "StatusTypeValueTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Structure (OID = 19345) :
--
CREATE TABLE public."Structure" (
    "RepositoryMapID" uuid NOT NULL,
    "OrganisationRoleID" uuid,
    "OrganisationExternalRoleID" uuid,
    "StructureID" serial NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TFEvent (OID = 19352) :
--
CREATE TABLE public."TFEvent" (
    "TFEventID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TFEventName" varchar(100) NOT NULL,
    "TFEventDescription" varchar(2000),
    "TFEventTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table TFEventMessageSubscriber (OID = 19359) :
--
CREATE TABLE public."TFEventMessageSubscriber" (
    "TFEventMessageSubscriberID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "ObjectName" varchar(300) NOT NULL,
    "ObjectAssembly" varchar(300),
    "DefaultMessageSubscriberFilter" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table TFEventTFEventMessageSubscriber (OID = 19366) :
--
CREATE TABLE public."TFEventTFEventMessageSubscriber" (
    "TFEventID" uuid NOT NULL,
    "TFEventMessageSubscriberID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TFEventMessageSubscriberFilter" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table TFEventType (OID = 19374) :
--
CREATE TABLE public."TFEventType" (
    "TFEventTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL
)
WITH (oids = false);
--
-- Structure for table TaxRate (OID = 19378) :
--
CREATE TABLE public."TaxRate" (
    "OrganisationTaxRateID" uuid NOT NULL,
    "TaxRateTemplateID" uuid NOT NULL,
    "TaxCategoryID" integer NOT NULL,
    "TaxPercentage" numeric NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TaxRateTemplate (OID = 19386) :
--
CREATE TABLE public."TaxRateTemplate" (
    "TaxRateTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TaxCategoryID" integer NOT NULL,
    "TaxPercentage" numeric NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table Tenant (OID = 19395) :
--
CREATE TABLE public."Tenant" (
    "TenantID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TenantName" varchar(50) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TransactionLevelComponent (OID = 19401) :
--
CREATE TABLE public."TransactionLevelComponent" (
    "TransactionLevelComponentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsFixedFee" boolean DEFAULT false NOT NULL,
    "FixedFee" numeric NOT NULL,
    "PercentageFee" numeric DEFAULT 0 NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TransactionLevelComponentTypeID" uuid NOT NULL,
    "TransactionLevelComponentSubTypeID" uuid,
    "TransactionLevelComponentCategoryID" uuid,
    "TransactionLevelComponentSubCategoryID" uuid
)
WITH (oids = false);
--
-- Structure for table TransactionLevelComponentTemplate (OID = 19412) :
--
CREATE TABLE public."TransactionLevelComponentTemplate" (
    "TransactionLevelComponentTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(400) NOT NULL,
    "Description" varchar(2000),
    "IsFixedFee" boolean DEFAULT false NOT NULL,
    "FixedFee" numeric NOT NULL,
    "PercentageFee" numeric DEFAULT 0 NOT NULL,
    "CountryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "TransactionLevelComponentTypeID" uuid NOT NULL,
    "TransactionLevelComponentSubTypeID" uuid,
    "TransactionLevelComponentCategoryID" uuid,
    "TransactionLevelComponentSubCategoryID" uuid
)
WITH (oids = false);
--
-- Structure for table TransactionOrder (OID = 19423) :
--
CREATE TABLE public."TransactionOrder" (
    "TransactionOrderID" uuid NOT NULL,
    "CurrencyCode" varchar(100),
    "CurrencyRateToGBP" numeric NOT NULL,
    "VatNumber" varchar(400),
    "OrderSubTotalInclTaxAndDeduct" numeric NOT NULL,
    "OrderSubTotalExclTaxAndDeduct" numeric NOT NULL,
    "OrderSubTotalDiscountsInclTaxAndDeduct" numeric,
    "OrderSubTotalDiscountsExclTaxAndDeduct" numeric,
    "PaymentMethodAdditionalFeesInclTaxAndDeduct" numeric,
    "PaymentMethodAdditionalFeesExclTaxAndDeduct" numeric,
    "OrderTaxTotal" numeric NOT NULL,
    "OrderDiscountTotal" numeric NOT NULL,
    "OrderTotal" numeric NOT NULL,
    "RefundedAmount" numeric DEFAULT 0,
    "PaymentDate" timestamp without time zone,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid NOT NULL,
    "CreatedOn" date NOT NULL,
    "CreatedBy" varchar(200),
    "AuthorizationTransactionID" varchar,
    "AuthorizationTransactionCode" varchar,
    "AuthorizationTransactionResult" varchar,
    "CaptureTransactionID" varchar,
    "CaptureTransactionResult" varchar,
    "SubscriptionTransactionID" varchar,
    "CurrencyRateDate" date NOT NULL,
    "CurrencyRate" numeric NOT NULL,
    "CurrencyRateToUSD" numeric,
    "CountryCode" varchar(30) NOT NULL,
    "TransactionTypeID" integer NOT NULL,
    "PaymentMethodTypeID" integer NOT NULL,
    "TransactionGatewayTypeID" integer NOT NULL,
    "InvoiceID" uuid NOT NULL,
    "TransactionOrderReference" varchar(50) NOT NULL,
    "GlobalPaymentMethodID" uuid NOT NULL,
    "OrderDeductionTotal" numeric(30,8),
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8),
    "ParentTransactionOrderID" uuid,
    "IsHierachicalTransactionOrder" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table TransactionOrderItem (OID = 19433) :
--
CREATE TABLE public."TransactionOrderItem" (
    "OrderItemID" uuid NOT NULL,
    "Quantity" integer NOT NULL,
    "Price" numeric(30,8) NOT NULL,
    "PriceInclTaxAndDeduct" numeric NOT NULL,
    "PriceExclTaxAndDeduct" numeric NOT NULL,
    "OrderID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InvoiceLineItemID" uuid,
    "TaxTotal" numeric(30,8),
    "TaxTotalPercentage" numeric(30,8),
    "TaxTotalValue" numeric(30,8),
    "DeductionTotal" numeric(30,8),
    "DeductionTotalPercentage" numeric(30,8),
    "DeductionTotalValue" numeric(30,8),
    "DiscountTotal" numeric(30,8),
    "DiscountTotalPercentage" numeric(30,8),
    "DiscountTotalValue" numeric(30,8)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderPayment (OID = 19441) :
--
CREATE TABLE public."TransactionOrderPayment" (
    "TransactionOrderPaymentID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsPaymentSuccessful" boolean DEFAULT false NOT NULL,
    "PaymentDate" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "ResponseData" json,
    "TransactionResult" varchar(500),
    "PaymentType" varchar(200),
    "CardBrand" varchar(200),
    "ApprovalCode" varchar(200),
    "AVSResponseCode" varchar(3),
    "ProcessorResponseCode" varchar(30),
    "ProcessorApprovalCode" varchar(30),
    "ProcessorReceiptCode" varchar(30),
    "ProcessorCCVResponse" varchar(30),
    "ProcessorReferenceNumber" varchar(30),
    "CommercialServiceProvider" varchar(100),
    "ErrorMessage" varchar(1000),
    "CCVCode" varchar(5)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderPaymentError (OID = 19450) :
--
CREATE TABLE public."TransactionOrderPaymentError" (
    "TransactionOrderPaymentErrorID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "TransactionOrderPaymentID" uuid,
    "IsMerchantError" boolean DEFAULT false NOT NULL,
    "IsCardIssuerError" boolean DEFAULT false NOT NULL,
    "IsProcessorError" boolean DEFAULT false NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "ErrorMessage" varchar(500) NOT NULL,
    "ErrorCode" varchar(200) NOT NULL,
    "ErrorDetail" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table TransactionOrderProcessLog (OID = 19461) :
--
CREATE TABLE public."TransactionOrderProcessLog" (
    "TransactionOrderID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "TransactionOrderStatusDetail" varchar(2000),
    "IsTransactionOrderProcessed" boolean DEFAULT false NOT NULL,
    "PaidOn" timestamp without time zone,
    "IsPaid" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "TransactionOrderPaymentID" uuid
)
WITH (oids = false);
--
-- Structure for table TwoFactorAuthTokens (OID = 19469) :
--
CREATE TABLE public."TwoFactorAuthTokens" (
    "Token" varchar(100) NOT NULL,
    "Issued" timestamp without time zone NOT NULL,
    "UserAccount_ID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountArchive (OID = 19474) :
--
CREATE TABLE public."UserAccountArchive" (
    "UserAccountArchiveID" uuid NOT NULL,
    "UserAccountArchiveCreatedOn" date NOT NULL,
    "UserAccountArchiveTypeID" serial NOT NULL,
    "UserAccountArchiveCategoryID" serial NOT NULL,
    "UserAccountArchiveData" varchar,
    "UserAccountArchiveVersionID" integer NOT NULL,
    "UserAccountArchiveStartDate" date NOT NULL,
    "UserAccountArchiveEndDate" date,
    "UserID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountAudit (OID = 19484) :
--
CREATE TABLE public."UserAccountAudit" (
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(200) NOT NULL,
    "AuditID" uuid NOT NULL,
    "UserIPAddress" varchar(200),
    "URLAccessed" varchar(2000),
    "TimeAccessed" timestamp without time zone,
    "Data" varchar,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountDetail (OID = 19492) :
--
CREATE TABLE public."UserAccountDetail" (
    "UserDetailID" uuid NOT NULL,
    "UserID" uuid NOT NULL,
    "Salutation" varchar(100),
    "FirstName" varchar(200),
    "MiddleName" varchar(200),
    "LastName" varchar(200),
    "Title" varchar(100),
    "HomePhone" varchar(100),
    "HomeMobile" varchar(100),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountLedgerAccount (OID = 19500) :
--
CREATE TABLE public."UserAccountLedgerAccount" (
    "UserAccountID" uuid NOT NULL,
    "LedgerAccountID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountLoginSession (OID = 19505) :
--
CREATE TABLE public."UserAccountLoginSession" (
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(50) NOT NULL,
    "UserIPAddress" varchar(50),
    "UserHostAddress" varchar(50),
    "UserLocation" varchar(100),
    "UserLoginDate" timestamp without time zone,
    "UserLogoutDate" timestamp without time zone,
    "UserHasLoggedOut" boolean
)
WITH (oids = false);
--
-- Structure for table UserAccountLoginSessionData (OID = 19508) :
--
CREATE TABLE public."UserAccountLoginSessionData" (
    "UserAccountLoginSessionDataID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "UserAccountID" uuid NOT NULL,
    "UserSessionID" varchar(50) NOT NULL,
    "RequestData" json
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisation (OID = 19515) :
--
CREATE TABLE public."UserAccountOrganisation" (
    "UserID" uuid NOT NULL,
    "OrganisationUnitID" integer,
    "OrganisationID" uuid NOT NULL,
    "JobTitle" varchar(300),
    "NickName" varchar(300),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserSubTypeID" integer,
    "UserCategoryID" integer,
    "UserAccountOrganisationID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "UserJobTypeID" integer,
    "UserTypeID" uuid NOT NULL,
    "ParentID" uuid,
    "PrimaryContactID" uuid
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationGroup (OID = 19524) :
--
CREATE TABLE public."UserAccountOrganisationGroup" (
    "OrganisationGroupID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserAccountOrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationRole (OID = 19529) :
--
CREATE TABLE public."UserAccountOrganisationRole" (
    "OrganisationRoleID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "UserAccountOrganisationID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationSecondaryUserType (OID = 19534) :
--
CREATE TABLE public."UserAccountOrganisationSecondaryUserType" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationStatus (OID = 19539) :
--
CREATE TABLE public."UserAccountOrganisationStatus" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "StatusChangedOn" timestamp without time zone NOT NULL,
    "StatusChangedBy" varchar(200) NOT NULL,
    "ParentID" uuid
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationStructure (OID = 19542) :
--
CREATE TABLE public."UserAccountOrganisationStructure" (
    "OrganisationID" uuid NOT NULL,
    "UserID" uuid NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean
)
WITH (oids = false);
--
-- Structure for table UserAccountOrganisationTeam (OID = 19545) :
--
CREATE TABLE public."UserAccountOrganisationTeam" (
    "UserAccountOrganisationID" uuid NOT NULL,
    "OrganisationTeamID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserAccounts (OID = 19550) :
--
CREATE TABLE public."UserAccounts" (
    "ID" uuid NOT NULL,
    "Tenant" varchar(50) NOT NULL,
    "Username" varchar(100) NOT NULL,
    "Email" varchar(100),
    "Created" timestamp without time zone NOT NULL,
    "LastUpdated" timestamp without time zone NOT NULL,
    "PasswordChanged" timestamp without time zone,
    "RequiresPasswordReset" boolean NOT NULL,
    "MobileCode" varchar(100),
    "MobileCodeSent" timestamp without time zone,
    "MobilePhoneNumber" varchar(20),
    "AccountTwoFactorAuthMode" integer NOT NULL,
    "CurrentTwoFactorAuthStatus" integer NOT NULL,
    "IsAccountVerified" boolean NOT NULL,
    "IsLoginAllowed" boolean NOT NULL,
    "IsAccountClosed" boolean NOT NULL,
    "AccountClosed" timestamp without time zone,
    "LastLogin" timestamp without time zone,
    "LastFailedLogin" timestamp without time zone,
    "FailedLoginCount" integer NOT NULL,
    "VerificationKey" varchar(100),
    "VerificationPurpose" integer,
    "VerificationKeySent" timestamp without time zone,
    "HashedPassword" varchar(200),
    "LastFailedPasswordReset" timestamp without time zone,
    "FailedPasswordResetCount" integer DEFAULT 0 NOT NULL,
    "MobilePhoneNumberChanged" timestamp without time zone,
    "VerificationStorage" varchar(100),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsTemporaryAccount" boolean DEFAULT false NOT NULL,
    "CreatedOn" date DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    "IsApproved" boolean DEFAULT false NOT NULL,
    "IsEmployee" boolean DEFAULT false NOT NULL,
    "FailedForgotUsernameAttempts" integer DEFAULT 0 NOT NULL,
    "FailedForgotPasswordAttempts" integer DEFAULT 0 NOT NULL,
    "IsForgotUsernameRequestAllowed" boolean NOT NULL,
    "IsForgotPasswordRequestAllowed" boolean NOT NULL,
    "LastForgotUsernameFailedAttempt" timestamp without time zone,
    "LastForgotPasswordFailedAttempt" timestamp without time zone
)
WITH (oids = false);
--
-- Structure for table UserCertificates (OID = 19565) :
--
CREATE TABLE public."UserCertificates" (
    "UserAccount_ID" uuid NOT NULL,
    "Thumbprint" varchar(150) NOT NULL,
    "Subject" varchar(250),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserClaims (OID = 19570) :
--
CREATE TABLE public."UserClaims" (
    "UserAccount_ID" uuid NOT NULL,
    "Type" varchar(150) NOT NULL,
    "Value" varchar(150) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table UserType (OID = 19575) :
--
CREATE TABLE public."UserType" (
    "UserTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsGlobal" boolean DEFAULT false NOT NULL,
    "IsPrincipal" boolean DEFAULT true,
    "IsSecondary" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorflowParameterTemplate (OID = 19587) :
--
CREATE TABLE public."WorflowParameterTemplate" (
    "WorflowParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "IsConfigurable1" boolean DEFAULT false NOT NULL,
    "ParameterName" varchar(100) NOT NULL,
    "ParameterValue" varchar(1000) NOT NULL,
    "ParameterType" varchar(200) NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table Workflow (OID = 19597) :
--
CREATE TABLE public."Workflow" (
    "WorkflowID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "WorkflowTypeID" integer,
    "WorkflowSubTypeID" integer,
    "WorkflowCategoryID" integer,
    "WorkflowSubCategoryID" integer,
    "WorkflowTemplateID" uuid,
    "WorkflowTemplateVersionNumber" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowAction (OID = 19605) :
--
CREATE TABLE public."WorkflowAction" (
    "WorkflowActionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowActionTypeID" uuid,
    "IsManual" boolean DEFAULT false NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionCompleteCondition (OID = 19615) :
--
CREATE TABLE public."WorkflowActionCompleteCondition" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionCompleteConditionTemplate (OID = 19618) :
--
CREATE TABLE public."WorkflowActionCompleteConditionTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecuteCommand (OID = 19621) :
--
CREATE TABLE public."WorkflowActionExecuteCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecuteCommandTemplate (OID = 19624) :
--
CREATE TABLE public."WorkflowActionExecuteCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionExecutionTemplate (OID = 19627) :
--
CREATE TABLE public."WorkflowActionExecutionTemplate" (
    "WorkflowActionExecutionID" uuid NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar(1000),
    "IsPre" boolean DEFAULT false NOT NULL,
    "IsPost" boolean DEFAULT false NOT NULL,
    "IsCanStart" boolean DEFAULT false NOT NULL,
    "IsCanComplete" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionNotificationTemplate (OID = 19639) :
--
CREATE TABLE public."WorkflowActionNotificationTemplate" (
    "WorkflowActionNotificationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "IsConfigurable" boolean DEFAULT false NOT NULL,
    "Name" varchar(100) NOT NULL,
    "Description" varchar(1000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameter (OID = 19649) :
--
CREATE TABLE public."WorkflowActionParameter" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameterNotificationConstruct (OID = 19652) :
--
CREATE TABLE public."WorkflowActionParameterNotificationConstruct" (
    "WorkflowActionParameterNotificationConstructID" uuid NOT NULL,
    "WorkflowActionParameterNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "Order" integer NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "WorkflowActionParameterNotificationConstructVersionNumber" integer,
    "WorkflowActionParameterNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionParameterNotificationConstructTemplate (OID = 19655) :
--
CREATE TABLE public."WorkflowActionParameterNotificationConstructTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "OrganisationTypeID" integer NOT NULL,
    "UserTypeID" uuid NOT NULL,
    "Order" integer NOT NULL,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "WorkflowActionParameterNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowActionParameterNotificationConstructTemplateVersion" integer NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowActionTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowParameterTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "WorkflowTemplateVersionNumber" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "NotificationConstructTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "OrganisationTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "UserTypeID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "Order" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "IsActive" SET STATISTICS 100;
ALTER TABLE ONLY public."WorkflowActionParameterNotificationConstructTemplate" ALTER COLUMN "IsDeleted" SET STATISTICS 100;
--
-- Structure for table WorkflowActionParameterTemplate (OID = 19658) :
--
CREATE TABLE public."WorkflowActionParameterTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPostCommand (OID = 19661) :
--
CREATE TABLE public."WorkflowActionPostCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPostCommandTemplate (OID = 19664) :
--
CREATE TABLE public."WorkflowActionPostCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPreCommand (OID = 19667) :
--
CREATE TABLE public."WorkflowActionPreCommand" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionPreCommandTemplate (OID = 19670) :
--
CREATE TABLE public."WorkflowActionPreCommandTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionProductPlaceholder (OID = 19673) :
--
CREATE TABLE public."WorkflowActionProductPlaceholder" (
    "WorkflowActionProductPlaceholderID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "ProductTypeID" uuid NOT NULL,
    "Order" integer DEFAULT 0,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionStartCondition (OID = 19680) :
--
CREATE TABLE public."WorkflowActionStartCondition" (
    "WorkflowActionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionStartConditionTemplate (OID = 19683) :
--
CREATE TABLE public."WorkflowActionStartConditionTemplate" (
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionTemplate (OID = 19686) :
--
CREATE TABLE public."WorkflowActionTemplate" (
    "WorkflowActionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowActionTypeTemplateID" uuid,
    "IsManual" boolean DEFAULT false NOT NULL,
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowActionValidationTemplate (OID = 19696) :
--
CREATE TABLE public."WorkflowActionValidationTemplate" (
    "WorkflowActionValidationTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowClaim (OID = 19705) :
--
CREATE TABLE public."WorkflowClaim" (
    "WorkflowClaimID" uuid NOT NULL,
    "WorkflowRoleID" uuid,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowClaimTemplate (OID = 19710) :
--
CREATE TABLE public."WorkflowClaimTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ResourceID" uuid,
    "OperationID" uuid,
    "StateID" uuid,
    "StateItemID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowClaimTemplateID" uuid NOT NULL,
    "WorkflowRoleTemplateID" uuid,
    "RoleID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowCommand (OID = 19715) :
--
CREATE TABLE public."WorkflowCommand" (
    "WorkflowCommandID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandCondition (OID = 19722) :
--
CREATE TABLE public."WorkflowCommandCondition" (
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandConditionTemplate (OID = 19725) :
--
CREATE TABLE public."WorkflowCommandConditionTemplate" (
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandParameter (OID = 19728) :
--
CREATE TABLE public."WorkflowCommandParameter" (
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandParameterTemplate (OID = 19731) :
--
CREATE TABLE public."WorkflowCommandParameterTemplate" (
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowCommandTemplate (OID = 19734) :
--
CREATE TABLE public."WorkflowCommandTemplate" (
    "WorkflowCommandTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "WorkflowObjectTypeTemplateID" uuid
)
WITH (oids = false);
--
-- Structure for table WorkflowCondition (OID = 19742) :
--
CREATE TABLE public."WorkflowCondition" (
    "WorkflowConditionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionParameter (OID = 19749) :
--
CREATE TABLE public."WorkflowConditionParameter" (
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionParameterTemplate (OID = 19752) :
--
CREATE TABLE public."WorkflowConditionParameterTemplate" (
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowConditionTemplate (OID = 19755) :
--
CREATE TABLE public."WorkflowConditionTemplate" (
    "WorkflowConditionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecision (OID = 19763) :
--
CREATE TABLE public."WorkflowDecision" (
    "WorkflowDecisionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowDecisionTypeID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowObjectTypeID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionError (OID = 19772) :
--
CREATE TABLE public."WorkflowDecisionError" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowActionID" uuid,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionErrorID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionErrorTemplate (OID = 19776) :
--
CREATE TABLE public."WorkflowDecisionErrorTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionErrorTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionExecuteCommand (OID = 19780) :
--
CREATE TABLE public."WorkflowDecisionExecuteCommand" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowCommandID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionExecuteCommandTemplate (OID = 19783) :
--
CREATE TABLE public."WorkflowDecisionExecuteCommandTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionFailure (OID = 19786) :
--
CREATE TABLE public."WorkflowDecisionFailure" (
    "WorkflowDecisionID" uuid NOT NULL,
    "NextWorkflowActionID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionFailureID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionFailureTemplate (OID = 19790) :
--
CREATE TABLE public."WorkflowDecisionFailureTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionFailureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionParameter (OID = 19794) :
--
CREATE TABLE public."WorkflowDecisionParameter" (
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionParameterTemplate (OID = 19797) :
--
CREATE TABLE public."WorkflowDecisionParameterTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionSuccess (OID = 19800) :
--
CREATE TABLE public."WorkflowDecisionSuccess" (
    "WorkflowDecisionID" uuid NOT NULL,
    "NextWorkflowActionID" uuid,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionID" uuid,
    "WorkflowDecisionSuccessID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionSuccessTemplate (OID = 19804) :
--
CREATE TABLE public."WorkflowDecisionSuccessTemplate" (
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "NextWorkflowActionTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NextWorkflowDecisionTemplateID" uuid,
    "WorkflowDecisionSuccessTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowDecisionTemplate (OID = 19808) :
--
CREATE TABLE public."WorkflowDecisionTemplate" (
    "WorkflowDecisionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsTransistionStart" boolean DEFAULT false NOT NULL,
    "IsTransistionEnd" boolean DEFAULT false NOT NULL,
    "WorkflowDecisionTypeTemplateID" uuid,
    "WorkflowObjectTypeTemplateID" uuid,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowExecution (OID = 19817) :
--
CREATE TABLE public."WorkflowExecution" (
    "WorkflowExecutionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "VersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowExecutionStatus (OID = 19825) :
--
CREATE TABLE public."WorkflowExecutionStatus" (
    "WorkflowExecutionStatusID" serial NOT NULL,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(1000)
)
WITH (oids = false);
--
-- Structure for table WorkflowExecutionTemplate (OID = 19833) :
--
CREATE TABLE public."WorkflowExecutionTemplate" (
    "WorkflowExecutionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "VersionNumber" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowHierarchy (OID = 19841) :
--
CREATE TABLE public."WorkflowHierarchy" (
    "WorkflowHierarchyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsTransistionStart" boolean,
    "IsTranistionEnd" boolean,
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "IsChildDependentOnParent" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorkflowHierarchyTemplate (OID = 19846) :
--
CREATE TABLE public."WorkflowHierarchyTemplate" (
    "WorkflowHierarchyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsTransistionStart" boolean,
    "IsTranistionEnd" boolean,
    "IsChildDependentOnParent" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table WorkflowInstance (OID = 19851) :
--
CREATE TABLE public."WorkflowInstance" (
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ParentID" uuid NOT NULL,
    "WorkflowInstanceStatusID" integer NOT NULL,
    "WorkflowInstanceTypeID" integer,
    "WorkflowInstanceSubTypeID" integer,
    "WorkflowInstanceCategoryID" integer,
    "WorkflowInstanceSubCategoryID" integer,
    "WorkflowInstanceTempData" varchar
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecution (OID = 19857) :
--
CREATE TABLE public."WorkflowInstanceExecution" (
    "WorkflowInstanceExecutionID" serial NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowActionID" uuid,
    "WorkflowDecisionID" uuid,
    "WorkflowConditionID" uuid,
    "WorkflowCommandID" uuid,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "CreatedOn" date,
    "NumberOfRetries" integer DEFAULT 0
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionDataItem (OID = 19861) :
--
CREATE TABLE public."WorkflowInstanceExecutionDataItem" (
    "WorkflowInstanceExecutionDataItemID" integer DEFAULT nextval('"WorkflowInstanceExecutionData_WorkflowInstanceExecutionData_seq"'::regclass) NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "FieldName" varchar(300) NOT NULL,
    "FieldTypeID" integer,
    "DataContent" varchar,
    "DataStr" varchar,
    "DataNotJsonSerialized" boolean DEFAULT false NOT NULL,
    "EventOrder" integer,
    "WorkflowInstanceExecutionStatusEventID" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionStatusEvent (OID = 19870) :
--
CREATE TABLE public."WorkflowInstanceExecutionStatusEvent" (
    "WorkflowInstanceExecutionStatusEventID" integer DEFAULT nextval('"WorkflowInstanceExecutionStat_WorkflowInstanceExecutionStat_seq"'::regclass) NOT NULL,
    "EventDate" timestamp without time zone NOT NULL,
    "EventBy" varchar(200) NOT NULL,
    "WorkflowExecutionStatusID" integer NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "EventOrder" integer NOT NULL,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceExecutionTrace (OID = 19875) :
--
CREATE TABLE public."WorkflowInstanceExecutionTrace" (
    "WorkflowInstanceExecutionTraceID" uuid NOT NULL,
    "WorkflowInstanceExecutionID" integer NOT NULL,
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowInstanceID" uuid,
    "WorkflowTransistionID" uuid,
    "WorkflowActionID" uuid,
    "WorkflowDecisionID" uuid,
    "WorkflowConditionID" uuid,
    "WorkflowCommandID" uuid,
    "TraceDetail" varchar(5000),
    "TraceStackTrace" varchar(5000),
    "HasError" boolean DEFAULT false NOT NULL,
    "ExecutedOn" date NOT NULL,
    "ExecutedBy" varchar(300),
    "AdditionalContent" varchar(5000),
    "NumberOfRetries" integer DEFAULT 0 NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceRestriction (OID = 19885) :
--
CREATE TABLE public."WorkflowInstanceRestriction" (
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid,
    "WorkflowVersionNumber" integer,
    "UserAccountOrganisationID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowInstanceSession (OID = 19890) :
--
CREATE TABLE public."WorkflowInstanceSession" (
    "WorkflowInstanceSessionID" uuid NOT NULL,
    "SessionStartedOn" timestamp without time zone NOT NULL,
    "SessionEndedOn" timestamp without time zone NOT NULL,
    "WorkflowInstanceID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainCompleteCondition (OID = 19893) :
--
CREATE TABLE public."WorkflowMainCompleteCondition" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowConditionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainCompleteConditionTemplate (OID = 19896) :
--
CREATE TABLE public."WorkflowMainCompleteConditionTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainExecuteCommand (OID = 19899) :
--
CREATE TABLE public."WorkflowMainExecuteCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainExecuteCommandTemplate (OID = 19902) :
--
CREATE TABLE public."WorkflowMainExecuteCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainParameter (OID = 19905) :
--
CREATE TABLE public."WorkflowMainParameter" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowParameterID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainParameterTemplate (OID = 19908) :
--
CREATE TABLE public."WorkflowMainParameterTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPostCommand (OID = 19911) :
--
CREATE TABLE public."WorkflowMainPostCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPostCommandTemplate (OID = 19914) :
--
CREATE TABLE public."WorkflowMainPostCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPreCommand (OID = 19917) :
--
CREATE TABLE public."WorkflowMainPreCommand" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowCommandID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainPreCommandTemplate (OID = 19920) :
--
CREATE TABLE public."WorkflowMainPreCommandTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowCommandTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainStartCondition (OID = 19923) :
--
CREATE TABLE public."WorkflowMainStartCondition" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowConditionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowMainStartConditionTemplate (OID = 19926) :
--
CREATE TABLE public."WorkflowMainStartConditionTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowNotificationConstruct (OID = 19929) :
--
CREATE TABLE public."WorkflowNotificationConstruct" (
    "WorkflowNotificationConstructID" uuid NOT NULL,
    "NotificationConstructID" uuid NOT NULL,
    "NotificationConstructVersionNumber" integer NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowNotificationConstructTemplate (OID = 19934) :
--
CREATE TABLE public."WorkflowNotificationConstructTemplate" (
    "WorkflowNotificationConstructTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "NotificationConstructTemplateID" uuid NOT NULL,
    "NotificationConstructTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowObjectType (OID = 19939) :
--
CREATE TABLE public."WorkflowObjectType" (
    "WorkflowObjectTypeID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectTypeName" varchar(1000) NOT NULL,
    "ObjectTypeNameSpace" varchar(1000) NOT NULL,
    "ObjectTypeAssembly" varchar(1000) NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowObjectTypeTemplate (OID = 19946) :
--
CREATE TABLE public."WorkflowObjectTypeTemplate" (
    "WorkflowObjectTypeTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectTypeName" varchar(1000) NOT NULL,
    "ObjectTypeNameSpace" varchar(1000) NOT NULL,
    "ObjectTypeAssembly" varchar(1000) NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowParameter (OID = 19953) :
--
CREATE TABLE public."WorkflowParameter" (
    "WorkflowParameterID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "ObjectType" varchar(1000) NOT NULL,
    "ObjectValue" varchar(2000) NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowParameterTemplate (OID = 19960) :
--
CREATE TABLE public."WorkflowParameterTemplate" (
    "WorkflowParameterTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(1000),
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ObjectType" varchar(1000) NOT NULL,
    "ObjectValue" varchar(2000) NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowRole (OID = 19967) :
--
CREATE TABLE public."WorkflowRole" (
    "WorkflowRoleID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean NOT NULL,
    "IsDeleted" boolean NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowRoleTemplate (OID = 19973) :
--
CREATE TABLE public."WorkflowRoleTemplate" (
    "WorkflowRoleTemplateID" uuid NOT NULL,
    "RoleName" varchar(300) NOT NULL,
    "RoleDescription" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "RoleTypeID" integer,
    "RoleSubTypeID" integer,
    "RoleCategoryID" integer,
    "RoleSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowStatusType (OID = 19981) :
--
CREATE TABLE public."WorkflowStatusType" (
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowStatusTypeTemplate (OID = 19986) :
--
CREATE TABLE public."WorkflowStatusTypeTemplate" (
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "StatusTypeTemplateID" uuid NOT NULL,
    "StatusTypeTemplateVersionNumber" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTemplate (OID = 19991) :
--
CREATE TABLE public."WorkflowTemplate" (
    "WorkflowTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "WorkflowTypeID" integer,
    "WorkflowSubTypeID" integer,
    "WorkflowCategoryID" integer,
    "WorkflowSubCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistion (OID = 19999) :
--
CREATE TABLE public."WorkflowTransistion" (
    "WorkflowTransistionID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionCompleteCondition (OID = 20008) :
--
CREATE TABLE public."WorkflowTransistionCompleteCondition" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionCompleteConditionTemplate (OID = 20011) :
--
CREATE TABLE public."WorkflowTransistionCompleteConditionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionHierarchy (OID = 20014) :
--
CREATE TABLE public."WorkflowTransistionHierarchy" (
    "WorkflowTransistionHierarchyID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionHierarchyTemplate (OID = 20019) :
--
CREATE TABLE public."WorkflowTransistionHierarchyTemplate" (
    "WorkflowTransistionHierarchyTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "ChildComponentID" uuid NOT NULL,
    "ParentComponentID" uuid,
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionParameter (OID = 20025) :
--
CREATE TABLE public."WorkflowTransistionParameter" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowParameterID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionParameterTemplate (OID = 20028) :
--
CREATE TABLE public."WorkflowTransistionParameterTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowParameterTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionStartCondition (OID = 20031) :
--
CREATE TABLE public."WorkflowTransistionStartCondition" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowConditionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionStartConditionTemplate (OID = 20034) :
--
CREATE TABLE public."WorkflowTransistionStartConditionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowConditionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionTemplate (OID = 20037) :
--
CREATE TABLE public."WorkflowTransistionTemplate" (
    "WorkflowTransistionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer DEFAULT 0 NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "IsWorkflowStart" boolean DEFAULT false NOT NULL,
    "IsWorkflowEnd" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowAction (OID = 20047) :
--
CREATE TABLE public."WorkflowTransistionWorkflowAction" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "WorkflowActionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowActionTemplate (OID = 20050) :
--
CREATE TABLE public."WorkflowTransistionWorkflowActionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowActionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowDecision (OID = 20053) :
--
CREATE TABLE public."WorkflowTransistionWorkflowDecision" (
    "WorkflowTransistionID" uuid NOT NULL,
    "WorkflowDecisionID" uuid NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTransistionWorkflowDecisionTemplate (OID = 20056) :
--
CREATE TABLE public."WorkflowTransistionWorkflowDecisionTemplate" (
    "WorkflowTransistionTemplateID" uuid NOT NULL,
    "WorkflowDecisionTemplateID" uuid NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL
)
WITH (oids = false);
--
-- Structure for table WorkflowTreeStructure (OID = 20059) :
--
CREATE TABLE public."WorkflowTreeStructure" (
    "WorkflowTreeStructureID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowID" uuid NOT NULL,
    "WorkflowVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "ItemOrder" integer NOT NULL,
    "IsLeafNode" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "IsActive" bit(1) DEFAULT B'1'::"bit" NOT NULL,
    "IsDeleted" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "ParentID" uuid,
    "InterfacePanelID" uuid,
    "InterfacePanelVersionNumber" integer,
    "Level" integer
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructure" ALTER COLUMN "WorkflowTreeStructureID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureAction (OID = 20069) :
--
CREATE TABLE public."WorkflowTreeStructureAction" (
    "WorkflowTreeStructureActionID" uuid NOT NULL,
    "WorkflowTreeStructureID" uuid,
    "WorkflowActionID" uuid,
    "IsVisible" boolean DEFAULT true,
    "IsActive" boolean DEFAULT true,
    "IsDeleted" boolean DEFAULT false,
    "ConditionString" varchar(1000)
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructureAction" ALTER COLUMN "WorkflowTreeStructureID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowTreeStructureAction" ALTER COLUMN "WorkflowActionID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureActionTemplate (OID = 20078) :
--
CREATE TABLE public."WorkflowTreeStructureActionTemplate" (
    "WorkflowTreeStructureActionTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTreeStructureTemplateID" uuid,
    "WorkflowActionTemplateID" uuid,
    "IsVisible" boolean DEFAULT true,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ConditionString" varchar(1000)
)
WITH (oids = false);
ALTER TABLE ONLY public."WorkflowTreeStructureActionTemplate" ALTER COLUMN "WorkflowTreeStructureTemplateID" SET STATISTICS 0;
ALTER TABLE ONLY public."WorkflowTreeStructureActionTemplate" ALTER COLUMN "WorkflowActionTemplateID" SET STATISTICS 0;
--
-- Structure for table WorkflowTreeStructureTemplate (OID = 20088) :
--
CREATE TABLE public."WorkflowTreeStructureTemplate" (
    "WorkflowTreeStructureTemplateID" uuid DEFAULT uuid_generate_v1() NOT NULL,
    "WorkflowTemplateID" uuid NOT NULL,
    "WorkflowTemplateVersionNumber" integer NOT NULL,
    "Name" varchar(300) NOT NULL,
    "Description" varchar(2000),
    "Level" integer NOT NULL,
    "IsLeafNode" bit(1) DEFAULT B'0'::"bit" NOT NULL,
    "IsActive" bit(1),
    "IsDeleted" bit(1),
    "ParentID" uuid,
    "InterfacePanelTemplateID" uuid,
    "InterfacePanelTemplateVersionNumber" integer,
    "ItemOrder" integer
)
WITH (oids = false);
--
-- Structure for table appmanager (OID = 20096) :
--
CREATE TABLE public.appmanager (
    psize integer NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence busmessagecontent_busmessagecontentid_seq (OID = 20099) :
--
CREATE SEQUENCE public.busmessagecontent_busmessagecontentid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Structure for table containsagadata (OID = 20101) :
--
CREATE TABLE public.containsagadata (
    id uuid NOT NULL,
    originator varchar(255),
    originalmessageid varchar(255)
)
WITH (oids = false);
--
-- Definition for sequence currencyrate_seq (OID = 20107) :
--
CREATE SEQUENCE public.currencyrate_seq
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence elmah_error_sequence (OID = 20109) :
--
CREATE SEQUENCE public.elmah_error_sequence
    START WITH 1
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence globalaccountingperiod_globalaccountingperiodid_seq (OID = 20111) :
--
CREATE SEQUENCE public.globalaccountingperiod_globalaccountingperiodid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence organisationaccountingperiod_organisationaccountingperiodid_seq (OID = 20113) :
--
CREATE SEQUENCE public.organisationaccountingperiod_organisationaccountingperiodid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence organisationtype_organisationtypeid_seq (OID = 20115) :
--
CREATE SEQUENCE public.organisationtype_organisationtypeid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for sequence plangroup_plangroupid_seq (OID = 20117) :
--
CREATE SEQUENCE public.plangroup_plangroupid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Structure for table subscription (OID = 20119) :
--
CREATE TABLE public.subscription (
    subscriberendpoint varchar(450) NOT NULL,
    messagetype varchar(450) NOT NULL,
    version varchar(450),
    typename varchar(450)
)
WITH (oids = false);
--
-- Structure for table timeoutentity (OID = 20125) :
--
CREATE TABLE public.timeoutentity (
    id uuid NOT NULL,
    destination varchar(1024),
    sagaid uuid,
    state bytea,
    "time" timestamp without time zone,
    correlationid varchar(1024),
    headers text,
    endpoint varchar(440)
)
WITH (oids = false);
--
-- Definition for view vAttachment (OID = 20131) :
--
CREATE VIEW public."vAttachment"
AS
SELECT "AttachmentDetail"."AttachmentDetailID",
    "AttachmentDetail"."OrganisationID",
    "AttachmentDetail"."IsActive",
    "AttachmentDetail"."IsDeleted",
    "Attachment"."FileName",
    "AttachmentDetail"."RepositoryStructureID",
    "Attachment"."Subject",
    "Attachment"."MimeType",
    "Attachment"."Body",
    "Attachment"."FileSize",
    "Repository"."Name" AS "RepositoryName",
    "Attachment"."AttachmentID"
FROM (((("Attachment"
     JOIN "AttachmentDetail" ON (("Attachment"."AttachmentDetailID" =
         "AttachmentDetail"."AttachmentDetailID")))
     JOIN "RepositoryStructure" ON
         (("AttachmentDetail"."RepositoryStructureID" = "RepositoryStructure"."RepositoryStructureID")))
     JOIN "Repository" ON ((("RepositoryStructure"."RepositoryID" =
         "Repository"."RepositoryID") AND ("RepositoryStructure"."RepositoryID" = "Repository"."RepositoryID"))))
     JOIN "OrganisationDetail" ON
         (("OrganisationDetail"."OrganisationDefaultLogoID" = "AttachmentDetail"."AttachmentDetailID")))
WHERE ("AttachmentDetail"."IsDeleted" = true);

--
-- Definition for view vBranch (OID = 20136) :
--
CREATE VIEW public."vBranch"
AS
SELECT os."OrganisationID" AS "ParentOrganisationID",
    org."OrganisationID" AS "BranchOrganisationID",
    org."IsHeadOffice",
    contact."ContactID",
    branch."Name" AS "BranchName",
    contact."ContactName",
    contact."EmailAddress1",
    contact."Telephone1",
    contact."IsPrimaryContact",
    org."IsDeleted",
    contact."Telephone2",
    contact."MobileNumber1",
    contact."MobileNumber2",
    contact."EmailAddress2",
    contact."WebSiteURL",
    contact."ContactCategoryID",
    contact."ContactTypeID"
FROM (((("OrganisationStructure" os
     JOIN "OrganisationStructure" branch ON ((os."OrganisationStructureID"
         = branch."ParentOrganisationStructureID")))
     JOIN "OrganisationDetail" od ON ((branch."OrganisationID" =
         od."OrganisationID")))
     JOIN "Organisation" org ON ((branch."OrganisationID" = org."OrganisationID")))
     JOIN "Contact" contact ON ((org."OrganisationID" = contact."ParentID")));

--
-- Definition for view vBusTaskSchedule (OID = 20141) :
--
CREATE VIEW public."vBusTaskSchedule"
AS
SELECT bts."BusTaskScheduleID",
    bt."BusTaskID",
    bts."IntervalInMinutes",
    bt."CreatedOn",
    bt."Name",
    bt."Description",
    bt."IsActive",
    bt."IsDeleted",
    bth."BusTaskHandlerID",
    bth."ObjectTypeName",
    bth."ObjectTypeAssembly",
    bth."MessageTypeName",
    bth."MessageTypeAssembly"
FROM (("BusTaskSchedule" bts
     LEFT JOIN "BusTask" bt ON ((((bt."BusTaskID" = bts."BusTaskID") AND
         (bt."IsActive" = true)) AND (bt."IsDeleted" = false))))
     LEFT JOIN "BusTaskHandler" bth ON ((((bth."BusTaskHandlerID" =
         bt."BusTaskHandlerID") AND (bth."IsActive" = true)) AND (bth."IsDeleted" = false))))
WHERE ((bts."IsActive" = true) AND (bts."IsDeleted" = false));

--
-- Definition for view vClaimSource (OID = 20146) :
--
CREATE VIEW public."vClaimSource"
AS
SELECT uuid_generate_v1() AS "ID",
    'Resource'::text AS "ClaimType",
    res."ResourceID" AS "ClaimID",
    res."ResourceName" AS "ClaimName",
    'Operation'::text AS "ClaimSubType",
    op."OperationID" AS "ClaimSubID",
    op."OperationName" AS "ClaimSubName"
FROM (("Resource" res
     JOIN "ResourceOperation" ro ON ((ro."ResourceID" = res."ResourceID")))
     LEFT JOIN "Operation" op ON ((op."OperationID" = ro."OperationID")))
UNION
SELECT uuid_generate_v1() AS "ID",
    'State'::text AS "ClaimType",
    sat."StateID" AS "ClaimID",
    sat."StateName" AS "ClaimName",
    'StateItem'::text AS "ClaimSubType",
    si."StateItemID" AS "ClaimSubID",
        CASE
            WHEN (psi."StateItemName" IS NULL) THEN (si."StateItemName")::text
            ELSE (((psi."StateItemName")::text || '_'::text) ||
                (si."StateItemName")::text)
        END AS "ClaimSubName"
FROM (("State" sat
     JOIN "StateItem" si ON ((si."StateID" = sat."StateID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")));

--
-- Definition for view vClassification (OID = 20151) :
--
CREATE VIEW public."vClassification"
AS
SELECT ct."ClassificationTypeID" AS classificationtypeid,
    ct."Name" AS name,
    ctc."ClassificationTypeCategoryID",
    ctc."Name" AS categoryname
FROM ("ClassificationType" ct
     LEFT JOIN "ClassificationTypeCategory" ctc ON
         ((ctc."ClassificationTypeCategoryID" = ct."ClassificationTypeCategoryID")));

--
-- Definition for view vCountryAndCurrency (OID = 20155) :
--
CREATE VIEW public."vCountryAndCurrency"
AS
SELECT cc."CountryCode",
    cc."CountryName",
    cc."CurrencyCode",
    curr."CurrencyName",
    curate."CurrencyRateDate",
    curate."CurrencyRate",
    curate."CurrencyRateToGBP",
    curate."CurrencyRateToUSD"
FROM (("CountryCode" cc
     LEFT JOIN "CurrencyCode" curr ON (((curr."CurrencyCode")::text =
         (cc."CurrencyCode")::text)))
     LEFT JOIN "CurrencyRate" curate ON ((((curate."CurrencyCode")::text =
         (cc."CurrencyCode")::text) AND (curate."CurrencyRateDate" = (
    SELECT max(rr."CurrencyRateDate") AS max
    FROM "CurrencyRate" rr
    WHERE ((rr."CurrencyCode")::text = (cc."CurrencyCode")::text)
    )))))
WHERE (curate."CurrencyRateDate" IS NOT NULL);

--
-- Definition for view vCountryDeduction (OID = 20160) :
--
CREATE VIEW public."vCountryDeduction"
AS
SELECT cd."CountryDeductionID",
    cd."CountryCode",
    cd."DeductionID",
    cd."DeductionVersionNumber",
    cd."DeductionPercentage",
    cd."DeductionValue",
    cd."IsActive",
    cd."IsDeleted",
    cd."IsAppliedToAllOrders",
    de."Name",
    de."Description",
    de."IsPercentageBased",
        CASE
            WHEN (EXISTS (
    SELECT dp_1."DeductionID",
                dp_1."DeductionVersionNumber",
                dp_1."ProductID",
                dp_1."ProductVersionID"
    FROM "DeductionProduct" dp_1
    WHERE ((dp_1."DeductionID" = cd."DeductionID") AND
        (dp_1."DeductionVersionNumber" = cd."DeductionVersionNumber"))
    LIMIT 1
    )) THEN true
            ELSE false
        END AS "IsProductDeduction",
    dp."ProductID",
    dp."ProductVersionID"
FROM (("CountryDeduction" cd
     LEFT JOIN "Deduction" de ON (((((de."DeductionID" = cd."DeductionID")
         AND (de."IsActive" = true)) AND (de."IsDeleted" = false)) AND (de."DeductionVersionNumber" = cd."DeductionVersionNumber"))))
     LEFT JOIN "DeductionProduct" dp ON (((dp."DeductionID" =
         cd."DeductionID") AND (dp."DeductionVersionNumber" = cd."DeductionVersionNumber"))))
WHERE ((cd."IsActive" = true) AND (cd."IsDeleted" = false));

--
-- Definition for view vDefaultEmailAddress (OID = 20165) :
--
CREATE VIEW public."vDefaultEmailAddress"
AS
SELECT ua."ID" AS "UserID",
    ua."Username",
    ua."Email",
    uao."UserAccountOrganisationID",
    uao."OrganisationID" AS "BranchOrganisationID",
    con."EmailAddress1" AS "BranchEmailAddress",
    COALESCE(porg."OrganisationID", uao."OrganisationID") AS "OrganisationID",
    pcon."EmailAddress1"
FROM ((((((("UserAccounts" ua
     JOIN "UserAccountOrganisation" uao ON ((uao."UserID" = ua."ID")))
     LEFT JOIN "Organisation" org ON ((org."OrganisationID" =
         uao."OrganisationID")))
     LEFT JOIN "Contact" con ON (((con."ParentID" = uao."OrganisationID")
         AND (con."IsPrimaryContact" = true))))
     LEFT JOIN "Address" addr ON (((addr."ParentID" = con."ContactID") AND
         (addr."IsPrimaryAddress" = true))))
     LEFT JOIN "Organisation" porg ON ((porg."OrganisationID" =
         org."ParentOrganisationID")))
     LEFT JOIN "Contact" pcon ON (((pcon."ParentID" = org."OrganisationID")
         AND (pcon."IsPrimaryContact" = true))))
     LEFT JOIN "Address" paddr ON (((paddr."ParentID" = pcon."ContactID")
         AND (paddr."IsPrimaryAddress" = true))));

--
-- Definition for view vStatusType (OID = 20170) :
--
CREATE VIEW public."vStatusType"
AS
SELECT stv."StatusTypeValueID",
    stv."StatusTypeID",
    stv."StatusTypeVersionNumber",
    stv."Name",
    st."Name" AS "StatusTypeName",
    sts."StatusOrder",
    sts."IsStart",
    sts."IsEnd"
FROM (("StatusTypeValue" stv
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" =
         stv."StatusTypeID") AND (st."StatusTypeVersionNumber" = stv."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeStructure" sts ON ((((sts."StatusTypeID" =
         stv."StatusTypeID") AND (sts."StatusTypeVersionNumber" = stv."StatusTypeVersionNumber")) AND (sts."StatusTypeValueID" = stv."StatusTypeValueID"))));

--
-- Definition for view vDefaultOrganisationStatus (OID = 20175) :
--
CREATE VIEW public."vDefaultOrganisationStatus"
AS
SELECT od."DefaultOrganisationID",
    od."DefaultOrganisationVersionNumber",
    od."DefaultOrganisationTemplateID",
    od."DefaultOrganisationTemplateVersionNumber",
    od."Name",
    od."IsActive",
    od."IsDeleted",
    od."OrganisationTypeID" AS "RootOrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    dot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    true AS "IsDefault",
    dot."StatusTypeID",
    dot."StatusTypeVersionNumber",
    vsst."StatusTypeName",
    vsst."Name" AS "StatusTypeValueName",
    vsst."StatusTypeValueID",
    vsst."StatusOrder",
    vsst."IsStart",
    vsst."IsEnd"
FROM ((("DefaultOrganisation" od
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         od."OrganisationTypeID")))
     JOIN "DefaultOrganisationTarget" dot ON (((dot."DefaultOrganisationID"
         = od."DefaultOrganisationID") AND (dot."DefaultOrganisationVersionNumber" = od."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "vStatusType" vsst ON ((((vsst."StatusTypeID" =
         dot."StatusTypeID") AND (vsst."StatusTypeVersionNumber" = dot."StatusTypeVersionNumber")) AND (vsst."IsStart" = true))))
UNION
SELECT od."DefaultOrganisationID",
    od."DefaultOrganisationVersionNumber",
    od."DefaultOrganisationTemplateID",
    od."DefaultOrganisationTemplateVersionNumber",
    od."Name",
    od."IsActive",
    od."IsDeleted",
    od."OrganisationTypeID" AS "RootOrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    NULL::integer AS "OrganisationTypeID",
    dout."UserTypeID",
    dout."IsDefault",
    dout."StatusTypeID",
    dout."StatusTypeVersionNumber",
    vsst."StatusTypeName",
    vsst."Name" AS "StatusTypeValueName",
    vsst."StatusTypeValueID",
    vsst."StatusOrder",
    vsst."IsStart",
    vsst."IsEnd"
FROM ((("DefaultOrganisation" od
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         od."OrganisationTypeID")))
     JOIN "DefaultOrganisationUserTarget" dout ON
         (((dout."DefaultOrganisationID" = od."DefaultOrganisationID") AND (dout."DefaultOrganisationVersionNumber" = od."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "vStatusType" vsst ON ((((vsst."StatusTypeID" =
         dout."StatusTypeID") AND (vsst."StatusTypeVersionNumber" = dout."StatusTypeVersionNumber")) AND (vsst."IsStart" = true))));

--
-- Definition for view vDefaultOrganisationUserTypeOrganisationType (OID = 20180) :
--
CREATE VIEW public."vDefaultOrganisationUserTypeOrganisationType"
AS
SELECT dout."DefaultOrganisationID",
    dout."DefaultOrganisationVersionNumber",
    dorg."Name" AS "DefaultOrganisationName",
    dout."UserTypeID",
    ut."Name" AS "UserTypeName",
    ot."OrganisationTypeID",
    ot."Name" AS "OrganisationTypeName"
FROM ((("DefaultOrganisationUserTarget" dout
     LEFT JOIN "DefaultOrganisation" dorg ON
         (((dout."DefaultOrganisationID" = dorg."DefaultOrganisationID") AND (dout."DefaultOrganisationVersionNumber" = dorg."DefaultOrganisationVersionNumber"))))
     LEFT JOIN "OrganisationType" ot ON ((dorg."OrganisationTypeID" =
         ot."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((dout."UserTypeID" = ut."UserTypeID")))
WHERE (((dout."IsActive" = true) AND (dout."IsDeleted" = false)) AND
    (dout."IsDefault" = true));

--
-- Definition for view vFieldDetailForUI (OID = 20185) :
--
CREATE VIEW public."vFieldDetailForUI"
AS
SELECT ''::character varying AS "InterfacePanelName",
    fd."FieldDetailID",
    fd."Name",
    fd."Description",
    fd."FieldLabelValue" AS "OverrideFieldLabelValue",
    fd."DefaultValue" AS "OverrideDefaultValue",
    fd."IsActive",
    fd."IsDeleted",
    fd."ToolTipValue" AS "OverrideToolTipValue",
    fd."ToolTipHTML" AS "OverrideToolTipHTML",
    fd."ToolTipIsHTML" AS "OverrideToolTipIsHTML",
    fd."InformationValue" AS "OverrideInformationValue",
    fd."InformationHTML" AS "OverrideInformationHTML",
    fd."InformationIsHTML" AS "OverrideInformationIsHTML",
    fd."HelpValue" AS "OverrideHelpValue",
    fd."HelpHTML" AS "OverrideHelpHTML",
    fd."HelpIsHTML" AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    false AS "IsVisible",
    false AS "IsMandatory",
    false AS "IsFilterable",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ("FieldDetail" fd
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFieldDetail" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    COALESCE(ipfd."OrganisationTypeID", NULL::integer) AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFieldDetailOrganisationType" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")))
UNION ALL
SELECT ip."Name" AS "InterfacePanelName",
    ipfd."FieldDetailID",
    fd."Name",
    fd."Description",
    COALESCE(ipfd."OverrideFieldLabelValue", fd."FieldLabelValue") AS
        "OverrideFieldLabelValue",
    COALESCE(ipfd."OverrideDefaultValue", fd."DefaultValue") AS
        "OverrideDefaultValue",
    COALESCE(ipfd."IsActive", fd."IsActive") AS "IsActive",
    COALESCE(ipfd."IsDeleted", fd."IsDeleted") AS "IsDeleted",
    COALESCE(ipfd."OverrideToolTipValue", fd."ToolTipValue") AS
        "OverrideToolTipValue",
    COALESCE(ipfd."OverrideToolTipHTML", fd."ToolTipHTML") AS
        "OverrideToolTipHTML",
    COALESCE(ipfd."OverrideToolTipIsHTML", fd."ToolTipIsHTML") AS
        "OverrideToolTipIsHTML",
    COALESCE(ipfd."OverrideInformationValue", fd."InformationValue") AS
        "OverrideInformationValue",
    COALESCE(ipfd."OverrideInformationHTML", fd."InformationHTML") AS
        "OverrideInformationHTML",
    COALESCE(ipfd."OverrideInformationIsHTML", fd."InformationIsHTML") AS
        "OverrideInformationIsHTML",
    COALESCE(ipfd."OverrideHelpValue", fd."HelpValue") AS "OverrideHelpValue",
    COALESCE(ipfd."OverrideHelpHTML", fd."HelpHTML") AS "OverrideHelpHTML",
    COALESCE(ipfd."OverrideHelpIsHTML", fd."HelpIsHTML") AS "OverrideHelpIsHTML",
    fd."IsSecuredByClaim",
    fd."IsGlobal",
    fd."FieldDetailTemplateID",
    fd."FieldTypeID",
    ct."Name" AS "IconAlignment",
    fd."IconFileName",
    fd."IsGridColumn",
    fd."FieldMask",
    ipfd."IsVisible",
    ipfd."IsMandatory",
    ipfd."IsFilterable",
    COALESCE(ipfd."OrganisationTypeID", NULL::integer) AS "OrganisationTypeID",
    COALESCE(ipfd."UserTypeID", NULL::uuid) AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ((("InterfacePanelFDOrganisationTypeUserType" ipfd
     LEFT JOIN "FieldDetail" fd ON ((ipfd."FieldDetailID" = fd."FieldDetailID")))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipfd."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipfd."InterfacePanelVersionNumber"))))
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         fd."IconAlignmentTypeID")));

--
-- Definition for view vFieldDetailValidationForUI (OID = 20190) :
--
CREATE VIEW public."vFieldDetailValidationForUI"
AS
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    ipfd."FieldDetailID",
    COALESCE(d."OverrideValidationMessage",
        ipfd."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        ipfd."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", ipfd."OverrideValidationIsHTML")
        AS "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", ipfd."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", ipfd."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(d."ValidationCategory", ipfd."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", ipfd."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", ipfd."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    ipfd."InterfacePanelFieldDetailValidationName",
    d."OrganisationTypeID",
    d."UserTypeID",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelFDValidationOrganisationTypeUserType" d
     LEFT JOIN "InterfacePanelFieldDetailValidation" ipfd ON
         ((((ipfd."FieldDetailID" = d."FieldDetailID") AND (ipfd."InterfacePanelID" = d."InterfacePanelID")) AND (ipfd."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
UNION ALL
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    ipfd."FieldDetailID",
    COALESCE(d."OverrideValidationMessage",
        ipfd."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        ipfd."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", ipfd."OverrideValidationIsHTML")
        AS "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", ipfd."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", ipfd."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(d."ValidationCategory", ipfd."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", ipfd."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", ipfd."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    ipfd."InterfacePanelFieldDetailValidationName",
    d."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelFieldDetailValidationOrganisationType" d
     LEFT JOIN "InterfacePanelFieldDetailValidation" ipfd ON
         ((((ipfd."FieldDetailID" = d."FieldDetailID") AND (ipfd."InterfacePanelID" = d."InterfacePanelID")) AND (ipfd."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))))
UNION ALL
SELECT d."InterfacePanelID",
    d."InterfacePanelVersionNumber",
    ip."Name",
    d."FieldDetailID",
    COALESCE(d."OverrideValidationMessage", d."OverrideValidationMessage")
        AS "OverrideValidationMessage",
    COALESCE(d."OverrideValidationMessageHTML",
        d."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(d."OverrideValidationIsHTML", d."OverrideValidationIsHTML") AS
        "OverrideValidationIsHTML",
    COALESCE(d."ValidationType", d."ValidationType") AS "ValidationType",
    COALESCE(d."ValidationSubType", d."ValidationSubType") AS "ValidationSubType",
    COALESCE(d."ValidationCategory", d."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(d."ValidationSubCategory", d."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(d."SourceErrorCodes", d."SourceErrorCodes") AS "SourceErrorCodes",
    d."IsActive",
    d."IsDeleted",
    d."InterfacePanelFieldDetailValidationName",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    uuid_generate_v1() AS "ID"
FROM ("InterfacePanelFieldDetailValidation" d
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         d."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = d."InterfacePanelVersionNumber"))));

--
-- Definition for view vGlobalAccountingCurrentPeriod (OID = 20195) :
--
CREATE VIEW public."vGlobalAccountingCurrentPeriod"
AS
SELECT gap."GlobalAccountingPeriodID",
    to_date(((((((((((gap."Year" || '-'::text) || gap."Month") ||
        '-'::text) || gap."StartDay") || ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0), 'YYYY-MM-DD HH24:MI:SS'::text) AS "AccountingPeriodStart",
    to_date(((((((((((gap."Year" || '-'::text) || gap."Month") ||
        '-'::text) || gap."EndDay") || ' '::text) || 0) || ':'::text) || 0) || ':'::text) || 0), 'YYYY-MM-DD HH24:MI:SS'::text) AS "AccountingPeriodEnd",
    gap."IsFinancialClosePeriod" AS "AccountingPeriodFinancialClose",
    gdd."IsManuallyDrivenOnly" AS "DDIsManuallyDrivenOnly",
    gdd."GlobalDirectDebitCollectionPeriodID",
    gdd."CollectionDay" AS "DDCollectionDay",
    gdd."CollectionMonth" AS "DDCollectionMonth",
    gdd."CollectionYear" AS "DDCollectionYear",
    gap."PeriodNumber" AS "AccountingPeriodNumber",
    gdd."PeriodNumber" AS "DDPeriodNumber"
FROM ("GlobalAccountingPeriod" gap
     JOIN "GlobalDirectDebitCollectionPeriod" gdd ON
         (((((((gdd."IsCurrentPeriod" = true) AND (gdd."IsActive" = true)) AND (gdd."CollectionMonth" = gap."Month")) AND (gdd."CollectionYear" = gap."Year")) AND (gdd."IsClosed" = false)) AND (gdd."CollectionDay" = (
    SELECT period."CollectionDay"
    FROM "GlobalDirectDebitCollectionPeriod" period
    WHERE (((((period."IsCurrentPeriod" = true) AND (period."IsActive" =
        true)) AND (period."CollectionMonth" = gap."Month")) AND (period."CollectionYear" = gap."Year")) AND (period."IsClosed" = false))
    ORDER BY period."CollectionDay" DESC
    LIMIT 1
    )))))
WHERE ((gap."IsCurrentPeriod" = true) AND (gap."IsClosed" = false));

--
-- Definition for view vGroup (OID = 20200) :
--
CREATE VIEW public."vGroup"
AS
SELECT DISTINCT gt."GroupID",
    gt."GroupName",
    gt."GroupDescription",
    gt."GroupTypeID",
    gt."GroupSubTypeID",
    gt."GroupCategoryID",
    gt."IsActive",
    gt."IsDeleted",
        CASE (orggrp."OrganisationGroupID" IS NOT NULL)
            WHEN true THEN true
            ELSE false
        END AS "IsDisabled"
FROM ("Group" gt
     LEFT JOIN "OrganisationGroup" orggrp ON ((gt."GroupID" =
         orggrp."OrganisationGroupID")));

--
-- Definition for view vInterfacePanelFieldDetails (OID = 20205) :
--
CREATE VIEW public."vInterfacePanelFieldDetails"
AS
SELECT ipfdv."InterfacePanelID",
    ip."Name" AS panelname,
    ipfdv."FieldDetailID",
    fd."Name" AS fieldname,
    ipfdv."OverrideValidationMessage"
FROM (("InterfacePanelFieldDetailValidation" ipfdv
     LEFT JOIN "InterfacePanel" ip ON ((ipfdv."InterfacePanelID" =
         ip."InterfacePanelID")))
     LEFT JOIN "FieldDetail" fd ON ((ipfdv."FieldDetailID" = fd."FieldDetailID")));

--
-- Definition for view vInterfacePanelForUI (OID = 20210) :
--
CREATE VIEW public."vInterfacePanelForUI"
AS
SELECT ipotut."InterfacePanelID",
    ipotut."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ipotut."IsActive",
    ipotut."IsDeleted",
    ipotut."IsVisible",
    ipotut."ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    COALESCE(ipotut."InterfacePanelOrganisationTypeUserTypeLabel",
        ip."InterfacePanelLabel") AS "InterfacePanelLabel",
    ipotut."OrganisationTypeID",
    ipotut."UserTypeID"
FROM ("InterfacePanelOrganisationTypeUserType" ipotut
     LEFT JOIN "InterfacePanel" ip ON (((ipotut."InterfacePanelID" =
         ip."InterfacePanelID") AND (ipotut."InterfacePanelVersionNumber" = ip."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipot."InterfacePanelID",
    ipot."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ipot."IsActive",
    ipot."IsDeleted",
    ipot."IsVisible",
    ipot."ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    COALESCE(ipot."InterfacePanelOrganisationTypeLabel",
        ip."InterfacePanelLabel") AS "InterfacePanelLabel",
    ipot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID"
FROM ("InterfacePanelOrganisationType" ipot
     LEFT JOIN "InterfacePanel" ip ON (((ipot."InterfacePanelID" =
         ip."InterfacePanelID") AND (ipot."InterfacePanelVersionNumber" = ip."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ip."InterfacePanelID",
    ip."InterfacePanelVersionNumber",
    ip."Name",
    ip."Description",
    ip."InterfacePanelTypeID",
    ip."InterfacePanelSubTypeID",
    ip."InterfacePanelCategoryID",
    ip."InterfacePanelSubCategoryID",
    ip."IsActive",
    ip."IsDeleted",
    true AS "IsVisible",
    NULL::uuid AS "ParentID",
    ip."ParentIPID",
    ip."ParentIPVersionNumber",
    ip."IsSecuredByClaim",
    ip."IsGridPanel",
    ip."IsGlobal",
    ip."InterfacePanelLabel",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID"
FROM "InterfacePanel" ip;

--
-- Definition for view vInterfacePanelValidationForUI (OID = 20215) :
--
CREATE VIEW public."vInterfacePanelValidationForUI"
AS
SELECT ipvotut."InterfacePanelID",
    ipvotut."InterfacePanelVersionNumber",
    ip."Name",
    ipvotut."OrganisationTypeID",
    ipvotut."UserTypeID",
    COALESCE(ipvotut."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipvotut."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipvotut."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipvotut."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipvotut."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipvotut."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipvotut."ValidationSubCategory", ipv."ValidationSubCategory")
        AS "ValidationSubCategory",
    COALESCE(ipvotut."SourceErrorCodes", ipv."SourceErrorCodes") AS
        "SourceErrorCodes",
    ipvotut."IsActive",
    ipvotut."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelValidationOrganisationTypeUserType" ipvotut
     LEFT JOIN "InterfacePanelValidation" ipv ON
         (((ipvotut."InterfacePanelID" = ipv."InterfacePanelID") AND (ipvotut."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipvotut."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipvotut."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipvot."InterfacePanelID",
    ipvot."InterfacePanelVersionNumber",
    ip."Name",
    ipvot."OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    COALESCE(ipvot."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipvot."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipvot."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipvot."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipvot."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipvot."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipvot."ValidationSubCategory", ipv."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(ipvot."SourceErrorCodes", ipv."SourceErrorCodes") AS
        "SourceErrorCodes",
    ipvot."IsActive",
    ipvot."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM (("InterfacePanelValidationOrganisationType" ipvot
     LEFT JOIN "InterfacePanelValidation" ipv ON
         (((ipvot."InterfacePanelID" = ipv."InterfacePanelID") AND (ipvot."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))))
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipvot."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipvot."InterfacePanelVersionNumber"))))
UNION ALL
SELECT ipv."InterfacePanelID",
    ipv."InterfacePanelVersionNumber",
    ip."Name",
    NULL::integer AS "OrganisationTypeID",
    NULL::uuid AS "UserTypeID",
    COALESCE(ipv."OverrideValidationMessage",
        ipv."OverrideValidationMessage") AS "OverrideValidationMessage",
    COALESCE(ipv."OverrideValidationMessageHTML",
        ipv."OverrideValidationMessageHTML") AS "OverrideValidationMessageHTML",
    COALESCE(ipv."OverrideValidationIsHTML",
        ipv."OverrideValidationIsHTML") AS "OverrideValidationIsHTML",
    COALESCE(ipv."ValidationType", ipv."ValidationType") AS "ValidationType",
    COALESCE(ipv."ValidationSubType", ipv."ValidationSubType") AS
        "ValidationSubType",
    COALESCE(ipv."ValidationCategory", ipv."ValidationCategory") AS
        "ValidationCategory",
    COALESCE(ipv."ValidationSubCategory", ipv."ValidationSubCategory") AS
        "ValidationSubCategory",
    COALESCE(ipv."SourceErrorCodes", ipv."SourceErrorCodes") AS "SourceErrorCodes",
    ipv."IsActive",
    ipv."IsDeleted",
    ipv."InterfacePanelValidationName" AS "ValidationName",
    uuid_generate_v1() AS "ID"
FROM ("InterfacePanelValidation" ipv
     LEFT JOIN "InterfacePanel" ip ON (((ip."InterfacePanelID" =
         ipv."InterfacePanelID") AND (ip."InterfacePanelVersionNumber" = ipv."InterfacePanelVersionNumber"))));

--
-- Definition for view vInvoiceWithCurrentTransactionOrderStatus (OID = 20220) :
--
CREATE VIEW public."vInvoiceWithCurrentTransactionOrderStatus"
AS
SELECT inv."InvoiceID",
    inv."VatNumber",
    inv."StartDate",
    inv."EndDate",
    inv."Total",
    inv."LastReminder",
    inv."Balance",
    inv."ParentID",
    inv."DueDate",
    inv."CountryCode",
    inv."NumberOfPaymentAttempts",
    inv."CarriedBalance",
    inv."InvoiceTypeID",
    inv."InvoiceNumber",
    inv."InvoiceName",
    inv."CreatedOn",
    inv."CurrencyCode",
    inv."CurrencyRateDate",
    inv."CurrencyRate",
    inv."CurrencyRateToGBP",
    inv."CurrencyRateToUSD",
    inv."InvoiceSubTotalInclTaxAndDeduct",
    inv."InvoiceSubTotalExclTaxAndDeduct",
    inv."InvoiceSubTotalDiscountsInclTaxAndDeduct",
    inv."InvoiceSubTotalDiscountsExclTaxAndDeduct",
    inv."OrganisationID",
    inv."ShoppingCartID",
    inv."OrganisationAccountingPeriodID",
    inv."InvoiceReference",
    inv."IsActive",
    inv."IsDeleted",
    inv."IsClosed",
    inv."IsFrozenPendingPayment",
    st."Name" AS "InvoiceStatus",
    tst."Name" AS "TransactionOrderStatus",
    st."StatusTypeValueID" AS "InvoiceStatusTypeValueID",
    tst."StatusTypeValueID" AS "TransactionOrderStatusTypeValueID",
    tt."TransactionOrderID",
    tt."OrderSubTotalInclTaxAndDeduct",
    tt."OrderSubTotalExclTaxAndDeduct",
    tt."OrderSubTotalDiscountsInclTaxAndDeduct",
    tt."OrderSubTotalDiscountsExclTaxAndDeduct",
    tt."PaymentMethodAdditionalFeesInclTaxAndDeduct",
    tt."PaymentMethodAdditionalFeesExclTaxAndDeduct",
    tt."OrderTaxTotal",
    tt."OrderDiscountTotal",
    tt."OrderTotal",
    tt."RefundedAmount",
    tt."PaymentDate",
    tt."AuthorizationTransactionID",
    tt."AuthorizationTransactionCode",
    tt."AuthorizationTransactionResult",
    tt."CaptureTransactionID",
    tt."CaptureTransactionResult",
    tt."SubscriptionTransactionID",
    tt."TransactionTypeID",
    tt."PaymentMethodTypeID",
    tt."TransactionGatewayTypeID",
    tt."TransactionOrderReference",
    tt."GlobalPaymentMethodID",
    tt."OrderDeductionTotal",
    tt."TaxTotalPercentage",
    tt."TaxTotalValue",
    tt."DeductionTotalPercentage",
    tt."DeductionTotalValue",
    tt."DiscountTotalPercentage",
    tt."DiscountTotalValue",
    gap."IsCurrentPeriod" AS "AccountPeriodIsCurrent",
    gap."IsClosed" AS "AccountingPeriodIsClosed",
    gap."PeriodNumber" AS "AccountingPeriodNumber",
    gap."StartDay" AS "AccountingPeriodStartDay",
    gap."EndDay" AS "AccountingPeriodEndDay",
    gap."Month" AS "AccountingPeriodMonth",
    gap."Year" AS "AccountingPeriodYear"
FROM ((((((("Invoice" inv
     LEFT JOIN "OrganisationAccountingPeriod" oap ON
         ((oap."OrganisationAccountingPeriodID" = inv."OrganisationAccountingPeriodID")))
     LEFT JOIN "GlobalAccountingPeriod" gap ON
         ((gap."GlobalAccountingPeriodID" = oap."GlobalAccountingPeriodID")))
     LEFT JOIN "TransactionOrder" tt ON ((tt."InvoiceID" = inv."InvoiceID")))
     LEFT JOIN "InvoiceProcessLog" ipl ON (((ipl."InvoiceID" =
         inv."InvoiceID") AND (ipl."CreatedOn" = (
    SELECT max(ipt."CreatedOn") AS max
    FROM "InvoiceProcessLog" ipt
    WHERE (ipt."InvoiceID" = inv."InvoiceID")
    LIMIT 1
    )))))
     LEFT JOIN "TransactionOrderProcessLog" topl ON
         (((topl."TransactionOrderID" = tt."TransactionOrderID") AND (topl."CreatedOn" = (
    SELECT max(topt."CreatedOn") AS max
    FROM "TransactionOrderProcessLog" topt
    WHERE (topt."TransactionOrderID" = tt."TransactionOrderID")
    LIMIT 1
    )))))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         ipl."StatusTypeID") AND (st."StatusTypeVersionNumber" = ipl."StatusTypeVersionNumber")) AND (st."StatusTypeValueID" = ipl."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" tst ON ((((tst."StatusTypeID" =
         topl."StatusTypeID") AND (tst."StatusTypeVersionNumber" = topl."StatusTypeVersionNumber")) AND (tst."StatusTypeValueID" = topl."StatusTypeValueID"))));

--
-- Definition for view vNotificationConstruct (OID = 20225) :
--
CREATE VIEW public."vNotificationConstruct"
AS
SELECT nc."NotificationConstructID",
    nc."NotificationConstructVersionNumber",
    nc."DefaultNotificationDeliveryMethodID",
    nc."DefaultNotificationExportFormatID",
    nc."Name",
    nc."Description",
    nc."NotificationTitle",
    nc."NotificationSubject",
    nc."NotificationDetails",
    nc."NotificationReference",
    nc."NotificationAdditionalDetails",
    nc."CanBeIncludedInBatchNotification",
    nc."IsActive",
    nc."IsDeleted",
    nc."NotificationConstructTypeID",
    nc."NotificationConstructCategoryID",
    ct1."Name" AS "TypeName",
    ct2."Name" AS "CategoryName",
    ct4."Name" AS "ExportFormatName",
    ct5."Name" AS "DeliveryMethodName",
    nc."ExternalRelatedNotificationConstructID",
    nc."ExternalRelatedNotificationConstructVersionNumber"
FROM (((("NotificationConstruct" nc
     LEFT JOIN "ClassificationType" ct1 ON ((ct1."ClassificationTypeID" =
         nc."NotificationConstructTypeID")))
     LEFT JOIN "ClassificationType" ct2 ON ((ct2."ClassificationTypeID" =
         nc."NotificationConstructCategoryID")))
     LEFT JOIN "ClassificationType" ct4 ON ((ct4."ClassificationTypeID" =
         nc."DefaultNotificationExportFormatID")))
     LEFT JOIN "ClassificationType" ct5 ON ((ct5."ClassificationTypeID" =
         nc."DefaultNotificationDeliveryMethodID")));

--
-- Definition for view vNotificationConstructGroup (OID = 20230) :
--
CREATE VIEW public."vNotificationConstructGroup"
AS
SELECT ncg."NotificationConstructGroupNotificationConstructID",
    ncg."NotificationConstructGroupNotificationConstructVersion",
    ng."NotificationConstructGroupID",
    ng."NotificationConstructGroupVersion",
    ng."Name" AS "GroupName",
    ng."Description" AS "GroupDescription",
    ng."IsActive" AS "GroupIsActive",
    ng."IsDeleted" AS "GroupIsDeleted",
    ncg."UserTypeID",
    ncg."NotificationConstructID",
    ncg."NotificationConstructVersionNumber",
    ncg."WorkflowID",
    ncg."WorkflowVersionNumber",
    ncg."IsActive",
    ncg."IsDeleted",
    ncg."ConditionString",
    ncg."OrganisationTypeID",
    nc."Name" AS "NotificationConstructName",
    nc."Description" AS "NotificationConstructDescription",
    nc."IsActive" AS "NotificationConstructIsActive",
    nc."IsDeleted" AS "NotificationConstructIsDeleted",
    nc."NotificationSubject" AS "NotificationConstructSubject",
    nc."NotificationTitle" AS "NotificationConstructTitle"
FROM (("NotificationConstructGroupNotificationConstruct" ncg
     LEFT JOIN "NotificationConstructGroup" ng ON
         (((ng."NotificationConstructGroupID" = ncg."NotificationConstructGroupID") AND (ng."NotificationConstructGroupVersion" = ncg."NotificationConstructGroupVersion"))))
     LEFT JOIN "NotificationConstruct" nc ON
         (((nc."NotificationConstructID" = ncg."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = ncg."NotificationConstructVersionNumber"))));

--
-- Definition for view vNotificationConstructGroupNotificationConstruct (OID = 20235) :
--
CREATE VIEW public."vNotificationConstructGroupNotificationConstruct"
AS
SELECT ncgnc."NotificationConstructID",
    ncgnc."NotificationConstructVersionNumber",
    ncgnc."NotificationConstructGroupID",
    ncgnc."NotificationConstructGroupVersion",
    ncg."Name",
    ncgnc."OrganisationTypeID",
    ot."Name" AS "OrganisationType",
    ncgnc."UserTypeID",
    ut."Name" AS "UserType",
    wf."WorkflowID",
    wf."WorkflowVersionNumber",
    wf."Name" AS "WorkflowName",
    ncgnc."ConditionString"
FROM (((("NotificationConstructGroupNotificationConstruct" ncgnc
     LEFT JOIN "NotificationConstructGroup" ncg ON
         (((ncgnc."NotificationConstructGroupID" = ncg."NotificationConstructGroupID") AND (ncgnc."NotificationConstructGroupVersion" = ncg."NotificationConstructGroupVersion"))))
     LEFT JOIN "Workflow" wf ON (((wf."WorkflowID" = ncgnc."WorkflowID")
         AND (wf."WorkflowVersionNumber" = ncgnc."WorkflowVersionNumber"))))
     LEFT JOIN "UserType" ut ON ((ncgnc."UserTypeID" = ut."UserTypeID")))
     LEFT JOIN "OrganisationType" ot ON ((ncgnc."OrganisationTypeID" =
         ot."OrganisationTypeID")))
WHERE ((ncgnc."IsActive" = true) AND (ncgnc."IsDeleted" = false));

--
-- Definition for view vUserAccountOrganisationUserTypeOrganisationType (OID = 20240) :
--
CREATE VIEW public."vUserAccountOrganisationUserTypeOrganisationType"
AS
SELECT uao."UserAccountOrganisationID",
    uao."UserID",
    uao."UserTypeID",
    ut."Name" AS "UserType",
    uao."OrganisationID",
    ot."OrganisationTypeID",
    ot."Name" AS "OrganisationType"
FROM (((("UserAccountOrganisation" uao
     LEFT JOIN "Organisation" org ON ((uao."OrganisationID" =
         org."OrganisationID")))
     LEFT JOIN "Organisation" parentorg ON ((org."ParentOrganisationID" =
         parentorg."OrganisationID")))
     LEFT JOIN "OrganisationType" ot ON ((parentorg."OrganisationTypeID" =
         ot."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((uao."UserTypeID" = ut."UserTypeID")))
WHERE ((uao."IsActive" = true) AND (uao."IsDeleted" = false));

--
-- Definition for view vNotificationRecipientStatus (OID = 20245) :
--
CREATE VIEW public."vNotificationRecipientStatus"
AS
SELECT uao."UserAccountOrganisationID",
    nr."NotificationID",
    n."NotificationStatusID",
    n."NotificationConstructID",
    n."NotificationConstructVersionNumber",
    nrl."NotificationDeliveryMethodID",
    nrl."NotificationExportFormatID",
    n."DateSent",
    n."IsSent",
    n."IsActive",
    n."IsDeleted",
    nr."IsAccepted",
    nr."AcceptedDate",
    nrl."IsRead",
    nrl."CreatedOn",
    nrl."ErrorOccured",
    nrl."SentOn",
    (((n."NotificationData" -> 'NotificationDictionary'::text) ->
        'TermsConditionsDataDTO'::text) -> 'VerificationCode'::text) AS "NotificationVerificationCode",
    nrl."NotificationRecipientID",
    nrl."NotificationRecipientLogID",
    nr."OrganisationID",
    nr."ParentID" AS "RecipientParent",
    nr."ToParentID" AS "RecipientToParent",
    n."ParentID",
    n."FromParentID"
FROM (((("Notification" n
     JOIN "NotificationRecipient" nr ON ((nr."NotificationID" =
         n."NotificationID")))
     JOIN "UserAccountOrganisation" uao ON
         ((uao."UserAccountOrganisationID" = nr."UserAccountOrganisationID")))
     JOIN "vUserAccountOrganisationUserTypeOrganisationType" uatt ON
         ((uatt."UserAccountOrganisationID" = uao."UserAccountOrganisationID")))
     JOIN "NotificationRecipientLog" nrl ON
         (((nrl."NotificationRecipientID" = nr."NotificationRecipientID") AND (nrl."CreatedOn" = (
    SELECT nrl2."CreatedOn"
    FROM "NotificationRecipientLog" nrl2
    WHERE (nrl2."NotificationRecipientID" = nr."NotificationRecipientID")
    ORDER BY nrl2."CreatedOn" DESC
    LIMIT 1
    )))));

--
-- Definition for view vNotificationWithUAOVerificationCode (OID = 20250) :
--
CREATE VIEW public."vNotificationWithUAOVerificationCode"
AS
SELECT nr."UserAccountOrganisationID",
    nr."NotificationID",
    n."NotificationConstructID",
    n."NotificationConstructVersionNumber",
    ncg."GroupName",
    ncg."GroupDescription",
    ncg."NotificationConstructName",
    ncg."NotificationConstructSubject",
    ncg."NotificationConstructTitle",
    n."DateSent",
    n."IsSent",
    n."IsActive",
    n."IsDeleted",
    nr."IsAccepted",
    nr."AcceptedDate",
    ncg."UserTypeID",
    ncg."OrganisationTypeID",
    nrl."IsRead",
    nrl."CreatedOn",
    nrl."ErrorOccured",
    nrl."SentOn",
    (((n."NotificationData" -> 'NotificationDictionary'::text) ->
        'TermsConditionsDataDTO'::text) -> 'VerificationCode'::text) AS "NotificationVerificationCode"
FROM ((("Notification" n
     JOIN "NotificationRecipient" nr ON ((nr."NotificationID" =
         n."NotificationID")))
     JOIN "NotificationRecipientLog" nrl ON
         (((nrl."NotificationRecipientID" = nr."NotificationRecipientID") AND (nrl."CreatedOn" = (
    SELECT nrl2."CreatedOn"
    FROM "NotificationRecipientLog" nrl2
    WHERE (nrl2."NotificationRecipientID" = nr."NotificationRecipientID")
    ORDER BY nrl2."CreatedOn" DESC
    LIMIT 1
    )))))
     JOIN "vNotificationConstructGroup" ncg ON
         (((ncg."NotificationConstructID" = n."NotificationConstructID") AND (ncg."NotificationConstructVersionNumber" = n."NotificationConstructVersionNumber"))));

--
-- Definition for view vOrganisation (OID = 20255) :
--
CREATE VIEW public."vOrganisation"
AS
SELECT o."OrganisationID",
    otype."Name" AS "TypeName",
    otype."OrganisationTypeID",
    od."Name",
    od."Description",
    o."IsBranch",
    o."IsHeadOffice",
    o."IsActive",
    o."IsDeleted"
FROM (("OrganisationDetail" od
     LEFT JOIN "Organisation" o ON ((o."OrganisationID" = od."OrganisationID")))
     LEFT JOIN "OrganisationType" otype ON ((o."OrganisationTypeID" =
         otype."OrganisationTypeID")))
WHERE ((o."IsBranch" = false) AND (o."IsHeadOffice" = false));

--
-- Definition for view vOrganisationCheckoutDiscount (OID = 20260) :
--
CREATE VIEW public."vOrganisationCheckoutDiscount"
AS
SELECT d."ParentID",
    o."OrganisationID",
    d."CreatedOn",
    d."DiscountAmount",
    d."DiscountApplyOnID",
    d."Description",
    d."DiscountID",
    d."DiscountPercentage",
    d."DiscountPeriod",
    d."DiscountQuantity",
    d."DiscountStatusID",
    d."DiscountTypeID",
    d."DiscountVersionNumber",
    d."DisocuntPeriodUnitID",
    d."InvoiceName",
    d."IsPercentage",
    d."IsRecurring",
    d."MaxRedemptions",
    d."Name",
    d."ValidTill",
    ct."Name" AS "DiscountStatus",
    ct1."Name" AS "DiscountType",
    ct2."Name" AS "DiscountApplyIn",
    ct3."Name" AS "PeriodUnit",
    d."IsSingleProductDiscount",
    d."IsCheckoutDiscount",
    d."IsSingleProductQuantityDiscount",
    d."SingleProductQuantityDiscountDivisor",
    d."IsSingleProductQuantityDiscountPercentageBased",
    d."IsSingleProductQuantityDiscountAdditionalQuantityBased",
    d."SingleProductQuantityDiscountAdditionalQuantity",
    d."IsMultipleProductCombinationDiscount",
    d."IsMultipleProductCombinationDiscountPercentageBased",
    d."IsMultipleProductCombinationDiscountCheapestFreeBased"
FROM (((((("Organisation" o
     LEFT JOIN "OrganisationDiscount" pd ON ((((pd."IsActive" = true) AND
         (pd."IsDeleted" = false)) AND (pd."OrganisationID" = o."OrganisationID"))))
     LEFT JOIN "Discount" d ON (((((d."DiscountID" = pd."DiscountID") AND
         (d."DiscountVersionNumber" = pd."DiscountVersionNumber")) AND (d."IsActive" = true)) AND (d."IsDeleted" = false))))
     LEFT JOIN "ClassificationType" ct ON (((ct."ClassificationTypeID" =
         d."DiscountStatusID") AND (ct."ClassificationTypeCategoryID" = 8010))))
     LEFT JOIN "ClassificationType" ct1 ON (((ct1."ClassificationTypeID" =
         d."DiscountTypeID") AND (ct1."ClassificationTypeCategoryID" = 8008))))
     LEFT JOIN "ClassificationType" ct2 ON (((ct2."ClassificationTypeID" =
         d."DiscountApplyOnID") AND (ct2."ClassificationTypeCategoryID" = 8011))))
     LEFT JOIN "ClassificationType" ct3 ON (((ct3."ClassificationTypeID" =
         d."DisocuntPeriodUnitID") AND (ct3."ClassificationTypeCategoryID" = 8006))))
WHERE (d."IsCheckoutDiscount" = true);

--
-- Definition for view vOrganisationDetail (OID = 20270) :
--
CREATE VIEW public."vOrganisationDetail"
AS
SELECT org."OrganisationID",
    org."OrganisationTypeID",
    org."OrganisationSubTypeID",
    org."OrganisationCategoryID",
    org."IsBranch",
    org."IsHeadOffice",
    org."IsActive",
    org."IsDeleted",
    org."IsUserOrganisation",
    org."CreatedOn",
    org."CreatedBy",
    org."ModifiedOn",
    org."ModifiedBy",
    org."OrganisationSubCategoryID",
    org."DefaultOrganisationID",
    org."DefaultOrganisationVersionNumber",
    org."ParentID",
    org."ParentOrganisationID",
    org."IsPaymentProvider",
    ct."ContactID",
    ct."ContactName",
    ct."MasterContactID",
    ct."OwnerID",
    ct."CustomerTypeID",
    ct."PreferredContactMethodID",
    ct."IsBackOfficeCustomer",
    ct."Salutation",
    ct."JobTitle",
    ct."FirstName",
    ct."Department",
    ct."NickName",
    ct."MiddleName",
    ct."LastName",
    ct."BirthDate",
    ct."Description",
    ct."GenderTypeID",
    ct."HasChildren",
    ct."EducationTypeID",
    ct."WebSiteURL",
    ct."EmailAddress1",
    ct."EmailAddress2",
    ct."EmailAddress3",
    ct."AssistantName",
    ct."AssistantPhone",
    ct."ManagerName",
    ct."ManagerPhone",
    ct."CountryTypeID",
    ct."DoNotFax",
    ct."DoNotEmail",
    ct."DoNotTelephone",
    ct."IsPrivate",
    ct."Telephone1",
    ct."Telephone2",
    ct."Telephone3",
    ct."Fax",
    ct."MobileNumber1",
    ct."MobileNumber2",
    ct."MobileNumber3",
    ct."OrganisationUnitID",
    ct."ParentContactID",
    ct."IsPrimaryContact",
    ct."ContactTypeID",
    ct."ContactSubTypeID",
    ct."ContactCategoryID",
    ct."FirmName",
    add."AddressID",
    add."Name",
    add."PrimaryContactName",
    add."Line1",
    add."Line2",
    add."Line3",
    add."City",
    add."StateOrProvince",
    add."County",
    add."Country",
    add."PostOfficeBox",
    add."PostalCode",
    add."UTCOffSet",
    add."Latitude",
    add."Longitude",
    add."AddressTypeID",
    add."AddressNumber",
    add."IsPrimaryAddress",
    add."AddressCategoryID",
    add."AddressSubTypeID",
    add."BuildingName",
    add."Order",
    add."CountryCode",
    add."AdditionalAddressInformation",
    add."Town",
    lod."IsVATRegistered",
    lod."VATNumber",
    lod."IsCompanyHouseRegistered",
    lod."RegisteredCompanyNumber",
    lod."PartnersCount",
    lod."RegisteredPractitionersCount",
    lod."StaffCount",
    lod."MonthlyCompletionsCount"
FROM (((("Organisation" org
     JOIN "OrganisationDetail" od ON ((od."OrganisationID" =
         org."OrganisationID")))
     JOIN "Contact" ct ON ((ct."ParentID" = org."OrganisationID")))
     JOIN "Address" add ON ((add."ParentID" = ct."ContactID")))
     LEFT JOIN legal."LegalOrganisationDetails" lod ON
         ((lod."OrganisationID" = org."OrganisationID")));

--
-- Definition for view vOrganisationFinancialStatus (OID = 20275) :
--
CREATE VIEW public."vOrganisationFinancialStatus"
AS
SELECT ofd."OrganisationFinancialDetailID",
    ofd."FinancialStatusTypeID",
    ofd."FinancialStatusTypeVersionNumber",
    ofd."FinancialStatusTypeValueID",
    ofd."HasACreditLimit",
    ofd."CreditLimit",
    ofd."NumberOfLatePayments",
    ofd."HasLatePayments",
    org."OrganisationID",
    org."Name",
    st."Name" AS "FinancialStatus"
FROM (("OrganisationFinancialDetail" ofd
     LEFT JOIN "vOrganisation" org ON ((org."OrganisationID" =
         ofd."OrganisationID")))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         ofd."FinancialStatusTypeID") AND (st."StatusTypeVersionNumber" = ofd."FinancialStatusTypeVersionNumber")) AND (st."StatusTypeValueID" = ofd."FinancialStatusTypeValueID"))));

--
-- Definition for view vOrganisationPaymentMethodStatus (OID = 20280) :
--
CREATE VIEW public."vOrganisationPaymentMethodStatus"
AS
SELECT bb."OrganisationID",
    bb."GlobalPaymentMethodID",
    bb."OrganisationBankAccountId",
    bb."IsActive",
    bb."IsDeleted",
    bb."IsDirectDebit",
    bb."IsBACS",
    bb."OrganisationDirectDebitMandateID",
    bb."IsPrimary",
    bb."StatusTypeID",
    bb."StatusTypeVersionNumber",
    bb."StatusTypeValueID",
    st."Name" AS "PaymentMethodStatus",
    org."Name" AS "OrganisationName"
FROM (("OrganisationPaymentMethod" bb
     LEFT JOIN "vOrganisation" org ON ((org."OrganisationID" =
         bb."OrganisationID")))
     LEFT JOIN "vStatusType" st ON ((((st."StatusTypeID" =
         bb."StatusTypeID") AND (st."StatusTypeVersionNumber" = bb."StatusTypeVersionNumber")) AND (st."StatusTypeValueID" = bb."StatusTypeValueID"))));

--
-- Definition for view vOrganisationStatus (OID = 20285) :
--
CREATE VIEW public."vOrganisationStatus"
AS
SELECT os."OrganisationID",
    org."IsBranch",
    org."IsActive",
    org."IsDeleted",
    org."IsHeadOffice",
    org."IsUserOrganisation",
    st."Name" AS "StatusTypeName",
    st."StatusTypeID",
    st."StatusTypeVersionNumber",
    st."StatusTypeTemplateID",
    st."StatusTypeTemplateVersionNumber",
    stv."StatusTypeValueID",
    stv."Name" AS "StatusValueName",
    os."StatusChangedOn",
    os."StatusChangedBy",
    stt."StatusOrder",
    stt."IsStart",
    stt."IsEnd",
    stt1."StatusTypeValueID" AS "NextStatusTypeValueID",
    stt1."Name" AS "NextStatusTypeName",
    stt1."StatusOrder" AS "NextStatusOrder",
    stt1."IsStart" AS "NextStatusStart",
    stt1."IsEnd" AS "NextStatusEnd"
FROM ((((("OrganisationStatus" os
     LEFT JOIN "Organisation" org ON ((org."OrganisationID" =
         os."OrganisationID")))
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" = os."StatusTypeID")
         AND (st."StatusTypeVersionNumber" = os."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeValue" stv ON ((stv."StatusTypeValueID" =
         os."StatusTypeValueID")))
     LEFT JOIN "vStatusType" stt ON ((((stt."StatusTypeID" =
         os."StatusTypeID") AND (stt."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt."StatusTypeValueID" = os."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" stt1 ON ((((stt1."StatusTypeID" =
         os."StatusTypeID") AND (stt1."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt1."StatusOrder" = (stt."StatusOrder" + 1)))));

--
-- Definition for view vOrganisationUserType (OID = 20290) :
--
CREATE VIEW public."vOrganisationUserType"
AS
SELECT org."OrganisationID",
    branch."OrganisationID" AS organisationbranchid,
    dout."DefaultOrganisationID",
    ut."Name",
    ut."UserTypeID"
FROM ((("UserType" ut
     LEFT JOIN "DefaultOrganisationUserTarget" dout ON (((ut."UserTypeID" =
         dout."UserTypeID") AND (dout."IsDefault" = true))))
     LEFT JOIN "Organisation" org ON (((dout."DefaultOrganisationID" =
         org."DefaultOrganisationID") AND (org."IsBranch" = false))))
     LEFT JOIN "Organisation" branch ON ((((dout."DefaultOrganisationID" =
         branch."DefaultOrganisationID") AND (branch."IsBranch" = true)) AND (branch."ParentOrganisationID" = org."OrganisationID"))));

--
-- Definition for view vOrgansiationClaim (OID = 20295) :
--
CREATE VIEW public."vOrgansiationClaim"
AS
SELECT orc."OrganisationID",
    orc."OrganisationRoleID",
    orgr."RoleName",
    orgr."RoleDescription",
        CASE
            WHEN (re."ResourceID" IS NULL) THEN 'State'::text
            ELSE 'Resource'::text
        END AS "ClaimType",
    COALESCE(re."ResourceID", s."StateID") AS "ClaimID",
    COALESCE(re."ResourceName", s."StateName") AS "ClaimName",
    COALESCE(re."ResourceDescription", s."StateDescription") AS "ClaimDescription",
        CASE
            WHEN (op."OperationID" IS NULL) THEN 'StateItem'::text
            ELSE 'Operation'::text
        END AS "ClaimSubType",
    COALESCE(op."OperationID", si."StateItemID") AS "ClaimSubID",
        CASE
            WHEN (op."OperationName" IS NULL) THEN (
            CASE
                WHEN (psi."StateItemName" IS NULL) THEN (si."StateItemName")::text
                ELSE (((psi."StateItemName")::text || '_'::text) ||
                    (si."StateItemName")::text)
            END)::character varying
            ELSE op."OperationName"
        END AS "ClaimSubName",
        CASE
            WHEN (op."OperationDescription" IS NULL) THEN (
            CASE
                WHEN (psi."StateItemDescription" IS NULL) THEN
                    (si."StateItemDescription")::text
                ELSE (((psi."StateItemDescription")::text || '_'::text) ||
                    (si."StateItemDescription")::text)
            END)::character varying
            ELSE op."OperationDescription"
        END AS "ClaimSubDescription",
    orgr."ParentID",
        CASE
            WHEN (orgr."ParentID" IS NOT NULL) THEN
            CASE
                WHEN (wr."WorkflowRoleID" IS NOT NULL) THEN 'Workflow'::text
                WHEN (mr."ModuleID" IS NOT NULL) THEN (('Module'::text ||
                    ' '::text) || (mr."Name")::text)
                WHEN (ar."ArtefactID" IS NOT NULL) THEN (('Artefact'::text
                    || ' '::text) || (ar."Name")::text)
                WHEN (dor."DefaultOrganisationID" IS NOT NULL) THEN
                    (('Organisation Template'::text || ' '::text) || (dor."Name")::text)
                WHEN (str."StatusTypeID" IS NOT NULL) THEN
                    (('Status Type'::text || ' '::text) || (str."Name")::text)
                WHEN (ro."RoleID" IS NOT NULL) THEN 'Global Role'::text
                WHEN (ncr."NotificationConstructID" IS NOT NULL) THEN
                    (('Notification Construct'::text || ' '::text) || (ncr."Name")::text)
                ELSE NULL::text
            END
            ELSE NULL::text
        END AS "RoleSource",
    COALESCE(ctr."Name", cts."Name") AS "ClaimTypeName"
FROM ((((((((((((((("OrganisationRoleClaim" orc
     LEFT JOIN "OrganisationRole" orgr ON ((orc."OrganisationRoleID" =
         orgr."OrganisationRoleID")))
     LEFT JOIN "Resource" re ON ((re."ResourceID" = orc."ResourceID")))
     LEFT JOIN "Operation" op ON ((op."OperationID" = orc."OperationID")))
     LEFT JOIN "State" s ON ((s."StateID" = orc."StateID")))
     LEFT JOIN "StateItem" si ON ((si."StateItemID" = orc."StateItemID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")))
     LEFT JOIN "WorkflowRole" wr ON ((wr."WorkflowRoleID" = orgr."ParentID")))
     LEFT JOIN "Module" mr ON ((mr."ModuleID" = (
    SELECT "ModuleRole"."ModuleID"
    FROM "ModuleRole"
    WHERE ("ModuleRole"."RoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "Artefact" ar ON ((ar."ArtefactID" = (
    SELECT "ArtefactRole"."ArtefactID"
    FROM "ArtefactRole"
    WHERE ("ArtefactRole"."ArtefactRoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "StatusType" str ON (((str."StatusTypeID" = (
    SELECT "StatusTypeRole"."StatusTypeID"
    FROM "StatusTypeRole"
    WHERE ("StatusTypeRole"."StatusTypeRoleID" = orgr."ParentID")
    ORDER BY "StatusTypeRole"."StatusTypeVersionNumber" DESC
    LIMIT 1
    )) AND (str."StatusTypeVersionNumber" = (
    SELECT "StatusTypeRole"."StatusTypeVersionNumber"
    FROM "StatusTypeRole"
    WHERE ("StatusTypeRole"."StatusTypeRoleID" = orgr."ParentID")
    ORDER BY "StatusTypeRole"."StatusTypeVersionNumber" DESC
    LIMIT 1
    )))))
     LEFT JOIN "NotificationConstruct" ncr ON ((ncr."NotificationConstructID" = (
    SELECT "NotificationConstructRole"."NotificationConstructID"
    FROM "NotificationConstructRole"
    WHERE ("NotificationConstructRole"."NotificationRoleConstructID" =
        orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "DefaultOrganisation" dor ON ((dor."DefaultOrganisationID" = (
    SELECT "DefaultOrganisationRole"."DefaultOrganisationID"
    FROM "DefaultOrganisationRole"
    WHERE ("DefaultOrganisationRole"."DefaultOrganisationRoleID" = orgr."ParentID")
    LIMIT 1
    ))))
     LEFT JOIN "Role" ro ON ((ro."RoleID" = orgr."ParentID")))
     LEFT JOIN "ClassificationType" ctr ON ((ctr."ClassificationTypeID" =
         re."ResourceTypeID")))
     LEFT JOIN "ClassificationType" cts ON ((cts."ClassificationTypeID" =
         s."StateTypeID")))
WHERE ((orgr."IsActive" = true) AND (orgr."IsDeleted" = false));

--
-- Definition for view vPlanSubscriptionStatusWithBillingAndPaymentMethodStatus (OID = 20300) :
--
CREATE VIEW public."vPlanSubscriptionStatusWithBillingAndPaymentMethodStatus"
AS
SELECT "PlanSubscription"."PlanSubscriptionID",
    "PlanSubscription"."PlanSubscriptionVersionNumber",
    "PlanSubscription"."HasInfinitePeriods",
    "PlanSubscription"."PlanQuantity",
    "PlanSubscription"."CreatedOn",
    "PlanSubscription"."CreatedBy",
    "PlanSubscription"."ActivatedOn",
    "PlanSubscription"."CancelledOn",
    "PlanSubscription"."CancelReasonID",
    "PlanSubscription"."DueInvoicesCount",
    "PlanSubscription"."DueSince",
    "PlanSubscription"."DueAmount",
    "PlanSubscription"."IsActive",
    "PlanSubscription"."IsDeleted",
    "PlanSubscription"."IsFree",
    "PlanSubscription"."OrganisationID",
    "PlanSubscription"."IsRenewal",
    "PlanSubscription"."RenewedOn",
    "PlanSubscription"."PlanSubscriptionReference",
    "Plan"."Name" AS "PlanName",
    "Plan"."InvoiceName",
    "Plan"."Price",
    "Plan"."Period",
    "Plan"."PlanID",
    "Plan"."PlanVersionNumber",
    "Plan"."TrialPeriod",
    "Plan"."PeriodUnitID",
    "Plan"."TrialPeriodUnitID",
    "Plan"."FreeQuantity",
    "Plan"."SetupCost",
    "Plan"."DowngradePenalty",
    "Plan"."CountryCode",
    "Plan"."CurrencyCode",
    "Plan"."CancellationPeriod",
    "Plan"."CancellationPeriodUnitID",
    "Plan"."PlanStatusID",
    "Plan"."IsTransactionBased",
    "Plan"."CoolOffPeriod",
    "Plan"."CoolOffPeriodUnitID",
    "Plan"."RenewalPrice",
    "Plan"."RenewalPercentage",
    "Plan"."RenewalIsPercentageOfOriginalPrice",
    "Plan"."HasForwardCycleFee",
    "Plan"."ForwardCycleFee",
    "Plan"."ForwardCycleFreeIsSameAsPrice",
    "Plan"."RenewalOfferPeriod",
    "Plan"."RenewalOfferPeriodUnitID",
    "Plan"."ForwardCycleFeePeriod",
    "Plan"."ForwardCycleFeePeriodUnitID",
    "Plan"."HasRenewalOffer",
    "Plan"."PriceDailyProRata",
    "Plan"."IsAutoRenew",
    "Plan"."AutoRenewDecisionPeriod",
    "Plan"."AutoRenewDecisionUnitID",
    "Plan"."AutoRenewPeriod",
    "Plan"."AutoRenewPeriodUnitID",
    "Plan"."PlanGroupID",
    "Plan"."PlanTypeID",
    "Plan"."PlanCategoryID",
    "PlanSubscriptionPaymentPlan"."BillingID",
    "PlanSubscriptionPaymentPlan"."GlobalPaymentMethodID",
    "vStatusType"."Name" AS "PlanSubscriptionStatus",
    "vStatusType"."StatusTypeName" AS "PlanSubscriptionStatusTypeName",
    "vStatusType"."StatusOrder" AS "PlanSubscriptionStatusOrder",
    "vStatusType"."StatusTypeValueID" AS "PlanSubscriptionStatusTypeValueID",
    "vStatusType"."StatusTypeID" AS "PlanSubscriptionStatusTypeID",
    "vStatusType"."StatusTypeVersionNumber" AS
        "PlanSubscriptionStatusTypeVersionNumber",
    "vStatusType"."IsStart" AS "PlanSubscriptionStatusIsStart",
    "vStatusType"."IsEnd" AS "PlanSubscriptionStatusIsEnd",
    "PlanSubscriptionProcessLog"."IsCancelled",
    "PlanSubscriptionProcessLog"."IsRenewed",
    "PlanSubscriptionProcessLog"."CreatedOn" AS "PlanSubscriptionStatusCreatedOn",
    "PlanSubscriptionProcessLog"."PlanSubscriptionStatusDetail",
    "PlanGroup"."Name",
    "OrganisationPaymentMethod"."OrganisationBankAccountId",
    "OrganisationPaymentMethod"."IsDirectDebit",
    "OrganisationPaymentMethod"."IsBACS",
    "OrganisationPaymentMethod"."OrganisationDirectDebitMandateID",
    "OrganisationPaymentMethod"."IsPrimary",
    "OrganisationPaymentMethod"."DirectDebitMonthCollectionPeriodNumber",
    "OrganisationPaymentMethod"."BACSMonthPaymentDay",
    "OrganisationPaymentMethod"."DirectDebitNumberOfNotificationDaysBeforeCollection",
    "OrganisationPaymentMethod"."BACSNumberOfNotificationDaysBeforeExpectationOfPayment",
    "vStatusType1"."Name" AS "OrganisationPaymentMethodStatus",
    "vStatusType1"."StatusTypeName" AS "OrganisationPaymentMethodStatusTypeName",
    "vStatusType1"."StatusOrder" AS "OrganisationPaymentMethodStatusOrder",
    "vStatusType1"."StatusTypeValueID" AS
        "OrganisationPaymentMethodStatusTypeValueID",
    "vStatusType1"."StatusTypeID" AS "OrganisationPaymentMethodStatusTypeID",
    "vStatusType1"."StatusTypeVersionNumber" AS
        "OrganisationPaymentMethodStatusTypeVersionNumber",
    "vStatusType1"."IsStart" AS "OrganisationPaymentMethodStatusIsStart",
    "vStatusType1"."IsEnd" AS "OrganisationPaymentMethodStatusIsEnd",
    "Billing"."BillingPeriod",
    "Billing"."BillingPeriodUnitID",
    "Billing"."BillingLagPeriod",
    "Billing"."BillingLagPeriodUnitID",
    "Billing"."BillingPeriodDayOfMonth",
    "Billing"."DelayedBillingPeriod",
    "Billing"."DelayedBillingPeriodUnitID",
    "Billing"."HasDelayedBilling",
    "Billing"."NumberOfBillingPeriods",
    "Billing"."InvoiceToProcessingDelayPeriod",
    "Billing"."InvoiceToProcessingDelayPeriodUnitID",
    "Billing"."InvoiceNotificationConstructID",
    "Billing"."InvoiceNotificationConstructVersionNumber",
    "Billing"."EstimatedProcessingPeriod",
    "Billing"."EstimatedProcessingPeriodUnitID"
FROM (((((((("PlanSubscription"
     JOIN "Plan" ON ((("PlanSubscription"."PlanID" = "Plan"."PlanID") AND
         ("PlanSubscription"."PlanVersionNumber" = "Plan"."PlanVersionNumber"))))
     JOIN "PlanSubscriptionPaymentPlan" ON
         ((("PlanSubscription"."PlanSubscriptionID" = "PlanSubscriptionPaymentPlan"."PlanSubscriptionID") AND ("PlanSubscription"."PlanSubscriptionVersionNumber" = "PlanSubscriptionPaymentPlan"."PlanSubscriptionVersionNumber"))))
     JOIN "PlanSubscriptionProcessLog" ON
         ((("PlanSubscription"."PlanSubscriptionID" = "PlanSubscriptionProcessLog"."PlanSubscriptionID") AND ("PlanSubscription"."PlanSubscriptionVersionNumber" = "PlanSubscriptionProcessLog"."PlanSubscriptionVersionNumber"))))
     JOIN "vStatusType" ON
         (((("PlanSubscriptionProcessLog"."StatusTypeValueID" = "vStatusType"."StatusTypeValueID") AND ("PlanSubscriptionProcessLog"."StatusTypeID" = "vStatusType"."StatusTypeID")) AND ("PlanSubscriptionProcessLog"."StatusTypeVersionNumber" = "vStatusType"."StatusTypeVersionNumber"))))
     JOIN "PlanGroup" ON (("Plan"."PlanGroupID" = "PlanGroup"."PlanGroupID")))
     JOIN "OrganisationPaymentMethod" ON
         ((("PlanSubscription"."OrganisationID" = "OrganisationPaymentMethod"."OrganisationID") AND ("PlanSubscriptionPaymentPlan"."GlobalPaymentMethodID" = "OrganisationPaymentMethod"."GlobalPaymentMethodID"))))
     JOIN "vStatusType" "vStatusType1" ON
         (((("OrganisationPaymentMethod"."StatusTypeID" = "vStatusType1"."StatusTypeID") AND ("OrganisationPaymentMethod"."StatusTypeVersionNumber" = "vStatusType1"."StatusTypeVersionNumber")) AND ("OrganisationPaymentMethod"."StatusTypeValueID" = "vStatusType1"."StatusTypeValueID"))))
     LEFT JOIN "Billing" ON (("PlanSubscriptionPaymentPlan"."BillingID" =
         "Billing"."BillingID")));

--
-- Definition for view vProductAttribute (OID = 20305) :
--
CREATE VIEW public."vProductAttribute"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    pa."Name" AS "ProductAttributeName",
    pa."Description" AS "ProductAttributeDescription",
    ppa."IsRequired" AS "IsProductAttributeRequired",
    ppa."DisplayOrder" AS "ProductAttributeDisplayOrder",
    ppav."PriceAdjustment",
    ppav."WeightAdjustement",
    ppav."Cost",
    ppav."Quantity",
    ppav."IsPreSelected",
    ppav."ProductVariantAttributeValueID",
    ppav."Name" AS "AttributeName",
    ppav."ProductProductAttributeID",
    ppa."ProductAttributeID"
FROM ((("Product" p
     JOIN "ProductProductAttribute" ppa ON ((((ppa."ProductID" =
         p."ProductID") AND (ppa."ProductVersionID" = p."ProductVersionID")) AND (ppa."IsActive" = true))))
     LEFT JOIN "ProductVariantAttributeValue" ppav ON
         (((ppav."ProductProductAttributeID" = ppa."ProductProductAttributeID") AND (ppav."IsActive" = true))))
     LEFT JOIN "ProductAttribute" pa ON (((pa."ProductAttributeID" =
         ppa."ProductAttributeID") AND (pa."IsActive" = true))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vProductDeduction (OID = 20310) :
--
CREATE VIEW public."vProductDeduction"
AS
SELECT cd."ProductDeductionID",
    cd."ProductID",
    cd."ProductVersionID",
    cd."DeductionID",
    cd."DeductionPercentage",
    cd."DeductionValue",
    cd."IsActive",
    cd."IsDeleted",
    de."Name",
    de."Description",
    de."IsPercentageBased",
    cd."DeductionVersionNumber"
FROM ("ProductDeduction" cd
     LEFT JOIN "Deduction" de ON ((((de."DeductionID" = cd."DeductionID")
         AND (de."IsActive" = true)) AND (de."IsDeleted" = false))))
WHERE ((cd."IsActive" = true) AND (cd."IsDeleted" = false));

--
-- Definition for view vProductDiscount (OID = 20315) :
--
CREATE VIEW public."vProductDiscount"
AS
SELECT p."ParentID",
    p."ProductID",
    p."ProductVersionID",
    p."IsPackage",
    d."CreatedOn",
    d."DiscountAmount",
    d."DiscountApplyOnID",
    d."Description",
    d."DiscountID",
    d."DiscountPercentage",
    d."DiscountPeriod",
    d."DiscountQuantity",
    d."DiscountStatusID",
    d."DiscountTypeID",
    d."DiscountVersionNumber",
    d."DisocuntPeriodUnitID",
    d."InvoiceName",
    d."IsPercentage",
    d."IsRecurring",
    d."MaxRedemptions",
    d."Name",
    d."ValidTill",
    ct."Name" AS "DiscountStatus",
    ct1."Name" AS "DiscountType",
    ct2."Name" AS "DiscountApplyIn",
    ct3."Name" AS "PeriodUnit",
    d."IsSingleProductDiscount",
    d."IsCheckoutDiscount",
    d."IsSingleProductQuantityDiscount",
    d."SingleProductQuantityDiscountDivisor",
    d."IsSingleProductQuantityDiscountPercentageBased",
    d."IsSingleProductQuantityDiscountAdditionalQuantityBased",
    d."SingleProductQuantityDiscountAdditionalQuantity",
    d."IsMultipleProductCombinationDiscount",
    d."IsMultipleProductCombinationDiscountPercentageBased",
    d."IsMultipleProductCombinationDiscountCheapestFreeBased"
FROM (((((("Product" p
     JOIN "ProductDiscount" pd ON (((((pd."IsActive" = true) AND
         (pd."IsDeleted" = false)) AND (pd."ProductID" = p."ProductID")) AND (pd."ProductVersionID" = p."ProductVersionID"))))
     JOIN "Discount" d ON (((((d."DiscountID" = pd."DiscountID") AND
         (d."DiscountVersionNumber" = pd."DiscountVersionNumber")) AND (d."IsActive" = true)) AND (d."IsDeleted" = false))))
     LEFT JOIN "ClassificationType" ct ON (((ct."ClassificationTypeID" =
         d."DiscountStatusID") AND (ct."ClassificationTypeCategoryID" = 8010))))
     LEFT JOIN "ClassificationType" ct1 ON (((ct1."ClassificationTypeID" =
         d."DiscountTypeID") AND (ct1."ClassificationTypeCategoryID" = 8008))))
     LEFT JOIN "ClassificationType" ct2 ON (((ct2."ClassificationTypeID" =
         d."DiscountApplyOnID") AND (ct2."ClassificationTypeCategoryID" = 8011))))
     LEFT JOIN "ClassificationType" ct3 ON (((ct3."ClassificationTypeID" =
         d."DisocuntPeriodUnitID") AND (ct3."ClassificationTypeCategoryID" = 8006))));

--
-- Definition for view vProductSpecification (OID = 20320) :
--
CREATE VIEW public."vProductSpecification"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    sa."Name" AS "SpecificationName",
    sa."Description" AS "SpecificationDescription",
    sa."DisplayOrder" AS "SpecificationDisplayOrder",
    psa."IsMandatory",
    psa."IsMultiSelect",
    psa."IsPreSelected",
    psa."MinimumSelectionLimit",
    psa."MaximumSelectionLimit",
    psa."IsUserDefined",
    psa."IsPriceDriven",
    psao."ProductSpecificationAttributeOptionID",
    psao."PriceAdjustment" AS "SpecDefaultOptionPriceAdjustement",
    psao."Cost" AS "SpecDefaultOptionCost",
    psao."DefaultValue" AS "SpecDefaultOptionDefaultValue",
    psao."DefaultQuantity" AS "SpecDefaultOptionDefaultQuantity"
FROM (((("Product" p
     JOIN "ProductSpecificationAttribute" psa ON (((((psa."ProductID" =
         p."ProductID") AND (psa."ProductVersionID" = p."ProductVersionID")) AND (psa."IsActive" = true)) AND (psa."IsDeleted" = false))))
     LEFT JOIN "SpecificationAttribute" sa ON
         ((((sa."SpecificationAttributeID" = psa."SpecificationAttributeID") AND (sa."IsActive" = true)) AND (sa."IsDeleted" = false))))
     LEFT JOIN "ProductSpecificationBlueprint" psb ON ((((((psb."ProductID"
         = p."ProductID") AND (psb."ProductVersionID" = p."ProductVersionID")) AND (psb."IsActive" = true)) AND (psb."IsDeleted" = false)) AND (psb."ProductSpecificationAttributeID" = psa."ProductSpecificationAttributeID"))))
     LEFT JOIN "ProductSpecificationAttributeOption" psao ON
         ((((psao."IsActive" = true) AND (psao."IsDeleted" = false)) AND (psao."ProductSpecificationAttributeOptionID" = psb."DefaultProductSpecificationAttributeOptionID"))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vProductSpecificationOption (OID = 20325) :
--
CREATE VIEW public."vProductSpecificationOption"
AS
SELECT p."ProductID",
    p."ProductVersionID",
    psb."ProductSpecificationAttributeID",
    psb."IsMandatory",
    psb."IsMultiSelect",
    psb."IsPreSelected",
    psb."MinimumSelectionLimit",
    psb."MaximumSelectionLimit",
    psb."IsUserDefined",
    psb."IsPriceDriven",
    psb."SpecificationAttributeID",
    psao."ProductSpecificationAttributeOptionID",
    psao."PriceAdjustment",
    psao."WeightAdjustment",
    psao."Cost",
    psao."DefaultValue",
    psao."DefaultQuantity",
    psao."IsActive",
    psao."IsDeleted",
    psao."DisplayOrder",
    sao."Name" AS "OptionName",
    sao."Description" AS "OptionDescription"
FROM ((("Product" p
     JOIN "ProductSpecificationAttribute" psb ON (((((psb."ProductID" =
         p."ProductID") AND (psb."ProductVersionID" = p."ProductVersionID")) AND (psb."IsActive" = true)) AND (psb."IsDeleted" = false))))
     JOIN "ProductSpecificationAttributeOption" psao ON
         ((((psao."ProductSpecificationAttributeID" = psb."ProductSpecificationAttributeID") AND (psao."IsActive" = true)) AND (psao."IsDeleted" = false))))
     JOIN "SpecificiationAttributeOption" sao ON
         ((((sao."SpecficiationAttributeOptionID" = psao."SpecficiationAttributeOptionID") AND (sao."IsActive" = true)) AND (sao."IsDeleted" = false))))
WHERE ((p."IsActive" = true) AND (p."IsDeleted" = false));

--
-- Definition for view vResource (OID = 20330) :
--
CREATE VIEW public."vResource"
AS
SELECT DISTINCT r."ResourceID",
    r."ResourceName",
    r."ResourceDescription",
    r."SourceID",
    r."ResourceTypeID",
    r."ResourceCategoryID",
    r."ResourceSubCategoryID",
    r."IsActive",
    r."IsDeleted"
FROM ((("Resource" r
     LEFT JOIN "Resource" ro ON ((r."ResourceID" = ro."ResourceID")))
     LEFT JOIN "RoleClaim" rc ON ((rc."ResourceID" = r."ResourceID")))
     LEFT JOIN "OrganisationRoleClaim" orgroleclaim ON
         ((orgroleclaim."ResourceID" = r."ResourceID")));

--
-- Definition for view vRole (OID = 20335) :
--
CREATE VIEW public."vRole"
AS
SELECT DISTINCT rt."RoleID",
    rt."RoleName",
    rt."RoleDescription",
    rt."RoleTypeID",
    rt."RoleSubTypeID",
    rt."RoleCategoryID",
    rt."IsActive",
    rt."IsDeleted",
        CASE ((grt."RoleID" IS NOT NULL) OR (orgr."OrganisationRoleID" IS
            NOT NULL))
            WHEN true THEN true
            ELSE false
        END AS "IsDisabled"
FROM (("Role" rt
     LEFT JOIN "OrganisationRole" orgr ON ((rt."RoleID" =
         orgr."OrganisationRoleID")))
     LEFT JOIN "GroupRole" grt ON ((rt."RoleID" = grt."RoleID")));

--
-- Definition for view vState (OID = 20340) :
--
CREATE VIEW public."vState"
AS
SELECT s."StateID",
    s."ParentStateID",
    si."StateItemID",
    si."ParentStateItemID",
    s."StateName",
    si."StateItemName",
    si."StateItemOrder",
    psi."StateItemName" AS parentstateitemname
FROM (("State" s
     LEFT JOIN "StateItem" si ON ((si."StateID" = s."StateID")))
     LEFT JOIN "StateItem" psi ON ((psi."StateItemID" = si."ParentStateItemID")))
WHERE (si."StateItemID" IS NOT NULL);

--
-- Definition for view vStatusTypeTemplate (OID = 20345) :
--
CREATE VIEW public."vStatusTypeTemplate"
AS
SELECT stv."StatusTypeValueTemplateID",
    stv."StatusTypeTemplateID",
    stv."StatusTypeTemplateVersionNumber",
    stv."Name",
    st."Name" AS "TemplateName",
    sts."StatusOrder",
    sts."IsStart",
    sts."IsEnd"
FROM (("StatusTypeValueTemplate" stv
     LEFT JOIN "StatusTypeTemplate" st ON (((st."StatusTypeTemplateID" =
         stv."StatusTypeTemplateID") AND (st."StatusTypeTemplateVersionNumber" = stv."StatusTypeTemplateVersionNumber"))))
     LEFT JOIN "StatusTypeStructureTemplate" sts ON
         ((((sts."StatusTypeTemplateID" = stv."StatusTypeTemplateID") AND (sts."StatusTypeTemplateVersionNumber" = stv."StatusTypeTemplateVersionNumber")) AND (sts."StatusTypeValueTemplateID" = stv."StatusTypeValueTemplateID"))));

--
-- Definition for view vTemporaryUsersNotLoggedIn (OID = 20350) :
--
CREATE VIEW public."vTemporaryUsersNotLoggedIn"
AS
SELECT ua."Created",
    ua."AccountClosed",
    ua."Email",
    ua."FailedLoginCount",
    ua."FailedPasswordResetCount",
    ua."ID",
    ua."IsAccountClosed",
    ua."IsAccountVerified",
    ua."IsActive",
    ua."LastLogin",
    ua."LastFailedPasswordReset",
    ua."LastUpdated"
FROM "UserAccounts" ua
WHERE (((ua."IsTemporaryAccount" = true) AND (ua."IsActive" = true)) AND
    (ua."IsDeleted" = false));

--
-- Definition for view vUserAccountNotLoggedIn (OID = 20354) :
--
CREATE VIEW public."vUserAccountNotLoggedIn"
AS
SELECT ua."ID",
    ua."Username",
    ua."Email",
    ua."IsTemporaryAccount",
    ua."Created",
    date_part('day'::text, (now() - (ua."Created")::timestamp with time
        zone)) AS "DaysSinceCreation",
    date_part('hour'::text, (now() - (ua."Created")::timestamp with time
        zone)) AS "HoursSinceCreation",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (7)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (14)::double precision)) THEN true
            ELSE false
        END AS "Between7and14DaysNotLoggedIn",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (14)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (21)::double precision)) THEN true
            ELSE false
        END AS "Between14and21DaysNotLoggedIn",
        CASE
            WHEN ((date_part('day'::text, (now() -
                (ua."Created")::timestamp with time zone)) >= (0)::double precision) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (7)::double precision)) THEN true
            ELSE false
        END AS "Between0and7DaysNotLoggedIn",
        CASE
            WHEN (date_part('day'::text, (now() - (ua."Created")::timestamp
                with time zone)) >= (21)::double precision) THEN true
            ELSE false
        END AS "GreaterThan21DaysNotLoggedIn",
        CASE
            WHEN (ua."LastLogin" IS NULL) THEN true
            ELSE false
        END AS "NotLoggedIn",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false))
    ) AS "COLPRemindersNotReadEver",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationSummary'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false))
    ) AS "COLPRegistrationsNotReadEver",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (7)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (14)::double precision))
    ) AS "COLPRemindersNotReadBetween7and14Days",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (14)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (21)::double precision))
    ) AS "COLPRemindersNotReadBetween14and21Days",
    (
    SELECT count(*) AS count
    FROM ((("NotificationRecipientLog" nrl
             LEFT JOIN "NotificationRecipient" nr ON
                 ((nr."NotificationRecipientID" = nrl."NotificationRecipientID")))
             LEFT JOIN "Notification" note ON ((note."NotificationID" =
                 nr."NotificationID")))
             LEFT JOIN "NotificationConstruct" nc ON
                 (((nc."NotificationConstructID" = note."NotificationConstructID") AND (nc."NotificationConstructVersionNumber" = note."NotificationConstructVersionNumber"))))
    WHERE ((((((nr."UserAccountOrganisationID" = ua."ID") AND
        ((nc."Name")::text = 'COLPRegistrationReminder'::text)) AND (nrl."IsSent" = true)) AND (nrl."IsRead" = false)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) >= (0)::double precision)) AND (date_part('day'::text, (now() - (ua."Created")::timestamp with time zone)) <= (7)::double precision))
    ) AS "COLPRemindersNotReadBetween0and7Days",
    (
    SELECT wdi."DataContent"
    FROM (((("WorkflowInstance" wi
             JOIN "Workflow" wf ON ((((wf."WorkflowID" = wi."WorkflowID")
                 AND (wf."WorkflowVersionNumber" = wi."WorkflowVersionNumber")) AND ((wf."Name")::text = 'Login'::text))))
             JOIN "WorkflowInstanceExecution" wie ON (((((wie."WorkflowID"
                 = wf."WorkflowID") AND (wie."WorkflowVersionNumber" = wf."WorkflowVersionNumber")) AND (wie."WorkflowInstanceID" = wi."WorkflowInstanceID")) AND (wie."WorkflowInstanceExecutionID" = (
        SELECT wie2."WorkflowInstanceExecutionID"
        FROM "WorkflowInstanceExecution" wie2
        WHERE (((wie2."WorkflowID" = wf."WorkflowID") AND
            (wie2."WorkflowVersionNumber" = wf."WorkflowVersionNumber")) AND (wie2."WorkflowInstanceID" = wi."WorkflowInstanceID"))
        ORDER BY wie2."CreatedOn" DESC
        LIMIT 1
        )))))
             JOIN "WorkflowInstanceExecutionStatusEvent" wied ON
                 (((wied."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wied."WorkflowInstanceExecutionStatusEventID" = (
        SELECT wied2."WorkflowInstanceExecutionStatusEventID"
        FROM "WorkflowInstanceExecutionStatusEvent" wied2
        WHERE (wied2."WorkflowInstanceExecutionID" =
            wie."WorkflowInstanceExecutionID")
        ORDER BY wied2."EventDate" DESC
        LIMIT 1
        )))))
             JOIN "WorkflowInstanceExecutionDataItem" wdi ON
                 (((wdi."WorkflowInstanceExecutionStatusEventID" = wied."WorkflowInstanceExecutionStatusEventID") AND (wdi."WorkflowInstanceExecutionDataItemID" = (
        SELECT wdi2."WorkflowInstanceExecutionDataItemID"
        FROM "WorkflowInstanceExecutionDataItem" wdi2
        WHERE (wdi2."WorkflowInstanceExecutionStatusEventID" =
            wied."WorkflowInstanceExecutionStatusEventID")
        ORDER BY wdi2."WorkflowInstanceExecutionDataItemID" DESC
        LIMIT 1
        )))))
    WHERE (wi."ParentID" = ua."ID")
    ) AS "LoginWorkflowDataContent"
FROM ("UserAccountOrganisation" uao
     JOIN "UserAccounts" ua ON ((ua."ID" = uao."UserID")))
WHERE (ua."LastLogin" IS NULL);

--
-- Definition for view vUserAccountOrganisation (OID = 20359) :
--
CREATE VIEW public."vUserAccountOrganisation"
AS
SELECT ua."ID",
    ua."IsTemporaryAccount",
    uao."UserAccountOrganisationID",
    uao."UserTypeID",
    uao."OrganisationID" AS "OrganisationBranchID",
    od1."OrganisationID",
    od1."Name",
    org."IsBranch",
    org."IsHeadOffice",
    org."IsUserOrganisation",
    org."IsPaymentProvider",
    org."OrganisationTypeID",
    ot."Name" AS "OrganisationTypeName",
    ut."Name" AS "UserTypeName",
    lod."VATNumber",
    lod."IsVATRegistered",
    ct."BirthDate",
    ct."EmailAddress1",
    ct."FirstName",
    ct."LastName",
    ct."MiddleName",
    ua."Username",
    ua."Email",
    ct."ContactID",
    ad."AddressID",
    ad."BuildingName",
    ad."City",
    ad."CountryCode",
    ad."County",
    ad."Line1",
    ad."Line2",
    ad."Line3",
    ad."PostalCode",
    ad."Town",
    ad."IsPrimaryAddress"
FROM (((((((("UserAccounts" ua
     LEFT JOIN "Contact" ct ON (((ct."IsPrimaryContact" = true) AND
         (ct."ParentID" = ua."ID"))))
     LEFT JOIN "Address" ad ON ((ad."ParentID" = ct."ContactID")))
     JOIN "UserAccountOrganisation" uao ON ((uao."UserID" = ua."ID")))
     JOIN "OrganisationDetail" od1 ON ((od1."OrganisationID" = (
    SELECT "Organisation"."ParentOrganisationID"
    FROM "Organisation"
    WHERE ("Organisation"."OrganisationID" = uao."OrganisationID")
    LIMIT 1
    ))))
     JOIN "Organisation" org ON ((org."OrganisationID" = od1."OrganisationID")))
     LEFT JOIN "OrganisationType" ot ON ((ot."OrganisationTypeID" =
         org."OrganisationTypeID")))
     LEFT JOIN "UserType" ut ON ((ut."UserTypeID" = uao."UserTypeID")))
     LEFT JOIN legal."LegalOrganisationDetails" lod ON
         ((lod."OrganisationID" = od1."OrganisationID")))
WHERE (ua."IsTemporaryAccount" = false);

--
-- Definition for view vUserStatus (OID = 20369) :
--
CREATE VIEW public."vUserStatus"
AS
SELECT os."UserAccountOrganisationID",
    org."OrganisationID",
    org."UserID",
    org."IsActive",
    org."IsDeleted",
    org."UserTypeID",
    st."Name" AS "StatusTypeName",
    st."StatusTypeID",
    st."StatusTypeVersionNumber",
    st."StatusTypeTemplateID",
    st."StatusTypeTemplateVersionNumber",
    stv."StatusTypeValueID",
    stv."Name" AS "StatusValueName",
    os."StatusChangedOn",
    os."StatusChangedBy",
    stt."StatusOrder",
    stt."IsStart",
    stt."IsEnd",
    stt1."StatusTypeValueID" AS "NextStatusTypeValueID",
    stt1."Name" AS "NextStatusTypeName",
    stt1."StatusOrder" AS "NextStatusOrder",
    stt1."IsStart" AS "NextStatusStart",
    stt1."IsEnd" AS "NextStatusEnd"
FROM (((((("UserAccountOrganisationStatus" os
     LEFT JOIN "UserAccountOrganisation" org ON
         ((org."UserAccountOrganisationID" = os."UserAccountOrganisationID")))
     LEFT JOIN "Organisation" og ON ((og."OrganisationID" = org."OrganisationID")))
     LEFT JOIN "StatusType" st ON (((st."StatusTypeID" = os."StatusTypeID")
         AND (st."StatusTypeVersionNumber" = os."StatusTypeVersionNumber"))))
     LEFT JOIN "StatusTypeValue" stv ON ((stv."StatusTypeValueID" =
         os."StatusTypeValueID")))
     LEFT JOIN "vStatusType" stt ON ((((stt."StatusTypeID" =
         os."StatusTypeID") AND (stt."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt."StatusTypeValueID" = os."StatusTypeValueID"))))
     LEFT JOIN "vStatusType" stt1 ON ((((stt1."StatusTypeID" =
         os."StatusTypeID") AND (stt1."StatusTypeVersionNumber" = os."StatusTypeVersionNumber")) AND (stt1."StatusOrder" = (stt."StatusOrder" + 1)))))
WHERE (stt."StatusTypeValueID" IS NOT NULL);

--
-- Definition for view vUserWorkflowInstanceStatus (OID = 20374) :
--
CREATE VIEW public."vUserWorkflowInstanceStatus"
AS
SELECT wfi."ParentID",
    COALESCE(ua."ID", ua1."ID") AS "UserID",
    uao."UserAccountOrganisationID",
    wfi."WorkflowID",
    wfi."WorkflowInstanceID",
    wfi."WorkflowInstanceStatusID",
    ct."Name" AS instancestatus,
    wftct."Name" AS workflowtype
FROM (((((("WorkflowInstance" wfi
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         wfi."WorkflowInstanceStatusID")))
     LEFT JOIN "Workflow" wf ON ((wf."WorkflowID" = wfi."WorkflowID")))
     LEFT JOIN "ClassificationType" wftct ON ((wf."WorkflowTypeID" =
         wftct."ClassificationTypeID")))
     LEFT JOIN "UserAccountOrganisation" uao ON ((wfi."ParentID" =
         uao."UserAccountOrganisationID")))
     LEFT JOIN "UserAccounts" ua ON ((uao."UserID" = ua."ID")))
     LEFT JOIN "UserAccounts" ua1 ON ((wfi."ParentID" = ua1."ID")))
WHERE (((wftct."Name")::text = 'Startup'::text) AND ((ct."Name")::text <>
    'Complete'::text));

--
-- Definition for view vWorkflowActionParameter (OID = 20379) :
--
CREATE VIEW public."vWorkflowActionParameter"
AS
SELECT wap."WorkflowActionID",
    wp."WorkflowParameterID",
    wp."Name",
    wp."Description",
    wp."ObjectType",
    wp."ObjectValue",
    wp."WorkflowID",
    wp."WorkflowVersionNumber"
FROM ("WorkflowParameter" wp
     JOIN "WorkflowActionParameter" wap ON ((((wap."WorkflowParameterID" =
         wp."WorkflowParameterID") AND (wap."WorkflowID" = wp."WorkflowID")) AND (wap."WorkflowVersionNumber" = wp."WorkflowVersionNumber"))));

--
-- Definition for view vWorkflowInstanceProgress (OID = 20383) :
--
CREATE VIEW public."vWorkflowInstanceProgress"
AS
SELECT COALESCE(dis."Name", act."Name") AS "StepName",
    COALESCE(dis."WorkflowDecisionID", act."WorkflowActionID") AS "StepID",
    ss."Name" AS "StepStatus",
    se."EventDate" AS "StepDate",
    se."EventBy" AS "StepExecutedBy",
    se."EventOrder" AS "StepOrder",
        CASE
            WHEN (act."WorkflowActionID" IS NULL) THEN 'Decision'::text
            ELSE 'Action'::text
        END AS "StepType",
        CASE
            WHEN (act."IsManual" = true) THEN 1
            ELSE 0
        END AS "StepIsManual",
    COALESCE(dis."IsTransistionStart", act."IsTransistionStart") AS "StepIsStart",
    COALESCE(dis."IsTransistionEnd", act."IsTransistionEnd") AS "StepIsEnd",
    wit."Name" AS "TransistionName",
    wit."IsWorkflowStart",
    wit."IsWorkflowEnd",
    wie."WorkflowTransistionID",
    wi."WorkflowInstanceID",
    se."WorkflowInstanceExecutionStatusEventID",
    se."WorkflowExecutionStatusID",
    se."WorkflowInstanceExecutionID",
    wie."WorkflowInstanceSessionID",
    wap."ObjectValue" AS actionarea,
    wap1."ObjectValue" AS actionaction,
    wap2."ObjectValue" AS actioncontroller,
    wf."WorkflowTypeID",
    wftct."Name" AS workflowtypename,
    wf."WorkflowCategoryID",
    wfcct."Name" AS workflowcategoryname,
    wfi."WorkflowInstanceStatusID",
    wfict."Name" AS workflowinstancestatusname
FROM (((((((((((((("WorkflowInstanceExecutionStatusEvent" se
     LEFT JOIN "WorkflowExecutionStatus" ss ON
         ((se."WorkflowExecutionStatusID" = ss."WorkflowExecutionStatusID")))
     LEFT JOIN "Workflow" wf ON (((se."WorkflowID" = wf."WorkflowID") AND
         (se."WorkflowVersionNumber" = wf."WorkflowVersionNumber"))))
     LEFT JOIN "ClassificationType" wftct ON ((wf."WorkflowTypeID" =
         wftct."ClassificationTypeID")))
     LEFT JOIN "ClassificationType" wfcct ON ((wf."WorkflowCategoryID" =
         wfcct."ClassificationTypeID")))
     LEFT JOIN "WorkflowInstance" wfi ON ((se."WorkflowInstanceID" =
         wfi."WorkflowInstanceID")))
     LEFT JOIN "ClassificationType" wfict ON
         ((wfi."WorkflowInstanceStatusID" = wfict."ClassificationTypeID")))
     LEFT JOIN "WorkflowInstanceExecution" wie ON
         ((wie."WorkflowInstanceExecutionID" = se."WorkflowInstanceExecutionID")))
     LEFT JOIN "WorkflowAction" act ON ((((act."WorkflowActionID" =
         wie."WorkflowActionID") AND (act."WorkflowID" = wie."WorkflowID")) AND (act."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowDecision" dis ON ((((dis."WorkflowDecisionID" =
         wie."WorkflowDecisionID") AND (dis."WorkflowID" = wie."WorkflowID")) AND (dis."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstance" wi ON ((wi."WorkflowInstanceID" =
         wie."WorkflowInstanceID")))
     LEFT JOIN "WorkflowTransistion" wit ON (((wit."WorkflowID" =
         wi."WorkflowID") AND (wit."WorkflowVersionNumber" = wi."WorkflowVersionNumber"))))
     LEFT JOIN "vWorkflowActionParameter" wap ON (((wap."WorkflowActionID"
         = act."WorkflowActionID") AND ((wap."Name")::text = 'Area'::text))))
     LEFT JOIN "vWorkflowActionParameter" wap1 ON
         (((wap1."WorkflowActionID" = act."WorkflowActionID") AND ((wap1."Name")::text = 'Action'::text))))
     LEFT JOIN "vWorkflowActionParameter" wap2 ON
         (((wap2."WorkflowActionID" = act."WorkflowActionID") AND ((wap2."Name")::text = 'Controller'::text))));

--
-- Definition for view vWorkflowInstanceExecutionNotCompleted (OID = 20388) :
--
CREATE VIEW public."vWorkflowInstanceExecutionNotCompleted"
AS
SELECT ip."StepName",
    ip."StepStatus",
    ip."StepDate",
    ip."StepExecutedBy",
    ip."StepOrder",
    ip."StepType",
    ip."StepIsManual",
    ip."StepIsStart",
    ip."StepIsEnd",
    ip."TransistionName",
    ip."IsWorkflowStart",
    ip."IsWorkflowEnd",
    ip."WorkflowTransistionID",
    ip."WorkflowInstanceID",
    ip."WorkflowInstanceExecutionStatusEventID",
    ip."WorkflowExecutionStatusID",
    ip."WorkflowInstanceExecutionID",
    ip."WorkflowInstanceSessionID",
    wis."SessionStartedOn",
    wis."SessionEndedOn",
    ip."StepID",
    ip.actionaction AS "ActionAction",
    ip.actionarea AS "ActionArea",
    ip.actioncontroller AS "ActionController",
    wis."WorkflowID",
    wis."WorkflowVersionNumber",
    di."DataContent" AS "JsonContent",
    ip."WorkflowTypeID",
    ip.workflowtypename,
    ip."WorkflowCategoryID",
    ip.workflowcategoryname,
    ip."WorkflowInstanceStatusID",
    ip.workflowinstancestatusname
FROM (("WorkflowInstanceSession" wis
     JOIN "vWorkflowInstanceProgress" ip ON
         ((ip."WorkflowInstanceSessionID" = wis."WorkflowInstanceSessionID")))
     LEFT JOIN "WorkflowInstanceExecutionDataItem" di ON
         (((di."WorkflowInstanceExecutionStatusEventID" = ip."WorkflowInstanceExecutionStatusEventID") AND (di."WorkflowInstanceExecutionID" = ip."WorkflowInstanceExecutionID"))))
WHERE (((((wis."SessionStartedOn" = (
    SELECT max(wis2."SessionStartedOn") AS max
    FROM "WorkflowInstanceSession" wis2
    WHERE (wis2."WorkflowInstanceID" = wis."WorkflowInstanceID")
    )) AND (ip."StepOrder" = (
    SELECT max(wse2."EventOrder") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" wse2
    WHERE (wse2."WorkflowInstanceSessionID" = wis."WorkflowInstanceSessionID")
    ))) AND (ip."WorkflowInstanceExecutionStatusEventID" IS NOT NULL)) AND
        ((ip."StepStatus")::text <> 'Closed'::text)) AND (ip."StepType" = 'Action'::text));

--
-- Definition for view vWorkflowInstanceExecutionStatusEvent (OID = 20393) :
--
CREATE VIEW public."vWorkflowInstanceExecutionStatusEvent"
AS
SELECT se."WorkflowInstanceExecutionStatusEventID",
    se."EventDate",
    se."EventBy",
    se."WorkflowExecutionStatusID",
    se."WorkflowInstanceExecutionID",
    se."EventOrder",
    ss."Name",
    COALESCE(dis."Name", act."Name") AS "ActionDecision"
FROM (((("WorkflowInstanceExecutionStatusEvent" se
     LEFT JOIN "WorkflowExecutionStatus" ss ON
         ((se."WorkflowExecutionStatusID" = ss."WorkflowExecutionStatusID")))
     LEFT JOIN "WorkflowInstanceExecution" wie ON
         ((wie."WorkflowInstanceExecutionID" = se."WorkflowInstanceExecutionID")))
     LEFT JOIN "WorkflowAction" act ON ((((act."WorkflowActionID" =
         wie."WorkflowActionID") AND (act."WorkflowID" = wie."WorkflowID")) AND (act."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowDecision" dis ON ((((dis."WorkflowDecisionID" =
         wie."WorkflowDecisionID") AND (dis."WorkflowID" = wie."WorkflowID")) AND (dis."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))));

--
-- Definition for view vWorkflowInstanceNotStarted (OID = 20398) :
--
CREATE VIEW public."vWorkflowInstanceNotStarted"
AS
SELECT wfi."WorkflowID",
    wfi."WorkflowVersionNumber",
    wfi."WorkflowInstanceID",
    wfi."WorkflowInstanceStatusID",
    ct."Name",
    wfi."ParentID"
FROM ("WorkflowInstance" wfi
     LEFT JOIN "ClassificationType" ct ON ((ct."ClassificationTypeID" =
         wfi."WorkflowInstanceStatusID")))
WHERE ((ct."Name")::text = 'New'::text);

--
-- Definition for view vWorkflowInstanceRetry (OID = 20402) :
--
CREATE VIEW public."vWorkflowInstanceRetry"
AS
SELECT wie."WorkflowID",
    wie."WorkflowVersionNumber",
    w."Name",
    wie."WorkflowInstanceID",
    wie."WorkflowInstanceSessionID",
    COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID") AS
        "PreviousStepID",
    COALESCE(pwd."Name", pwa."Name") AS "PreviousStepName",
    COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID") AS "StepID",
    COALESCE(wd."Name", wa."Name") AS "StepName",
    wis."SessionStartedOn",
    count(wie."WorkflowInstanceID") AS count
FROM ((((((((("WorkflowInstanceExecution" wie
     LEFT JOIN "WorkflowDecision" wd ON ((wd."WorkflowDecisionID" =
         wie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" wa ON ((wa."WorkflowActionID" =
         wie."WorkflowActionID")))
     LEFT JOIN "WorkflowInstanceSession" wis ON
         ((wis."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")))
     LEFT JOIN "Workflow" w ON (((w."WorkflowID" = wie."WorkflowID") AND
         (w."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" wise ON
         ((((wise."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wise."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")) AND (wise."EventOrder" = 0))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" pwise ON
         ((((pwise."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID") AND (pwise."WorkflowInstanceSessionID" = wise."WorkflowInstanceSessionID")) AND (pwise."WorkflowInstanceExecutionStatusEventID" = (
    SELECT max(pp."WorkflowInstanceExecutionStatusEventID") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" pp
    WHERE ((pp."WorkflowInstanceSessionID" =
        wise."WorkflowInstanceSessionID") AND (pp."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID"))
    )))))
     LEFT JOIN "WorkflowInstanceExecution" pwie ON
         (((pwie."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID") AND (pwie."WorkflowInstanceExecutionID" = pwise."WorkflowInstanceExecutionID"))))
     LEFT JOIN "WorkflowDecision" pwd ON ((pwd."WorkflowDecisionID" =
         pwie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" pwa ON ((pwa."WorkflowActionID" =
         pwie."WorkflowActionID")))
GROUP BY wie."WorkflowID", wie."WorkflowVersionNumber", w."Name",
    wie."WorkflowInstanceID", wie."WorkflowInstanceSessionID", COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID"), COALESCE(pwd."Name", pwa."Name"), COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID"), COALESCE(wd."Name", wa."Name"), wis."SessionStartedOn"
ORDER BY wie."WorkflowID", wie."WorkflowVersionNumber",
    wie."WorkflowInstanceID", wis."SessionStartedOn";

--
-- Definition for view vWorkflowInstanceStatus (OID = 20407) :
--
CREATE VIEW public."vWorkflowInstanceStatus"
AS
SELECT p."StepName",
    p."StepStatus",
    p."WorkflowInstanceID",
    p."WorkflowInstanceExecutionStatusEventID"
FROM "vWorkflowInstanceProgress" p
WHERE ((((p."StepDate" = (
    SELECT max(se."EventDate") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" se
    WHERE (se."WorkflowInstanceExecutionID" = p."WorkflowInstanceExecutionID")
    )) AND (p."WorkflowInstanceSessionID" = (
    SELECT k."WorkflowInstanceSessionID"
    FROM "WorkflowInstanceSession" k
    WHERE (k."WorkflowInstanceID" = p."WorkflowInstanceID")
    ORDER BY k."SessionStartedOn" DESC
    LIMIT 1
    ))) AND (p."StepType" = 'Action'::text)) AND ((p."StepStatus")::text <>
        'Closed'::text))
GROUP BY p."StepName", p."StepStatus", p."WorkflowInstanceID",
    p."WorkflowInstanceExecutionStatusEventID";

--
-- Definition for view vWorkflowInstanceStepTrace (OID = 20412) :
--
CREATE VIEW public."vWorkflowInstanceStepTrace"
AS
SELECT wie."WorkflowID",
    wie."WorkflowVersionNumber",
    w."Name",
    wie."WorkflowInstanceID",
    wie."WorkflowInstanceSessionID",
    COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID") AS
        "PreviousStepID",
    COALESCE(pwd."Name", pwa."Name") AS "PreviousStepName",
    COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID") AS "StepID",
    COALESCE(wd."Name", wa."Name") AS "StepName",
    wis."SessionStartedOn"
FROM ((((((((("WorkflowInstanceExecution" wie
     LEFT JOIN "WorkflowDecision" wd ON ((wd."WorkflowDecisionID" =
         wie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" wa ON ((wa."WorkflowActionID" =
         wie."WorkflowActionID")))
     LEFT JOIN "WorkflowInstanceSession" wis ON
         ((wis."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")))
     LEFT JOIN "Workflow" w ON (((w."WorkflowID" = wie."WorkflowID") AND
         (w."WorkflowVersionNumber" = wie."WorkflowVersionNumber"))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" wise ON
         ((((wise."WorkflowInstanceExecutionID" = wie."WorkflowInstanceExecutionID") AND (wise."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID")) AND (wise."EventOrder" = 0))))
     LEFT JOIN "WorkflowInstanceExecutionStatusEvent" pwise ON
         ((((pwise."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID") AND (pwise."WorkflowInstanceSessionID" = wise."WorkflowInstanceSessionID")) AND (pwise."WorkflowInstanceExecutionStatusEventID" = (
    SELECT max(pp."WorkflowInstanceExecutionStatusEventID") AS max
    FROM "WorkflowInstanceExecutionStatusEvent" pp
    WHERE ((pp."WorkflowInstanceSessionID" =
        wise."WorkflowInstanceSessionID") AND (pp."WorkflowInstanceExecutionStatusEventID" < wise."WorkflowInstanceExecutionStatusEventID"))
    )))))
     LEFT JOIN "WorkflowInstanceExecution" pwie ON
         (((pwie."WorkflowInstanceSessionID" = wie."WorkflowInstanceSessionID") AND (pwie."WorkflowInstanceExecutionID" = pwise."WorkflowInstanceExecutionID"))))
     LEFT JOIN "WorkflowDecision" pwd ON ((pwd."WorkflowDecisionID" =
         pwie."WorkflowDecisionID")))
     LEFT JOIN "WorkflowAction" pwa ON ((pwa."WorkflowActionID" =
         pwie."WorkflowActionID")))
GROUP BY wie."WorkflowID", wie."WorkflowVersionNumber", w."Name",
    wie."WorkflowInstanceID", wie."WorkflowInstanceSessionID", COALESCE(pwie."WorkflowActionID", pwie."WorkflowDecisionID"), COALESCE(pwd."Name", pwa."Name"), COALESCE(wie."WorkflowActionID", wie."WorkflowDecisionID"), COALESCE(wd."Name", wa."Name"), wis."SessionStartedOn", wise."WorkflowInstanceExecutionStatusEventID"
ORDER BY wie."WorkflowID", wie."WorkflowVersionNumber",
    wie."WorkflowInstanceID", wis."SessionStartedOn", wise."WorkflowInstanceExecutionStatusEventID";

--
-- Definition for view vWorkflowTree (OID = 20417) :
--
CREATE VIEW public."vWorkflowTree"
AS
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NULL) AND (wts."Level" = 1))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 2))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 3))
UNION ALL
SELECT uuid_generate_v1() AS "ID",
    wts."Name",
    wts."WorkflowID",
    wts."WorkflowVersionNumber",
    wts."WorkflowTreeStructureID",
    wts."InterfacePanelID",
    wts."InterfacePanelVersionNumber",
    wts."Level",
    wts."ParentID",
    wts."ItemOrder",
    wtsa."WorkflowActionID",
    COALESCE(wtsa."IsVisible", true) AS "IsVisible",
    wtsa."ConditionString"
FROM ("WorkflowTreeStructure" wts
     LEFT JOIN "WorkflowTreeStructureAction" wtsa ON
         ((((wts."WorkflowTreeStructureID" = wtsa."WorkflowTreeStructureID") AND (wtsa."IsActive" = true)) AND (wtsa."IsDeleted" = false))))
WHERE ((wts."ParentID" IS NOT NULL) AND (wts."Level" = 4));

--
-- Structure for table Plan (OID = 20422) :
--
SET search_path = public_audit, pg_catalog;
CREATE TABLE public_audit."Plan" (
    "PlanID" uuid,
    "PlanVersionNumber" integer,
    "Name" varchar(200),
    "Description" varchar(2000),
    "InvoiceName" varchar(200),
    "Price" numeric(30,8),
    "Period" integer,
    "TrialPeriod" integer,
    "PeriodUnitID" integer,
    "TrialPeriodUnitID" integer,
    "FreeQuantity" integer,
    "SetupCost" numeric(30,8),
    "DowngradePenalty" numeric(30,8),
    "CreatedOn" timestamp without time zone,
    "CreatedBy" varchar(200),
    "IsActive" boolean,
    "IsDeleted" boolean,
    "CountryCode" varchar(300),
    "CurrencyCode" varchar(150),
    "CancellationPeriod" integer,
    "CancellationPeriodUnitID" integer,
    "IsFree" boolean,
    "HasInfinitePeriods" boolean,
    "ParentID" uuid,
    "PlanTemplateID" uuid,
    "PlanTemplateVersionNumber" integer,
    "PlanStatusID" integer,
    "IsTransactionBased" boolean,
    "CoolOffPeriod" integer,
    "CoolOffPeriodUnitID" integer,
    "RenewalPrice" numeric(30,8),
    "RenewalPercentage" numeric(30,8),
    "RenewalIsPercentageOfOriginalPrice" boolean,
    "HasForwardCycleFee" boolean,
    "ForwardCycleFee" numeric(30,8),
    "ForwardCycleFreeIsSameAsPrice" numeric(30,8),
    "RenewalOfferPeriod" integer,
    "RenewalOfferPeriodUnitID" integer,
    "ForwardCycleFeePeriod" integer,
    "ForwardCycleFeePeriodUnitID" integer,
    "HasRenewalOffer" boolean,
    "PriceDailyProRata" numeric(30,8),
    "IsAutoRenew" boolean,
    "AutoRenewDecisionPeriod" integer,
    "AutoRenewDecisionUnitID" integer,
    "AutoRenewPeriod" integer,
    "AutoRenewPeriodUnitID" integer,
    "PlanGroupID" integer,
    "PlanTypeID" integer,
    "PlanCategoryID" integer,
    "ModifiedOn" date,
    "ModifiedBy" varchar(200),
    stamp timestamp with time zone DEFAULT now() NOT NULL,
    "current_user" text DEFAULT "current_user"() NOT NULL,
    "session_user" text DEFAULT "session_user"() NOT NULL,
    operation text NOT NULL
)
WITH (oids = false);
--
-- Structure for table ProductDetail (OID = 20431) :
--
CREATE TABLE public_audit."ProductDetail" (
    "ProductDetailID" uuid,
    "Name" varchar(1000),
    "Description" varchar(2000),
    "ProductID" uuid,
    "IsActive" boolean,
    "IsDeleted" boolean,
    "ShortDescription" varchar,
    "LongDescription" varchar,
    "MetaKeywords" varchar(400),
    "MetaDescription" varchar,
    "MetaTitle" varchar(400),
    "RequireOtherProducts" boolean,
    "AutomaticallyAddRequiredProducts" boolean,
    "HasUserAgreement" boolean,
    "UserAgreementText" varchar,
    "IsRecurring" boolean,
    "RecurringCycleLength" integer,
    "RecurringCyclePeriodID" integer,
    "RecurringTotalCycle" integer,
    "IsTaxExempt" boolean,
    "TaxCategoryID" integer,
    "OrderMinimumQuantity" integer,
    "OrderMaximumQuantity" integer,
    "CallForPrice" boolean,
    "Price" numeric,
    "ProductCost" numeric,
    "CustomerEntersPrice" boolean,
    "HasTierPrices" boolean,
    "HasDiscountsApplied" boolean,
    "MinimumCustomerEnteredPrice" numeric,
    "MaximumCustomerEnteredPrice" numeric,
    "DisplayOrder" integer,
    "AvailableStartDate" timestamp without time zone,
    "AvailableEndDate" timestamp without time zone,
    "ProductTypeID" integer,
    "ProductSubTypeID" integer,
    "ProductCategoryID" integer,
    "ProductSubCategoryID" integer,
    "ProductVersionID" integer,
    "CurrencyCode" varchar(30),
    "CurrencyRate" numeric,
    "CurrencyRateDate" date,
    "CurrencyRateToGBP" numeric,
    "CurrencyRateToUSD" numeric,
    "InvoiceName" varchar(2000),
    "IsDepositProduct" boolean,
    stamp timestamp with time zone DEFAULT now() NOT NULL,
    "current_user" text DEFAULT "current_user"() NOT NULL,
    "session_user" text DEFAULT "session_user"() NOT NULL,
    operation text NOT NULL
)
WITH (oids = false);
--
-- Structure for table LRDocument (OID = 20440) :
--
SET search_path = sts, pg_catalog;
CREATE TABLE sts."LRDocument" (
    "LRDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "LRTitleID" uuid NOT NULL,
    "AttachmentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ProductPurchaseProductTaskID" uuid
)
WITH (oids = false);
--
-- Structure for table LRRegisterExtract (OID = 20446) :
--
CREATE TABLE sts."LRRegisterExtract" (
    "LRRegisterExtractID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "LRTitleID" uuid NOT NULL,
    "RegisterExtractData" json,
    "CreatedOn" timestamp without time zone NOT NULL,
    "CreatedBy" varchar(200),
    "ProductPurchaseProductTaskID" uuid
)
WITH (oids = false);
--
-- Structure for table LRTitle (OID = 20453) :
--
CREATE TABLE sts."LRTitle" (
    "LRTitleID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "TitleNumber" varchar(50) NOT NULL,
    "StsPropertyID" uuid NOT NULL,
    "Description" varchar(2000),
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "CreatedBy" varchar(200),
    "ParentID" uuid,
    "ProductPurchaseProductTaskID" uuid NOT NULL,
    "StsSearchPropertyID" uuid,
    "LRPropertyTenureTypeID" integer NOT NULL,
    "AddressID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table PropertyDetail (OID = 20463) :
--
CREATE TABLE sts."PropertyDetail" (
    "PropertyDetailID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "PropertyDetailAddressID" uuid NOT NULL,
    "PropertyDetailTypeID" integer,
    "PropertyDetailSubTypeID" integer,
    "PropertyDetailCategoryID" integer
)
WITH (oids = false);
--
-- Structure for table StsAccountDocument (OID = 20467) :
--
CREATE TABLE sts."StsAccountDocument" (
    "AccountID" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StsAccountDocument" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActor (OID = 20473) :
--
CREATE TABLE sts."StsActor" (
    "OrganisationID" uuid,
    "ActorID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ActorUserAccountOrganisationID" uuid,
    "StsActorID" uuid NOT NULL,
    "StsInviteID" uuid,
    "IsActorOrganisatonPersonal" boolean DEFAULT false NOT NULL,
    "CreatedBy" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "ActorAccountID" uuid,
    "ActorContactID" uuid,
    "ContactDrivenActor" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorAuthority (OID = 20480) :
--
CREATE TABLE sts."StsActorAuthority" (
    "StsActorAuthorityID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StsActorID" uuid NOT NULL,
    "WillBeARegisteredOwner" boolean DEFAULT false NOT NULL,
    "IsARegisteredOwner" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "HasAuthorityToSellOnBelhalfOf" boolean DEFAULT false NOT NULL,
    "HasAuthorityToByOnTheBehalfOf" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorProcessLog (OID = 20490) :
--
CREATE TABLE sts."StsActorProcessLog" (
    "StsActorProcessLogID" oid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StsActorID" uuid,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid
)
WITH (oids = false);
--
-- Structure for table StsActorPurchase (OID = 20493) :
--
CREATE TABLE sts."StsActorPurchase" (
    "StsActorPurchaseID" uuid NOT NULL,
    "StsActorID" uuid NOT NULL,
    "IsShareOfPropertyPercentageDriven" boolean DEFAULT false NOT NULL,
    "ShareOfPropertyPricePercentage" numeric(30,8),
    "ShareOfPropertyPriceValue" numeric(30,8),
    "IsUsingAMortgage" boolean DEFAULT false NOT NULL,
    "MortgageFirstApplicant" boolean DEFAULT false NOT NULL,
    "MortgagePercentage" numeric(30,8) DEFAULT 0 NOT NULL,
    "MortgageAmount" numeric(30,8) NOT NULL,
    "MortgageValue" numeric(30,8),
    "MortgageLenderID" integer,
    "MortgageApplicationNumber" varchar(50),
    "MortgageTypeID" integer,
    "IsUsingAMortgageBroker" boolean DEFAULT false NOT NULL,
    "MortgageBrokerStsActorStructureID" uuid,
    "MortgageApplicantStsActorStructureID" uuid,
    "IsSharedOwnership" boolean DEFAULT false,
    "ShareOfPropertyPriceIsCashBuy" boolean DEFAULT false,
    "IsUsingADeposit" boolean DEFAULT false
)
WITH (oids = false);
--
-- Structure for table StsActorStructure (OID = 20504) :
--
CREATE TABLE sts."StsActorStructure" (
    "StsActorStructureID" uuid NOT NULL,
    "PrimaryStsActorID" uuid NOT NULL,
    "SecondaryStsActorID" uuid NOT NULL,
    "ActorPrimarySecondaryRelationshipTypeID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "HasSeenSecondaryFaceToFace" boolean DEFAULT false NOT NULL,
    "DateSeenSecondaryFaceToFace" timestamp without time zone,
    "PlaceSeenSecondaryFaceToFaceID" integer,
    "PlaceSeenSecondaryFaceToFaceDesc" varchar(2000),
    "SecondaryStsActorAccountID" uuid,
    "HasActedForSecondaryOnPrevious" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorStsSearch (OID = 20514) :
--
CREATE TABLE sts."StsActorStsSearch" (
    "StsActorID" uuid NOT NULL,
    "StsSearchID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "StsActorStructureID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsActorStsTransaction (OID = 20520) :
--
CREATE TABLE sts."StsActorStsTransaction" (
    "StsActorID" uuid NOT NULL,
    "StsTransactionID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusTypeID" uuid,
    "StatusTypeVersionNumber" integer,
    "StatusTypeValueID" uuid,
    "StsActorStructureID" uuid,
    "IsPrimary" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsAuthority (OID = 20526) :
--
CREATE TABLE sts."StsAuthority" (
    "StsAuthorityID" uuid NOT NULL,
    "StsActorAuthorityID" uuid,
    "RegisteredProprietorTypeID" integer,
    "StsAuthorityStsActorStructureID" uuid,
    "ContactID" uuid,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsAuthorityStsDocument (OID = 20531) :
--
CREATE TABLE sts."StsAuthorityStsDocument" (
    "StsAuthorityID" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsDocument (OID = 20534) :
--
CREATE TABLE sts."StsDocument" (
    "StsDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "Name" varchar(200) NOT NULL,
    "Description" varchar(2000),
    "DocumentTypeID" integer,
    "DocumentSubTypeID" integer,
    "DocumentCategoryID" integer,
    "DocumentSubCategoryID" integer NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AttachmentID" uuid,
    "DocumentHasExpiry" boolean DEFAULT false NOT NULL,
    "DocumentExpiryDate" timestamp without time zone,
    "DocumentTypeValue" varchar(1000),
    "DocumentCertificationTypeID" integer,
    "DocumentCertificationNameOnStamp" varchar(300),
    "DocumentCertificationBy" varchar(500)
)
WITH (oids = false);
--
-- Structure for table StsDocumentProcessLog (OID = 20544) :
--
CREATE TABLE sts."StsDocumentProcessLog" (
    "CreatedOn" timestamp without time zone NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StatusChangedOn" timestamp without time zone,
    "StatusChangedBy" uuid,
    "StsDocumentProcessLog" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StatusChangedByContactID" uuid
)
WITH (oids = false);
--
-- Structure for table StsInvite (OID = 20550) :
--
CREATE TABLE sts."StsInvite" (
    "StsInviteID" uuid NOT NULL,
    "NotificationID" uuid,
    "CreatedOn" timestamp without time zone NOT NULL,
    "InviteTypeID" integer,
    "InviteDetail" json,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "InviteSubTypeID" integer,
    "InviteCategoryID" integer,
    "InviteSubCategoryID" integer,
    "InviteIsExistingUser" boolean DEFAULT false NOT NULL,
    "CreatedBy" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsInviteProcessLog (OID = 20559) :
--
CREATE TABLE sts."StsInviteProcessLog" (
    "StsInviteID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL,
    "IsRejected" boolean DEFAULT false NOT NULL,
    "RejectReasonTypeID" integer,
    "RejectReasonComments" varchar(2000)
)
WITH (oids = false);
--
-- Structure for table StsSearch (OID = 20569) :
--
CREATE TABLE sts."StsSearch" (
    "StsSearchID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "StsSearchTypeID" integer,
    "StsSearchSubTypeID" integer,
    "StsSearchCategoryID" integer,
    "StsSearchSubCategoryID" integer,
    "InternalReferenceNumber" varchar(200),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "AssignedToUserAccountOrganisationID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchDetail (OID = 20575) :
--
CREATE TABLE sts."StsSearchDetail" (
    "StsSearchDetailID" uuid NOT NULL,
    "StsSearchID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchProcessLog (OID = 20578) :
--
CREATE TABLE sts."StsSearchProcessLog" (
    "StsSearchID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone DEFAULT ('now'::text)::date NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchPropertyDetail (OID = 20584) :
--
CREATE TABLE sts."StsSearchPropertyDetail" (
    "StsSearchID" uuid NOT NULL,
    "PropertyDetailID" uuid NOT NULL,
    "PropertyPrice" numeric(30,8) NOT NULL,
    "PropertyTenureID" integer,
    "StsSearchPropertyDetailID" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSearchRelation (OID = 20588) :
--
CREATE TABLE sts."StsSearchRelation" (
    "BuyerStsSearchID" uuid NOT NULL,
    "SellerStsSearchID" uuid NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsCancelled" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSourceOfFunds (OID = 20593) :
--
CREATE TABLE sts."StsSourceOfFunds" (
    "StsSourceOfFunds" uuid NOT NULL,
    "SourceOfFundsTypeID" integer NOT NULL,
    "SourceOfFundsProvider" varchar(400),
    "StsActorPurchaseID" uuid NOT NULL,
    "SourceOfFundsPercentage" numeric(30,8),
    "SourceOfFundsAmount" numeric(30,8),
    "SourceOfFundsIsPercentageBased" boolean DEFAULT false NOT NULL,
    "SourceOfFundsInterestRate" numeric(30,8) NOT NULL,
    "SourceOfFundsCurrentBalance" numeric(30,8),
    "SourceOfFundsMonthlyRepaymentAmount" numeric(30,8),
    "SourceOfFundsProviderMaintainsInterestInProperty" boolean DEFAULT false NOT NULL,
    "SourceOfFundsStsActorStructureID" uuid,
    "IsSourceOfFundsPersonal" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsSourceOfFundsStsDocument (OID = 20599) :
--
CREATE TABLE sts."StsSourceOfFundsStsDocument" (
    "StsSourceOfFunds" uuid NOT NULL,
    "StsDocumentID" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "StsSourceOfFundsStsDocumentID" uuid DEFAULT public.uuid_generate_v1() NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransaction (OID = 20605) :
--
CREATE TABLE sts."StsTransaction" (
    "StsTransactionID" uuid DEFAULT public.uuid_generate_v1() NOT NULL,
    "TransactionTypeID" integer,
    "TransactionCategoryID" integer,
    "Name" varchar(500) NOT NULL,
    "Description" varchar(2000),
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ParentID" uuid,
    "InternalReferenceNumber" varchar(200),
    "OrganisationID" uuid
)
WITH (oids = false);
--
-- Structure for table StsTransactionComponent (OID = 20614) :
--
CREATE TABLE sts."StsTransactionComponent" (
    "StsTransactionComponentID" uuid NOT NULL,
    "StsTransactionComponentTypeID" integer NOT NULL,
    "StsTransactionComponentValue" uuid NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "ArtefactID" uuid,
    "ArtefactVersionNumber" integer,
    "StsTransactionID" uuid NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransactionProcessLog (OID = 20619) :
--
CREATE TABLE sts."StsTransactionProcessLog" (
    "StsTransactionID" uuid NOT NULL,
    "CreatedOn" timestamp without time zone NOT NULL,
    "StatusTypeID" uuid NOT NULL,
    "StatusTypeVersionNumber" integer NOT NULL,
    "StatusTypeValueID" uuid NOT NULL,
    "IsArchived" boolean DEFAULT false NOT NULL,
    "IsActive" boolean DEFAULT true NOT NULL,
    "IsDeleted" boolean DEFAULT false NOT NULL,
    "IsClosed" boolean DEFAULT false NOT NULL
)
WITH (oids = false);
--
-- Structure for table StsTransactionPropertyDetail (OID = 20626) :
--
CREATE TABLE sts."StsTransactionPropertyDetail" (
    "StsTransactionPropertyDetailID" uuid NOT NULL,
    "StsTransactionID" uuid NOT NULL,
    "PropertyDetailID" uuid NOT NULL
)
WITH (oids = false);
--
-- Definition for sequence contactregulator_regulatorid_seq (OID = 27877) :
--
SET search_path = public, pg_catalog;
CREATE SEQUENCE public.contactregulator_regulatorid_seq
    START WITH 1
    INCREMENT BY 1
    MAXVALUE 2147483647
    NO MINVALUE
    CACHE 1;
--
-- Definition for view vUserRoleRegulatorDetail (OID = 27895) :
--
CREATE VIEW public."vUserRoleRegulatorDetail"
AS
SELECT uac."ID",
    uac."Email",
    con."LastName",
    con."FirstName",
    "ContactRegulator"."RegulatorID",
    "ClassificationType"."Name" AS "Regulator",
    "ContactRegulator"."RegulatorNumber",
    "UserType"."Name" AS "UserRole",
    "OrganisationTradingName"."Name" AS "TradingName",
    "OrganisationDetail"."Name" AS "CompanyName",
    uac."IsActive",
    uac."IsDeleted"
FROM (((((((("UserAccounts" uac
     LEFT JOIN "Contact" con ON ((uac."ID" = con."ParentID")))
     LEFT JOIN "ContactRegulator" ON ((con."ContactID" =
         "ContactRegulator"."ContactID")))
     LEFT JOIN "ClassificationType" ON
         (("ClassificationType"."ClassificationTypeID" = "ContactRegulator"."RegulatorID")))
     LEFT JOIN "UserAccountOrganisation" ON ((uac."ID" =
         "UserAccountOrganisation"."UserID")))
     LEFT JOIN "UserType" ON (("UserAccountOrganisation"."UserTypeID" =
         "UserType"."UserTypeID")))
     LEFT JOIN "Organisation" ON
         (("UserAccountOrganisation"."OrganisationID" = "Organisation"."OrganisationID")))
     LEFT JOIN "OrganisationDetail" ON (("Organisation"."OrganisationID" =
         "OrganisationDetail"."OrganisationID")))
     JOIN "OrganisationTradingName" ON
         (("OrganisationTradingName"."OrganisationID" = "Organisation"."OrganisationID")))
WHERE (uac."IsApproved" = true);

--
-- Definition for view vCompany (OID = 27957) :
--
CREATE VIEW public."vCompany"
AS
SELECT o."OrganisationID" AS "CompanyId",
    od."Name" AS "CompanyName",
    o."CreatedOn" AS "CompanyRecordCreated",
    o."IsCompanyVerified",
    o."IsCompanyPinCreated",
    o."CompanyPinCode",
    o."CompanyPinCreated",
    c."Salutation" AS "SystemAdminTitle",
    c."FirstName" AS "SystemAdminFirstName",
    c."LastName" AS "SystemAdminLastName",
    c."Telephone1" AS "SystemAdminTel",
    c."EmailAddress1" AS "SystemAdminEmail",
    cr."RegulatorName" AS "CompanyRegulator",
    cr."RegulatorOtherName" AS "CompanyOtherRegulator",
    a."Line1" AS "CompanyAddress1",
    a."Line2" AS "CompanyAddress2",
    a."Town" AS "CompanyTownCity",
    a."County" AS "CompanyCounty",
    a."PostalCode" AS "CompanyPostCode",
    a."AdditionalAddressInformation",
    o."ReturnUrl"
FROM (((("Organisation" o
     LEFT JOIN "OrganisationDetail" od ON ((o."OrganisationID" =
         od."OrganisationID")))
     LEFT JOIN "Contact" c ON ((o."OrganisationID" = c."ParentID")))
     LEFT JOIN "ContactRegulator" cr ON ((c."ContactID" = cr."ContactID")))
     LEFT JOIN "Address" a ON ((a."ParentID" = cr."ContactID")));

--
-- Definition for index logged_actions_action_idx (OID = 22225) :
--
SET search_path = audit, pg_catalog;
CREATE INDEX logged_actions_action_idx ON logged_actions USING btree (action);
--
-- Definition for index logged_actions_action_tstamp_tx_stm_idx (OID = 22226) :
--
CREATE INDEX logged_actions_action_tstamp_tx_stm_idx ON logged_actions USING btree (action_tstamp_stm);
--
-- Definition for index logged_actions_relid_idx (OID = 22227) :
--
CREATE INDEX logged_actions_relid_idx ON logged_actions USING btree (relid);
--
-- Definition for index AttachmentDetailRoganisrnalRole (OID = 22228) :
--
SET search_path = public, pg_catalog;
CREATE INDEX "AttachmentDetailRoganisrnalRole" ON "AttachmentDetailRole" USING btree ("OrganisationExternalRoleID");
--
-- Definition for index AttachmentDetailRole_fk_AttachmenDetailRole_OrganisationRole (OID = 22229) :
--
CREATE INDEX "AttachmentDetailRole_fk_AttachmenDetailRole_OrganisationRole" ON "AttachmentDetailRole" USING btree ("OrganisationRoleID");
--
-- Definition for index AttachmentDetailRole_fk_AttachmentRole_AttachmentDetail (OID = 22230) :
--
CREATE INDEX "AttachmentDetailRole_fk_AttachmentRole_AttachmentDetail" ON "AttachmentDetailRole" USING btree ("AttachmentDetailID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory (OID = 22231) :
--
CREATE INDEX "FK_ClassificationType_ClassificationTypeCategory" ON "ClassificationType" USING btree ("ClassificationTypeCategoryID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory2 (OID = 22232) :
--
CREATE INDEX "FK_ClassificationType_ClassificationTypeCategory2" ON "ClassificationType" USING btree ("ParentClassificationTypeCategoryID");
--
-- Definition for index FK_StateItem_State (OID = 22233) :
--
CREATE INDEX "FK_StateItem_State" ON "StateItem" USING btree ("StateID");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTemplate (OID = 22234) :
--
CREATE INDEX "FK_WorkflowHierarchyTemplate_WorkflowTemplate" ON "WorkflowHierarchyTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate (OID = 22235) :
--
CREATE INDEX "FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate" ON "WorkflowHierarchyTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index FK_WorkflowTransistionTemplate_WorkflowTemplate (OID = 22236) :
--
CREATE INDEX "FK_WorkflowTransistionTemplate_WorkflowTemplate" ON "WorkflowTransistionTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserTypeTemplate_idx (OID = 22237) :
--
CREATE INDEX "InterfacePanelValidationOrganisationTypeUserTypeTemplate_idx" ON "InterfacePanelValidationOrganisationTypeUserTypeTemplate" USING btree ("InterfacePanelValidationOrganisationTypeUserTypeTemplateID", "InterfacePanelValidationOrganisationTypeUserTypeTemplateVersion", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index LinkedAccountClaims_IX_LinkedAccount_unt_ProviderAccountID (OID = 22238) :
--
CREATE INDEX "LinkedAccountClaims_IX_LinkedAccount_unt_ProviderAccountID" ON "LinkedAccountClaims" USING btree ("LinkedAccount_ProviderName", "LinkedAccount_ProviderAccountID");
--
-- Definition for index LinkedAccounts_IX_UserAccount_ID (OID = 22239) :
--
CREATE INDEX "LinkedAccounts_IX_UserAccount_ID" ON "LinkedAccounts" USING btree ("UserAccount_ID");
--
-- Definition for index OrganisationGroup_fk_Group_ClassificationType (OID = 22240) :
--
CREATE INDEX "OrganisationGroup_fk_Group_ClassificationType" ON "OrganisationGroup" USING btree ("GroupTypeID");
--
-- Definition for index OrganisationGroup_fk_Group_ClassificationType2 (OID = 22241) :
--
CREATE INDEX "OrganisationGroup_fk_Group_ClassificationType2" ON "OrganisationGroup" USING btree ("GroupSubTypeID");
--
-- Definition for index OrganisationGroup_fk_Group_GroupTemplate (OID = 22242) :
--
CREATE INDEX "OrganisationGroup_fk_Group_GroupTemplate" ON "OrganisationGroup" USING btree ("ParentID");
--
-- Definition for index OrganisationGroup_fk_Group_Organisation (OID = 22243) :
--
CREATE INDEX "OrganisationGroup_fk_Group_Organisation" ON "OrganisationGroup" USING btree ("OrganisationID");
--
-- Definition for index OrganisationStructure_FK_OrganisationStructure (OID = 22244) :
--
CREATE INDEX "OrganisationStructure_FK_OrganisationStructure" ON "OrganisationStructure" USING btree ("OrganisationID");
--
-- Definition for index OrganisationUnitStructure_FK UnitMap (OID = 22245) :
--
CREATE INDEX "OrganisationUnitStructure_FK UnitMap" ON "OrganisationUnitStructure" USING btree ("OrganisationUnitID");
--
-- Definition for index OrganisationUnitStructure_FK_OrganisationUnit (OID = 22246) :
--
CREATE INDEX "OrganisationUnitStructure_FK_OrganisationUnit" ON "OrganisationUnitStructure" USING btree ("OrganisationID");
--
-- Definition for index OrganisationUnit_FK OrganisationUnit (OID = 22247) :
--
CREATE INDEX "OrganisationUnit_FK OrganisationUnit" ON "OrganisationUnit" USING btree ("OrganisationID");
--
-- Definition for index PasswordResetSecrets_IX_UserAccount_ID (OID = 22248) :
--
CREATE INDEX "PasswordResetSecrets_IX_UserAccount_ID" ON "PasswordResetSecrets" USING btree ("UserAccount_ID");
--
-- Definition for index RepositoryStructureGroup_fk_Rep (OID = 22249) :
--
CREATE INDEX "RepositoryStructureGroup_fk_Rep" ON "RepositoryStructureGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index RepositoryStructureGroup_fk_RepStructure (OID = 22250) :
--
CREATE INDEX "RepositoryStructureGroup_fk_RepStructure" ON "RepositoryStructureGroup" USING btree ("RepositoryStructureID");
--
-- Definition for index RepositoryStructureGroup_fk_Repository (OID = 22251) :
--
CREATE INDEX "RepositoryStructureGroup_fk_Repository" ON "RepositoryStructureGroup" USING btree ("OrganisationExternalGroupID");
--
-- Definition for index RepositoryStructureRole_fk_anisationRole (OID = 22252) :
--
CREATE INDEX "RepositoryStructureRole_fk_anisationRole" ON "RepositoryStructureRole" USING btree ("OrganisationRoleID");
--
-- Definition for index RepositoryStructureRole_fk_ure (OID = 22253) :
--
CREATE INDEX "RepositoryStructureRole_fk_ure" ON "RepositoryStructureRole" USING btree ("RepositoryStructureID");
--
-- Definition for index RepositoryStructure_fk_RepositoryMap_Repository (OID = 22254) :
--
CREATE INDEX "RepositoryStructure_fk_RepositoryMap_Repository" ON "RepositoryStructure" USING btree ("RepositoryID");
--
-- Definition for index TwoFactorAuthTokens_IX_UserAccount_ID (OID = 22255) :
--
CREATE INDEX "TwoFactorAuthTokens_IX_UserAccount_ID" ON "TwoFactorAuthTokens" USING btree ("UserAccount_ID");
--
-- Definition for index UserAccountDetail_IX_UserID (OID = 22256) :
--
CREATE INDEX "UserAccountDetail_IX_UserID" ON "UserAccountDetail" USING btree ("UserID");
--
-- Definition for index UserCertificates_IX_UserAccount_ID (OID = 22257) :
--
CREATE INDEX "UserCertificates_IX_UserAccount_ID" ON "UserCertificates" USING btree ("UserAccount_ID");
--
-- Definition for index UserClaims_IX_UserAccount_ID (OID = 22258) :
--
CREATE INDEX "UserClaims_IX_UserAccount_ID" ON "UserClaims" USING btree ("UserAccount_ID");
--
-- Definition for index WorkflowActionParameterNotificationConstructTemplate_WorkflowAc (OID = 22259) :
--
CREATE UNIQUE INDEX "WorkflowActionParameterNotificationConstructTemplate_WorkflowAc" ON "WorkflowActionParameterNotificationConstructTemplate" USING btree ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion");
--
-- Definition for index WorkflowActionParameterTemplate_fk_WorkflowActiomplate (OID = 22260) :
--
CREATE INDEX "WorkflowActionParameterTemplate_fk_WorkflowActiomplate" ON "WorkflowActionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index WorkflowActionTemplate_WorkflowActionTemplateID_key (OID = 22261) :
--
CREATE UNIQUE INDEX "WorkflowActionTemplate_WorkflowActionTemplateID_key" ON "WorkflowActionTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index WorkflowAction_WorkflowActionID_key (OID = 22262) :
--
CREATE UNIQUE INDEX "WorkflowAction_WorkflowActionID_key" ON "WorkflowAction" USING btree ("WorkflowActionID");
--
-- Definition for index WorkflowAction_idx (OID = 22263) :
--
CREATE INDEX "WorkflowAction_idx" ON "WorkflowAction" USING btree ("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowConditionParameterTemplate_fk_WorkflowConditiomplate (OID = 22264) :
--
CREATE INDEX "WorkflowConditionParameterTemplate_fk_WorkflowConditiomplate" ON "WorkflowConditionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index WorkflowInstanceExecutionStatusEvent_eo_idx (OID = 22265) :
--
CREATE INDEX "WorkflowInstanceExecutionStatusEvent_eo_idx" ON "WorkflowInstanceExecutionStatusEvent" USING btree ("EventOrder", "WorkflowInstanceSessionID");
--
-- Definition for index WorkflowInstanceExecution_idx (OID = 22266) :
--
CREATE INDEX "WorkflowInstanceExecution_idx" ON "WorkflowInstanceExecution" USING btree ("WorkflowInstanceExecutionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowInstanceSession_si_so_idx (OID = 22267) :
--
CREATE INDEX "WorkflowInstanceSession_si_so_idx" ON "WorkflowInstanceSession" USING btree ("WorkflowInstanceID", "SessionStartedOn");
--
-- Definition for index WorkflowInstance_parentid_idx (OID = 22268) :
--
CREATE INDEX "WorkflowInstance_parentid_idx" ON "WorkflowInstance" USING btree ("ParentID");
--
-- Definition for index WorkflowTransistionHierarchy_fk_WorkflowTransistionHierarchye1 (OID = 22269) :
--
CREATE INDEX "WorkflowTransistionHierarchy_fk_WorkflowTransistionHierarchye1" ON "WorkflowTransistionHierarchy" USING btree ("ParentComponentID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowActionTemplatemplate (OID = 22270) :
--
CREATE INDEX "WorkflowTransistionWorkflowActionTemplatemplate" ON "WorkflowTransistionWorkflowActionTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index WorkflowTreeStructure_WorkflowTreeStructureID_key (OID = 22271) :
--
CREATE UNIQUE INDEX "WorkflowTreeStructure_WorkflowTreeStructureID_key" ON "WorkflowTreeStructure" USING btree ("WorkflowTreeStructureID");
--
-- Definition for index companyhouse_phrase_idx (OID = 22272) :
--
CREATE INDEX companyhouse_phrase_idx ON "CompanyHouse" USING hash (companyname);
--
-- Definition for index fk_Account_Account (OID = 22273) :
--
CREATE INDEX "fk_Account_Account" ON "Account" USING btree ("ParentAccountID");
--
-- Definition for index fk_Account_Contact (OID = 22274) :
--
CREATE INDEX "fk_Account_Contact" ON "Account" USING btree ("ContactID");
--
-- Definition for index fk_Address_ClassificationType (OID = 22275) :
--
CREATE INDEX "fk_Address_ClassificationType" ON "Address" USING btree ("AddressTypeID");
--
-- Definition for index fk_AttachmentDetailGroup_AttachmentDetail (OID = 22276) :
--
CREATE INDEX "fk_AttachmentDetailGroup_AttachmentDetail" ON "AttachmentDetailGroup" USING btree ("AttachmentDetailID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationExternalGroup (OID = 22277) :
--
CREATE INDEX "fk_AttachmentDetailGroup_OrganisationExternalGroup" ON "AttachmentDetailGroup" USING btree ("OrganisationExternalGroupID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationGroup (OID = 22278) :
--
CREATE INDEX "fk_AttachmentDetailGroup_OrganisationGroup" ON "AttachmentDetailGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index fk_AttachmentDetail_Organisation (OID = 22279) :
--
CREATE INDEX "fk_AttachmentDetail_Organisation" ON "AttachmentDetail" USING btree ("OrganisationID");
--
-- Definition for index fk_AttachmentDetail_RepositoryMap (OID = 22280) :
--
CREATE INDEX "fk_AttachmentDetail_RepositoryMap" ON "AttachmentDetail" USING btree ("RepositoryStructureID");
--
-- Definition for index fk_Attachment_AttachmentDetail (OID = 22281) :
--
CREATE INDEX "fk_Attachment_AttachmentDetail" ON "Attachment" USING btree ("AttachmentDetailID");
--
-- Definition for index fk_OrganisationDetail_Organisation_1 (OID = 22282) :
--
CREATE INDEX "fk_OrganisationDetail_Organisation_1" ON "OrganisationDetail" USING btree ("OrganisationID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationRole (OID = 22283) :
--
CREATE INDEX "fk_OrganisationGroupOrganisationRole_OrganisationRole" ON "OrganisationGroupRole" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_OrganisationRoleClaim_OrganisationRole (OID = 22284) :
--
CREATE INDEX "fk_OrganisationRoleClaim_OrganisationRole" ON "OrganisationRoleClaim" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationGroup (OID = 22285) :
--
CREATE INDEX "fk_OrganisationUnitOrganisationGroup_OrganisationGroup" ON "OrganisationUnitOrganisationGroup" USING btree ("OrganisationGroupID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationRole (OID = 22286) :
--
CREATE INDEX "fk_OrganisationUnitOrganisationRole_OrganisationRole" ON "OrganisationUnitOrganisationRole" USING btree ("OrganisationRoleID");
--
-- Definition for index fk_RepositoryStructure_Repository (OID = 22287) :
--
CREATE INDEX "fk_RepositoryStructure_Repository" ON "RepositoryStructure" USING btree ("RepositoryID");
--
-- Definition for index fk_RoleTemplateClaim_Operation (OID = 22288) :
--
CREATE INDEX "fk_RoleTemplateClaim_Operation" ON "RoleClaim" USING btree ("OperationID");
--
-- Definition for index fk_RoleTemplateClaim_Resource (OID = 22289) :
--
CREATE INDEX "fk_RoleTemplateClaim_Resource" ON "RoleClaim" USING btree ("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_RoleTemplate (OID = 22290) :
--
CREATE INDEX "fk_RoleTemplateClaim_RoleTemplate" ON "RoleClaim" USING btree ("RoleID");
--
-- Definition for index fk_RoleTemplateClaim_State (OID = 22291) :
--
CREATE INDEX "fk_RoleTemplateClaim_State" ON "RoleClaim" USING btree ("StateID");
--
-- Definition for index fk_RoleTemplateClaim_StateItem (OID = 22292) :
--
CREATE INDEX "fk_RoleTemplateClaim_StateItem" ON "RoleClaim" USING btree ("StateItemID");
--
-- Definition for index fk_WorkflowActionCompleteConplate (OID = 22293) :
--
CREATE INDEX "fk_WorkflowActionCompleteConplate" ON "WorkflowActionCompleteConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate (OID = 22294) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate" ON "WorkflowActionExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowAction (OID = 22295) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommand_WorkflowAction" ON "WorkflowActionExecuteCommand" USING btree ("WorkflowActionID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowCommand (OID = 22296) :
--
CREATE INDEX "fk_WorkflowActionExecuteCommand_WorkflowCommand" ON "WorkflowActionExecuteCommand" USING btree ("WorkflowCommandID");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate (OID = 22297) :
--
CREATE INDEX "fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate" ON "WorkflowActionPostCommandTemplate" USING btree ("WorkflowActionTemplateID");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate (OID = 22298) :
--
CREATE INDEX "fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate" ON "WorkflowActionPreCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowActionStartConditimplate (OID = 22299) :
--
CREATE INDEX "fk_WorkflowActionStartConditimplate" ON "WorkflowActionStartConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate (OID = 22300) :
--
CREATE INDEX "fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowActionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate (OID = 22301) :
--
CREATE INDEX "fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate" ON "WorkflowCommandConditionTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate (OID = 22302) :
--
CREATE INDEX "fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate" ON "WorkflowCommandParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate (OID = 22303) :
--
CREATE INDEX "fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate" ON "WorkflowCommandTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowTemplate (OID = 22304) :
--
CREATE INDEX "fk_WorkflowCommandTemplate_WorkflowTemplate" ON "WorkflowCommandTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index fk_WorkflowCommand_Workflow (OID = 22305) :
--
CREATE INDEX "fk_WorkflowCommand_Workflow" ON "WorkflowCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommand_WorkflowObjectType (OID = 22306) :
--
CREATE INDEX "fk_WorkflowCommand_WorkflowObjectType" ON "WorkflowCommand" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate (OID = 22307) :
--
CREATE INDEX "fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowConditionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowCondition_Workflow (OID = 22308) :
--
CREATE INDEX "fk_WorkflowCondition_Workflow" ON "WorkflowCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCondition_WorkflowObjectType (OID = 22309) :
--
CREATE INDEX "fk_WorkflowCondition_WorkflowObjectType" ON "WorkflowCondition" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteComdTemplate (OID = 22310) :
--
CREATE INDEX "fk_WorkflowDecisionExecuteComdTemplate" ON "WorkflowDecisionExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate (OID = 22311) :
--
CREATE INDEX "fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate" ON "WorkflowDecisionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate (OID = 22312) :
--
CREATE INDEX "fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate" ON "WorkflowDecisionTemplate" USING btree ("WorkflowObjectTypeTemplateID");
--
-- Definition for index fk_WorkflowDecision_Workflow (OID = 22313) :
--
CREATE INDEX "fk_WorkflowDecision_Workflow" ON "WorkflowDecision" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecision_WorkflowObjectType (OID = 22314) :
--
CREATE INDEX "fk_WorkflowDecision_WorkflowObjectType" ON "WorkflowDecision" USING btree ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_Workflow (OID = 22315) :
--
CREATE INDEX "fk_WorkflowHierarchy_Workflow" ON "WorkflowHierarchy" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_WorkflowTransistion (OID = 22316) :
--
CREATE INDEX "fk_WorkflowHierarchy_WorkflowTransistion" ON "WorkflowHierarchy" USING btree ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceExecutionDataIte (OID = 22317) :
--
CREATE INDEX "fk_WorkflowInstanceExecutionDataIte" ON "WorkflowInstanceExecutionDataItem" USING btree ("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index fk_WorkflowInstance_Workflow (OID = 22318) :
--
CREATE INDEX "fk_WorkflowInstance_Workflow" ON "WorkflowInstance" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditio (OID = 22319) :
--
CREATE INDEX "fk_WorkflowMainCompleteConditio" ON "WorkflowMainCompleteConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowMainCompleteCondition_Workflow (OID = 22320) :
--
CREATE INDEX "fk_WorkflowMainCompleteCondition_Workflow" ON "WorkflowMainCompleteCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_WorkflowCondition (OID = 22321) :
--
CREATE INDEX "fk_WorkflowMainCompleteCondition_WorkflowCondition" ON "WorkflowMainCompleteCondition" USING btree ("WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate (OID = 22322) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainExecuteCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainExecuteCommand_Workflow (OID = 22323) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommand_Workflow" ON "WorkflowMainExecuteCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_WorkflowCommand (OID = 22324) :
--
CREATE INDEX "fk_WorkflowMainExecuteCommand_WorkflowCommand" ON "WorkflowMainExecuteCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate (OID = 22325) :
--
CREATE INDEX "fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate" ON "WorkflowMainParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowMainParameter_Workflow (OID = 22326) :
--
CREATE INDEX "fk_WorkflowMainParameter_Workflow" ON "WorkflowMainParameter" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_WorkflowParameter (OID = 22327) :
--
CREATE INDEX "fk_WorkflowMainParameter_WorkflowParameter" ON "WorkflowMainParameter" USING btree ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate (OID = 22328) :
--
CREATE INDEX "fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainPostCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainPostCommand_Workflow (OID = 22329) :
--
CREATE INDEX "fk_WorkflowMainPostCommand_Workflow" ON "WorkflowMainPostCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_WorkflowCommand (OID = 22330) :
--
CREATE INDEX "fk_WorkflowMainPostCommand_WorkflowCommand" ON "WorkflowMainPostCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate (OID = 22331) :
--
CREATE INDEX "fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate" ON "WorkflowMainPreCommandTemplate" USING btree ("WorkflowCommandTemplateID");
--
-- Definition for index fk_WorkflowMainPreCommand_Workflow (OID = 22332) :
--
CREATE INDEX "fk_WorkflowMainPreCommand_Workflow" ON "WorkflowMainPreCommand" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_WorkflowCommand (OID = 22333) :
--
CREATE INDEX "fk_WorkflowMainPreCommand_WorkflowCommand" ON "WorkflowMainPreCommand" USING btree ("WorkflowCommandID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate (OID = 22334) :
--
CREATE INDEX "fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate" ON "WorkflowMainStartConditionTemplate" USING btree ("WorkflowConditionTemplateID");
--
-- Definition for index fk_WorkflowMainStartCondition_Workflow (OID = 22335) :
--
CREATE INDEX "fk_WorkflowMainStartCondition_Workflow" ON "WorkflowMainStartCondition" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_WorkflowCondition (OID = 22336) :
--
CREATE INDEX "fk_WorkflowMainStartCondition_WorkflowCondition" ON "WorkflowMainStartCondition" USING btree ("WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowObjectType_Workflow (OID = 22337) :
--
CREATE INDEX "fk_WorkflowObjectType_Workflow" ON "WorkflowObjectType" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditioate (OID = 22338) :
--
CREATE INDEX "fk_WorkflowTransistionCompleteConditioate" ON "WorkflowTransistionCompleteConditionTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate (OID = 22339) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate" ON "WorkflowTransistionHierarchyTemplate" USING btree ("WorkflowTemplateID");
--
-- Definition for index fk_WorkflowTransistionHierarchy_Workflow (OID = 22340) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchy_Workflow" ON "WorkflowTransistionHierarchy" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_WorkflowTransistion (OID = 22341) :
--
CREATE INDEX "fk_WorkflowTransistionHierarchy_WorkflowTransistion" ON "WorkflowTransistionHierarchy" USING btree ("ChildComponentID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarcplate (OID = 22342) :
--
CREATE INDEX "fk_WorkflowTransistionHierarcplate" ON "WorkflowTransistionHierarchyTemplate" USING btree ("ChildComponentID");
--
-- Definition for index fk_WorkflowTransistionHierarmplate11 (OID = 22343) :
--
CREATE INDEX "fk_WorkflowTransistionHierarmplate11" ON "WorkflowTransistionHierarchyTemplate" USING btree ("ParentComponentID");
--
-- Definition for index fk_WorkflowTransistionParametemplate (OID = 22344) :
--
CREATE INDEX "fk_WorkflowTransistionParametemplate" ON "WorkflowTransistionParameterTemplate" USING btree ("WorkflowParameterTemplateID");
--
-- Definition for index fk_WorkflowTransistionStartCondititionTemplate (OID = 22345) :
--
CREATE INDEX "fk_WorkflowTransistionStartCondititionTemplate" ON "WorkflowTransistionStartConditionTemplate" USING btree ("WorkflowTransistionTemplateID");
--
-- Definition for index fk_WorkflowTransistion_Workflow (OID = 22346) :
--
CREATE INDEX "fk_WorkflowTransistion_Workflow" ON "WorkflowTransistion" USING btree ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index subscription_typenameidx (OID = 22347) :
--
CREATE INDEX subscription_typenameidx ON subscription USING btree (typename);
--
-- Definition for index timeoutentity_endpointidx (OID = 22348) :
--
CREATE INDEX timeoutentity_endpointidx ON timeoutentity USING btree ("time", endpoint);
--
-- Definition for index timeoutentity_sagaididx (OID = 22349) :
--
CREATE INDEX timeoutentity_sagaididx ON timeoutentity USING btree (sagaid);
--
-- Definition for index logged_actions_pkey (OID = 21153) :
--
SET search_path = audit, pg_catalog;
ALTER TABLE ONLY logged_actions
    ADD CONSTRAINT logged_actions_pkey
    PRIMARY KEY (event_id);
--
-- Definition for index pkLegalOrganisationDetails (OID = 21155) :
--
SET search_path = legal, pg_catalog;
ALTER TABLE ONLY "LegalOrganisationDetails"
    ADD CONSTRAINT "pkLegalOrganisationDetails"
    PRIMARY KEY ("OrganisationID");
--
-- Definition for index Account_pkey (OID = 21157) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "Account_pkey"
    PRIMARY KEY ("AccountID");
--
-- Definition for index AddressChronology_pkey (OID = 21159) :
--
ALTER TABLE ONLY "AddressChronology"
    ADD CONSTRAINT "AddressChronology_pkey"
    PRIMARY KEY ("AddressChronologyID");
--
-- Definition for index Address_pkey (OID = 21161) :
--
ALTER TABLE ONLY "Address"
    ADD CONSTRAINT "Address_pkey"
    PRIMARY KEY ("AddressID");
--
-- Definition for index ApplicationStageWorkflow_pkey (OID = 21163) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "ApplicationStageWorkflow_pkey"
    PRIMARY KEY ("ApplicationStageWorkflowID");
--
-- Definition for index ApplicationStage_pkey (OID = 21165) :
--
ALTER TABLE ONLY "ApplicationStage"
    ADD CONSTRAINT "ApplicationStage_pkey"
    PRIMARY KEY ("ApplicationStageID");
--
-- Definition for index AttachmentDetailGroup_pkey (OID = 21167) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "AttachmentDetailGroup_pkey"
    PRIMARY KEY ("AttachmentDetailGroupID");
--
-- Definition for index AttachmentDetailRole_pkey (OID = 21169) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "AttachmentDetailRole_pkey"
    PRIMARY KEY ("AttachmentDetailRoleID");
--
-- Definition for index AttachmentDetail_pkey (OID = 21171) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "AttachmentDetail_pkey"
    PRIMARY KEY ("AttachmentDetailID");
--
-- Definition for index Attachment_pkey (OID = 21173) :
--
ALTER TABLE ONLY "Attachment"
    ADD CONSTRAINT "Attachment_pkey"
    PRIMARY KEY ("AttachmentID");
--
-- Definition for index BankSortCode_pkey (OID = 21175) :
--
ALTER TABLE ONLY "BankSortCode"
    ADD CONSTRAINT "BankSortCode_pkey"
    PRIMARY KEY ("SortCode", "BankName");
--
-- Definition for index BusMessageContent_pkey (OID = 21177) :
--
ALTER TABLE ONLY "BusMessageContent"
    ADD CONSTRAINT "BusMessageContent_pkey"
    PRIMARY KEY ("BusMessageContentID");
--
-- Definition for index BusMessage_pkey (OID = 21179) :
--
ALTER TABLE ONLY "BusMessage"
    ADD CONSTRAINT "BusMessage_pkey"
    PRIMARY KEY ("BusMessageID");
--
-- Definition for index ClassificationTypeCategory_pkey (OID = 21181) :
--
ALTER TABLE ONLY "ClassificationTypeCategory"
    ADD CONSTRAINT "ClassificationTypeCategory_pkey"
    PRIMARY KEY ("ClassificationTypeCategoryID");
--
-- Definition for index ClassificationType_pkey (OID = 21183) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "ClassificationType_pkey"
    PRIMARY KEY ("ClassificationTypeID");
--
-- Definition for index CompanyHouse_pkey (OID = 21185) :
--
ALTER TABLE ONLY "CompanyHouse"
    ADD CONSTRAINT "CompanyHouse_pkey"
    PRIMARY KEY (companyname);
ALTER TABLE "CompanyHouse" CLUSTER ON "CompanyHouse_pkey";
--
-- Definition for index Contact_pkey (OID = 21187) :
--
ALTER TABLE ONLY "Contact"
    ADD CONSTRAINT "Contact_pkey"
    PRIMARY KEY ("ContactID");
--
-- Definition for index CurrencyRate_pkey (OID = 21189) :
--
ALTER TABLE ONLY "CurrencyRate"
    ADD CONSTRAINT "CurrencyRate_pkey"
    PRIMARY KEY ("CurrencyRateID");
--
-- Definition for index DefaultOrganisationBranch_pkey (OID = 21191) :
--
ALTER TABLE ONLY "DefaultOrganisationBranch"
    ADD CONSTRAINT "DefaultOrganisationBranch_pkey"
    PRIMARY KEY ("DefaultOrganisationBranchID");
--
-- Definition for index DefaultOrganisationBranch_pkeyT (OID = 21193) :
--
ALTER TABLE ONLY "DefaultOrganisationBranchTemplate"
    ADD CONSTRAINT "DefaultOrganisationBranch_pkeyT"
    PRIMARY KEY ("DefaultOrganisationBranchTemplateID");
--
-- Definition for index DefaultOrganisationGroupDefaultOrganisationRole_pkey (OID = 21195) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "DefaultOrganisationGroupDefaultOrganisationRole_pkey"
    PRIMARY KEY ("DefaultOrganisationGroupID", "DefaultOrganisationRoleID");
--
-- Definition for index DefaultOrganisationGroupDefaultOrganisationRole_pkeyT (OID = 21197) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "DefaultOrganisationGroupDefaultOrganisationRole_pkeyT"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID", "DefaultOrganisationRoleTemplateID");
--
-- Definition for index DefaultOrganisationGroup_pkey (OID = 21199) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "DefaultOrganisationGroup_pkey"
    PRIMARY KEY ("DefaultOrganisationGroupID");
--
-- Definition for index DefaultOrganisationGroup_pkeyT (OID = 21201) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "DefaultOrganisationGroup_pkeyT"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID");
--
-- Definition for index DefaultOrganisationRoleClaim_pkey (OID = 21203) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "DefaultOrganisationRoleClaim_pkey"
    PRIMARY KEY ("DefaultOrganisationRoleClaimID");
--
-- Definition for index DefaultOrganisationRoleClaim_pkeyT (OID = 21205) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "DefaultOrganisationRoleClaim_pkeyT"
    PRIMARY KEY ("DefaultOrganisationRoleClaimTemplateID");
--
-- Definition for index DefaultOrganisationRole_pkey (OID = 21207) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "DefaultOrganisationRole_pkey"
    PRIMARY KEY ("DefaultOrganisationRoleID");
--
-- Definition for index DefaultOrganisationRole_pkeyT (OID = 21209) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "DefaultOrganisationRole_pkeyT"
    PRIMARY KEY ("DefaultOrganisationRoleTemplateID");
--
-- Definition for index DefaultOrganisationTarget_pkey (OID = 21211) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "DefaultOrganisationTarget_pkey"
    PRIMARY KEY ("DefaultOrganisationTargetID");
--
-- Definition for index DefaultOrganisationTarget_pkeyT (OID = 21213) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "DefaultOrganisationTarget_pkeyT"
    PRIMARY KEY ("DefaultOrganisationTargetTemplateID");
--
-- Definition for index ErrorCode_pkey (OID = 21215) :
--
ALTER TABLE ONLY "ErrorCode"
    ADD CONSTRAINT "ErrorCode_pkey"
    PRIMARY KEY ("ErrorCodeID");
--
-- Definition for index GroupTemplateRole_pkey (OID = 21217) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "GroupTemplateRole_pkey"
    PRIMARY KEY ("GroupID", "RoleID");
--
-- Definition for index InterfacePanelFDValidationOrgTypeUserTypeTemplate_idx (OID = 21219) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrgTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFDValidationOrgTypeUserTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelFDValidationOrgTypeUserTypeTemplateID", "InterfacePanelFDValidationOrgTypeUserTypeTemplateVersion", "OrganisationTypeID", "FieldDetailTemplateID");
--
-- Definition for index InterfacePanelFDValidationOrganisationTypeUserType_idx (OID = 21221) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelFDValidationOrganisationTypeUserType_idx"
    PRIMARY KEY ("InterfacePanelFDValidationOrganisationTypeUserTypeID", "InterfacePanelFDValidationOrganisationTypeUserTypeVersion", "FieldDetailID", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationTypeTemplate_idx (OID = 21223) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationOrganisationTypeTemplateID", "InterfacePanelFieldDetailValidationOrganisationTypeTemplateVers", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationType_idx (OID = 21225) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationType_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationOrganisationTypeID", "InterfacePanelFieldDetailValidationOrganisationTypeVersion", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index InterfacePanelFieldDetailValidationTemplate_idx (OID = 21227) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationTemplate_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationTemplateID", "InterfacePanelFieldDetailValidationTemplateVersion", "FieldDetailTemplateID", "InterfacePanelFieldDetailValidationTemplateName");
--
-- Definition for index InterfacePanelFieldDetailValidation_idx (OID = 21229) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidation"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidation_idx"
    PRIMARY KEY ("InterfacePanelFieldDetailValidationID", "InterfacePanelFieldDetailValidationVersion", "FieldDetailID", "InterfacePanelFieldDetailValidationName");
--
-- Definition for index InterfacePanelRoleClaimTemplate_pkey (OID = 21231) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "InterfacePanelRoleClaimTemplate_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index InterfacePanelRoleClaim_pkey (OID = 21233) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "InterfacePanelRoleClaim_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index InterfacePanelRoleTemplate_pkey (OID = 21235) :
--
ALTER TABLE ONLY "InterfacePanelRoleTemplate"
    ADD CONSTRAINT "InterfacePanelRoleTemplate_pkey"
    PRIMARY KEY ("InterfacePanelRoleTemplateID");
--
-- Definition for index InterfacePanelRole_pkey (OID = 21237) :
--
ALTER TABLE ONLY "InterfacePanelRole"
    ADD CONSTRAINT "InterfacePanelRole_pkey"
    PRIMARY KEY ("InterfacePanelRoleID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeTemplate_idx (OID = 21239) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeTemplate_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeTemplateID", "InterfacePanelValidationOrganisationTypeTemplateVers", "OrganisationTypeID");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserType_idx (OID = 21241) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserType_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeUserTypeID", "InterfacePanelValidationOrganisationTypeUserTypeVersion", "OrganisationTypeID", "UserTypeID");
--
-- Definition for index InterfacePanelValidationOrganisationType_idx (OID = 21243) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationType_idx"
    PRIMARY KEY ("InterfacePanelValidationOrganisationTypeID", "InterfacePanelValidationOrganisationTypeVersion", "OrganisationTypeID");
--
-- Definition for index InterfacePanelValidationTemplate_idx (OID = 21245) :
--
ALTER TABLE ONLY "InterfacePanelValidationTemplate"
    ADD CONSTRAINT "InterfacePanelValidationTemplate_idx"
    PRIMARY KEY ("InterfacePanelValidationTemplateID", "InterfacePanelValidationTemplateVersionNumber", "InterfacePanelValidationTemplateName");
--
-- Definition for index InterfacePanelValidation_idx (OID = 21247) :
--
ALTER TABLE ONLY "InterfacePanelValidation"
    ADD CONSTRAINT "InterfacePanelValidation_idx"
    PRIMARY KEY ("InterfacePanelValidationID", "InterfacePanelVersionNumber");
--
-- Definition for index LinkedAccountClaims_pkey (OID = 21249) :
--
ALTER TABLE ONLY "LinkedAccountClaims"
    ADD CONSTRAINT "LinkedAccountClaims_pkey"
    PRIMARY KEY ("Type", "Value");
--
-- Definition for index LinkedAccounts_pkey (OID = 21251) :
--
ALTER TABLE ONLY "LinkedAccounts"
    ADD CONSTRAINT "LinkedAccounts_pkey"
    PRIMARY KEY ("ProviderName", "ProviderAccountID");
--
-- Definition for index ModulePluginTemplate_pkey (OID = 21253) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "ModulePluginTemplate_pkey"
    PRIMARY KEY ("ModulePluginTemplateID");
--
-- Definition for index ModulePlugin_pkey (OID = 21255) :
--
ALTER TABLE ONLY "ModulePlugin"
    ADD CONSTRAINT "ModulePlugin_pkey"
    PRIMARY KEY ("ModulePluginID");
--
-- Definition for index ModuleRoleClaimTemplate_pkey (OID = 21257) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "ModuleRoleClaimTemplate_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index ModuleRoleClaim_pkey (OID = 21259) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "ModuleRoleClaim_pkey"
    PRIMARY KEY ("ClaimID");
--
-- Definition for index ModuleRoleTemplate_pkey (OID = 21261) :
--
ALTER TABLE ONLY "ModuleRoleTemplate"
    ADD CONSTRAINT "ModuleRoleTemplate_pkey"
    PRIMARY KEY ("RoleID");
--
-- Definition for index ModuleRole_pkey (OID = 21263) :
--
ALTER TABLE ONLY "ModuleRole"
    ADD CONSTRAINT "ModuleRole_pkey"
    PRIMARY KEY ("RoleID");
--
-- Definition for index ModuleSettingTemplate_pkey (OID = 21265) :
--
ALTER TABLE ONLY "ModuleSettingTemplate"
    ADD CONSTRAINT "ModuleSettingTemplate_pkey"
    PRIMARY KEY ("ModuleSettingTemplateID");
--
-- Definition for index ModuleSetting_pkey (OID = 21267) :
--
ALTER TABLE ONLY "ModuleSetting"
    ADD CONSTRAINT "ModuleSetting_pkey"
    PRIMARY KEY ("ModuleSettingID");
--
-- Definition for index ModuleSubscriptionTemplate_pkey (OID = 21269) :
--
ALTER TABLE ONLY "ModuleSubscriptionTemplate"
    ADD CONSTRAINT "ModuleSubscriptionTemplate_pkey"
    PRIMARY KEY ("ModuleSubscriptionTemplateID");
--
-- Definition for index ModuleSubscription_pkey (OID = 21271) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "ModuleSubscription_pkey"
    PRIMARY KEY ("ModuleSubscriptionID");
--
-- Definition for index ModuleTemplate_pkey (OID = 21273) :
--
ALTER TABLE ONLY "ModuleTemplate"
    ADD CONSTRAINT "ModuleTemplate_pkey"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index ModuleWorkflowTargetTemplate_pkey (OID = 21275) :
--
ALTER TABLE ONLY "ModuleWorkflowTargetTemplate"
    ADD CONSTRAINT "ModuleWorkflowTargetTemplate_pkey"
    PRIMARY KEY ("ModuleWorkflowTargetTemplateID");
--
-- Definition for index ModuleWorkflowTarget_pkey (OID = 21277) :
--
ALTER TABLE ONLY "ModuleWorkflowTarget"
    ADD CONSTRAINT "ModuleWorkflowTarget_pkey"
    PRIMARY KEY ("ModuleWorkflowTargetID");
--
-- Definition for index ModuleWorkflowTemplate_pkey (OID = 21279) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "ModuleWorkflowTemplate_pkey"
    PRIMARY KEY ("ModuleWorkflowTemplateID");
--
-- Definition for index ModuleWorkflow_pkey (OID = 21281) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "ModuleWorkflow_pkey"
    PRIMARY KEY ("ModuleWorkflowID");
--
-- Definition for index Module_pkey (OID = 21283) :
--
ALTER TABLE ONLY "Module"
    ADD CONSTRAINT "Module_pkey"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_idx (OID = 21285) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_idx"
    PRIMARY KEY ("NotificationConstructGroupNotificationConstructTemplateID", "NotificationConstructGroupNotificationConstructTemplateVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_idx (OID = 21287) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_idx"
    PRIMARY KEY ("NotificationConstructGroupNotificationConstructID", "NotificationConstructGroupNotificationConstructVersion");
--
-- Definition for index NotificationConstructGroupTemplate_idx (OID = 21289) :
--
ALTER TABLE ONLY "NotificationConstructGroupTemplate"
    ADD CONSTRAINT "NotificationConstructGroupTemplate_idx"
    PRIMARY KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index NotificationConstructGroup_idx (OID = 21291) :
--
ALTER TABLE ONLY "NotificationConstructGroup"
    ADD CONSTRAINT "NotificationConstructGroup_idx"
    PRIMARY KEY ("NotificationConstructGroupID", "NotificationConstructGroupVersion");
--
-- Definition for index NotificationConstruct_idx (OID = 21293) :
--
ALTER TABLE ONLY "NotificationConstruct"
    ADD CONSTRAINT "NotificationConstruct_idx"
    PRIMARY KEY ("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index NotificationRecipientLog_pkey (OID = 21295) :
--
ALTER TABLE ONLY "NotificationRecipientLog"
    ADD CONSTRAINT "NotificationRecipientLog_pkey"
    PRIMARY KEY ("NotificationRecipientLogID");
--
-- Definition for index Operation_pkey (OID = 21297) :
--
ALTER TABLE ONLY "Operation"
    ADD CONSTRAINT "Operation_pkey"
    PRIMARY KEY ("OperationID");
--
-- Definition for index OrganisationAccountingPeriod_OrganisationAccountingPeriodID_key (OID = 21299) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "OrganisationAccountingPeriod_OrganisationAccountingPeriodID_key"
    UNIQUE ("OrganisationAccountingPeriodID");
--
-- Definition for index OrganisationDetail_pkey (OID = 21301) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "OrganisationDetail_pkey"
    PRIMARY KEY ("OrganisationDetailID");
--
-- Definition for index OrganisationGroupOrganisationRole_pkey (OID = 21303) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "OrganisationGroupOrganisationRole_pkey"
    PRIMARY KEY ("OrganisationGroupID", "OrganisationRoleID");
--
-- Definition for index OrganisationGroup_pkey (OID = 21305) :
--
ALTER TABLE ONLY "OrganisationGroup"
    ADD CONSTRAINT "OrganisationGroup_pkey"
    PRIMARY KEY ("OrganisationGroupID");
--
-- Definition for index OrganisationRoleClaim_pkey (OID = 21307) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "OrganisationRoleClaim_pkey"
    PRIMARY KEY ("OrganisationRoleClaimID");
--
-- Definition for index OrganisationRole_pkey (OID = 21309) :
--
ALTER TABLE ONLY "OrganisationRole"
    ADD CONSTRAINT "OrganisationRole_pkey"
    PRIMARY KEY ("OrganisationRoleID");
--
-- Definition for index OrganisationStructure_pkey (OID = 21311) :
--
ALTER TABLE ONLY "OrganisationStructure"
    ADD CONSTRAINT "OrganisationStructure_pkey"
    PRIMARY KEY ("OrganisationStructureID");
--
-- Definition for index OrganisationTeam_pkey (OID = 21313) :
--
ALTER TABLE ONLY "OrganisationTeam"
    ADD CONSTRAINT "OrganisationTeam_pkey"
    PRIMARY KEY ("OrganisationTeamID");
--
-- Definition for index OrganisationUnitOrganisationGroup_pkey (OID = 21315) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "OrganisationUnitOrganisationGroup_pkey"
    PRIMARY KEY ("OrganisationUnitID", "OrganisationGroupID");
--
-- Definition for index OrganisationUnitOrganisationRole_pkey (OID = 21317) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "OrganisationUnitOrganisationRole_pkey"
    PRIMARY KEY ("OrganisationUnitID", "OrganisationRoleID");
--
-- Definition for index OrganisationUnitStructure_pkey (OID = 21319) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "OrganisationUnitStructure_pkey"
    PRIMARY KEY ("OrganisationUnitStructureID", "OrganisationUnitID");
--
-- Definition for index OrganisationUnit_pkey (OID = 21321) :
--
ALTER TABLE ONLY "OrganisationUnit"
    ADD CONSTRAINT "OrganisationUnit_pkey"
    PRIMARY KEY ("OrganisationUnitID");
--
-- Definition for index OrganisationWorkflow_pkey (OID = 21323) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "OrganisationWorkflow_pkey"
    PRIMARY KEY ("OrganisationWorkflowID");
--
-- Definition for index Organisation_pkey (OID = 21325) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "Organisation_pkey"
    PRIMARY KEY ("OrganisationID");
--
-- Definition for index PackageProductRelationshipBlueprintTemplate_pkey (OID = 21327) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "PackageProductRelationshipBlueprintTemplate_pkey"
    PRIMARY KEY ("PackageProductRelationshipBlueprintTemplateID");
--
-- Definition for index PackageProductRelationshipBlueprint_pkey (OID = 21329) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprint"
    ADD CONSTRAINT "PackageProductRelationshipBlueprint_pkey"
    PRIMARY KEY ("PackageProductRelationshipBlueprintID");
--
-- Definition for index PackageProductRelationshipTemplate_pkey (OID = 21331) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "PackageProductRelationshipTemplate_pkey"
    PRIMARY KEY ("PackageProductRelationshipTemplateID");
--
-- Definition for index PackageProductRelationship_pkey (OID = 21333) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "PackageProductRelationship_pkey"
    PRIMARY KEY ("PackageProductRelationshipID");
--
-- Definition for index PackageProductSpecificationBlueprintTemplate_pkey (OID = 21335) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "PackageProductSpecificationBlueprintTemplate_pkey"
    PRIMARY KEY ("PackageProductSpecificationBlueprintTemplateID");
--
-- Definition for index PackageProductSpecificationBlueprint_pkey (OID = 21337) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "PackageProductSpecificationBlueprint_pkey"
    PRIMARY KEY ("PackageProductSpecificationBlueprintID");
--
-- Definition for index PasswordResetSecrets_pkey (OID = 21339) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT "PasswordResetSecrets_pkey"
    PRIMARY KEY ("PasswordResetSecretID");
--
-- Definition for index PluginTemplate_pkey (OID = 21341) :
--
ALTER TABLE ONLY "PluginTemplate"
    ADD CONSTRAINT "PluginTemplate_pkey"
    PRIMARY KEY ("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index Plugin_pkey (OID = 21343) :
--
ALTER TABLE ONLY "Plugin"
    ADD CONSTRAINT "Plugin_pkey"
    PRIMARY KEY ("PluginID", "PluginVersionNumber");
--
-- Definition for index ProductAttributeTemplate_pkey (OID = 21345) :
--
ALTER TABLE ONLY "ProductAttributeTemplate"
    ADD CONSTRAINT "ProductAttributeTemplate_pkey"
    PRIMARY KEY ("ProductAttributeTemplateID");
--
-- Definition for index ProductAttribute_pkey (OID = 21347) :
--
ALTER TABLE ONLY "ProductAttribute"
    ADD CONSTRAINT "ProductAttribute_pkey"
    PRIMARY KEY ("ProductAttributeID");
--
-- Definition for index ProductDetailTemplate_pkey (OID = 21349) :
--
ALTER TABLE ONLY "ProductDetailTemplate"
    ADD CONSTRAINT "ProductDetailTemplate_pkey"
    PRIMARY KEY ("ProductDetailTemplateID");
--
-- Definition for index ProductDetail_pkey (OID = 21351) :
--
ALTER TABLE ONLY "ProductDetail"
    ADD CONSTRAINT "ProductDetail_pkey"
    PRIMARY KEY ("ProductDetailID");
--
-- Definition for index ProductFamilyProductPackageTemplate_pkey (OID = 21353) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "ProductFamilyProductPackageTemplate_pkey"
    PRIMARY KEY ("ProductFamilyProductPackageTemplateID");
--
-- Definition for index ProductFamilyProductPackage_pkey (OID = 21355) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "ProductFamilyProductPackage_pkey"
    PRIMARY KEY ("ProductFamilyProductPackageID");
--
-- Definition for index ProductFamilyTemplate_pkey (OID = 21357) :
--
ALTER TABLE ONLY "ProductFamilyTemplate"
    ADD CONSTRAINT "ProductFamilyTemplate_pkey"
    PRIMARY KEY ("ProductFamilyTemplateID");
--
-- Definition for index ProductFamily_pkey (OID = 21359) :
--
ALTER TABLE ONLY "ProductFamily"
    ADD CONSTRAINT "ProductFamily_pkey"
    PRIMARY KEY ("ProductFamilyID");
--
-- Definition for index ProductProductAttributeTemplate_pkey (OID = 21361) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "ProductProductAttributeTemplate_pkey"
    PRIMARY KEY ("ProductProductAttributeTemplateID");
--
-- Definition for index ProductProductAttribute_pkey (OID = 21363) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "ProductProductAttribute_pkey"
    PRIMARY KEY ("ProductProductAttributeID");
--
-- Definition for index ProductRelationshipBlueprintTemplate_pkey (OID = 21365) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "ProductRelationshipBlueprintTemplate_pkey"
    PRIMARY KEY ("ProductRelationshipBlueprintTemplateID");
--
-- Definition for index ProductRelationshipBlueprint_pkey (OID = 21367) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprint"
    ADD CONSTRAINT "ProductRelationshipBlueprint_pkey"
    PRIMARY KEY ("ProductRelationshipBlueprintID");
--
-- Definition for index ProductRelationshipTemplate_pkey (OID = 21369) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "ProductRelationshipTemplate_pkey"
    PRIMARY KEY ("ProductRelationshipTemplateID");
--
-- Definition for index ProductRelationship_pkey (OID = 21371) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "ProductRelationship_pkey"
    PRIMARY KEY ("ProductRelationshipID");
--
-- Definition for index ProductSpecificationAttributeOptionTemplate_pkey (OID = 21373) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "ProductSpecificationAttributeOptionTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index ProductSpecificationAttributeOption_pkey (OID = 21375) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "ProductSpecificationAttributeOption_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeOptionID");
--
-- Definition for index ProductSpecificationAttributeTemplate_pkey (OID = 21377) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "ProductSpecificationAttributeTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeTemplateID");
--
-- Definition for index ProductSpecificationAttribute_pkey (OID = 21379) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT "ProductSpecificationAttribute_pkey"
    PRIMARY KEY ("ProductSpecificationAttributeID");
--
-- Definition for index ProductSpecificationBlueprintTemplate_pkey (OID = 21381) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "ProductSpecificationBlueprintTemplate_pkey"
    PRIMARY KEY ("ProductSpecificationBlueprintTemplateID");
--
-- Definition for index ProductSpecificationBlueprint_pkey (OID = 21383) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "ProductSpecificationBlueprint_pkey"
    PRIMARY KEY ("ProductSpecificationBlueprintID");
--
-- Definition for index ProductTagTemplate_pkey (OID = 21385) :
--
ALTER TABLE ONLY "ProductTagTemplate"
    ADD CONSTRAINT "ProductTagTemplate_pkey"
    PRIMARY KEY ("ProductTagTemplateID");
--
-- Definition for index ProductTag_pkey (OID = 21387) :
--
ALTER TABLE ONLY "ProductTag"
    ADD CONSTRAINT "ProductTag_pkey"
    PRIMARY KEY ("ProductTagID");
--
-- Definition for index ProductVariantAttributeCombinationTemplate_pkey (OID = 21389) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombinationTemplate"
    ADD CONSTRAINT "ProductVariantAttributeCombinationTemplate_pkey"
    PRIMARY KEY ("ProductVariantAttributeCombinationTemplateID");
--
-- Definition for index ProductVariantAttributeCombination_pkey (OID = 21391) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombination"
    ADD CONSTRAINT "ProductVariantAttributeCombination_pkey"
    PRIMARY KEY ("ProductVariantAttributeCombinationID");
--
-- Definition for index ProductVariantAttributeValueTemplate_pkey (OID = 21393) :
--
ALTER TABLE ONLY "ProductVariantAttributeValueTemplate"
    ADD CONSTRAINT "ProductVariantAttributeValueTemplate_pkey"
    PRIMARY KEY ("ProductVariantAttributeValueTemplateID");
--
-- Definition for index ProductVariantAttributeValue_pkey (OID = 21395) :
--
ALTER TABLE ONLY "ProductVariantAttributeValue"
    ADD CONSTRAINT "ProductVariantAttributeValue_pkey"
    PRIMARY KEY ("ProductVariantAttributeValueID");
--
-- Definition for index RelationshipRoleTemplate_pkey (OID = 21397) :
--
ALTER TABLE ONLY "RelationshipRole"
    ADD CONSTRAINT "RelationshipRoleTemplate_pkey"
    PRIMARY KEY ("RelationshipRoleID");
--
-- Definition for index RepositoryStructureGroup_pkey (OID = 21399) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "RepositoryStructureGroup_pkey"
    PRIMARY KEY ("RepositoryStructureGroupID");
--
-- Definition for index RepositoryStructureRole_pkey (OID = 21401) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "RepositoryStructureRole_pkey"
    PRIMARY KEY ("RepositoryStructureRoleID");
--
-- Definition for index RepositoryStructure_pkey (OID = 21403) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "RepositoryStructure_pkey"
    PRIMARY KEY ("RepositoryStructureID");
--
-- Definition for index Repository_pkey (OID = 21405) :
--
ALTER TABLE ONLY "Repository"
    ADD CONSTRAINT "Repository_pkey"
    PRIMARY KEY ("RepositoryID");
--
-- Definition for index Resource_pkey (OID = 21407) :
--
ALTER TABLE ONLY "Resource"
    ADD CONSTRAINT "Resource_pkey"
    PRIMARY KEY ("ResourceID");
--
-- Definition for index RoleTemplateClaim_pkey (OID = 21409) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "RoleTemplateClaim_pkey"
    PRIMARY KEY ("RoleClaimID");
--
-- Definition for index ServiceProvider_pkey (OID = 21411) :
--
ALTER TABLE ONLY "ServiceProvider"
    ADD CONSTRAINT "ServiceProvider_pkey"
    PRIMARY KEY ("ServiceProviderID");
--
-- Definition for index Setting_pkey (OID = 21413) :
--
ALTER TABLE ONLY "Setting"
    ADD CONSTRAINT "Setting_pkey"
    PRIMARY KEY ("Id");
--
-- Definition for index SpecificationAttributeOptionTemplate_pkey (OID = 21415) :
--
ALTER TABLE ONLY "SpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "SpecificationAttributeOptionTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeOptionTemplateID");
--
-- Definition for index SpecificationAttributeRelationshipTemplate_pkey (OID = 21417) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "SpecificationAttributeRelationshipTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeRelationshipTemplateID", "SpecificationAttributeTemplateID", "ParentSpecificationAttributeTemplateID");
--
-- Definition for index SpecificationAttributeRelationship_pkey (OID = 21419) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "SpecificationAttributeRelationship_pkey"
    PRIMARY KEY ("SpecificationAttributeRelationshipID");
--
-- Definition for index SpecificationAttributeTemplate_pkey (OID = 21421) :
--
ALTER TABLE ONLY "SpecificationAttributeTemplate"
    ADD CONSTRAINT "SpecificationAttributeTemplate_pkey"
    PRIMARY KEY ("SpecificationAttributeTemplateID");
--
-- Definition for index SpecificationAttribute_pkey (OID = 21423) :
--
ALTER TABLE ONLY "SpecificationAttribute"
    ADD CONSTRAINT "SpecificationAttribute_pkey"
    PRIMARY KEY ("SpecificationAttributeID");
--
-- Definition for index SpecificiationAttributeOption_pkey (OID = 21425) :
--
ALTER TABLE ONLY "SpecificiationAttributeOption"
    ADD CONSTRAINT "SpecificiationAttributeOption_pkey"
    PRIMARY KEY ("SpecficiationAttributeOptionID");
--
-- Definition for index StateItem_pkey (OID = 21427) :
--
ALTER TABLE ONLY "StateItem"
    ADD CONSTRAINT "StateItem_pkey"
    PRIMARY KEY ("StateItemID");
--
-- Definition for index State_pkey (OID = 21429) :
--
ALTER TABLE ONLY "State"
    ADD CONSTRAINT "State_pkey"
    PRIMARY KEY ("StateID");
--
-- Definition for index StatusTypeStructure_pkey (OID = 21431) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "StatusTypeStructure_pkey"
    PRIMARY KEY ("StatusTypeStructureID");
--
-- Definition for index StatusTypeValue_pkey (OID = 21433) :
--
ALTER TABLE ONLY "StatusTypeValue"
    ADD CONSTRAINT "StatusTypeValue_pkey"
    PRIMARY KEY ("StatusTypeValueID");
--
-- Definition for index Structure_pkey (OID = 21435) :
--
ALTER TABLE ONLY "Structure"
    ADD CONSTRAINT "Structure_pkey"
    PRIMARY KEY ("StructureID");
--
-- Definition for index TFEventMessageSubscriber_pkey (OID = 21437) :
--
ALTER TABLE ONLY "TFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventMessageSubscriber_pkey"
    PRIMARY KEY ("TFEventMessageSubscriberID");
--
-- Definition for index TFEventTFEventMessageSubscriber_pkey (OID = 21439) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_pkey"
    PRIMARY KEY ("TFEventID", "TFEventMessageSubscriberID");
--
-- Definition for index TFEventType_pkey (OID = 21441) :
--
ALTER TABLE ONLY "TFEvent"
    ADD CONSTRAINT "TFEventType_pkey"
    PRIMARY KEY ("TFEventID");
--
-- Definition for index TFEventType_pkey1 (OID = 21443) :
--
ALTER TABLE ONLY "TFEventType"
    ADD CONSTRAINT "TFEventType_pkey1"
    PRIMARY KEY ("TFEventTypeID");
--
-- Definition for index TaxRateTemplate_pkey (OID = 21445) :
--
ALTER TABLE ONLY "TaxRateTemplate"
    ADD CONSTRAINT "TaxRateTemplate_pkey"
    PRIMARY KEY ("TaxRateTemplateID");
--
-- Definition for index TaxRate_pkey (OID = 21447) :
--
ALTER TABLE ONLY "TaxRate"
    ADD CONSTRAINT "TaxRate_pkey"
    PRIMARY KEY ("OrganisationTaxRateID");
--
-- Definition for index Tenant_pkey (OID = 21449) :
--
ALTER TABLE ONLY "Tenant"
    ADD CONSTRAINT "Tenant_pkey"
    PRIMARY KEY ("TenantID");
--
-- Definition for index TransactionLevelComponentTemplate_pkey (OID = 21451) :
--
ALTER TABLE ONLY "TransactionLevelComponentTemplate"
    ADD CONSTRAINT "TransactionLevelComponentTemplate_pkey"
    PRIMARY KEY ("TransactionLevelComponentTemplateID");
--
-- Definition for index TransactionLevelComponent_pkey (OID = 21453) :
--
ALTER TABLE ONLY "TransactionLevelComponent"
    ADD CONSTRAINT "TransactionLevelComponent_pkey"
    PRIMARY KEY ("TransactionLevelComponentID");
--
-- Definition for index TransactionOrderItem_pkey (OID = 21455) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "TransactionOrderItem_pkey"
    PRIMARY KEY ("OrderItemID");
--
-- Definition for index TransactionOrder_pkey (OID = 21457) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "TransactionOrder_pkey"
    PRIMARY KEY ("TransactionOrderID");
--
-- Definition for index TwoFactorAuthTokens_pkey (OID = 21459) :
--
ALTER TABLE ONLY "TwoFactorAuthTokens"
    ADD CONSTRAINT "TwoFactorAuthTokens_pkey"
    PRIMARY KEY ("Token");
--
-- Definition for index UserAccountArchive_UserAccountArchiveID_key (OID = 21461) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "UserAccountArchive_UserAccountArchiveID_key"
    UNIQUE ("UserAccountArchiveID");
--
-- Definition for index UserAccountArchive_pkey (OID = 21463) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "UserAccountArchive_pkey"
    PRIMARY KEY ("UserAccountArchiveID", "UserAccountArchiveCreatedOn", "UserAccountArchiveTypeID", "UserAccountArchiveCategoryID");
--
-- Definition for index UserAccountAudit_pkey (OID = 21465) :
--
ALTER TABLE ONLY "UserAccountAudit"
    ADD CONSTRAINT "UserAccountAudit_pkey"
    PRIMARY KEY ("UserAccountID", "UserSessionID", "AuditID");
--
-- Definition for index UserAccountDetail_pkey (OID = 21467) :
--
ALTER TABLE ONLY "UserAccountDetail"
    ADD CONSTRAINT "UserAccountDetail_pkey"
    PRIMARY KEY ("UserDetailID");
--
-- Definition for index UserAccountLoginSession_pkey (OID = 21469) :
--
ALTER TABLE ONLY "UserAccountLoginSession"
    ADD CONSTRAINT "UserAccountLoginSession_pkey"
    PRIMARY KEY ("UserAccountID", "UserSessionID");
--
-- Definition for index UserAccountOrganisationStructure_pkey (OID = 21471) :
--
ALTER TABLE ONLY "UserAccountOrganisationStructure"
    ADD CONSTRAINT "UserAccountOrganisationStructure_pkey"
    PRIMARY KEY ("OrganisationID", "UserID");
--
-- Definition for index UserAccountOrganisationUnit_pkey (OID = 21473) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "UserAccountOrganisationUnit_pkey"
    PRIMARY KEY ("UserAccountOrganisationID");
--
-- Definition for index UserAccounts_pkey (OID = 21475) :
--
ALTER TABLE ONLY "UserAccounts"
    ADD CONSTRAINT "UserAccounts_pkey"
    PRIMARY KEY ("ID");
--
-- Definition for index UserCertificates_pkey (OID = 21477) :
--
ALTER TABLE ONLY "UserCertificates"
    ADD CONSTRAINT "UserCertificates_pkey"
    PRIMARY KEY ("Thumbprint");
--
-- Definition for index UserClaims_pkey (OID = 21479) :
--
ALTER TABLE ONLY "UserClaims"
    ADD CONSTRAINT "UserClaims_pkey"
    PRIMARY KEY ("Type", "Value");
--
-- Definition for index UserShoppingCartItem_pkey (OID = 21481) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "UserShoppingCartItem_pkey"
    PRIMARY KEY ("ShoppingCartItemID");
--
-- Definition for index WorflowParameterTemplate_pkey (OID = 21483) :
--
ALTER TABLE ONLY "WorflowParameterTemplate"
    ADD CONSTRAINT "WorflowParameterTemplate_pkey"
    PRIMARY KEY ("WorflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index Workflow TemplateTreeStructur_WorkflowTemplateTreeStructure_key (OID = 21485) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "Workflow TemplateTreeStructur_WorkflowTemplateTreeStructure_key"
    UNIQUE ("WorkflowTreeStructureTemplateID");
--
-- Definition for index Workflow TemplateTreeStructure_pkey (OID = 21487) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "Workflow TemplateTreeStructure_pkey"
    PRIMARY KEY ("WorkflowTreeStructureTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionCompleteConditionTemplate_pkey (OID = 21489) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowActionCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionCompleteCondition_pkey (OID = 21491) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "WorkflowActionCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowActionExecuteCommandTemplate_pkey (OID = 21493) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowActionExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionExecuteCommand_pkey (OID = 21495) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "WorkflowActionExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionExecutionTemplate_pkey (OID = 21497) :
--
ALTER TABLE ONLY "WorkflowActionExecutionTemplate"
    ADD CONSTRAINT "WorkflowActionExecutionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionExecutionID", "WorkflowTemplateVersionNumber", "WorkflowTemplateID");
--
-- Definition for index WorkflowActionNotificationTemplate_pkey (OID = 21499) :
--
ALTER TABLE ONLY "WorkflowActionNotificationTemplate"
    ADD CONSTRAINT "WorkflowActionNotificationTemplate_pkey"
    PRIMARY KEY ("WorkflowActionNotificationTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameterTemplate_pkey (OID = 21501) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "WorkflowActionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameter_pkey (OID = 21503) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "WorkflowActionParameter_pkey"
    PRIMARY KEY ("WorkflowParameterID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionPostCommandTemplate_pkey (OID = 21505) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "WorkflowActionPostCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionPostCommand_pkey (OID = 21507) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "WorkflowActionPostCommand_pkey"
    PRIMARY KEY ("WorkflowVersionNumber", "WorkflowID", "WorkflowCommandID", "WorkflowActionID");
--
-- Definition for index WorkflowActionPreCommandTemplate_pkey (OID = 21509) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "WorkflowActionPreCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionPreCommand_pkey (OID = 21511) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "WorkflowActionPreCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionProductPlaceholder_pkey (OID = 21513) :
--
ALTER TABLE ONLY "WorkflowActionProductPlaceholder"
    ADD CONSTRAINT "WorkflowActionProductPlaceholder_pkey"
    PRIMARY KEY ("WorkflowActionProductPlaceholderID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionStartConditionTemplate_pkey (OID = 21515) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "WorkflowActionStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionStartCondition_pkey (OID = 21517) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "WorkflowActionStartCondition_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowActionTemplate_pkey (OID = 21519) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "WorkflowActionTemplate_pkey"
    PRIMARY KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionValidationTemplate_pkey (OID = 21521) :
--
ALTER TABLE ONLY "WorkflowActionValidationTemplate"
    ADD CONSTRAINT "WorkflowActionValidationTemplate_pkey"
    PRIMARY KEY ("WorkflowActionValidationTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowAction_pkey (OID = 21523) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "WorkflowAction_pkey"
    PRIMARY KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandConditionTemplate_pkey (OID = 21525) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "WorkflowCommandConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommandCondition_pkey (OID = 21527) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "WorkflowCommandCondition_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandParameterTemplate_pkey (OID = 21529) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "WorkflowCommandParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommandParameter_pkey (OID = 21531) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "WorkflowCommandParameter_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowCommandTemplate_pkey (OID = 21533) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "WorkflowCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCommand_pkey (OID = 21535) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "WorkflowCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowConditionParameterTemplate_pkey (OID = 21537) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "WorkflowConditionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowConditionParameter_pkey (OID = 21539) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "WorkflowConditionParameter_pkey"
    PRIMARY KEY ("WorkflowConditionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowConditionTemplate_pkey (OID = 21541) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "WorkflowConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowCondition_pkey (OID = 21543) :
--
ALTER TABLE ONLY "WorkflowCondition"
    ADD CONSTRAINT "WorkflowCondition_pkey"
    PRIMARY KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionErrorTemplate_WorkflowDecisionErrorTemplate_key (OID = 21545) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "WorkflowDecisionErrorTemplate_WorkflowDecisionErrorTemplate_key"
    UNIQUE ("WorkflowDecisionErrorTemplateID");
--
-- Definition for index WorkflowDecisionError_WorkflowDecisionErrorID_key (OID = 21547) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "WorkflowDecisionError_WorkflowDecisionErrorID_key"
    UNIQUE ("WorkflowDecisionErrorID");
--
-- Definition for index WorkflowDecisionExecuteCommandTemplate_pkey (OID = 21549) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowDecisionExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecisionExecuteCommand_pkey (OID = 21551) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommand"
    ADD CONSTRAINT "WorkflowDecisionExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionFailure_WorkflowDecisionFailureID_key (OID = 21553) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "WorkflowDecisionFailure_WorkflowDecisionFailureID_key"
    UNIQUE ("WorkflowDecisionFailureID");
--
-- Definition for index WorkflowDecisionParameterTemplate_pkey (OID = 21555) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "WorkflowDecisionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecisionParameter_pkey (OID = 21557) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "WorkflowDecisionParameter_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowDecisionSuccessTempla_WorkflowDecisionSuccessTempla_key (OID = 21559) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "WorkflowDecisionSuccessTempla_WorkflowDecisionSuccessTempla_key"
    UNIQUE ("WorkflowDecisionSuccessTemplateID");
--
-- Definition for index WorkflowDecisionSuccess_WorkflowDecisionSuccessID_key (OID = 21561) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "WorkflowDecisionSuccess_WorkflowDecisionSuccessID_key"
    UNIQUE ("WorkflowDecisionSuccessID");
--
-- Definition for index WorkflowDecisionTemplate_pkey (OID = 21563) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "WorkflowDecisionTemplate_pkey"
    PRIMARY KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowDecision_pkey (OID = 21565) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "WorkflowDecision_pkey"
    PRIMARY KEY ("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowExecutionStatus_pkey (OID = 21567) :
--
ALTER TABLE ONLY "WorkflowExecutionStatus"
    ADD CONSTRAINT "WorkflowExecutionStatus_pkey"
    PRIMARY KEY ("WorkflowExecutionStatusID");
--
-- Definition for index WorkflowExecutionTemplate_pkey (OID = 21569) :
--
ALTER TABLE ONLY "WorkflowExecutionTemplate"
    ADD CONSTRAINT "WorkflowExecutionTemplate_pkey"
    PRIMARY KEY ("WorkflowExecutionTemplateID");
--
-- Definition for index WorkflowExecution_pkey (OID = 21571) :
--
ALTER TABLE ONLY "WorkflowExecution"
    ADD CONSTRAINT "WorkflowExecution_pkey"
    PRIMARY KEY ("WorkflowExecutionID", "VersionNumber");
--
-- Definition for index WorkflowHierarchyTemplate_pkey (OID = 21573) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "WorkflowHierarchyTemplate_pkey"
    PRIMARY KEY ("WorkflowHierarchyTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowHierarchy_pkey (OID = 21575) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "WorkflowHierarchy_pkey"
    PRIMARY KEY ("WorkflowHierarchyID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowInstanceExecutionDataItem_pkey (OID = 21577) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionDataItem"
    ADD CONSTRAINT "WorkflowInstanceExecutionDataItem_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionDataItemID");
--
-- Definition for index WorkflowInstanceExecutionStatusEvent_pkey (OID = 21579) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "WorkflowInstanceExecutionStatusEvent_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index WorkflowInstanceExecution_pkey (OID = 21581) :
--
ALTER TABLE ONLY "WorkflowInstanceExecution"
    ADD CONSTRAINT "WorkflowInstanceExecution_pkey"
    PRIMARY KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index WorkflowInstanceSession_pkey (OID = 21583) :
--
ALTER TABLE ONLY "WorkflowInstanceSession"
    ADD CONSTRAINT "WorkflowInstanceSession_pkey"
    PRIMARY KEY ("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index WorkflowInstance_pkey (OID = 21585) :
--
ALTER TABLE ONLY "WorkflowInstance"
    ADD CONSTRAINT "WorkflowInstance_pkey"
    PRIMARY KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowMainCompleteConditionTemplate_pkey (OID = 21587) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowMainCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainCompleteCondition_pkey (OID = 21589) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "WorkflowMainCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowConditionID");
--
-- Definition for index WorkflowMainExecuteCommandTemplate_pkey (OID = 21591) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "WorkflowMainExecuteCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainExecuteCommand_pkey (OID = 21593) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "WorkflowMainExecuteCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainParameterTemplate_pkey (OID = 21595) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "WorkflowMainParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainParameter_pkey (OID = 21597) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "WorkflowMainParameter_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowParameterID");
--
-- Definition for index WorkflowMainPostCommandTemplate_pkey (OID = 21599) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "WorkflowMainPostCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainPostCommand_pkey (OID = 21601) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "WorkflowMainPostCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainPreCommandTemplate_pkey (OID = 21603) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "WorkflowMainPreCommandTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowCommandTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainPreCommand_pkey (OID = 21605) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "WorkflowMainPreCommand_pkey"
    PRIMARY KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowMainStartConditionTemplate_pkey (OID = 21607) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "WorkflowMainStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowConditionTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowMainStartCondition_pkey (OID = 21609) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "WorkflowMainStartCondition_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "WorkflowConditionID");
--
-- Definition for index WorkflowObjectTypeTemplate_pkey (OID = 21611) :
--
ALTER TABLE ONLY "WorkflowObjectTypeTemplate"
    ADD CONSTRAINT "WorkflowObjectTypeTemplate_pkey"
    PRIMARY KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowObjectType_pkey (OID = 21613) :
--
ALTER TABLE ONLY "WorkflowObjectType"
    ADD CONSTRAINT "WorkflowObjectType_pkey"
    PRIMARY KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowParameterTemplate_pkey (OID = 21615) :
--
ALTER TABLE ONLY "WorkflowParameterTemplate"
    ADD CONSTRAINT "WorkflowParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowParameter_pkey (OID = 21617) :
--
ALTER TABLE ONLY "WorkflowParameter"
    ADD CONSTRAINT "WorkflowParameter_pkey"
    PRIMARY KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTemplate_pkey (OID = 21619) :
--
ALTER TABLE ONLY "WorkflowTemplate"
    ADD CONSTRAINT "WorkflowTemplate_pkey"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionCompleteConditionTemplate_pkey (OID = 21621) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "WorkflowTransistionCompleteConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionCompleteCondition_pkey (OID = 21623) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "WorkflowTransistionCompleteCondition_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionHierarchyTemplate_pkey (OID = 21625) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "WorkflowTransistionHierarchyTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionHierarchyTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionHierarchy_pkey (OID = 21627) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "WorkflowTransistionHierarchy_pkey"
    PRIMARY KEY ("WorkflowTransistionHierarchyID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionParameterTemplate_pkey (OID = 21629) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "WorkflowTransistionParameterTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionParameter_pkey (OID = 21631) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "WorkflowTransistionParameter_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowParameterID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionStartConditionTemplate_pkey (OID = 21633) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "WorkflowTransistionStartConditionTemplate_pkey"
    PRIMARY KEY ("WorkflowConditionTemplateID", "WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionStartCondition_pkey (OID = 21635) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "WorkflowTransistionStartCondition_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowConditionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTransistionTemplate_pkey (OID = 21637) :
--
ALTER TABLE ONLY "WorkflowTransistionTemplate"
    ADD CONSTRAINT "WorkflowTransistionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowActionTemplate_pkey (OID = 21639) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "WorkflowTransistionWorkflowActionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowAction_pkey (OID = 21641) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "WorkflowTransistionWorkflowAction_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistionWorkflowDecisionTemplate_pkey (OID = 21643) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "WorkflowTransistionWorkflowDecisionTemplate_pkey"
    PRIMARY KEY ("WorkflowTransistionTemplateID", "WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowTransistionWorkflowDecision_pkey (OID = 21645) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "WorkflowTransistionWorkflowDecision_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index WorkflowTransistion_pkey (OID = 21647) :
--
ALTER TABLE ONLY "WorkflowTransistion"
    ADD CONSTRAINT "WorkflowTransistion_pkey"
    PRIMARY KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index WorkflowTreeStructureActionTemplate_pkey (OID = 21649) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_pkey"
    PRIMARY KEY ("WorkflowTreeStructureActionTemplateID");
--
-- Definition for index WorkflowTreeStructureAction_pkey (OID = 21651) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_pkey"
    PRIMARY KEY ("WorkflowTreeStructureActionID");
--
-- Definition for index WorkflowTreeStructure_pkey (OID = 21653) :
--
ALTER TABLE ONLY "WorkflowTreeStructure"
    ADD CONSTRAINT "WorkflowTreeStructure_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowTreeStructureID", "WorkflowVersionNumber");
--
-- Definition for index Workflow_pkey (OID = 21655) :
--
ALTER TABLE ONLY "Workflow"
    ADD CONSTRAINT "Workflow_pkey"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index containsagadata_pkey (OID = 21657) :
--
ALTER TABLE ONLY containsagadata
    ADD CONSTRAINT containsagadata_pkey
    PRIMARY KEY (id);
--
-- Definition for index countrycode_pkey (OID = 21659) :
--
ALTER TABLE ONLY "CountryCode"
    ADD CONSTRAINT countrycode_pkey
    PRIMARY KEY ("CountryCode");
--
-- Definition for index pkActor (OID = 21661) :
--
ALTER TABLE ONLY "Actor"
    ADD CONSTRAINT "pkActor"
    PRIMARY KEY ("ActorID");
--
-- Definition for index pkActorClaimRoleMapping (OID = 21663) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "pkActorClaimRoleMapping"
    PRIMARY KEY ("ActorClaimRoleMappingID");
--
-- Definition for index pkArtefact (OID = 21665) :
--
ALTER TABLE ONLY "Artefact"
    ADD CONSTRAINT "pkArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index pkArtefactClaim (OID = 21667) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "pkArtefactClaim"
    PRIMARY KEY ("ArtefactClaimID");
--
-- Definition for index pkArtefactClaimTemplate (OID = 21669) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "pkArtefactClaimTemplate"
    PRIMARY KEY ("ArtefactClaimTemplateID");
--
-- Definition for index pkArtefactDependency (OID = 21671) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "pkArtefactDependency"
    PRIMARY KEY ("ArtefactDependencyID");
--
-- Definition for index pkArtefactDependencyStatusType (OID = 21673) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "pkArtefactDependencyStatusType"
    PRIMARY KEY ("ArtefactDependencyStatusTypeID");
--
-- Definition for index pkArtefactDependencyStatusTypeTemplate (OID = 21675) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "pkArtefactDependencyStatusTypeTemplate"
    PRIMARY KEY ("ArtefactDependencyStatusTypeTemplate");
--
-- Definition for index pkArtefactDependencyTemplate (OID = 21677) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "pkArtefactDependencyTemplate"
    PRIMARY KEY ("ArtefactDependencyTemplateID");
--
-- Definition for index pkArtefactNotificationConstruct (OID = 21679) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "pkArtefactNotificationConstruct"
    PRIMARY KEY ("ArtefactNotificationConstructID");
--
-- Definition for index pkArtefactNotificationConstructTemplate (OID = 21681) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "pkArtefactNotificationConstructTemplate"
    PRIMARY KEY ("ArtefactNotificationConstructTemplateID");
--
-- Definition for index pkArtefactProduct (OID = 21683) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "pkArtefactProduct"
    PRIMARY KEY ("ProductID", "ProductVersionID", "ArtefactVersionNumber", "ArtefactID");
--
-- Definition for index pkArtefactProductTemplate (OID = 21685) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "pkArtefactProductTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkArtefactRole (OID = 21687) :
--
ALTER TABLE ONLY "ArtefactRole"
    ADD CONSTRAINT "pkArtefactRole"
    PRIMARY KEY ("ArtefactRoleID");
--
-- Definition for index pkArtefactRoleTemplate (OID = 21689) :
--
ALTER TABLE ONLY "ArtefactRoleTemplate"
    ADD CONSTRAINT "pkArtefactRoleTemplate"
    PRIMARY KEY ("ArtefactRoleTemplateID");
--
-- Definition for index pkArtefactStatusType (OID = 21691) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "pkArtefactStatusType"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkArtefactStatusTypeTemplate (OID = 21693) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "pkArtefactStatusTypeTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkArtefactSubscription (OID = 21695) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "pkArtefactSubscription"
    PRIMARY KEY ("ArtefactSubscriptionID");
--
-- Definition for index pkArtefactSubscriptionTemplate (OID = 21697) :
--
ALTER TABLE ONLY "ArtefactSubscriptionTemplate"
    ADD CONSTRAINT "pkArtefactSubscriptionTemplate"
    PRIMARY KEY ("ArtefactSubscriptionTemplateID");
--
-- Definition for index pkArtefactTemplate (OID = 21699) :
--
ALTER TABLE ONLY "ArtefactTemplate"
    ADD CONSTRAINT "pkArtefactTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index pkArtefactWorkflow (OID = 21701) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "pkArtefactWorkflow"
    PRIMARY KEY ("ArtefactWorkflowID");
--
-- Definition for index pkArtefactWorkflowTemplate (OID = 21703) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "pkArtefactWorkflowTemplate"
    PRIMARY KEY ("ArtefactWorkflowTemplateID");
--
-- Definition for index pkBilling (OID = 21705) :
--
ALTER TABLE ONLY "Billing"
    ADD CONSTRAINT "pkBilling"
    PRIMARY KEY ("BillingID");
--
-- Definition for index pkBillingTemplate (OID = 21707) :
--
ALTER TABLE ONLY "BillingTemplate"
    ADD CONSTRAINT "pkBillingTemplate"
    PRIMARY KEY ("BillingTemplateID");
--
-- Definition for index pkBucket (OID = 21709) :
--
ALTER TABLE ONLY "Bucket"
    ADD CONSTRAINT "pkBucket"
    PRIMARY KEY ("BucketID");
--
-- Definition for index pkBucketTemplate (OID = 21711) :
--
ALTER TABLE ONLY "BucketTemplate"
    ADD CONSTRAINT "pkBucketTemplate"
    PRIMARY KEY ("BucketTemplateID");
--
-- Definition for index pkBusMessageProcessLog (OID = 21713) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "pkBusMessageProcessLog"
    PRIMARY KEY ("BusMessageProcessLogID");
--
-- Definition for index pkBusTask (OID = 21715) :
--
ALTER TABLE ONLY "BusTask"
    ADD CONSTRAINT "pkBusTask"
    PRIMARY KEY ("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index pkBusTaskHandler (OID = 21717) :
--
ALTER TABLE ONLY "BusTaskHandler"
    ADD CONSTRAINT "pkBusTaskHandler"
    PRIMARY KEY ("BusTaskHandlerID");
--
-- Definition for index pkBusTaskSchedule (OID = 21719) :
--
ALTER TABLE ONLY "BusTaskSchedule"
    ADD CONSTRAINT "pkBusTaskSchedule"
    PRIMARY KEY ("BusTaskScheduleID");
--
-- Definition for index pkBusTaskScheduleProcessLog (OID = 21721) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "pkBusTaskScheduleProcessLog"
    PRIMARY KEY ("BusTaskScheduleProcessLogID");
--
-- Definition for index pkComponentTier (OID = 21723) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "pkComponentTier"
    PRIMARY KEY ("ComponentTierID");
--
-- Definition for index pkComponentTierTemplate (OID = 21725) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "pkComponentTierTemplate"
    PRIMARY KEY ("ComponentTierTemplateID");
--
-- Definition for index pkContactName (OID = 21727) :
--
ALTER TABLE ONLY "ContactName"
    ADD CONSTRAINT "pkContactName"
    PRIMARY KEY ("ContactNameID");
--
-- Definition for index pkContactPhone (OID = 21729) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "pkContactPhone"
    PRIMARY KEY ("ContactPhoneId");
--
-- Definition for index pkCountryDeduction (OID = 21733) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "pkCountryDeduction"
    PRIMARY KEY ("CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkCountryDeductionTemplate (OID = 21735) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "pkCountryDeductionTemplate"
    PRIMARY KEY ("CountryDeductionTemplateID", "DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index pkCurrencyCode (OID = 21737) :
--
ALTER TABLE ONLY "CurrencyCode"
    ADD CONSTRAINT "pkCurrencyCode"
    PRIMARY KEY ("CurrencyCode");
--
-- Definition for index pkDeduction (OID = 21739) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "pkDeduction"
    PRIMARY KEY ("DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkDeductionComponentTier (OID = 21741) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "pkDeductionComponentTier"
    PRIMARY KEY ("DeductionID", "DeductionVersionNumber", "ComponentTierID");
--
-- Definition for index pkDeductionComponentTierTemplate (OID = 21743) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "pkDeductionComponentTierTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber", "ComponentTierTemplateID");
--
-- Definition for index pkDeductionProduct (OID = 21745) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "pkDeductionProduct"
    PRIMARY KEY ("DeductionID", "ProductID", "ProductVersionID", "DeductionVersionNumber");
--
-- Definition for index pkDeductionProductTemplate (OID = 21747) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "pkDeductionProductTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkDeductionTemplate (OID = 21749) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "pkDeductionTemplate"
    PRIMARY KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisation (OID = 21751) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "pkDefaultOrganisation"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationArtefact (OID = 21753) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "pkDefaultOrganisationArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationArtefactT (OID = 21755) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationArtefactT"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationBucket (OID = 21757) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "pkDefaultOrganisationBucket"
    PRIMARY KEY ("BucketTemplateID", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationBucketT (OID = 21759) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationBucketT"
    PRIMARY KEY ("BucketTemplateID", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationGroupTarget (OID = 21761) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "pkDefaultOrganisationGroupTarget"
    PRIMARY KEY ("DefaultOrganisationUserTargetID", "DefaultOrganisationGroupID");
--
-- Definition for index pkDefaultOrganisationGroupTargetTemplate (OID = 21763) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationGroupTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationGroupTemplateID", "DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationLedger (OID = 21765) :
--
ALTER TABLE ONLY "DefaultOrganisationLedger"
    ADD CONSTRAINT "pkDefaultOrganisationLedger"
    PRIMARY KEY ("DefaultOrganisationLedgerID");
--
-- Definition for index pkDefaultOrganisationLedgerTemplate (OID = 21767) :
--
ALTER TABLE ONLY "DefaultOrganisationLedgerTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationLedgerTemplate"
    PRIMARY KEY ("DefaultOrganisationLedgerTemplateID");
--
-- Definition for index pkDefaultOrganisationModule (OID = 21769) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "pkDefaultOrganisationModule"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationModuleT (OID = 21771) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationModuleT"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationNotificationConstruct (OID = 21773) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "pkDefaultOrganisationNotificationConstruct"
    PRIMARY KEY ("DefaultOrganisationNotificationConstructID");
--
-- Definition for index pkDefaultOrganisationPaymentMethod (OID = 21775) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "pkDefaultOrganisationPaymentMethod"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkDefaultOrganisationPaymentMethodTemplate (OID = 21777) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationPaymentMethodTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkDefaultOrganisationProduct (OID = 21779) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "pkDefaultOrganisationProduct"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkDefaultOrganisationProductTemplate (OID = 21781) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationProductTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkDefaultOrganisationRoleTarget (OID = 21783) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "pkDefaultOrganisationRoleTarget"
    PRIMARY KEY ("DefaultOrganisationRoleID", "DefaultOrganisationUserTargetID");
--
-- Definition for index pkDefaultOrganisationRoleTargetTemplate (OID = 21785) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationRoleTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationRoleTemplateID", "DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationShoppingCartBlueprint (OID = 21787) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "pkDefaultOrganisationShoppingCartBlueprint"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "ShoppingCartBlueprintID");
--
-- Definition for index pkDefaultOrganisationShoppingCartBlueprintTemplate (OID = 21789) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationShoppingCartBlueprintTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "ShoppingCartBlueprintTemplateID");
--
-- Definition for index pkDefaultOrganisationStatusType (OID = 21791) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "pkDefaultOrganisationStatusType"
    PRIMARY KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationStatusTypeTemplate (OID = 21793) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationStatusTypeTemplate"
    PRIMARY KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationTemplate (OID = 21795) :
--
ALTER TABLE ONLY "DefaultOrganisationTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrganisationUserTarget (OID = 21797) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "pkDefaultOrganisationUserTarget"
    PRIMARY KEY ("DefaultOrganisationUserTargetID");
--
-- Definition for index pkDefaultOrganisationUserTargetTemplate (OID = 21799) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationUserTargetTemplate"
    PRIMARY KEY ("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index pkDefaultOrganisationUserType (OID = 21801) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "pkDefaultOrganisationUserType"
    PRIMARY KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber", "UserTypeID");
--
-- Definition for index pkDefaultOrganisationUserTypeTemplate (OID = 21803) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationUserTypeTemplate"
    PRIMARY KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber", "UserTypeID");
--
-- Definition for index pkDefaultOrganisationWorkflow (OID = 21805) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "pkDefaultOrganisationWorkflow"
    PRIMARY KEY ("WorkflowVersionNumber", "WorkflowID", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index pkDefaultOrganisationWorkflowT (OID = 21807) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "pkDefaultOrganisationWorkflowT"
    PRIMARY KEY ("WorkflowTemplateVersionNumber", "WorkflowTemplateID", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index pkDefaultOrgantionNotificationConstructT (OID = 21809) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "pkDefaultOrgantionNotificationConstructT"
    PRIMARY KEY ("DefaultOrganisationNotificationConstructTemplateID");
--
-- Definition for index pkDirectDebitMandate (OID = 21811) :
--
ALTER TABLE ONLY "DirectDebitMandate"
    ADD CONSTRAINT "pkDirectDebitMandate"
    PRIMARY KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index pkDirectDebitMandateTemplate (OID = 21813) :
--
ALTER TABLE ONLY "DirectDebitMandateTemplate"
    ADD CONSTRAINT "pkDirectDebitMandateTemplate"
    PRIMARY KEY ("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber");
--
-- Definition for index pkDirectDebitSchedule (OID = 21815) :
--
ALTER TABLE ONLY "DirectDebitSchedule"
    ADD CONSTRAINT "pkDirectDebitSchedule"
    PRIMARY KEY ("DirectDebitScheduleID");
--
-- Definition for index pkDiscount (OID = 21817) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "pkDiscount"
    PRIMARY KEY ("DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkDiscountComponentTier (OID = 21819) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "pkDiscountComponentTier"
    PRIMARY KEY ("DiscountID", "DiscountVersionNumber", "ComponentTierID");
--
-- Definition for index pkDiscountComponentTierTemplate (OID = 21821) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "pkDiscountComponentTierTemplate"
    PRIMARY KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber", "ComponentTierTemplateID");
--
-- Definition for index pkDiscountRelatedProduct (OID = 21823) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "pkDiscountRelatedProduct"
    PRIMARY KEY ("DiscountRelatedProductID");
--
-- Definition for index pkDiscountRelatedProductTemplate (OID = 21825) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "pkDiscountRelatedProductTemplate"
    PRIMARY KEY ("DiscountRelatedProductTemplateID");
--
-- Definition for index pkDiscountTemplate (OID = 21827) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "pkDiscountTemplate"
    PRIMARY KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkFieldDetail (OID = 21829) :
--
ALTER TABLE ONLY "FieldDetail"
    ADD CONSTRAINT "pkFieldDetail"
    PRIMARY KEY ("FieldDetailID");
--
-- Definition for index pkFieldDetailTemplate (OID = 21831) :
--
ALTER TABLE ONLY "FieldDetailTemplate"
    ADD CONSTRAINT "pkFieldDetailTemplate"
    PRIMARY KEY ("FieldDetailTemplateID");
--
-- Definition for index pkGlobalAccountingPeriod (OID = 21833) :
--
ALTER TABLE ONLY "GlobalAccountingPeriod"
    ADD CONSTRAINT "pkGlobalAccountingPeriod"
    PRIMARY KEY ("GlobalAccountingPeriodID");
--
-- Definition for index pkGlobalDirectDebitCollectionPeriod (OID = 21835) :
--
ALTER TABLE ONLY "GlobalDirectDebitCollectionPeriod"
    ADD CONSTRAINT "pkGlobalDirectDebitCollectionPeriod"
    PRIMARY KEY ("GlobalDirectDebitCollectionPeriodID");
--
-- Definition for index pkGlobalPaymentMethod (OID = 21837) :
--
ALTER TABLE ONLY "GlobalPaymentMethod"
    ADD CONSTRAINT "pkGlobalPaymentMethod"
    PRIMARY KEY ("GlobalPaymentMethodID");
--
-- Definition for index pkGroup (OID = 21839) :
--
ALTER TABLE ONLY "Group"
    ADD CONSTRAINT "pkGroup"
    PRIMARY KEY ("GroupID");
--
-- Definition for index pkInterfacePanel (OID = 21841) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "pkInterfacePanel"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index pkInterfacePanelFieldDetail (OID = 21843) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "pkInterfacePanelFieldDetail"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID");
--
-- Definition for index pkInterfacePanelFieldDetailOrg123aisationType (OID = 21845) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrg123aisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrg123aisationTypeTemplate (OID = 21847) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrg123aisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrganaisationType (OID = 21849) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrganaisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "FieldDetailID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailOrganaisationTypeTemplate (OID = 21851) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailOrganaisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelFieldDetailTemplate (OID = 21853) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "pkInterfacePanelFieldDetailTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "FieldDetailTemplateID");
--
-- Definition for index pkInterfacePanelOrganUserTypeype (OID = 21855) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "pkInterfacePanelOrganUserTypeype"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganUserTypeypeTemplate (OID = 21857) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelOrganUserTypeypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganisationType (OID = 21859) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "pkInterfacePanelOrganisationType"
    PRIMARY KEY ("InterfacePanelID", "InterfacePanelVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelOrganisationTypeTemplate (OID = 21861) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "pkInterfacePanelOrganisationTypeTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber", "OrganisationTypeID");
--
-- Definition for index pkInterfacePanelSetting (OID = 21863) :
--
ALTER TABLE ONLY "InterfacePanelSetting"
    ADD CONSTRAINT "pkInterfacePanelSetting"
    PRIMARY KEY ("InterfacePanelSettingID", "InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index pkInterfacePanelSettingTemplate (OID = 21865) :
--
ALTER TABLE ONLY "InterfacePanelSettingTemplate"
    ADD CONSTRAINT "pkInterfacePanelSettingTemplate"
    PRIMARY KEY ("InterfacePanelSettingTemplateID", "InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index pkInterfacePanelTemplate (OID = 21867) :
--
ALTER TABLE ONLY "InterfacePanelTemplate"
    ADD CONSTRAINT "pkInterfacePanelTemplate"
    PRIMARY KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index pkInvoice (OID = 21869) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "pkInvoice"
    PRIMARY KEY ("InvoiceID");
--
-- Definition for index pkInvoiceLineItem (OID = 21871) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "pkInvoiceLineItem"
    PRIMARY KEY ("InvoiceLineItemID");
--
-- Definition for index pkInvoiceProcessLog (OID = 21873) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "pkInvoiceProcessLog"
    PRIMARY KEY ("InvoiceID", "CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkLedgerAccount (OID = 21875) :
--
ALTER TABLE ONLY "OrganisationLedgerAccount"
    ADD CONSTRAINT "pkLedgerAccount"
    PRIMARY KEY ("OrganisationLedgerAccountID");
--
-- Definition for index pkLedgerAccountBalance (OID = 21877) :
--
ALTER TABLE ONLY "LedgerAccountBalance"
    ADD CONSTRAINT "pkLedgerAccountBalance"
    PRIMARY KEY ("LedgerAccountID", "BalanceOn");
--
-- Definition for index pkLedgerAccountTransaction (OID = 21879) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "pkLedgerAccountTransaction"
    PRIMARY KEY ("LedgerAccountID", "TransactionOrderID", "BalanceOn");
--
-- Definition for index pkModuleArtefact (OID = 21881) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "pkModuleArtefact"
    PRIMARY KEY ("ArtefactID", "ArtefactVersionNumber", "ModuleID", "ModuleVersionNumber");
--
-- Definition for index pkModuleArtefactTemplate (OID = 21883) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "pkModuleArtefactTemplate"
    PRIMARY KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index pkModuleDependency (OID = 21885) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "pkModuleDependency"
    PRIMARY KEY ("ModuleDependencyID");
--
-- Definition for index pkModuleDependencyTemplate (OID = 21887) :
--
ALTER TABLE ONLY "ModuleDependencyTemplate"
    ADD CONSTRAINT "pkModuleDependencyTemplate"
    PRIMARY KEY ("ModuleDependencyTemplateID");
--
-- Definition for index pkModuleNotificationConstruct (OID = 21889) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "pkModuleNotificationConstruct"
    PRIMARY KEY ("ModuleNotificationConstructID");
--
-- Definition for index pkModuleNotificationConstructTemplate (OID = 21891) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "pkModuleNotificationConstructTemplate"
    PRIMARY KEY ("ModuleNotificationConstructTemplateID");
--
-- Definition for index pkModuleProduct (OID = 21893) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "pkModuleProduct"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkModuleProductTemplate (OID = 21895) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "pkModuleProductTemplate"
    PRIMARY KEY ("ProductVersionID", "ProductTemplateID", "ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index pkModuleStatusType (OID = 21897) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "pkModuleStatusType"
    PRIMARY KEY ("ModuleID", "ModuleVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkModuleStatusTypeTemplate (OID = 21899) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "pkModuleStatusTypeTemplate"
    PRIMARY KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkNotification (OID = 21901) :
--
ALTER TABLE ONLY "Notification"
    ADD CONSTRAINT "pkNotification"
    PRIMARY KEY ("NotificationID");
--
-- Definition for index pkNotificationConstructClaim (OID = 21903) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "pkNotificationConstructClaim"
    PRIMARY KEY ("NotificationConstructClaimID");
--
-- Definition for index pkNotificationConstructClaimTemplate (OID = 21905) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "pkNotificationConstructClaimTemplate"
    PRIMARY KEY ("NotificationConstructClaimTemplateID");
--
-- Definition for index pkNotificationConstructData (OID = 21907) :
--
ALTER TABLE ONLY "NotificationConstructData"
    ADD CONSTRAINT "pkNotificationConstructData"
    PRIMARY KEY ("NotificationConstructDataID");
--
-- Definition for index pkNotificationConstructDataTemplate (OID = 21909) :
--
ALTER TABLE ONLY "NotificationConstructDataTemplate"
    ADD CONSTRAINT "pkNotificationConstructDataTemplate"
    PRIMARY KEY ("NotificationConstructDataTemplateID");
--
-- Definition for index pkNotificationConstructParameter (OID = 21911) :
--
ALTER TABLE ONLY "NotificationConstructParameter"
    ADD CONSTRAINT "pkNotificationConstructParameter"
    PRIMARY KEY ("NotificationConstructParameterID");
--
-- Definition for index pkNotificationConstructParameterTemplate (OID = 21913) :
--
ALTER TABLE ONLY "NotificationConstructParameterTemplate"
    ADD CONSTRAINT "pkNotificationConstructParameterTemplate"
    PRIMARY KEY ("NotificationConstructParameterTemplateID");
--
-- Definition for index pkNotificationConstructRole (OID = 21915) :
--
ALTER TABLE ONLY "NotificationConstructRole"
    ADD CONSTRAINT "pkNotificationConstructRole"
    PRIMARY KEY ("NotificationRoleConstructID");
--
-- Definition for index pkNotificationConstructRoleTemplate (OID = 21917) :
--
ALTER TABLE ONLY "NotificationConstructRoleTemplate"
    ADD CONSTRAINT "pkNotificationConstructRoleTemplate"
    PRIMARY KEY ("NotificationConstructRoleID");
--
-- Definition for index pkNotificationConstructTarget (OID = 21919) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "pkNotificationConstructTarget"
    PRIMARY KEY ("NotificationConstructTargetID");
--
-- Definition for index pkNotificationConstructTargetTemplate (OID = 21921) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "pkNotificationConstructTargetTemplate"
    PRIMARY KEY ("NotificationConstructTargetTemplateID");
--
-- Definition for index pkNotificationConstructTemplate (OID = 21923) :
--
ALTER TABLE ONLY "NotificationConstructTemplate"
    ADD CONSTRAINT "pkNotificationConstructTemplate"
    PRIMARY KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index pkNotificationRecipient (OID = 21925) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "pkNotificationRecipient"
    PRIMARY KEY ("NotificationRecipientID");
--
-- Definition for index pkOrganisationAccountingPeriod (OID = 21927) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "pkOrganisationAccountingPeriod"
    PRIMARY KEY ("OrganisationAccountingPeriodID", "OrganisationID");
--
-- Definition for index pkOrganisationArtefact (OID = 21929) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "pkOrganisationArtefact"
    PRIMARY KEY ("OrganisationID", "ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index pkOrganisationBankAccount (OID = 21931) :
--
ALTER TABLE ONLY "OrganisationBankAccount"
    ADD CONSTRAINT "pkOrganisationBankAccount"
    PRIMARY KEY ("OrganisationBankAccountId");
--
-- Definition for index pkOrganisationDirectDebitMandate (OID = 21933) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "pkOrganisationDirectDebitMandate"
    PRIMARY KEY ("OrganisationDirectDebitMandateID");
--
-- Definition for index pkOrganisationDirectDebitMandateSignoff (OID = 21935) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "pkOrganisationDirectDebitMandateSignoff"
    PRIMARY KEY ("OrganisationDirectDebitMandateID", "CreatedOn");
--
-- Definition for index pkOrganisationDiscount (OID = 21937) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "pkOrganisationDiscount"
    PRIMARY KEY ("OrganisationID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkOrganisationFinancialDetail (OID = 21939) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "pkOrganisationFinancialDetail"
    PRIMARY KEY ("OrganisationFinancialDetailID");
--
-- Definition for index pkOrganisationOfflinePaymentMethod (OID = 21941) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "pkOrganisationOfflinePaymentMethod"
    PRIMARY KEY ("OrganisationID", "GlobalPaymentMethodID");
--
-- Definition for index pkOrganisationPlanSubscription (OID = 21943) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "pkOrganisationPlanSubscription"
    PRIMARY KEY ("OrganisationID", "PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index pkOrganisationProductPurchase (OID = 21945) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "pkOrganisationProductPurchase"
    PRIMARY KEY ("OrganisationID", "ProductID", "ProductVersionID", "InvoiceLineItemID");
--
-- Definition for index pkOrganisationSetting (OID = 21947) :
--
ALTER TABLE ONLY "OrganisationSetting"
    ADD CONSTRAINT "pkOrganisationSetting"
    PRIMARY KEY ("OrganisationSettingID");
--
-- Definition for index pkOrganisationSettingTemplate (OID = 21949) :
--
ALTER TABLE ONLY "OrganisationSettingTemplate"
    ADD CONSTRAINT "pkOrganisationSettingTemplate"
    PRIMARY KEY ("OrganisationSettingTemplateID");
--
-- Definition for index pkOrganisationStatus (OID = 21951) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "pkOrganisationStatus"
    PRIMARY KEY ("OrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkOrganisationStatusType (OID = 21953) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "pkOrganisationStatusType"
    PRIMARY KEY ("OrganisationStatusTypeID");
--
-- Definition for index pkOrganisationTeamSetting (OID = 21956) :
--
ALTER TABLE ONLY "OrganisationTeamSetting"
    ADD CONSTRAINT "pkOrganisationTeamSetting"
    PRIMARY KEY ("OrganisationTeamSettingID");
--
-- Definition for index pkOrganisationTeamSettingTemplate (OID = 21958) :
--
ALTER TABLE ONLY "OrganisationTeamSettingTemplate"
    ADD CONSTRAINT "pkOrganisationTeamSettingTemplate"
    PRIMARY KEY ("OrganisationTeamSettingID");
--
-- Definition for index pkOrganisationTradingName (OID = 21960) :
--
ALTER TABLE ONLY "OrganisationTradingName"
    ADD CONSTRAINT "pkOrganisationTradingName"
    PRIMARY KEY ("OrganisationTradingNameID");
--
-- Definition for index pkOrganisationType (OID = 21962) :
--
ALTER TABLE ONLY "OrganisationType"
    ADD CONSTRAINT "pkOrganisationType"
    PRIMARY KEY ("OrganisationTypeID");
--
-- Definition for index pkOrganisationUserType (OID = 21964) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "pkOrganisationUserType"
    PRIMARY KEY ("OrganisationID", "UserTypeID");
--
-- Definition for index pkPackage (OID = 21967) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "pkPackage"
    PRIMARY KEY ("PackageID", "PackageVersionNumber");
--
-- Definition for index pkPackageProduct (OID = 21969) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "pkPackageProduct"
    PRIMARY KEY ("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index pkPackageProductTemplate (OID = 21971) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "pkPackageProductTemplate"
    PRIMARY KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index pkPackageTemplate (OID = 21973) :
--
ALTER TABLE ONLY "PackageTemplate"
    ADD CONSTRAINT "pkPackageTemplate"
    PRIMARY KEY ("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index pkPlan (OID = 21975) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "pkPlan"
    PRIMARY KEY ("PlanID", "PlanVersionNumber");
--
-- Definition for index pkPlanBilling (OID = 21977) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "pkPlanBilling"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "BillingID");
--
-- Definition for index pkPlanBillingTemplate (OID = 21979) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "pkPlanBillingTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "BillingTemplateID");
--
-- Definition for index pkPlanDiscount (OID = 21981) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "pkPlanDiscount"
    PRIMARY KEY ("PlanVersionNumber", "PlanID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkPlanDiscountTemplate (OID = 21983) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "pkPlanDiscountTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkPlanGlobalPaymentMethod (OID = 21985) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "pkPlanGlobalPaymentMethod"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkPlanGlobalPaymentMethodTemplate (OID = 21987) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "pkPlanGlobalPaymentMethodTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "GlobalPaymentMethodID");
--
-- Definition for index pkPlanGroup (OID = 21989) :
--
ALTER TABLE ONLY "PlanGroup"
    ADD CONSTRAINT "pkPlanGroup"
    PRIMARY KEY ("PlanGroupID");
--
-- Definition for index pkPlanProduct (OID = 21991) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "pkPlanProduct"
    PRIMARY KEY ("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index pkPlanProductTemplate (OID = 21993) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "pkPlanProductTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkPlanSubscription (OID = 21995) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "pkPlanSubscription"
    PRIMARY KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index pkPlanSubscriptionBillingPeriod (OID = 21997) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "pkPlanSubscriptionBillingPeriod"
    PRIMARY KEY ("PlanSubscriptionBillingPeriodID");
--
-- Definition for index pkPlanSubscriptionPaymentPlan (OID = 21999) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "pkPlanSubscriptionPaymentPlan"
    PRIMARY KEY ("PlanSubscriptionPaymentPlanID");
--
-- Definition for index pkPlanSubscriptionPeriod (OID = 22001) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "pkPlanSubscriptionPeriod"
    PRIMARY KEY ("PlanSubscriptionPeriodID");
--
-- Definition for index pkPlanSubscriptionProcessLog (OID = 22003) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "pkPlanSubscriptionProcessLog"
    PRIMARY KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber", "CreatedOn", "StatusTypeValueID", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkPlanTemplate (OID = 22005) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "pkPlanTemplate"
    PRIMARY KEY ("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index pkPlanTransaction (OID = 22007) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "pkPlanTransaction"
    PRIMARY KEY ("PlanTransactionID");
--
-- Definition for index pkPlanTransactionComponentTier (OID = 22009) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "pkPlanTransactionComponentTier"
    PRIMARY KEY ("ComponentTierID", "PlanTransactionID");
--
-- Definition for index pkPlanTransactionComponentTierTemplate (OID = 22011) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "pkPlanTransactionComponentTierTemplate"
    PRIMARY KEY ("ComponentTierTemplateID", "PlanTransactionTemplateID");
--
-- Definition for index pkPlanTransactionTemplate (OID = 22013) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "pkPlanTransactionTemplate"
    PRIMARY KEY ("PlanTransactionTemplateID");
--
-- Definition for index pkProduct (OID = 22015) :
--
ALTER TABLE ONLY "Product"
    ADD CONSTRAINT "pkProduct"
    PRIMARY KEY ("ProductID", "ProductVersionID");
--
-- Definition for index pkProductBusTask (OID = 22017) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "pkProductBusTask"
    PRIMARY KEY ("ProductBusTaskID");
--
-- Definition for index pkProductBusTaskTemplate (OID = 22019) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "pkProductBusTaskTemplate"
    PRIMARY KEY ("ProductBusTaskTemplateID");
--
-- Definition for index pkProductClaim (OID = 22021) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "pkProductClaim"
    PRIMARY KEY ("ProductClaimID");
--
-- Definition for index pkProductClaimTemplate (OID = 22023) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "pkProductClaimTemplate"
    PRIMARY KEY ("ProductClaimTemplateID");
--
-- Definition for index pkProductComponentTier (OID = 22025) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "pkProductComponentTier"
    PRIMARY KEY ("ProductID", "ProductVersionID", "ComponentTierID");
--
-- Definition for index pkProductComponentTierTemplate (OID = 22027) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "pkProductComponentTierTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "ComponentTierTemplateID");
--
-- Definition for index pkProductDeduction (OID = 22029) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "pkProductDeduction"
    PRIMARY KEY ("ProductDeductionID");
--
-- Definition for index pkProductDeductionTemplate (OID = 22031) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "pkProductDeductionTemplate"
    PRIMARY KEY ("ProductDeductionTemplateID");
--
-- Definition for index pkProductDiscount (OID = 22033) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "pkProductDiscount"
    PRIMARY KEY ("ProductID", "ProductVersionID", "DiscountID", "DiscountVersionNumber");
--
-- Definition for index pkProductDiscountTemplate (OID = 22035) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "pkProductDiscountTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index pkProductPlan (OID = 22037) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "pkProductPlan"
    PRIMARY KEY ("ProductID", "ProductVersionID", "PlanID", "PlanVersionNumber");
--
-- Definition for index pkProductPlanTemplate (OID = 22039) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "pkProductPlanTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID", "PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index pkProductPurchase (OID = 22041) :
--
ALTER TABLE ONLY "ProductPurchase"
    ADD CONSTRAINT "pkProductPurchase"
    PRIMARY KEY ("ProductPurchaseID");
--
-- Definition for index pkProductPurchaseBusTaskProcessDetail (OID = 22044) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessDetail"
    ADD CONSTRAINT "pkProductPurchaseBusTaskProcessDetail"
    PRIMARY KEY ("ProductPurchaseBusTaskProcessDetailID", "StartDate");
--
-- Definition for index pkProductPurchaseBusTaskProcessLog (OID = 22047) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "pkProductPurchaseBusTaskProcessLog"
    PRIMARY KEY ("ProductPurchaseProductTaskID");
--
-- Definition for index pkProductPurchaseProcessLog (OID = 22049) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "pkProductPurchaseProcessLog"
    PRIMARY KEY ("ProductPurchaseProcessLogID");
--
-- Definition for index pkProductPurchaseReference (OID = 22051) :
--
ALTER TABLE ONLY "ProductPurchaseReference"
    ADD CONSTRAINT "pkProductPurchaseReference"
    PRIMARY KEY ("ProductPurchaseReferenceID", "InvoiceLineItemID");
--
-- Definition for index pkProductRole (OID = 22053) :
--
ALTER TABLE ONLY "ProductRole"
    ADD CONSTRAINT "pkProductRole"
    PRIMARY KEY ("ProductRoleID");
--
-- Definition for index pkProductRoleTemplate (OID = 22055) :
--
ALTER TABLE ONLY "ProductRoleTemplate"
    ADD CONSTRAINT "pkProductRoleTemplate"
    PRIMARY KEY ("ProductRoleTemplateID");
--
-- Definition for index pkProductTemplate (OID = 22057) :
--
ALTER TABLE ONLY "ProductTemplate"
    ADD CONSTRAINT "pkProductTemplate"
    PRIMARY KEY ("ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkRole (OID = 22059) :
--
ALTER TABLE ONLY "Role"
    ADD CONSTRAINT "pkRole"
    PRIMARY KEY ("RoleID");
--
-- Definition for index pkServiceDefinition (OID = 22061) :
--
ALTER TABLE ONLY "ServiceDefinition"
    ADD CONSTRAINT "pkServiceDefinition"
    PRIMARY KEY ("ServiceDefinitionID");
--
-- Definition for index pkServiceDefinitionDetail (OID = 22063) :
--
ALTER TABLE ONLY "ServiceDefinitionDetail"
    ADD CONSTRAINT "pkServiceDefinitionDetail"
    PRIMARY KEY ("ServiceDefinitionDetailID");
--
-- Definition for index pkServiceInterface (OID = 22065) :
--
ALTER TABLE ONLY "ServiceInterface"
    ADD CONSTRAINT "pkServiceInterface"
    PRIMARY KEY ("ServiceInterfaceID");
--
-- Definition for index pkServiceInterfaceProcessLog (OID = 22067) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "pkServiceInterfaceProcessLog"
    PRIMARY KEY ("ServiceInterfaceProcessLogID");
--
-- Definition for index pkShoppingCartBlueprint (OID = 22069) :
--
ALTER TABLE ONLY "ShoppingCartBlueprint"
    ADD CONSTRAINT "pkShoppingCartBlueprint"
    PRIMARY KEY ("ShoppingCartBlueprintID");
--
-- Definition for index pkShoppingCartBlueprintProduct (OID = 22071) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "pkShoppingCartBlueprintProduct"
    PRIMARY KEY ("ShoppingCartBlueprintID", "ProductID", "ProductVersionID");
--
-- Definition for index pkShoppingCartBlueprintProductTemplate (OID = 22073) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "pkShoppingCartBlueprintProductTemplate"
    PRIMARY KEY ("ShoppingCartBlueprintTemplateID", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index pkShoppingCartBlueprintTemplate (OID = 22075) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "pkShoppingCartBlueprintTemplate"
    PRIMARY KEY ("ShoppingCartBlueprintTemplateID");
--
-- Definition for index pkShoppingCartDeduction (OID = 22077) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "pkShoppingCartDeduction"
    PRIMARY KEY ("ShoppingCartID", "CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index pkShoppingCartItemProductAttribute (OID = 22079) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "pkShoppingCartItemProductAttribute"
    PRIMARY KEY ("ShoppingCartItemProductAttributeID");
--
-- Definition for index pkShoppingCartItemProductSpecification (OID = 22081) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "pkShoppingCartItemProductSpecification"
    PRIMARY KEY ("ShoppingCartItemProductSpecificationID");
--
-- Definition for index pkStatusType (OID = 22083) :
--
ALTER TABLE ONLY "StatusType"
    ADD CONSTRAINT "pkStatusType"
    PRIMARY KEY ("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkStatusTypeClaim (OID = 22085) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "pkStatusTypeClaim"
    PRIMARY KEY ("StatusTypeClaimID");
--
-- Definition for index pkStatusTypeClaimTemplate (OID = 22087) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "pkStatusTypeClaimTemplate"
    PRIMARY KEY ("StatusTypeClaimTemplateID");
--
-- Definition for index pkStatusTypeRole (OID = 22089) :
--
ALTER TABLE ONLY "StatusTypeRole"
    ADD CONSTRAINT "pkStatusTypeRole"
    PRIMARY KEY ("StatusTypeRoleID");
--
-- Definition for index pkStatusTypeRoleTemplate (OID = 22091) :
--
ALTER TABLE ONLY "StatusTypeRoleTemplate"
    ADD CONSTRAINT "pkStatusTypeRoleTemplate"
    PRIMARY KEY ("StatusTypeRoleTemplateID");
--
-- Definition for index pkStatusTypeStructureTemplate (OID = 22093) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "pkStatusTypeStructureTemplate"
    PRIMARY KEY ("StatusTypeStructureTemplateID");
--
-- Definition for index pkStatusTypeStructureTransition (OID = 22095) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "pkStatusTypeStructureTransition"
    PRIMARY KEY ("StatusTypeStructureTransitionID");
--
-- Definition for index pkStatusTypeStructureTransitionTemplate (OID = 22097) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "pkStatusTypeStructureTransitionTemplate"
    PRIMARY KEY ("StatusTypeStructureTransitionTemplateID");
--
-- Definition for index pkStatusTypeTemplate (OID = 22099) :
--
ALTER TABLE ONLY "StatusTypeTemplate"
    ADD CONSTRAINT "pkStatusTypeTemplate"
    PRIMARY KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index pkStatusTypeValueTemplate (OID = 22101) :
--
ALTER TABLE ONLY "StatusTypeValueTemplate"
    ADD CONSTRAINT "pkStatusTypeValueTemplate"
    PRIMARY KEY ("StatusTypeValueTemplateID");
--
-- Definition for index pkTransactionOrderPayment (OID = 22103) :
--
ALTER TABLE ONLY "TransactionOrderPayment"
    ADD CONSTRAINT "pkTransactionOrderPayment"
    PRIMARY KEY ("TransactionOrderPaymentID");
--
-- Definition for index pkTransactionOrderPaymentError (OID = 22105) :
--
ALTER TABLE ONLY "TransactionOrderPaymentError"
    ADD CONSTRAINT "pkTransactionOrderPaymentError"
    PRIMARY KEY ("TransactionOrderPaymentErrorID", "CreatedOn");
--
-- Definition for index pkTransactionOrderProcessLog (OID = 22107) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "pkTransactionOrderProcessLog"
    PRIMARY KEY ("TransactionOrderID", "CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkUserAccountLedgerAccount (OID = 22109) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "pkUserAccountLedgerAccount"
    PRIMARY KEY ("UserAccountID", "LedgerAccountID");
--
-- Definition for index pkUserAccountLoginSessionData (OID = 22111) :
--
ALTER TABLE ONLY "UserAccountLoginSessionData"
    ADD CONSTRAINT "pkUserAccountLoginSessionData"
    PRIMARY KEY ("UserAccountLoginSessionDataID");
--
-- Definition for index pkUserAccountOrganisationGroup (OID = 22113) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "pkUserAccountOrganisationGroup"
    PRIMARY KEY ("OrganisationGroupID", "UserAccountOrganisationID");
--
-- Definition for index pkUserAccountOrganisationRole (OID = 22115) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "pkUserAccountOrganisationRole"
    PRIMARY KEY ("UserAccountOrganisationID", "OrganisationRoleID");
--
-- Definition for index pkUserAccountOrganisationSecondaryUserType (OID = 22117) :
--
ALTER TABLE ONLY "UserAccountOrganisationSecondaryUserType"
    ADD CONSTRAINT "pkUserAccountOrganisationSecondaryUserType"
    PRIMARY KEY ("UserAccountOrganisationID", "UserTypeID");
--
-- Definition for index pkUserAccountOrganisationStatus (OID = 22119) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "pkUserAccountOrganisationStatus"
    PRIMARY KEY ("UserAccountOrganisationID", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID");
--
-- Definition for index pkUserAccountOrganisationTeam (OID = 22121) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "pkUserAccountOrganisationTeam"
    PRIMARY KEY ("UserAccountOrganisationID", "OrganisationTeamID");
--
-- Definition for index pkUserShoppingCart (OID = 22123) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "pkUserShoppingCart"
    PRIMARY KEY ("ShoppingCartID");
--
-- Definition for index pkUserType (OID = 22125) :
--
ALTER TABLE ONLY "UserType"
    ADD CONSTRAINT "pkUserType"
    PRIMARY KEY ("UserTypeID");
--
-- Definition for index pkWorkflowActionParameterNotificationConstruct (OID = 22127) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "pkWorkflowActionParameterNotificationConstruct"
    PRIMARY KEY ("WorkflowActionParameterNotificationConstructID", "WorkflowActionID", "WorkflowParameterID", "OrganisationTypeID", "UserTypeID", "WorkflowActionParameterNotificationConstructTemplateVersion", "NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index pkWorkflowActionParameterNotificationConstructTemplate (OID = 22129) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "pkWorkflowActionParameterNotificationConstructTemplate"
    PRIMARY KEY ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionTemplateID", "WorkflowParameterTemplateID", "OrganisationTypeID", "UserTypeID", "WorkflowActionParameterNotificationConstructTemplateVersion", "NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index pkWorkflowClaimTemplate (OID = 22131) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "pkWorkflowClaimTemplate"
    PRIMARY KEY ("WorkflowClaimTemplateID");
--
-- Definition for index pkWorkflowDecisionError (OID = 22133) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "pkWorkflowDecisionError"
    PRIMARY KEY ("WorkflowDecisionErrorID");
--
-- Definition for index pkWorkflowDecisionErrorTemplate (OID = 22135) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionErrorTemplate"
    PRIMARY KEY ("WorkflowDecisionErrorTemplateID");
--
-- Definition for index pkWorkflowDecisionFailure (OID = 22137) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "pkWorkflowDecisionFailure"
    PRIMARY KEY ("WorkflowDecisionFailureID");
--
-- Definition for index pkWorkflowDecisionFailureTemplate (OID = 22139) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionFailureTemplate"
    PRIMARY KEY ("WorkflowDecisionFailureTemplateID");
--
-- Definition for index pkWorkflowDecisionSuccess (OID = 22141) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "pkWorkflowDecisionSuccess"
    PRIMARY KEY ("WorkflowDecisionSuccessID");
--
-- Definition for index pkWorkflowDecisionSuccessTemplate (OID = 22143) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "pkWorkflowDecisionSuccessTemplate"
    PRIMARY KEY ("WorkflowDecisionSuccessTemplateID");
--
-- Definition for index pkWorkflowInstanceExecutionTrace (OID = 22145) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionTrace"
    ADD CONSTRAINT "pkWorkflowInstanceExecutionTrace"
    PRIMARY KEY ("WorkflowInstanceExecutionTraceID");
--
-- Definition for index pkWorkflowInstanceRestriction (OID = 22147) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "pkWorkflowInstanceRestriction"
    PRIMARY KEY ("WorkflowInstanceID", "UserAccountOrganisationID");
--
-- Definition for index pkWorkflowNotificationConstruct (OID = 22149) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "pkWorkflowNotificationConstruct"
    PRIMARY KEY ("WorkflowNotificationConstructID");
--
-- Definition for index pkWorkflowNotificationConstructTemplate (OID = 22151) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "pkWorkflowNotificationConstructTemplate"
    PRIMARY KEY ("WorkflowNotificationConstructTemplateID");
--
-- Definition for index pkWorkflowRole (OID = 22153) :
--
ALTER TABLE ONLY "WorkflowRole"
    ADD CONSTRAINT "pkWorkflowRole"
    PRIMARY KEY ("WorkflowRoleID");
--
-- Definition for index pkWorkflowRoleClaim (OID = 22155) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "pkWorkflowRoleClaim"
    PRIMARY KEY ("WorkflowClaimID");
--
-- Definition for index pkWorkflowRoleTemplate (OID = 22157) :
--
ALTER TABLE ONLY "WorkflowRoleTemplate"
    ADD CONSTRAINT "pkWorkflowRoleTemplate"
    PRIMARY KEY ("WorkflowRoleTemplateID");
--
-- Definition for index pkWorkflowStatusType (OID = 22159) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "pkWorkflowStatusType"
    PRIMARY KEY ("WorkflowID", "WorkflowVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index pkWorkflowStatusTypeTemplate (OID = 22161) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "pkWorkflowStatusTypeTemplate"
    PRIMARY KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index subscription_pkey (OID = 22163) :
--
ALTER TABLE ONLY subscription
    ADD CONSTRAINT subscription_pkey
    PRIMARY KEY (subscriberendpoint, messagetype);
--
-- Definition for index timeoutentity_pkey (OID = 22165) :
--
ALTER TABLE ONLY timeoutentity
    ADD CONSTRAINT timeoutentity_pkey
    PRIMARY KEY (id);
--
-- Definition for index pkLRDocument (OID = 22167) :
--
SET search_path = sts, pg_catalog;
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "pkLRDocument"
    PRIMARY KEY ("LRDocumentID");
--
-- Definition for index pkLRRegisterExtract (OID = 22169) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "pkLRRegisterExtract"
    PRIMARY KEY ("LRRegisterExtractID");
--
-- Definition for index pkLRTitle (OID = 22171) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "pkLRTitle"
    PRIMARY KEY ("LRTitleID");
--
-- Definition for index pkStsAccountDocument (OID = 22173) :
--
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "pkStsAccountDocument"
    PRIMARY KEY ("StsAccountDocument");
--
-- Definition for index pkStsActor (OID = 22175) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "pkStsActor"
    PRIMARY KEY ("StsActorID");
--
-- Definition for index pkStsActorAuthority (OID = 22177) :
--
ALTER TABLE ONLY "StsActorAuthority"
    ADD CONSTRAINT "pkStsActorAuthority"
    PRIMARY KEY ("StsActorAuthorityID");
--
-- Definition for index pkStsActorProcessLog (OID = 22179) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "pkStsActorProcessLog"
    PRIMARY KEY ("StsActorProcessLogID");
--
-- Definition for index pkStsActorPurchase (OID = 22181) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "pkStsActorPurchase"
    PRIMARY KEY ("StsActorPurchaseID");
--
-- Definition for index pkStsActorStructure (OID = 22183) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "pkStsActorStructure"
    PRIMARY KEY ("StsActorStructureID");
--
-- Definition for index pkStsActorStsSearch (OID = 22185) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "pkStsActorStsSearch"
    PRIMARY KEY ("StsActorID", "StsSearchID");
--
-- Definition for index pkStsActorStsTransaction (OID = 22187) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "pkStsActorStsTransaction"
    PRIMARY KEY ("StsActorID", "StsTransactionID");
--
-- Definition for index pkStsAuthority (OID = 22189) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "pkStsAuthority"
    PRIMARY KEY ("StsAuthorityID");
--
-- Definition for index pkStsAuthorityStsDocument (OID = 22191) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "pkStsAuthorityStsDocument"
    PRIMARY KEY ("StsAuthorityID", "StsDocumentID");
--
-- Definition for index pkStsDocument (OID = 22193) :
--
ALTER TABLE ONLY "StsDocument"
    ADD CONSTRAINT "pkStsDocument"
    PRIMARY KEY ("StsDocumentID");
--
-- Definition for index pkStsDocumentProcessLog (OID = 22195) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "pkStsDocumentProcessLog"
    PRIMARY KEY ("StsDocumentProcessLog");
--
-- Definition for index pkStsInvite (OID = 22197) :
--
ALTER TABLE ONLY "StsInvite"
    ADD CONSTRAINT "pkStsInvite"
    PRIMARY KEY ("StsInviteID");
--
-- Definition for index pkStsInviteProcessLog (OID = 22199) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "pkStsInviteProcessLog"
    PRIMARY KEY ("StatusTypeValueID", "StatusTypeVersionNumber", "CreatedOn", "StsInviteID", "StatusTypeID");
--
-- Definition for index pkStsProperty (OID = 22201) :
--
ALTER TABLE ONLY "PropertyDetail"
    ADD CONSTRAINT "pkStsProperty"
    PRIMARY KEY ("PropertyDetailID");
--
-- Definition for index pkStsSearch (OID = 22203) :
--
ALTER TABLE ONLY "StsSearch"
    ADD CONSTRAINT "pkStsSearch"
    PRIMARY KEY ("StsSearchID");
--
-- Definition for index pkStsSearchDetail (OID = 22205) :
--
ALTER TABLE ONLY "StsSearchDetail"
    ADD CONSTRAINT "pkStsSearchDetail"
    PRIMARY KEY ("StsSearchDetailID");
--
-- Definition for index pkStsSearchProcessLog (OID = 22207) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "pkStsSearchProcessLog"
    PRIMARY KEY ("StsSearchID", "CreatedOn", "StatusTypeID", "StatusTypeValueID", "StatusTypeVersionNumber");
--
-- Definition for index pkStsSearchProperty (OID = 22209) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "pkStsSearchProperty"
    PRIMARY KEY ("StsSearchPropertyDetailID");
--
-- Definition for index pkStsSearchRelation (OID = 22211) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "pkStsSearchRelation"
    PRIMARY KEY ("BuyerStsSearchID", "SellerStsSearchID");
--
-- Definition for index pkStsSourceOfFunds (OID = 22213) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "pkStsSourceOfFunds"
    PRIMARY KEY ("StsSourceOfFunds");
--
-- Definition for index pkStsSourceOfFundsStsDocument (OID = 22215) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "pkStsSourceOfFundsStsDocument"
    PRIMARY KEY ("StsSourceOfFundsStsDocumentID");
--
-- Definition for index pkStsTransaction (OID = 22217) :
--
ALTER TABLE ONLY "StsTransaction"
    ADD CONSTRAINT "pkStsTransaction"
    PRIMARY KEY ("StsTransactionID");
--
-- Definition for index pkStsTransactionComponent (OID = 22219) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "pkStsTransactionComponent"
    PRIMARY KEY ("StsTransactionComponentID");
--
-- Definition for index pkStsTransactionProcessLog (OID = 22221) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "pkStsTransactionProcessLog"
    PRIMARY KEY ("CreatedOn", "StatusTypeID", "StatusTypeVersionNumber", "StatusTypeValueID", "StsTransactionID");
--
-- Definition for index pkStsTransactionPropertyDetail (OID = 22223) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "pkStsTransactionPropertyDetail"
    PRIMARY KEY ("StsTransactionPropertyDetailID");
--
-- Definition for index fk_LegalOrganisationDetails_Organisation (OID = 22352) :
--
SET search_path = legal, pg_catalog;
ALTER TABLE ONLY "LegalOrganisationDetails"
    ADD CONSTRAINT "fk_LegalOrganisationDetails_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index DefaultOrganisationUserTargetTemplate_fk (OID = 22357) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "DefaultOrganisationUserTargetTemplate_fk"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK OrganisationUnit (OID = 22362) :
--
ALTER TABLE ONLY "OrganisationUnit"
    ADD CONSTRAINT "FK OrganisationUnit"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK UnitMap (OID = 22367) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "FK UnitMap"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory (OID = 22372) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "FK_ClassificationType_ClassificationTypeCategory"
    FOREIGN KEY ("ClassificationTypeCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index FK_ClassificationType_ClassificationTypeCategory2 (OID = 22377) :
--
ALTER TABLE ONLY "ClassificationType"
    ADD CONSTRAINT "FK_ClassificationType_ClassificationTypeCategory2"
    FOREIGN KEY ("ParentClassificationTypeCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroup (OID = 22382) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroup"
    FOREIGN KEY ("DefaultOrganisationGroupID") REFERENCES "DefaultOrganisationGroup"("DefaultOrganisationGroupID");
--
-- Definition for index FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroupT (OID = 22387) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "FK_DefaultOrganisationGroupDefaul_DefaultOrganisationGroupT"
    FOREIGN KEY ("DefaultOrganisationGroupTemplateID") REFERENCES "DefaultOrganisationGroupTemplate"("DefaultOrganisationGroupTemplateID");
--
-- Definition for index FK_DefaultonGroupDefault_DefaultOrganisationRole (OID = 22392) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRole"
    ADD CONSTRAINT "FK_DefaultonGroupDefault_DefaultOrganisationRole"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index FK_DefaultonGroupDefault_DefaultOrganisationRoleT (OID = 22397) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupRoleTemplate"
    ADD CONSTRAINT "FK_DefaultonGroupDefault_DefaultOrganisationRoleT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index FK_GroupTemplateRole_GroupTemplate (OID = 22402) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "FK_GroupTemplateRole_GroupTemplate"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index FK_GroupTemplateRole_RoleTemplate (OID = 22407) :
--
ALTER TABLE ONLY "GroupRole"
    ADD CONSTRAINT "FK_GroupTemplateRole_RoleTemplate"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index FK_Module_ModuleTemplate (OID = 22412) :
--
ALTER TABLE ONLY "Module"
    ADD CONSTRAINT "FK_Module_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index FK_OrganisationStructure (OID = 22417) :
--
ALTER TABLE ONLY "OrganisationStructure"
    ADD CONSTRAINT "FK_OrganisationStructure"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK_OrganisationUnit (OID = 22422) :
--
ALTER TABLE ONLY "OrganisationUnitStructure"
    ADD CONSTRAINT "FK_OrganisationUnit"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index FK_Plugin_PluginTemplate (OID = 22427) :
--
ALTER TABLE ONLY "Plugin"
    ADD CONSTRAINT "FK_Plugin_PluginTemplate"
    FOREIGN KEY ("PluginTemplateID", "PluginTemplateVersionNumber") REFERENCES "PluginTemplate"("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index FK_StateItem_State (OID = 22432) :
--
ALTER TABLE ONLY "StateItem"
    ADD CONSTRAINT "FK_StateItem_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index FK_WorkflowActionTemplate_WorkflowTemplate (OID = 22437) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowActionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowDecisionFailureActionTemplate (OID = 22442) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "FK_WorkflowDecisionFailureActionTemplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowDecisionSuccessActionTplate (OID = 22447) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "FK_WorkflowDecisionSuccessActionTplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTemplate (OID = 22452) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "FK_WorkflowHierarchyTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate (OID = 22457) :
--
ALTER TABLE ONLY "WorkflowHierarchyTemplate"
    ADD CONSTRAINT "FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionTemplate_WorkflowTemplate (OID = 22462) :
--
ALTER TABLE ONLY "WorkflowTransistionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowActionTe (OID = 22467) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowActionTe"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowActionTemplate_Wormplate (OID = 22472) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecisionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowActionTemplate_Wormplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTrmplate (OID = 22477) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTrmplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_WorkflowTransistionWorkflowDecisionTplate (OID = 22482) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "FK_WorkflowTransistionWorkflowDecisionTplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index FK_dboLinkedAccountCeAccountID (OID = 22487) :
--
ALTER TABLE ONLY "LinkedAccountClaims"
    ADD CONSTRAINT "FK_dboLinkedAccountCeAccountID"
    FOREIGN KEY ("LinkedAccount_ProviderName", "LinkedAccount_ProviderAccountID") REFERENCES "LinkedAccounts"("ProviderName", "ProviderAccountID") ON DELETE CASCADE;
--
-- Definition for index FK_dboLinkedAccounts_dboUserAccounts_UserAccount_ID (OID = 22492) :
--
ALTER TABLE ONLY "LinkedAccounts"
    ADD CONSTRAINT "FK_dboLinkedAccounts_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboPasswordResetSecrets_dboUserAccounts_UserAccount_ID (OID = 22497) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT "FK_dboPasswordResetSecrets_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboTwoFactorAuthTokens_dboUserAccounts_UserAccount_ID (OID = 22502) :
--
ALTER TABLE ONLY "TwoFactorAuthTokens"
    ADD CONSTRAINT "FK_dboTwoFactorAuthTokens_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserAccountDetail_dboUserAccounts_UserID (OID = 22507) :
--
ALTER TABLE ONLY "UserAccountDetail"
    ADD CONSTRAINT "FK_dboUserAccountDetail_dboUserAccounts_UserID"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserAccountOrganisationGroup_dboOrganisupID (OID = 22512) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "FK_dboUserAccountOrganisationGroup_dboOrganisupID"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserCertificates_dboUserAccounts_UserAccount_ID (OID = 22517) :
--
ALTER TABLE ONLY "UserCertificates"
    ADD CONSTRAINT "FK_dboUserCertificates_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index FK_dboUserClaims_dboUserAccounts_UserAccount_ID (OID = 22522) :
--
ALTER TABLE ONLY "UserClaims"
    ADD CONSTRAINT "FK_dboUserClaims_dboUserAccounts_UserAccount_ID"
    FOREIGN KEY ("UserAccount_ID") REFERENCES "UserAccounts"("ID") ON DELETE CASCADE;
--
-- Definition for index InterfacePanelFDValidationOrgTypeUserTypeTemplate_fk (OID = 22527) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrgTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFDValidationOrgTypeUserTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFDValidationOrganisationTypeUserType_fk (OID = 22532) :
--
ALTER TABLE ONLY "InterfacePanelFDValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelFDValidationOrganisationTypeUserType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationTypeTemplate_fk (OID = 22537) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationOrganisationType_fk (OID = 22542) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationOrganisationType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidationTemplate_fk (OID = 22547) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidationTemplate"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidationTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelFieldDetailValidation_fk (OID = 22552) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailValidation"
    ADD CONSTRAINT "InterfacePanelFieldDetailValidation_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeTemplate_fk (OID = 22557) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserTypeTemplate_fk (OID = 22562) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserTypeTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationTypeUserType_fk (OID = 22567) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationTypeUserType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationTypeUserType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidationOrganisationType_fk (OID = 22572) :
--
ALTER TABLE ONLY "InterfacePanelValidationOrganisationType"
    ADD CONSTRAINT "InterfacePanelValidationOrganisationType_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index InterfacePanelValidation_fk (OID = 22577) :
--
ALTER TABLE ONLY "InterfacePanelValidation"
    ADD CONSTRAINT "InterfacePanelValidation_fk"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk (OID = 22582) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk"
    FOREIGN KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion") REFERENCES "NotificationConstructGroupTemplate"("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk2 (OID = 22587) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk2"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk3 (OID = 22592) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk3"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstructTemplate_fk4 (OID = 22597) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstructTemplate_fk4"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk (OID = 22602) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk"
    FOREIGN KEY ("NotificationConstructGroupID", "NotificationConstructGroupVersion") REFERENCES "NotificationConstructGroup"("NotificationConstructGroupID", "NotificationConstructGroupVersion");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk2 (OID = 22607) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk2"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index NotificationConstructGroupNotificationConstruct_fk3 (OID = 22612) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "NotificationConstructGroupNotificationConstruct_fk3"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index NotificationConstructGroup_fk (OID = 22617) :
--
ALTER TABLE ONLY "NotificationConstructGroup"
    ADD CONSTRAINT "NotificationConstructGroup_fk"
    FOREIGN KEY ("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion") REFERENCES "NotificationConstructGroupTemplate"("NotificationConstructGroupTemplateID", "NotificationConstructGroupTemplateVersion");
--
-- Definition for index OrganisationFinancialDetail_fk (OID = 22622) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "OrganisationFinancialDetail_fk"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index TFEventTFEventMessageSubscriber_fk (OID = 22627) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_fk"
    FOREIGN KEY ("TFEventID") REFERENCES "TFEvent"("TFEventID");
--
-- Definition for index TFEventTFEventMessageSubscriber_fk1 (OID = 22632) :
--
ALTER TABLE ONLY "TFEventTFEventMessageSubscriber"
    ADD CONSTRAINT "TFEventTFEventMessageSubscriber_fk1"
    FOREIGN KEY ("TFEventMessageSubscriberID") REFERENCES "TFEventMessageSubscriber"("TFEventMessageSubscriberID");
--
-- Definition for index TFEvent_fk (OID = 22637) :
--
ALTER TABLE ONLY "TFEvent"
    ADD CONSTRAINT "TFEvent_fk"
    FOREIGN KEY ("TFEventTypeID") REFERENCES "TFEventType"("TFEventTypeID");
--
-- Definition for index WorkflowActionParameterNotificationConstructTemplate_fk (OID = 22642) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "WorkflowActionParameterNotificationConstructTemplate_fk"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionParameterTemplate"("WorkflowActionTemplateID", "WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index WorkflowActionParameterNotificationConstruct_fk (OID = 22647) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "WorkflowActionParameterNotificationConstruct_fk"
    FOREIGN KEY ("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion") REFERENCES "WorkflowActionParameterNotificationConstructTemplate"("WorkflowActionParameterNotificationConstructTemplateID", "WorkflowActionParameterNotificationConstructTemplateVersion");
--
-- Definition for index WorkflowTreeStructureActionTemplate_fk (OID = 22652) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_fk"
    FOREIGN KEY ("WorkflowTreeStructureTemplateID") REFERENCES "WorkflowTreeStructureTemplate"("WorkflowTreeStructureTemplateID");
--
-- Definition for index WorkflowTreeStructureActionTemplate_fk1 (OID = 22657) :
--
ALTER TABLE ONLY "WorkflowTreeStructureActionTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureActionTemplate_fk1"
    FOREIGN KEY ("WorkflowActionTemplateID") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID");
--
-- Definition for index WorkflowTreeStructureAction_fk (OID = 22662) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_fk"
    FOREIGN KEY ("WorkflowTreeStructureID") REFERENCES "WorkflowTreeStructure"("WorkflowTreeStructureID");
--
-- Definition for index WorkflowTreeStructureAction_fk1 (OID = 22667) :
--
ALTER TABLE ONLY "WorkflowTreeStructureAction"
    ADD CONSTRAINT "WorkflowTreeStructureAction_fk1"
    FOREIGN KEY ("WorkflowActionID") REFERENCES "WorkflowAction"("WorkflowActionID");
--
-- Definition for index WorkflowTreeStructureTemplate_fk (OID = 22672) :
--
ALTER TABLE ONLY "WorkflowTreeStructureTemplate"
    ADD CONSTRAINT "WorkflowTreeStructureTemplate_fk"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index WorkflowTreeStructure_fk (OID = 22677) :
--
ALTER TABLE ONLY "WorkflowTreeStructure"
    ADD CONSTRAINT "WorkflowTreeStructure_fk"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber") ON UPDATE CASCADE ON DELETE CASCADE;
--
-- Definition for index fk_Account_Contact (OID = 22682) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_Account_Organisation (OID = 22687) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_Organisation"
    FOREIGN KEY ("ContactOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Account_OrganisationContact (OID = 22692) :
--
ALTER TABLE ONLY "Account"
    ADD CONSTRAINT "fk_Account_OrganisationContact"
    FOREIGN KEY ("ParentOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_AccountingPeriod_Organisation (OID = 22697) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "fk_AccountingPeriod_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ActorClaim_Actor (OID = 22702) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Actor"
    FOREIGN KEY ("ActorID") REFERENCES "Actor"("ActorID");
--
-- Definition for index fk_ActorClaim_Operation (OID = 22707) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ActorClaim_Resource (OID = 22712) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ActorClaim_Role (OID = 22717) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ActorClaim_State (OID = 22722) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ActorClaim_StateItem (OID = 22727) :
--
ALTER TABLE ONLY "ActorClaimRoleMapping"
    ADD CONSTRAINT "fk_ActorClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_AddressChronology_Address (OID = 22732) :
--
ALTER TABLE ONLY "AddressChronology"
    ADD CONSTRAINT "fk_AddressChronology_Address"
    FOREIGN KEY ("ParentID") REFERENCES "Address"("AddressID");
--
-- Definition for index fk_Address_CountryCode (OID = 22737) :
--
ALTER TABLE ONLY "Address"
    ADD CONSTRAINT "fk_Address_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_ApplicationStageWorkflow_ApplicationStage (OID = 22742) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "fk_ApplicationStageWorkflow_ApplicationStage"
    FOREIGN KEY ("ApplicationStageID") REFERENCES "ApplicationStage"("ApplicationStageID");
--
-- Definition for index fk_ApplicationStageWorkflow_Workflow (OID = 22747) :
--
ALTER TABLE ONLY "ApplicationStageWorkflow"
    ADD CONSTRAINT "fk_ApplicationStageWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "VersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_ArtefactClaimTemplate_ArtefactRoleTemplate (OID = 22752) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_ArtefactRoleTemplate"
    FOREIGN KEY ("ArtefactRoleTemplateID") REFERENCES "ArtefactRoleTemplate"("ArtefactRoleTemplateID");
--
-- Definition for index fk_ArtefactClaimTemplate_ArtefactTemplate (OID = 22757) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactClaimTemplate_Operation (OID = 22762) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ArtefactClaimTemplate_Resource (OID = 22767) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ArtefactClaimTemplate_Role (OID = 22772) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ArtefactClaimTemplate_State (OID = 22777) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ArtefactClaimTemplate_StateItem (OID = 22782) :
--
ALTER TABLE ONLY "ArtefactClaimTemplate"
    ADD CONSTRAINT "fk_ArtefactClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ArtefactClaim_Artefact (OID = 22787) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactClaim_ArtefactRole (OID = 22792) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_ArtefactRole"
    FOREIGN KEY ("ArtefactRoleID") REFERENCES "ArtefactRole"("ArtefactRoleID");
--
-- Definition for index fk_ArtefactClaim_Operation (OID = 22797) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ArtefactClaim_Resource (OID = 22802) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ArtefactClaim_Role (OID = 22807) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ArtefactClaim_State (OID = 22812) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ArtefactClaim_StateItem (OID = 22817) :
--
ALTER TABLE ONLY "ArtefactClaim"
    ADD CONSTRAINT "fk_ArtefactClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ArtefactDepenactDependencyTemplate (OID = 22822) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDepenactDependencyTemplate"
    FOREIGN KEY ("ArtefactDependencyTemplateID") REFERENCES "ArtefactDependencyTemplate"("ArtefactDependencyTemplateID");
--
-- Definition for index fk_ArtefactDependencyStatusTypeTemplate_StatusTypeValueTemplate (OID = 22827) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusTypeTemplate_StatusTypeValueTemplate"
    FOREIGN KEY ("StatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_ArtefactDependencyStatusType_ArtefactDependency (OID = 22832) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_ArtefactDependency"
    FOREIGN KEY ("ArtefactDependencyID") REFERENCES "ArtefactDependency"("ArtefactDependencyID");
--
-- Definition for index fk_ArtefactDependencyStatusType_ArtefactStatusType (OID = 22837) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_ArtefactStatusType"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber") REFERENCES "ArtefactStatusType"("ArtefactID", "ArtefactVersionNumber", "StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ArtefactDependencyStatusType_StatusTypeValue (OID = 22842) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusType"
    ADD CONSTRAINT "fk_ArtefactDependencyStatusType_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ArtefactDependencyTemplate_ArtefactTemplate (OID = 22847) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "fk_ArtefactDependencyTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactDependency_Artefact (OID = 22852) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_ArtefactDependency_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactDependency_ArtefactDependencyTemplate (OID = 22857) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_ArtefactDependency_ArtefactDependencyTemplate"
    FOREIGN KEY ("ArtefactDependencyTemplateID") REFERENCES "ArtefactDependencyTemplate"("ArtefactDependencyTemplateID");
--
-- Definition for index fk_ArtefactDepentefactStatusTypeTemplate (OID = 22862) :
--
ALTER TABLE ONLY "ArtefactDependencyStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactDepentefactStatusTypeTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "ArtefactStatusTypeTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber", "StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotificationConstructTemplate_NotificationConstructT (OID = 22867) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ArtefactNotificationConstructTemplate_NotificationConstructT"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotificationConstruct_NotificationConstruct (OID = 22872) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "fk_ArtefactNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_ArtefactNotificationTemplate_ArtefactTemplate (OID = 22877) :
--
ALTER TABLE ONLY "ArtefactNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ArtefactNotificationTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactNotification_Artefact (OID = 22882) :
--
ALTER TABLE ONLY "ArtefactNotificationConstruct"
    ADD CONSTRAINT "fk_ArtefactNotification_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactProductTemplate_ArtefactTemplate (OID = 22887) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "fk_ArtefactProductTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactProductTemplate_ProductTemplate (OID = 22892) :
--
ALTER TABLE ONLY "ArtefactProductTemplate"
    ADD CONSTRAINT "fk_ArtefactProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ArtefactProduct_Artefact (OID = 22897) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "fk_ArtefactProduct_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactProduct_Product (OID = 22902) :
--
ALTER TABLE ONLY "ArtefactProduct"
    ADD CONSTRAINT "fk_ArtefactProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ArtefactRoleTemplate_ArtefactTemplate (OID = 22907) :
--
ALTER TABLE ONLY "ArtefactRoleTemplate"
    ADD CONSTRAINT "fk_ArtefactRoleTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactRole_Artefact (OID = 22912) :
--
ALTER TABLE ONLY "ArtefactRole"
    ADD CONSTRAINT "fk_ArtefactRole_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactStatusTypeTemplate_ArtefactTemplate (OID = 22917) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactStatusTypeTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactStatusTypeTemplate_StatusTypeTemplate (OID = 22922) :
--
ALTER TABLE ONLY "ArtefactStatusTypeTemplate"
    ADD CONSTRAINT "fk_ArtefactStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ArtefactStatusType_Artefact (OID = 22927) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "fk_ArtefactStatusType_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactStatusType_StatusType (OID = 22932) :
--
ALTER TABLE ONLY "ArtefactStatusType"
    ADD CONSTRAINT "fk_ArtefactStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ArtefactSubscriptionTemplate_ArtefactTemplate (OID = 22937) :
--
ALTER TABLE ONLY "ArtefactSubscriptionTemplate"
    ADD CONSTRAINT "fk_ArtefactSubscriptionTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactSubscription_Artefact (OID = 22942) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "fk_ArtefactSubscription_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactSubscription_PlanSubscription (OID = 22947) :
--
ALTER TABLE ONLY "ArtefactSubscription"
    ADD CONSTRAINT "fk_ArtefactSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_ArtefactWorkflowTemplate_ArtefactTemplate (OID = 22952) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "fk_ArtefactWorkflowTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ArtefactWorkflowTemplate_WorkflowTemplate (OID = 22957) :
--
ALTER TABLE ONLY "ArtefactWorkflowTemplate"
    ADD CONSTRAINT "fk_ArtefactWorkflowTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_ArtefactWorkflow_Artefact (OID = 22962) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "fk_ArtefactWorkflow_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ArtefactWorkflow_Workflow (OID = 22967) :
--
ALTER TABLE ONLY "ArtefactWorkflow"
    ADD CONSTRAINT "fk_ArtefactWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Artefact_ArtefactTemplate (OID = 22972) :
--
ALTER TABLE ONLY "Artefact"
    ADD CONSTRAINT "fk_Artefact_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_Artefactlate_Artefact (OID = 22977) :
--
ALTER TABLE ONLY "ArtefactDependency"
    ADD CONSTRAINT "fk_Artefactlate_Artefact"
    FOREIGN KEY ("DependencyArtefactID", "DependencyArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_Artefactlate_ArtefactTemplate (OID = 22982) :
--
ALTER TABLE ONLY "ArtefactDependencyTemplate"
    ADD CONSTRAINT "fk_Artefactlate_ArtefactTemplate"
    FOREIGN KEY ("DependencyArtefactTemplateID", "DependencyArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_AttachmenDetailRole_OrganisationRole (OID = 22987) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "fk_AttachmenDetailRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_AttachmentDetailGroup_AttachmentDetail (OID = 22992) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "fk_AttachmentDetailGroup_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_AttachmentDetailGroup_OrganisationGroup (OID = 22997) :
--
ALTER TABLE ONLY "AttachmentDetailGroup"
    ADD CONSTRAINT "fk_AttachmentDetailGroup_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_AttachmentDetail_Organisation (OID = 23002) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "fk_AttachmentDetail_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_AttachmentDetail_RepositoryStructure (OID = 23007) :
--
ALTER TABLE ONLY "AttachmentDetail"
    ADD CONSTRAINT "fk_AttachmentDetail_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_AttachmentRole_AttachmentDetail (OID = 23012) :
--
ALTER TABLE ONLY "AttachmentDetailRole"
    ADD CONSTRAINT "fk_AttachmentRole_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_Attachment_AttachmentDetail (OID = 23017) :
--
ALTER TABLE ONLY "Attachment"
    ADD CONSTRAINT "fk_Attachment_AttachmentDetail"
    FOREIGN KEY ("AttachmentDetailID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_Billing_BillingTemplate (OID = 23022) :
--
ALTER TABLE ONLY "Billing"
    ADD CONSTRAINT "fk_Billing_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_BusMessageContent_BusMessage (OID = 23027) :
--
ALTER TABLE ONLY "BusMessageContent"
    ADD CONSTRAINT "fk_BusMessageContent_BusMessage"
    FOREIGN KEY ("BusMessageID") REFERENCES "BusMessage"("BusMessageID");
--
-- Definition for index fk_BusMessageProcessLog_StatusType (OID = 23032) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_BusMessageProcessLog_StatusTypeValue (OID = 23037) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_BusMessageStatus_BusMessage (OID = 23042) :
--
ALTER TABLE ONLY "BusMessageProcessLog"
    ADD CONSTRAINT "fk_BusMessageStatus_BusMessage"
    FOREIGN KEY ("BusMessageID") REFERENCES "BusMessage"("BusMessageID");
--
-- Definition for index fk_BusTaskProcessLog_BusTaskSchedule (OID = 23047) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskProcessLog_BusTaskSchedule"
    FOREIGN KEY ("BusTaskScheduleID") REFERENCES "BusTaskSchedule"("BusTaskScheduleID");
--
-- Definition for index fk_BusTaskScheduleProcessLog_StatusType (OID = 23052) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskScheduleProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_BusTaskScheduleProcessLog_StatusTypeValue (OID = 23057) :
--
ALTER TABLE ONLY "BusTaskScheduleProcessLog"
    ADD CONSTRAINT "fk_BusTaskScheduleProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_BusTaskSchedule_BusTask (OID = 23062) :
--
ALTER TABLE ONLY "BusTaskSchedule"
    ADD CONSTRAINT "fk_BusTaskSchedule_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_BusTask_BusTaskHandler (OID = 23067) :
--
ALTER TABLE ONLY "BusTask"
    ADD CONSTRAINT "fk_BusTask_BusTaskHandler"
    FOREIGN KEY ("BusTaskHandlerID") REFERENCES "BusTaskHandler"("BusTaskHandlerID");
--
-- Definition for index fk_ClaimTarget_Operation (OID = 23072) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ClaimTarget_OrganisationType (OID = 23077) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ClaimTarget_Resource (OID = 23082) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ClaimTarget_UserType (OID = 23087) :
--
ALTER TABLE ONLY "ResourceOperationTarget"
    ADD CONSTRAINT "fk_ClaimTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ClassificationTypeCategory_ClassificationTypeCategoryID (OID = 23092) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_ClassificationTypeCategory_ClassificationTypeCategoryID"
    FOREIGN KEY ("UserAccountArchiveCategoryID") REFERENCES "ClassificationTypeCategory"("ClassificationTypeCategoryID");
--
-- Definition for index fk_ClassificationType_ClassificationTypeID (OID = 23097) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_ClassificationType_ClassificationTypeID"
    FOREIGN KEY ("UserAccountArchiveTypeID") REFERENCES "ClassificationType"("ClassificationTypeID");
--
-- Definition for index fk_ComponentTier_OrganisationType (OID = 23102) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "fk_ComponentTier_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ComponentTier_OrganisationType (OID = 23107) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "fk_ComponentTier_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_ComponentTier_UserType (OID = 23112) :
--
ALTER TABLE ONLY "ComponentTierTemplate"
    ADD CONSTRAINT "fk_ComponentTier_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ComponentTier_UserType (OID = 23117) :
--
ALTER TABLE ONLY "ComponentTier"
    ADD CONSTRAINT "fk_ComponentTier_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_ContactName_Contact (OID = 23122) :
--
ALTER TABLE ONLY "ContactName"
    ADD CONSTRAINT "fk_ContactName_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactOrganisationRegulator_Contact (OID = 23127) :
--
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "fk_ContactOrganisationRegulator_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactPhone_Contact (OID = 23132) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "fk_ContactPhone_Contact"
    FOREIGN KEY ("ContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_ContactPhone_CountryCode (OID = 23137) :
--
ALTER TABLE ONLY "ContactPhone"
    ADD CONSTRAINT "fk_ContactPhone_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryCode_CurrencyCode (OID = 23142) :
--
ALTER TABLE ONLY "CountryCode"
    ADD CONSTRAINT "fk_CountryCode_CurrencyCode"
    FOREIGN KEY ("CurrencyCode") REFERENCES "CurrencyCode"("CurrencyCode");
--
-- Definition for index fk_CountryDeductionTemplate_CountryCode (OID = 23147) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "fk_CountryDeductionTemplate_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryDeductionTemplate_DeductionTemplate (OID = 23152) :
--
ALTER TABLE ONLY "CountryDeductionTemplate"
    ADD CONSTRAINT "fk_CountryDeductionTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_CountryDeduction_CountryCode (OID = 23157) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "fk_CountryDeduction_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_CountryDeduction_Deduction (OID = 23162) :
--
ALTER TABLE ONLY "CountryDeduction"
    ADD CONSTRAINT "fk_CountryDeduction_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionComponentTierTemplate_ComponentTierTemplate (OID = 23167) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "fk_DeductionComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_DeductionComponentTierTemplate_DeductionTemplate (OID = 23172) :
--
ALTER TABLE ONLY "DeductionComponentTierTemplate"
    ADD CONSTRAINT "fk_DeductionComponentTierTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_DeductionComponentTier_ComponentTier (OID = 23177) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "fk_DeductionComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_DeductionComponentTier_Deduction (OID = 23182) :
--
ALTER TABLE ONLY "DeductionComponentTier"
    ADD CONSTRAINT "fk_DeductionComponentTier_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionProductTemplate_DeductionTemplate (OID = 23187) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "fk_DeductionProductTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_DeductionProductTemplate_ProductTemplate (OID = 23192) :
--
ALTER TABLE ONLY "DeductionProductTemplate"
    ADD CONSTRAINT "fk_DeductionProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DeductionProduct_Deduction (OID = 23197) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "fk_DeductionProduct_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_DeductionProduct_Product (OID = 23202) :
--
ALTER TABLE ONLY "DeductionProduct"
    ADD CONSTRAINT "fk_DeductionProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DeductionTemplate_OrganisationType (OID = 23207) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "fk_DeductionTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DeductionTemplate_UserType (OID = 23212) :
--
ALTER TABLE ONLY "DeductionTemplate"
    ADD CONSTRAINT "fk_DeductionTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_Deduction_DeductionTemplate (OID = 23217) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_Deduction_OrganisationType (OID = 23222) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_Deduction_UserType (OID = 23227) :
--
ALTER TABLE ONLY "Deduction"
    ADD CONSTRAINT "fk_Deduction_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationArtefact_Artefact (OID = 23232) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_ArtefactT (OID = 23237) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_ArtefactT"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_DefaultOrganisation (OID = 23242) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefact"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationArtefact_DefaultOrganisationT (OID = 23247) :
--
ALTER TABLE ONLY "DefaultOrganisationArtefactTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationArtefact_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBranch_DefaultOrganisation (OID = 23252) :
--
ALTER TABLE ONLY "DefaultOrganisationBranch"
    ADD CONSTRAINT "fk_DefaultOrganisationBranch_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBranch_DefaultOrganisationT (OID = 23257) :
--
ALTER TABLE ONLY "DefaultOrganisationBranchTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBranch_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBucket_BucketTemplate (OID = 23262) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_BucketTemplate"
    FOREIGN KEY ("BucketTemplateID") REFERENCES "BucketTemplate"("BucketTemplateID");
--
-- Definition for index fk_DefaultOrganisationBucket_BucketTemplateT (OID = 23267) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_BucketTemplateT"
    FOREIGN KEY ("BucketTemplateID") REFERENCES "BucketTemplate"("BucketTemplateID");
--
-- Definition for index fk_DefaultOrganisationBucket_DefaultOrganisation (OID = 23272) :
--
ALTER TABLE ONLY "DefaultOrganisationBucket"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationBucket_DefaultOrganisationT (OID = 23277) :
--
ALTER TABLE ONLY "DefaultOrganisationBucketTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationBucket_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationGr (OID = 23282) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationGr"
    FOREIGN KEY ("DefaultOrganisationGroupTemplateID") REFERENCES "DefaultOrganisationGroupTemplate"("DefaultOrganisationGroupTemplateID");
--
-- Definition for index fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationUs (OID = 23287) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTargetTemplate_DefaultOrganisationUs"
    FOREIGN KEY ("DefaultOrganisationUserTargetTemplateID") REFERENCES "DefaultOrganisationUserTargetTemplate"("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index fk_DefaultOrganisationGroupTarget_DefaultOrganisationGroup (OID = 23292) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTarget_DefaultOrganisationGroup"
    FOREIGN KEY ("DefaultOrganisationGroupID") REFERENCES "DefaultOrganisationGroup"("DefaultOrganisationGroupID");
--
-- Definition for index fk_DefaultOrganisationGroupTarget_DefaultOrganisationUserTarget (OID = 23297) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationGroupTarget_DefaultOrganisationUserTarget"
    FOREIGN KEY ("DefaultOrganisationUserTargetID") REFERENCES "DefaultOrganisationUserTarget"("DefaultOrganisationUserTargetID");
--
-- Definition for index fk_DefaultOrganisationGroup_DefaultOrganisation (OID = 23302) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroup_DefaultOrganisationT (OID = 23307) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationGroup_Group (OID = 23312) :
--
ALTER TABLE ONLY "DefaultOrganisationGroup"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_Group"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index fk_DefaultOrganisationGroup_GroupT (OID = 23317) :
--
ALTER TABLE ONLY "DefaultOrganisationGroupTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationGroup_GroupT"
    FOREIGN KEY ("GroupID") REFERENCES "Group"("GroupID");
--
-- Definition for index fk_DefaultOrganisationLedgerTemplate_DefaultOrganisationTemplat (OID = 23322) :
--
ALTER TABLE ONLY "DefaultOrganisationLedgerTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationLedgerTemplate_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationLedger_DefaultOrganisationTemplat (OID = 23327) :
--
ALTER TABLE ONLY "DefaultOrganisationLedger"
    ADD CONSTRAINT "fk_DefaultOrganisationLedger_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_DefaulanisationT (OID = 23332) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_DefaulanisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_DefaultOrganisation (OID = 23337) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_Module (OID = 23342) :
--
ALTER TABLE ONLY "DefaultOrganisationModule"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_DefaultOrganisationModule_ModuleT (OID = 23347) :
--
ALTER TABLE ONLY "DefaultOrganisationModuleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationModule_ModuleT"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstructTemplate_Notificatio (OID = 23352) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstructTemplate_Notificatio"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstruct_DefaultOrganisation (OID = 23357) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstruct_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationNotificationConstruct_NotificationConstru (OID = 23362) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstruct"
    ADD CONSTRAINT "fk_DefaultOrganisationNotificationConstruct_NotificationConstru"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethodTemplate_DefaultOrganisation (OID = 23367) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethodTemplate_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethodTemplate_GlobalPaymentMethod (OID = 23372) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethodTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethodTemplate_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_DefaultOrganisationPaymentMethod_DefaultOrganisation (OID = 23377) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethod_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationPaymentMethod_GlobalPaymentMethod (OID = 23382) :
--
ALTER TABLE ONLY "DefaultOrganisationPaymentMethod"
    ADD CONSTRAINT "fk_DefaultOrganisationPaymentMethod_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_DefaultOrganisationProductTemplate_DefaultOrganisationTempla (OID = 23387) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationProductTemplate_DefaultOrganisationTempla"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationProductTemplate_ProductTemplate (OID = 23392) :
--
ALTER TABLE ONLY "DefaultOrganisationProductTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DefaultOrganisationProduct_DefaultOrganisation (OID = 23397) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "fk_DefaultOrganisationProduct_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationProduct_Product (OID = 23402) :
--
ALTER TABLE ONLY "DefaultOrganisationProduct"
    ADD CONSTRAINT "fk_DefaultOrganisationProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_DefaultOrganisationRole (OID = 23407) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_DefaultOrganisationRole"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_DefaultOrganisationRoleT (OID = 23412) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_DefaultOrganisationRoleT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_Operation (OID = 23417) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_OperationT (OID = 23422) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_OperationT"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_Resource (OID = 23427) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_ResourceT (OID = 23432) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_ResourceT"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_State (OID = 23437) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateItem (OID = 23442) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaim"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateItemT (OID = 23447) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateItemT"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_DefaultOrganisationRoleClaim_StateT (OID = 23452) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleClaimTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleClaim_StateT"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_DefaultOrganisationRoleTargetTemplate_DefaultOrganisationUse (OID = 23457) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTargetTemplate_DefaultOrganisationUse"
    FOREIGN KEY ("DefaultOrganisationUserTargetTemplateID") REFERENCES "DefaultOrganisationUserTargetTemplate"("DefaultOrganisationUserTargetTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisation (OID = 23462) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationRoleID") REFERENCES "DefaultOrganisationRole"("DefaultOrganisationRoleID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisationT (OID = 23467) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationRoleTemplateID") REFERENCES "DefaultOrganisationRoleTemplate"("DefaultOrganisationRoleTemplateID");
--
-- Definition for index fk_DefaultOrganisationRoleTarget_DefaultOrganisationUserTarget (OID = 23472) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationRoleTarget_DefaultOrganisationUserTarget"
    FOREIGN KEY ("DefaultOrganisationUserTargetID") REFERENCES "DefaultOrganisationUserTarget"("DefaultOrganisationUserTargetID");
--
-- Definition for index fk_DefaultOrganisationRole_DefaultOrganisation (OID = 23477) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationRole_DefaultOrganisationT (OID = 23482) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationRole_Role (OID = 23487) :
--
ALTER TABLE ONLY "DefaultOrganisationRole"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_DefaultOrganisationRole_RoleT (OID = 23492) :
--
ALTER TABLE ONLY "DefaultOrganisationRoleTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationRole_RoleT"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProductTemplate_DefaultOrgani (OID = 23497) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProductTemplate_DefaultOrgani"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProductTemplate_ShoppingCartP (OID = 23502) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprintTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProductTemplate_ShoppingCartP"
    FOREIGN KEY ("ShoppingCartBlueprintTemplateID") REFERENCES "ShoppingCartBlueprintTemplate"("ShoppingCartBlueprintTemplateID");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProduct_DefaultOrgani (OID = 23507) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProduct_DefaultOrgani"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationShoppingCartProduct_ShoppingCartP (OID = 23512) :
--
ALTER TABLE ONLY "DefaultOrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_DefaultOrganisationShoppingCartProduct_ShoppingCartP"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_DefaultOrganisationStatusTypeTemplate_DefaultOrganisationTem (OID = 23517) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusTypeTemplate_DefaultOrganisationTem"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusTypeTemplate_StatusTypeValueTemplat (OID = 23522) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusTypeTemplate_StatusTypeValueTemplat"
    FOREIGN KEY ("DefaultStatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_DefaultOrganisationStatusType_DefaultOrganisation (OID = 23527) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusType (OID = 23532) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusTypeT (OID = 23537) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusTypeT"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationStatusType_StatusTypeValue (OID = 23542) :
--
ALTER TABLE ONLY "DefaultOrganisationStatusType"
    ADD CONSTRAINT "fk_DefaultOrganisationStatusType_StatusTypeValue"
    FOREIGN KEY ("DefaultStatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_DefaultOrganisationStatusT (OID = 23547) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_DefaultOrganisationStatusT"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationStatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_DefaultOrganisationTemplat (OID = 23552) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_DefaultOrganisationTemplat"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTargetTemplate_OrganisationType (OID = 23557) :
--
ALTER TABLE ONLY "DefaultOrganisationTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTargetTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationTarget_DefaultOrganisation (OID = 23562) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTarget_DefaultOrganisationStatusType (OID = 23567) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_DefaultOrganisationStatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisationStatusType"("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationTarget_OrganisationType (OID = 23572) :
--
ALTER TABLE ONLY "DefaultOrganisationTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationTemplate_OrganisationType (OID = 23577) :
--
ALTER TABLE ONLY "DefaultOrganisationTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationSta (OID = 23582) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationSta"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationStatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber", "DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationTem (OID = 23587) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_DefaultOrganisationTem"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTargetTemplate_UserType (OID = 23592) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTargetTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTargetTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTarget_DefaultOrganisation (OID = 23597) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTarget_DefaultOrganisationStatusType (OID = 23602) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_DefaultOrganisationStatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisationStatusType"("StatusTypeID", "StatusTypeVersionNumber", "DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTarget_UserType (OID = 23607) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTarget"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserTypeTemplate_DefaultOrganisationTempl (OID = 23612) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTypeTemplate_DefaultOrganisationTempl"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserTypeTemplate_UserType (OID = 23617) :
--
ALTER TABLE ONLY "DefaultOrganisationUserTypeTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationUserTypeTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationUserType_DefaultOrganisation (OID = 23622) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "fk_DefaultOrganisationUserType_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationUserType_UserType (OID = 23627) :
--
ALTER TABLE ONLY "DefaultOrganisationUserType"
    ADD CONSTRAINT "fk_DefaultOrganisationUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_DefaultOrganisationWorkflow_DefaultOrganisation (OID = 23632) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflow_Workflow (OID = 23637) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflow"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflow_WorkflowT (OID = 23642) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflow_WorkflowT"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisationWorkflows_DefaultOrganisation (OID = 23647) :
--
ALTER TABLE ONLY "DefaultOrganisationWorkflowTemplate"
    ADD CONSTRAINT "fk_DefaultOrganisationWorkflows_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisation_DefaultOrganisationTemplate (OID = 23652) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "fk_DefaultOrganisation_DefaultOrganisationTemplate"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DefaultOrganisation_OrganisationType (OID = 23657) :
--
ALTER TABLE ONLY "DefaultOrganisation"
    ADD CONSTRAINT "fk_DefaultOrganisation_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DefaultOrgationNotificationConstruct_DefaultOrganisationT (OID = 23662) :
--
ALTER TABLE ONLY "DefaultOrganisationNotificationConstructTemplate"
    ADD CONSTRAINT "fk_DefaultOrgationNotificationConstruct_DefaultOrganisationT"
    FOREIGN KEY ("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber") REFERENCES "DefaultOrganisationTemplate"("DefaultOrganisationTemplateID", "DefaultOrganisationTemplateVersionNumber");
--
-- Definition for index fk_DirectDebitMandate_DirectDebitMandateTemplate (OID = 23667) :
--
ALTER TABLE ONLY "DirectDebitMandate"
    ADD CONSTRAINT "fk_DirectDebitMandate_DirectDebitMandateTemplate"
    FOREIGN KEY ("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber") REFERENCES "DirectDebitMandateTemplate"("DirectDebitMandateTemplateID", "DirectDebitMandateTemplateVersionNumber");
--
-- Definition for index fk_DiscountComponentTierTemplate_ComponentTierTemplate (OID = 23672) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "fk_DiscountComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_DiscountComponentTierTemplate_DiscountTemplate (OID = 23677) :
--
ALTER TABLE ONLY "DiscountComponentTierTemplate"
    ADD CONSTRAINT "fk_DiscountComponentTierTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_DiscountComponentTier_ComponentTier (OID = 23682) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "fk_DiscountComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_DiscountComponentTier_Discount (OID = 23687) :
--
ALTER TABLE ONLY "DiscountComponentTier"
    ADD CONSTRAINT "fk_DiscountComponentTier_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_DiscountRelatedProductTemplate_DiscountTemplate (OID = 23692) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "fk_DiscountRelatedProductTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_DiscountRelatedProductTemplate_ProductTemplate (OID = 23697) :
--
ALTER TABLE ONLY "DiscountRelatedProductTemplate"
    ADD CONSTRAINT "fk_DiscountRelatedProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_DiscountRelatedProduct_Discount (OID = 23702) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "fk_DiscountRelatedProduct_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_DiscountRelatedProduct_Product (OID = 23707) :
--
ALTER TABLE ONLY "DiscountRelatedProduct"
    ADD CONSTRAINT "fk_DiscountRelatedProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_DiscountTemplate_OrganisationType (OID = 23712) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "fk_DiscountTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_DiscountTemplate_UserType (OID = 23717) :
--
ALTER TABLE ONLY "DiscountTemplate"
    ADD CONSTRAINT "fk_DiscountTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_Discount_Organisation (OID = 23722) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_Organisation"
    FOREIGN KEY ("OwnerOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Discount_OrganisationType (OID = 23727) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_Discount_UserType (OID = 23732) :
--
ALTER TABLE ONLY "Discount"
    ADD CONSTRAINT "fk_Discount_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_FieldDetail_FieldDetailTemplate (OID = 23737) :
--
ALTER TABLE ONLY "FieldDetail"
    ADD CONSTRAINT "fk_FieldDetail_FieldDetailTemplate"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_GlobalPaymentMethod_DirectDebitMandate (OID = 23742) :
--
ALTER TABLE ONLY "GlobalPaymentMethod"
    ADD CONSTRAINT "fk_GlobalPaymentMethod_DirectDebitMandate"
    FOREIGN KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber") REFERENCES "DirectDebitMandate"("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index fk_Group_Organisation (OID = 23747) :
--
ALTER TABLE ONLY "OrganisationGroup"
    ADD CONSTRAINT "fk_Group_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_InterfacePaUserTypeUserTypeypeTemplate_OrganisationType (OID = 23752) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePaUserTypeUserTypeypeTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePaUserTypeUserTypeype_OrganisationType (OID = 23757) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePaUserTypeUserTypeype_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelClaim1_Role (OID = 23762) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelClaim1_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_InterfacePanelClaimTemplate1_Role (OID = 23767) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelClaimTemplate1_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_InterfacePanelClaimTemplate_InterfacePanelRoleTemplate (OID = 23772) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelClaimTemplate_InterfacePanelRoleTemplate"
    FOREIGN KEY ("InterfacePanelRoleTemplateID") REFERENCES "InterfacePanelRoleTemplate"("InterfacePanelRoleTemplateID");
--
-- Definition for index fk_InterfacePanelClaim_InterfacePanelRole (OID = 23777) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelClaim_InterfacePanelRole"
    FOREIGN KEY ("InterfacePanelRoleID") REFERENCES "InterfacePanelRole"("InterfacePanelRoleID");
--
-- Definition for index fk_InterfacePanelFieldDetail132ganaisationTypeTemplate_FieldDet (OID = 23782) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail132ganaisationTypeTemplate_FieldDet"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetail132ganaisationType_FieldDeta (OID = 23787) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail132ganaisationType_FieldDeta"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetail312naisationTypeTemplate_Organisat (OID = 23792) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail312naisationTypeTemplate_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetail312naisationType_Organisat (OID = 23797) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetail312naisationType_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOr31sationTypeTemplate_Interface (OID = 23802) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOr31sationTypeTemplate_Interface"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOr31sationType_Interface (OID = 23807) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOr31sationType_Interface"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganai123123ate_Organisat (OID = 23812) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganai123123ate_Organisat"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganai123123ate_Organisat (OID = 23817) :
--
ALTER TABLE ONLY "InterfacePanelFDOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganai123123ate_Organisat"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_FieldDeta (OID = 23822) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_FieldDeta"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Interface (OID = 23827) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Interface"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Organisat (OID = 23832) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationTypeTemplate_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_FieldDeta (OID = 23837) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_FieldDeta"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_Interface (OID = 23842) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_Interface"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailOrganaisationType_Organisat (OID = 23847) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailOrganaisationType_Organisat"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelFieldDetailSettingTemplate_FieldDetailTemplate (OID = 23852) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSettingTemplate_FieldDetailTemplate"
    FOREIGN KEY ("FieldDetailTemplateID") REFERENCES "FieldDetailTemplate"("FieldDetailTemplateID");
--
-- Definition for index fk_InterfacePanelFieldDetailSettingTemplate_InterfacePanelTempl (OID = 23857) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetailTemplate"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSettingTemplate_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelFieldDetailSetting_FieldDetail (OID = 23862) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSetting_FieldDetail"
    FOREIGN KEY ("FieldDetailID") REFERENCES "FieldDetail"("FieldDetailID");
--
-- Definition for index fk_InterfacePanelFieldDetailSetting_InterfacePanelTempl (OID = 23867) :
--
ALTER TABLE ONLY "InterfacePanelFieldDetail"
    ADD CONSTRAINT "fk_InterfacePanelFieldDetailSetting_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrUserTypeTemplate_OrganisationType (OID = 23872) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrUserTypeTemplate_OrganisationType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelOrUserType_OrganisationType (OID = 23877) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelOrUserType_OrganisationType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_InterfacePanelOrgaUserTypeonTypeTemplate_InterfacePanelTempl (OID = 23882) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrgaUserTypeonTypeTemplate_InterfacePanelTempl"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelOrgaUserTypeonType_InterfacePanelTemplat (OID = 23887) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeUserType"
    ADD CONSTRAINT "fk_InterfacePanelOrgaUserTypeonType_InterfacePanelTemplat"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationTypeTemplate_InterfacePanelTemplat (OID = 23892) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationTypeTemplate_InterfacePanelTemplat"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationTypeTemplate_OrganisationType (OID = 23897) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationTypeTemplate"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationTypeTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelOrganisationType_InterfacePanel (OID = 23902) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationType_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelOrganisationType_OrganisationType (OID = 23907) :
--
ALTER TABLE ONLY "InterfacePanelOrganisationType"
    ADD CONSTRAINT "fk_InterfacePanelOrganisationType_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_InterfacePanelTemplate (OID = 23912) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_Operation (OID = 23917) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_Resource (OID = 23922) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_State (OID = 23927) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_InterfacePanelRoleClaimTemplate_StateItem (OID = 23932) :
--
ALTER TABLE ONLY "InterfacePanelClaimTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_InterfacePanelRoleClaim_InterfacePanel (OID = 23937) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelRoleClaim_Operation (OID = 23942) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_InterfacePanelRoleClaim_Resource (OID = 23947) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_InterfacePanelRoleClaim_State (OID = 23952) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_InterfacePanelRoleClaim_StateItem (OID = 23957) :
--
ALTER TABLE ONLY "InterfacePanelClaim"
    ADD CONSTRAINT "fk_InterfacePanelRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_InterfacePanelRoleTemplate_InterfacePanelTemplate (OID = 23962) :
--
ALTER TABLE ONLY "InterfacePanelRoleTemplate"
    ADD CONSTRAINT "fk_InterfacePanelRoleTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelRole_InterfacePanel (OID = 23967) :
--
ALTER TABLE ONLY "InterfacePanelRole"
    ADD CONSTRAINT "fk_InterfacePanelRole_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelSettingTemplate_InterfacePanelTemplate (OID = 23972) :
--
ALTER TABLE ONLY "InterfacePanelSettingTemplate"
    ADD CONSTRAINT "fk_InterfacePanelSettingTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanelSetting_InterfacePanel (OID = 23977) :
--
ALTER TABLE ONLY "InterfacePanelSetting"
    ADD CONSTRAINT "fk_InterfacePanelSetting_InterfacePanel"
    FOREIGN KEY ("InterfacePanelID", "InterfacePanelVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanelTemplate_InterfacePanelTemplate (OID = 23982) :
--
ALTER TABLE ONLY "InterfacePanelTemplate"
    ADD CONSTRAINT "fk_InterfacePanelTemplate_InterfacePanelTemplate"
    FOREIGN KEY ("ParentIPTemplateID", "ParentIPTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InterfacePanel_InterfacePanel (OID = 23987) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "fk_InterfacePanel_InterfacePanel"
    FOREIGN KEY ("ParentIPID", "ParentIPVersionNumber") REFERENCES "InterfacePanel"("InterfacePanelID", "InterfacePanelVersionNumber");
--
-- Definition for index fk_InterfacePanel_InterfacePanelTemplate (OID = 23992) :
--
ALTER TABLE ONLY "InterfacePanel"
    ADD CONSTRAINT "fk_InterfacePanel_InterfacePanelTemplate"
    FOREIGN KEY ("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber") REFERENCES "InterfacePanelTemplate"("InterfacePanelTemplateID", "InterfacePanelTemplateVersionNumber");
--
-- Definition for index fk_InvoiceLineItem_Account (OID = 23997) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Account"
    FOREIGN KEY ("AccountID") REFERENCES "Account"("AccountID");
--
-- Definition for index fk_InvoiceLineItem_CountryCode (OID = 24002) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_InvoiceLineItem_Invoice (OID = 24007) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_InvoiceLineItem_PlanSubscriptionPeriod (OID = 24012) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_PlanSubscriptionPeriod"
    FOREIGN KEY ("PlanSubscriptionPeriodID") REFERENCES "PlanSubscriptionPeriod"("PlanSubscriptionPeriodID");
--
-- Definition for index fk_InvoiceLineItem_Product (OID = 24017) :
--
ALTER TABLE ONLY "InvoiceLineItem"
    ADD CONSTRAINT "fk_InvoiceLineItem_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_InvoiceLog_Invoice (OID = 24022) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceLog_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_InvoiceLog_Notification (OID = 24027) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceLog_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_InvoiceProcessLog_StatusType (OID = 24032) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_InvoiceProcessLog_StatusTypeValue (OID = 24037) :
--
ALTER TABLE ONLY "InvoiceProcessLog"
    ADD CONSTRAINT "fk_InvoiceProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_Invoice_CountryCode (OID = 24042) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_Invoice_Organisation (OID = 24047) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Invoice_OrganisationAccountingPeriod (OID = 24052) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_OrganisationAccountingPeriod"
    FOREIGN KEY ("OrganisationAccountingPeriodID", "OrganisationID") REFERENCES "OrganisationAccountingPeriod"("OrganisationAccountingPeriodID", "OrganisationID");
--
-- Definition for index fk_Invoice_ShoppingCart (OID = 24057) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_ShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_Invoice_UserAccountOrganisation (OID = 24062) :
--
ALTER TABLE ONLY "Invoice"
    ADD CONSTRAINT "fk_Invoice_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_LedgerAccountBalance_LedgerAccount (OID = 24067) :
--
ALTER TABLE ONLY "LedgerAccountBalance"
    ADD CONSTRAINT "fk_LedgerAccountBalance_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_LedgerAccountTransaction_LedgerAccount (OID = 24072) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "fk_LedgerAccountTransaction_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_LedgerAccountTransaction_TransactionOrder (OID = 24077) :
--
ALTER TABLE ONLY "LedgerAccountTransaction"
    ADD CONSTRAINT "fk_LedgerAccountTransaction_TransactionOrder"
    FOREIGN KEY ("TransactionOrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_LedgerAccount_Organisation (OID = 24082) :
--
ALTER TABLE ONLY "OrganisationLedgerAccount"
    ADD CONSTRAINT "fk_LedgerAccount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_Module333Dependency_Module (OID = 24087) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "fk_Module333Dependency_Module"
    FOREIGN KEY ("DependencyID", "DependencyVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleArtefactTemplate_ArtefactTemplate (OID = 24092) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "fk_ModuleArtefactTemplate_ArtefactTemplate"
    FOREIGN KEY ("ArtefactTemplateID", "ArtefactTemplateVersionNumber") REFERENCES "ArtefactTemplate"("ArtefactTemplateID", "ArtefactTemplateVersionNumber");
--
-- Definition for index fk_ModuleArtefactTemplate_ModuleTemplate (OID = 24097) :
--
ALTER TABLE ONLY "ModuleArtefactTemplate"
    ADD CONSTRAINT "fk_ModuleArtefactTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleArtefact_Artefact (OID = 24102) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "fk_ModuleArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_ModuleArtefact_Module (OID = 24107) :
--
ALTER TABLE ONLY "ModuleArtefact"
    ADD CONSTRAINT "fk_ModuleArtefact_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleClaimTemplate_ModuleRoleTemplate (OID = 24112) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaimTemplate_ModuleRoleTemplate"
    FOREIGN KEY ("ModuleRoleID") REFERENCES "ModuleRoleTemplate"("RoleID");
--
-- Definition for index fk_ModuleClaimTemplate_Role (OID = 24117) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleClaim_ModuleRole (OID = 24122) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_ModuleClaim_ModuleRole"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleClaim_ModuleRole (OID = 24127) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleClaim_ModuleRole"
    FOREIGN KEY ("ModuleRoleID") REFERENCES "ModuleRole"("RoleID");
--
-- Definition for index fk_ModuleClaim_Role (OID = 24132) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ModuleDependencyTemplate_ModuleTemplate (OID = 24137) :
--
ALTER TABLE ONLY "ModuleDependencyTemplate"
    ADD CONSTRAINT "fk_ModuleDependencyTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleDependency_Module (OID = 24142) :
--
ALTER TABLE ONLY "ModuleDependency"
    ADD CONSTRAINT "fk_ModuleDependency_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstructTemplate_ModuleTemplate (OID = 24147) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ModuleNotificationConstructTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstructTemplate_NotificationConstructTem (OID = 24152) :
--
ALTER TABLE ONLY "ModuleNotificationConstructTemplate"
    ADD CONSTRAINT "fk_ModuleNotificationConstructTemplate_NotificationConstructTem"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstruct_Module (OID = 24157) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "fk_ModuleNotificationConstruct_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleNotificationConstruct_NotificationConstruct (OID = 24162) :
--
ALTER TABLE ONLY "ModuleNotificationConstruct"
    ADD CONSTRAINT "fk_ModuleNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_ModulePluginTemplate_ModuleTemplate (OID = 24167) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "fk_ModulePluginTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModulePluginTemplate_PluginTemplate (OID = 24172) :
--
ALTER TABLE ONLY "ModulePluginTemplate"
    ADD CONSTRAINT "fk_ModulePluginTemplate_PluginTemplate"
    FOREIGN KEY ("PluginTemplateID", "PluginVersionNumber") REFERENCES "PluginTemplate"("PluginTemplateID", "PluginTemplateVersionNumber");
--
-- Definition for index fk_ModulePlugin_Module (OID = 24177) :
--
ALTER TABLE ONLY "ModulePlugin"
    ADD CONSTRAINT "fk_ModulePlugin_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleProductTemplate_ModuleTemplate (OID = 24182) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "fk_ModuleProductTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleProductTemplate_ProductTemplate (OID = 24187) :
--
ALTER TABLE ONLY "ModuleProductTemplate"
    ADD CONSTRAINT "fk_ModuleProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ModuleProduct_Module (OID = 24192) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "fk_ModuleProduct_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleProduct_Product (OID = 24197) :
--
ALTER TABLE ONLY "ModuleProduct"
    ADD CONSTRAINT "fk_ModuleProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_ModuleTemplate (OID = 24202) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleRoleClaimTemplate_Operation (OID = 24207) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_Resource (OID = 24212) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_State (OID = 24217) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ModuleRoleClaimTemplate_StateItem (OID = 24222) :
--
ALTER TABLE ONLY "ModuleClaimTemplate"
    ADD CONSTRAINT "fk_ModuleRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ModuleRoleClaim_Module (OID = 24227) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleRoleClaim_Operation (OID = 24232) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ModuleRoleClaim_Resource (OID = 24237) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ModuleRoleClaim_State (OID = 24242) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ModuleRoleClaim_StateItem (OID = 24247) :
--
ALTER TABLE ONLY "ModuleClaim"
    ADD CONSTRAINT "fk_ModuleRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ModuleRoleTemplate_ModuleTemplate (OID = 24252) :
--
ALTER TABLE ONLY "ModuleRoleTemplate"
    ADD CONSTRAINT "fk_ModuleRoleTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSettingTemplate_ModuleTemplate (OID = 24257) :
--
ALTER TABLE ONLY "ModuleSettingTemplate"
    ADD CONSTRAINT "fk_ModuleSettingTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSetting_Module (OID = 24262) :
--
ALTER TABLE ONLY "ModuleSetting"
    ADD CONSTRAINT "fk_ModuleSetting_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleStatusTypeTemplate_ModuleTemplate (OID = 24267) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "fk_ModuleStatusTypeTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleStatusTypeTemplate_StatusTypeTemplate (OID = 24272) :
--
ALTER TABLE ONLY "ModuleStatusTypeTemplate"
    ADD CONSTRAINT "fk_ModuleStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_ModuleStatusType_Module (OID = 24277) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "fk_ModuleStatusType_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleStatusType_StatusType (OID = 24282) :
--
ALTER TABLE ONLY "ModuleStatusType"
    ADD CONSTRAINT "fk_ModuleStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ModuleSubscriptionTemplate_ModuleTemplate (OID = 24287) :
--
ALTER TABLE ONLY "ModuleSubscriptionTemplate"
    ADD CONSTRAINT "fk_ModuleSubscriptionTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleSubscription_Module (OID = 24292) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "fk_ModuleSubscription_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleSubscription_PlanSubscription (OID = 24297) :
--
ALTER TABLE ONLY "ModuleSubscription"
    ADD CONSTRAINT "fk_ModuleSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_ModuleWorkflowTarget_ModuleWorkflow (OID = 24302) :
--
ALTER TABLE ONLY "ModuleWorkflowTarget"
    ADD CONSTRAINT "fk_ModuleWorkflowTarget_ModuleWorkflow"
    FOREIGN KEY ("ModuleWorkflowID") REFERENCES "ModuleWorkflow"("ModuleWorkflowID");
--
-- Definition for index fk_ModuleWorkflowTarget_ModuleWorkflowTemplate (OID = 24307) :
--
ALTER TABLE ONLY "ModuleWorkflowTargetTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTarget_ModuleWorkflowTemplate"
    FOREIGN KEY ("ModuleWorkflowTemplateID") REFERENCES "ModuleWorkflowTemplate"("ModuleWorkflowTemplateID");
--
-- Definition for index fk_ModuleWorkflowTemplate_ModuleTemplate (OID = 24312) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTemplate_ModuleTemplate"
    FOREIGN KEY ("ModuleTemplateID", "ModuleTemplateVersionNumber") REFERENCES "ModuleTemplate"("ModuleTemplateID", "ModuleTemplateVersionNumber");
--
-- Definition for index fk_ModuleWorkflowTemplate_WorkflowTemplate (OID = 24317) :
--
ALTER TABLE ONLY "ModuleWorkflowTemplate"
    ADD CONSTRAINT "fk_ModuleWorkflowTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_ModuleWorkflow_Module (OID = 24322) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "fk_ModuleWorkflow_Module"
    FOREIGN KEY ("ModuleID", "ModuleVersionNumber") REFERENCES "Module"("ModuleID", "ModuleVersionNumber");
--
-- Definition for index fk_ModuleWorkflow_Workflow (OID = 24327) :
--
ALTER TABLE ONLY "ModuleWorkflow"
    ADD CONSTRAINT "fk_ModuleWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_NotificationConstificaoleTemplate (OID = 24332) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstificaoleTemplate"
    FOREIGN KEY ("NotificationConstructRoleID") REFERENCES "NotificationConstructRoleTemplate"("NotificationConstructRoleID");
--
-- Definition for index fk_NotificationConstructClaimTemplate_NotificationConstructTemp (OID = 24337) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructClaimTemplate_NotificationConstructTemp"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructClaim_NotificationConstruct (OID = 24342) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructClaim_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructClaim_Role (OID = 24347) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_NotificationConstructDataTemplate_NotificationConstructTempl (OID = 24352) :
--
ALTER TABLE ONLY "NotificationConstructDataTemplate"
    ADD CONSTRAINT "fk_NotificationConstructDataTemplate_NotificationConstructTempl"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructData_NotificationConstruct (OID = 24357) :
--
ALTER TABLE ONLY "NotificationConstructData"
    ADD CONSTRAINT "fk_NotificationConstructData_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructGroupNotificationConstructTemplate_Noti (OID = 24362) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstructTemplate"
    ADD CONSTRAINT "fk_NotificationConstructGroupNotificationConstructTemplate_Noti"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructGroupNotificationConstruct_Notification (OID = 24367) :
--
ALTER TABLE ONLY "NotificationConstructGroupNotificationConstruct"
    ADD CONSTRAINT "fk_NotificationConstructGroupNotificationConstruct_Notification"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructParameterTemplate_NotificationConstruct (OID = 24372) :
--
ALTER TABLE ONLY "NotificationConstructParameterTemplate"
    ADD CONSTRAINT "fk_NotificationConstructParameterTemplate_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructParameter_NotificationConstruct (OID = 24377) :
--
ALTER TABLE ONLY "NotificationConstructParameter"
    ADD CONSTRAINT "fk_NotificationConstructParameter_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_Operation (OID = 24382) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_Resource (OID = 24387) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_State (OID = 24392) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_NotificationConstructRoleClaimTemplate_StateItem (OID = 24397) :
--
ALTER TABLE ONLY "NotificationConstructClaimTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_NotificationConstructRoleClaim_NotificationConstructRole (OID = 24402) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_NotificationConstructRole"
    FOREIGN KEY ("NotificationRoleConstructID") REFERENCES "NotificationConstructRole"("NotificationRoleConstructID");
--
-- Definition for index fk_NotificationConstructRoleClaim_Operation (OID = 24407) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_NotificationConstructRoleClaim_Resource (OID = 24412) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_NotificationConstructRoleClaim_State (OID = 24417) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_NotificationConstructRoleClaim_StateItem (OID = 24422) :
--
ALTER TABLE ONLY "NotificationConstructClaim"
    ADD CONSTRAINT "fk_NotificationConstructRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_NotificationConstructRoleTemplate_NotificationConstructTempl (OID = 24427) :
--
ALTER TABLE ONLY "NotificationConstructRoleTemplate"
    ADD CONSTRAINT "fk_NotificationConstructRoleTemplate_NotificationConstructTempl"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructRole_NotificationConstruct (OID = 24432) :
--
ALTER TABLE ONLY "NotificationConstructRole"
    ADD CONSTRAINT "fk_NotificationConstructRole_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructTargetTemplate_NotificationConstructTem (OID = 24437) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_NotificationConstructTem"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationConstructTargetTemplate_OrganisationType (OID = 24442) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_NotificationConstructTargetTemplate_UserType (OID = 24447) :
--
ALTER TABLE ONLY "NotificationConstructTargetTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTargetTemplate_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_NotificationConstructTarget_NotificationConstruct (OID = 24452) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_NotificationConstructTarget_OrganisationType (OID = 24457) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_NotificationConstructTarget_UserType (OID = 24462) :
--
ALTER TABLE ONLY "NotificationConstructTarget"
    ADD CONSTRAINT "fk_NotificationConstructTarget_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_NotificationConstructTemplate_Organisation (OID = 24467) :
--
ALTER TABLE ONLY "NotificationConstructTemplate"
    ADD CONSTRAINT "fk_NotificationConstructTemplate_Organisation"
    FOREIGN KEY ("OwnerOrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_NotificationConstruct_NotificationConstructTemplate (OID = 24472) :
--
ALTER TABLE ONLY "NotificationConstruct"
    ADD CONSTRAINT "fk_NotificationConstruct_NotificationConstructTemplate"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_NotificationRecipientLog_NotificationRecipient (OID = 24477) :
--
ALTER TABLE ONLY "NotificationRecipientLog"
    ADD CONSTRAINT "fk_NotificationRecipientLog_NotificationRecipient"
    FOREIGN KEY ("NotificationRecipientID") REFERENCES "NotificationRecipient"("NotificationRecipientID");
--
-- Definition for index fk_NotificationRecipient_Notification (OID = 24482) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "fk_NotificationRecipient_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_NotificationRecipient_UserAccountOrganisation (OID = 24487) :
--
ALTER TABLE ONLY "NotificationRecipient"
    ADD CONSTRAINT "fk_NotificationRecipient_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_Notification_NotificationConstruct (OID = 24492) :
--
ALTER TABLE ONLY "Notification"
    ADD CONSTRAINT "fk_Notification_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_OrderItem_Order (OID = 24497) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "fk_OrderItem_Order"
    FOREIGN KEY ("OrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_OrganisationAccountingPeriod_GlobalAccountingPeriod (OID = 24502) :
--
ALTER TABLE ONLY "OrganisationAccountingPeriod"
    ADD CONSTRAINT "fk_OrganisationAccountingPeriod_GlobalAccountingPeriod"
    FOREIGN KEY ("GlobalAccountingPeriodID") REFERENCES "GlobalAccountingPeriod"("GlobalAccountingPeriodID");
--
-- Definition for index fk_OrganisationArtefact_Artefact (OID = 24507) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "fk_OrganisationArtefact_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES "Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_OrganisationArtefact_Organisation (OID = 24512) :
--
ALTER TABLE ONLY "OrganisationArtefact"
    ADD CONSTRAINT "fk_OrganisationArtefact_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationBankAccount_Organisation (OID = 24517) :
--
ALTER TABLE ONLY "OrganisationBankAccount"
    ADD CONSTRAINT "fk_OrganisationBankAccount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDetail_OrganisationDefaultLogo (OID = 24522) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "fk_OrganisationDetail_OrganisationDefaultLogo"
    FOREIGN KEY ("OrganisationDefaultLogoID") REFERENCES "AttachmentDetail"("AttachmentDetailID");
--
-- Definition for index fk_OrganisationDetail_Organisation_1 (OID = 24527) :
--
ALTER TABLE ONLY "OrganisationDetail"
    ADD CONSTRAINT "fk_OrganisationDetail_Organisation_1"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_NotificationRecipient (OID = 24532) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_NotificationRecipient"
    FOREIGN KEY ("NotificationRecipientID") REFERENCES "NotificationRecipient"("NotificationRecipientID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_OrganisationDirectDebi (OID = 24537) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_OrganisationDirectDebi"
    FOREIGN KEY ("OrganisationDirectDebitMandateID") REFERENCES "OrganisationDirectDebitMandate"("OrganisationDirectDebitMandateID");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_StatusType (OID = 24542) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationDirectDebitMandateSignoff_StatusTypeValue (OID = 24547) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandateProcessLog"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandateSignoff_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationDirectDebitMandate_DirectDebitMandate (OID = 24552) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_DirectDebitMandate"
    FOREIGN KEY ("DirectDebitMandateID", "DirectDebitMandateVersionNumber") REFERENCES "DirectDebitMandate"("DirectDebitMandateID", "DirectDebitMandateVersionNumber");
--
-- Definition for index fk_OrganisationDirectDebitMandate_Notification (OID = 24557) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_Notification"
    FOREIGN KEY ("NotificationID") REFERENCES "Notification"("NotificationID");
--
-- Definition for index fk_OrganisationDirectDebitMandate_Organisation (OID = 24562) :
--
ALTER TABLE ONLY "OrganisationDirectDebitMandate"
    ADD CONSTRAINT "fk_OrganisationDirectDebitMandate_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationDiscount_Discount (OID = 24567) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "fk_OrganisationDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_OrganisationDiscount_Organisation (OID = 24572) :
--
ALTER TABLE ONLY "OrganisationDiscount"
    ADD CONSTRAINT "fk_OrganisationDiscount_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationFinancialDetail_GlobalPaymentMethod (OID = 24577) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_OrganisationFinancialDetail_Organisation (OID = 24582) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationFinancialDetail_OrganisationBankAccount (OID = 24587) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_OrganisationBankAccount"
    FOREIGN KEY ("OrganisationBankAccountId") REFERENCES "OrganisationBankAccount"("OrganisationBankAccountId");
--
-- Definition for index fk_OrganisationFinancialDetail_StatusType (OID = 24592) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_StatusType"
    FOREIGN KEY ("FinancialStatusTypeID", "FinancialStatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationFinancialDetail_StatusTypeValue (OID = 24597) :
--
ALTER TABLE ONLY "OrganisationFinancialDetail"
    ADD CONSTRAINT "fk_OrganisationFinancialDetail_StatusTypeValue"
    FOREIGN KEY ("FinancialStatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationGroup (OID = 24602) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "fk_OrganisationGroupOrganisationRole_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_OrganisationGroupOrganisationRole_OrganisationRole (OID = 24607) :
--
ALTER TABLE ONLY "OrganisationGroupRole"
    ADD CONSTRAINT "fk_OrganisationGroupOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationInsuranceDetails_Organisation (OID = 24612) :
--
ALTER TABLE ONLY "OrganisationInsuranceDetails"
    ADD CONSTRAINT "fk_OrganisationInsuranceDetails_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationOfflinePaymentMethod_OrganisationDirectDebitMand (OID = 24617) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationOfflinePaymentMethod_OrganisationDirectDebitMand"
    FOREIGN KEY ("OrganisationDirectDebitMandateID") REFERENCES "OrganisationDirectDebitMandate"("OrganisationDirectDebitMandateID");
--
-- Definition for index fk_OrganisationPaymentMethod_StatusType (OID = 24622) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationPaymentMethod_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationPaymentMethod_StatusTypeValue (OID = 24627) :
--
ALTER TABLE ONLY "OrganisationPaymentMethod"
    ADD CONSTRAINT "fk_OrganisationPaymentMethod_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationPlanSubscription_Organisation (OID = 24632) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "fk_OrganisationPlanSubscription_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationPlanSubscription_PlanSubscription (OID = 24637) :
--
ALTER TABLE ONLY "OrganisationPlanSubscription"
    ADD CONSTRAINT "fk_OrganisationPlanSubscription_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_OrganisationProductPurchase_InvoiceLineItem (OID = 24642) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_OrganisationProductPurchase_Organisation (OID = 24647) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationProductPurchase_Product (OID = 24652) :
--
ALTER TABLE ONLY "OrganisationProductPurchase"
    ADD CONSTRAINT "fk_OrganisationProductPurchase_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_OrganisationRoleClaim_Operation (OID = 24657) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_OrganisationRoleClaim_Organisation (OID = 24662) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationRoleClaim_OrganisationRole (OID = 24667) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationRoleClaim_Resource (OID = 24672) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_OrganisationRoleClaim_State (OID = 24677) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_OrganisationRoleClaim_StateItem (OID = 24682) :
--
ALTER TABLE ONLY "OrganisationRoleClaim"
    ADD CONSTRAINT "fk_OrganisationRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_OrganisationSetting_Organisation (OID = 24687) :
--
ALTER TABLE ONLY "OrganisationSetting"
    ADD CONSTRAINT "fk_OrganisationSetting_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationShoppingCartBlueprint_Organisation (OID = 24692) :
--
ALTER TABLE ONLY "OrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_OrganisationShoppingCartBlueprint_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationShoppingCartBlueprint_ShoppingCartBlueprint (OID = 24697) :
--
ALTER TABLE ONLY "OrganisationShoppingCartBlueprint"
    ADD CONSTRAINT "fk_OrganisationShoppingCartBlueprint_ShoppingCartBlueprint"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_OrganisationStatusType_Organisation (OID = 24702) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "fk_OrganisationStatusType_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationStatusType_StatusType (OID = 24707) :
--
ALTER TABLE ONLY "OrganisationStatusType"
    ADD CONSTRAINT "fk_OrganisationStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationStatus_Organisation (OID = 24712) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationStatus_StatusType (OID = 24717) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_OrganisationStatus_StatusTypeValue (OID = 24722) :
--
ALTER TABLE ONLY "OrganisationStatus"
    ADD CONSTRAINT "fk_OrganisationStatus_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_OrganisationTaxRate_TaxRateTemplate (OID = 24727) :
--
ALTER TABLE ONLY "TaxRate"
    ADD CONSTRAINT "fk_OrganisationTaxRate_TaxRateTemplate"
    FOREIGN KEY ("TaxRateTemplateID") REFERENCES "TaxRateTemplate"("TaxRateTemplateID");
--
-- Definition for index fk_OrganisationTeamSetting_OrganisationTeam (OID = 24732) :
--
ALTER TABLE ONLY "OrganisationTeamSetting"
    ADD CONSTRAINT "fk_OrganisationTeamSetting_OrganisationTeam"
    FOREIGN KEY ("OrganisationTeamID") REFERENCES "OrganisationTeam"("OrganisationTeamID");
--
-- Definition for index fk_OrganisationTeam_Organisation (OID = 24737) :
--
ALTER TABLE ONLY "OrganisationTeam"
    ADD CONSTRAINT "fk_OrganisationTeam_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationTradingName_Organisation (OID = 24742) :
--
ALTER TABLE ONLY "OrganisationTradingName"
    ADD CONSTRAINT "fk_OrganisationTradingName_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationGroup (OID = 24747) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationGroup_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_OrganisationUnitOrganisationGroup_OrganisationUnit (OID = 24752) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationGroup"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationGroup_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationRole (OID = 24757) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_OrganisationUnitOrganisationRole_OrganisationUnit (OID = 24762) :
--
ALTER TABLE ONLY "OrganisationUnitOrganisationRole"
    ADD CONSTRAINT "fk_OrganisationUnitOrganisationRole_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_OrganisationUserType_Organisation (OID = 24767) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "fk_OrganisationUserType_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationUserType_UserType (OID = 24772) :
--
ALTER TABLE ONLY "OrganisationUserType"
    ADD CONSTRAINT "fk_OrganisationUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_OrganisationWorkflow_Organisation (OID = 24777) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "fk_OrganisationWorkflow_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_OrganisationWorkflow_Workflow (OID = 24782) :
--
ALTER TABLE ONLY "OrganisationWorkflow"
    ADD CONSTRAINT "fk_OrganisationWorkflow_Workflow"
    FOREIGN KEY ("WorkflowID", "VersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Organisation_Contact (OID = 24787) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_Contact"
    FOREIGN KEY ("PrimaryContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_Organisation_DefaultOrganisation (OID = 24792) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_DefaultOrganisation"
    FOREIGN KEY ("DefaultOrganisationID", "DefaultOrganisationVersionNumber") REFERENCES "DefaultOrganisation"("DefaultOrganisationID", "DefaultOrganisationVersionNumber");
--
-- Definition for index fk_Organisation_OrganisationType (OID = 24797) :
--
ALTER TABLE ONLY "Organisation"
    ADD CONSTRAINT "fk_Organisation_OrganisationType"
    FOREIGN KEY ("OrganisationTypeID") REFERENCES "OrganisationType"("OrganisationTypeID");
--
-- Definition for index fk_PackageProductRelationionship (OID = 24802) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprint"
    ADD CONSTRAINT "fk_PackageProductRelationionship"
    FOREIGN KEY ("PackageProductRelationshipID") REFERENCES "PackageProductRelationship"("PackageProductRelationshipID");
--
-- Definition for index fk_PackageProductRelationshipBlueprintTemplate_PackageProductRe (OID = 24807) :
--
ALTER TABLE ONLY "PackageProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipBlueprintTemplate_PackageProductRe"
    FOREIGN KEY ("PackageProductRelationshipTemplateID") REFERENCES "PackageProductRelationshipTemplate"("PackageProductRelationshipTemplateID");
--
-- Definition for index fk_PackageProductRelationshipTemplate_PackageProductTemplate (OID = 24812) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_PackageProductTemplate"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductRelationshipTemplate_ProductTemplate1 (OID = 24817) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_ProductTemplate1"
    FOREIGN KEY ("ParentProductTemplateID", "ParentProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationshipTemplate_ProductTemplate22 (OID = 24822) :
--
ALTER TABLE ONLY "PackageProductRelationshipTemplate"
    ADD CONSTRAINT "fk_PackageProductRelationshipTemplate_ProductTemplate22"
    FOREIGN KEY ("ChildProductTemplateID", "ChildProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationship_PackageProduct (OID = 24827) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProductRelationship_Product (OID = 24832) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_Product"
    FOREIGN KEY ("ParentProductID", "ParentProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageProductRelationship_ProductChild (OID = 24837) :
--
ALTER TABLE ONLY "PackageProductRelationship"
    ADD CONSTRAINT "fk_PackageProductRelationship_ProductChild"
    FOREIGN KEY ("ChildProductID", "ChildProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_PackageProductT (OID = 24842) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_PackageProductT"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_Prodlate (OID = 24847) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_Prodlate"
    FOREIGN KEY ("ProductSpecificationAttributeTemplate") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_PackageProductSpecificationBlueprintTemplate_Productlate (OID = 24852) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprintTemplate_Productlate"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionTemplateID") REFERENCES "ProductSpecificationAttributeOptionTemplate"("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_PackageProductSpecificationBlueprint_PackageProduct (OID = 24857) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprint_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProductSpecificationBlueprint_Pn (OID = 24862) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationBlueprint_Pn"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_PackageProductSpecificationute (OID = 24867) :
--
ALTER TABLE ONLY "PackageProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_PackageProductSpecificationute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_PackageProductTemplate_PackageTemplate (OID = 24872) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "fk_PackageProductTemplate_PackageTemplate"
    FOREIGN KEY ("PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageTemplate"("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_PackageProductTemplate_ProductTemplate (OID = 24877) :
--
ALTER TABLE ONLY "PackageProductTemplate"
    ADD CONSTRAINT "fk_PackageProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PackageProduct_Package (OID = 24882) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "fk_PackageProduct_Package"
    FOREIGN KEY ("PackageID", "PackageVersionNumber") REFERENCES "Package"("PackageID", "PackageVersionNumber");
--
-- Definition for index fk_PackageProduct_Product (OID = 24887) :
--
ALTER TABLE ONLY "PackageProduct"
    ADD CONSTRAINT "fk_PackageProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PackageTemplate_ProductTemplate (OID = 24892) :
--
ALTER TABLE ONLY "PackageTemplate"
    ADD CONSTRAINT "fk_PackageTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_Package_PackageTemplate (OID = 24897) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "fk_Package_PackageTemplate"
    FOREIGN KEY ("PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageTemplate"("PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_Package_Product (OID = 24902) :
--
ALTER TABLE ONLY "Package"
    ADD CONSTRAINT "fk_Package_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PlanBillingTemplate_BillingTemplate (OID = 24907) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "fk_PlanBillingTemplate_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_PlanBillingTemplate_PlanTemplate (OID = 24912) :
--
ALTER TABLE ONLY "PlanBillingTemplate"
    ADD CONSTRAINT "fk_PlanBillingTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanBilling_Billing (OID = 24917) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "fk_PlanBilling_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanBilling_Plan (OID = 24922) :
--
ALTER TABLE ONLY "PlanBilling"
    ADD CONSTRAINT "fk_PlanBilling_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanDiscountTemplate_DiscountTemplate (OID = 24927) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "fk_PlanDiscountTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_PlanDiscountTemplate_PlanTemplate (OID = 24932) :
--
ALTER TABLE ONLY "PlanDiscountTemplate"
    ADD CONSTRAINT "fk_PlanDiscountTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanDiscount_Discount (OID = 24937) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "fk_PlanDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_PlanDiscount_Plan (OID = 24942) :
--
ALTER TABLE ONLY "PlanDiscount"
    ADD CONSTRAINT "fk_PlanDiscount_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanGlobalPaymentMethodTemplate_BillingTemplate (OID = 24947) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethodTemplate_BillingTemplate"
    FOREIGN KEY ("BillingTemplateID") REFERENCES "BillingTemplate"("BillingTemplateID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_Billing (OID = 24952) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_GlobalPaymentMethod (OID = 24957) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanGlobalPaymentMethod_Plan (OID = 24962) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethod"
    ADD CONSTRAINT "fk_PlanGlobalPaymentMethod_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanGlobalPaymentTemplate_GlobalPaymentMethod (OID = 24967) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentTemplate_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanGlobalPaymentTemplate_PlanTemplate (OID = 24972) :
--
ALTER TABLE ONLY "PlanGlobalPaymentMethodTemplate"
    ADD CONSTRAINT "fk_PlanGlobalPaymentTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanProductTemplate_PlanTemplate (OID = 24977) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "fk_PlanProductTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanProductTemplate_ProductTemplate (OID = 24982) :
--
ALTER TABLE ONLY "PlanProductTemplate"
    ADD CONSTRAINT "fk_PlanProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PlanProduct_Plan (OID = 24987) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "fk_PlanProduct_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanProduct_Product (OID = 24992) :
--
ALTER TABLE ONLY "PlanProduct"
    ADD CONSTRAINT "fk_PlanProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_PlanSubscription (OID = 24997) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_StatusType (OID = 25002) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_PlanSubscriptionBillingPeriod_StatusTypeValue (OID = 25007) :
--
ALTER TABLE ONLY "PlanSubscriptionBillingProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionBillingPeriod_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_Billing (OID = 25012) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_Billing"
    FOREIGN KEY ("BillingID") REFERENCES "Billing"("BillingID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_GlobalPaymentMethod (OID = 25017) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_PlanSubscriptionPaymentPlan_PlanSubscription (OID = 25022) :
--
ALTER TABLE ONLY "PlanSubscriptionPaymentPlan"
    ADD CONSTRAINT "fk_PlanSubscriptionPaymentPlan_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionPeriod_PlanSubscription (OID = 25027) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "fk_PlanSubscriptionPeriod_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionPeriod_PlanSubscriptionBillingPeriod (OID = 25032) :
--
ALTER TABLE ONLY "PlanSubscriptionPeriod"
    ADD CONSTRAINT "fk_PlanSubscriptionPeriod_PlanSubscriptionBillingPeriod"
    FOREIGN KEY ("PlanSubscriptionBillingPeriodID") REFERENCES "PlanSubscriptionBillingProcessLog"("PlanSubscriptionBillingPeriodID");
--
-- Definition for index fk_PlanSubscriptionProcessLog_PlanSubscription (OID = 25037) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_PlanSubscription"
    FOREIGN KEY ("PlanSubscriptionID", "PlanSubscriptionVersionNumber") REFERENCES "PlanSubscription"("PlanSubscriptionID", "PlanSubscriptionVersionNumber");
--
-- Definition for index fk_PlanSubscriptionProcessLog_StatusType (OID = 25042) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_PlanSubscriptionProcessLog_StatusTypeValue (OID = 25047) :
--
ALTER TABLE ONLY "PlanSubscriptionProcessLog"
    ADD CONSTRAINT "fk_PlanSubscriptionProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_PlanSubscription_CountryCode (OID = 25052) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_PlanSubscription_Organisation (OID = 25057) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_PlanSubscription_Plan (OID = 25062) :
--
ALTER TABLE ONLY "PlanSubscription"
    ADD CONSTRAINT "fk_PlanSubscription_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanTemplate_CountryCode (OID = 25067) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "fk_PlanTemplate_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_PlanTemplate_PlanGroup (OID = 25072) :
--
ALTER TABLE ONLY "PlanTemplate"
    ADD CONSTRAINT "fk_PlanTemplate_PlanGroup"
    FOREIGN KEY ("PlanGroupID") REFERENCES "PlanGroup"("PlanGroupID");
--
-- Definition for index fk_PlanTransactionComponentTierTemplate_ComponentTierTemplate (OID = 25077) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "fk_PlanTransactionComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_PlanTransactionComponentTierTemplate_PlanTransactionTemplate (OID = 25082) :
--
ALTER TABLE ONLY "PlanTransactionComponentTierTemplate"
    ADD CONSTRAINT "fk_PlanTransactionComponentTierTemplate_PlanTransactionTemplate"
    FOREIGN KEY ("PlanTransactionTemplateID") REFERENCES "PlanTransactionTemplate"("PlanTransactionTemplateID");
--
-- Definition for index fk_PlanTransactionComponentTier_ComponentTier (OID = 25087) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "fk_PlanTransactionComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_PlanTransactionComponentTier_PlanTransaction (OID = 25092) :
--
ALTER TABLE ONLY "PlanTransactionComponentTier"
    ADD CONSTRAINT "fk_PlanTransactionComponentTier_PlanTransaction"
    FOREIGN KEY ("PlanTransactionID") REFERENCES "PlanTransaction"("PlanTransactionID");
--
-- Definition for index fk_PlanTransactionTemplate_PlanProductTemplate (OID = 25097) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "fk_PlanTransactionTemplate_PlanProductTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID") REFERENCES "PlanProductTemplate"("PlanTemplateID", "PlanTemplateVersionNumber", "ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_PlanTransactionTemplate_PlanTemplate (OID = 25102) :
--
ALTER TABLE ONLY "PlanTransactionTemplate"
    ADD CONSTRAINT "fk_PlanTransactionTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_PlanTransaction_Plan (OID = 25107) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "fk_PlanTransaction_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_PlanTransaction_PlanProduct (OID = 25112) :
--
ALTER TABLE ONLY "PlanTransaction"
    ADD CONSTRAINT "fk_PlanTransaction_PlanProduct"
    FOREIGN KEY ("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID") REFERENCES "PlanProduct"("PlanID", "PlanVersionNumber", "ProductID", "ProductVersionID");
--
-- Definition for index fk_Plan_CountryCode (OID = 25117) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_CountryCode"
    FOREIGN KEY ("CountryCode") REFERENCES "CountryCode"("CountryCode");
--
-- Definition for index fk_Plan_PlanGroup (OID = 25122) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_PlanGroup"
    FOREIGN KEY ("PlanGroupID") REFERENCES "PlanGroup"("PlanGroupID");
--
-- Definition for index fk_Plan_PlanTemplate (OID = 25127) :
--
ALTER TABLE ONLY "Plan"
    ADD CONSTRAINT "fk_Plan_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_ProductBusTaskTemplate_BusTask (OID = 25132) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "fk_ProductBusTaskTemplate_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_ProductBusTask_BusTask (OID = 25137) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "fk_ProductBusTask_BusTask"
    FOREIGN KEY ("BusTaskID", "BusTaskVersionNumber") REFERENCES "BusTask"("BusTaskID", "BusTaskVersionNumber");
--
-- Definition for index fk_ProductClaimTemplate_Operation (OID = 25142) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ProductClaimTemplate_ProductRoleTemplate (OID = 25147) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_ProductRoleTemplate"
    FOREIGN KEY ("ProductRoleTemplateID") REFERENCES "ProductRoleTemplate"("ProductRoleTemplateID");
--
-- Definition for index fk_ProductClaimTemplate_ProductTemplate (OID = 25152) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductClaimTemplate_Resource (OID = 25157) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ProductClaimTemplate_Role (OID = 25162) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ProductClaimTemplate_State (OID = 25167) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ProductClaimTemplate_StateItem (OID = 25172) :
--
ALTER TABLE ONLY "ProductClaimTemplate"
    ADD CONSTRAINT "fk_ProductClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ProductClaim_Operation (OID = 25177) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ProductClaim_Product (OID = 25182) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductClaim_ProductRole (OID = 25187) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_ProductRole"
    FOREIGN KEY ("ProductRoleID") REFERENCES "ProductRole"("ProductRoleID");
--
-- Definition for index fk_ProductClaim_Resource (OID = 25192) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_ProductClaim_Role (OID = 25197) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_ProductClaim_State (OID = 25202) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_ProductClaim_StateItem (OID = 25207) :
--
ALTER TABLE ONLY "ProductClaim"
    ADD CONSTRAINT "fk_ProductClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_ProductComponentTierTemplate_ComponentTierTemplate (OID = 25212) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "fk_ProductComponentTierTemplate_ComponentTierTemplate"
    FOREIGN KEY ("ComponentTierTemplateID") REFERENCES "ComponentTierTemplate"("ComponentTierTemplateID");
--
-- Definition for index fk_ProductComponentTierTemplate_ProductTemplate (OID = 25217) :
--
ALTER TABLE ONLY "ProductComponentTierTemplate"
    ADD CONSTRAINT "fk_ProductComponentTierTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductComponentTier_ComponentTier (OID = 25222) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "fk_ProductComponentTier_ComponentTier"
    FOREIGN KEY ("ComponentTierID") REFERENCES "ComponentTier"("ComponentTierID");
--
-- Definition for index fk_ProductComponentTier_Product (OID = 25227) :
--
ALTER TABLE ONLY "ProductComponentTier"
    ADD CONSTRAINT "fk_ProductComponentTier_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDeductionTemplate_DeductionTemplate (OID = 25232) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "fk_ProductDeductionTemplate_DeductionTemplate"
    FOREIGN KEY ("DeductionTemplateID", "DeductionTemplateVersionNumber") REFERENCES "DeductionTemplate"("DeductionTemplateID", "DeductionTemplateVersionNumber");
--
-- Definition for index fk_ProductDeduction_Deduction (OID = 25237) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "fk_ProductDeduction_Deduction"
    FOREIGN KEY ("DeductionID", "DeductionVersionNumber") REFERENCES "Deduction"("DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_ProductDeduction_Product (OID = 25242) :
--
ALTER TABLE ONLY "ProductDeduction"
    ADD CONSTRAINT "fk_ProductDeduction_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDeduction_ProductTemplate (OID = 25247) :
--
ALTER TABLE ONLY "ProductDeductionTemplate"
    ADD CONSTRAINT "fk_ProductDeduction_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDetailTemplate_ProductTemplate (OID = 25252) :
--
ALTER TABLE ONLY "ProductDetailTemplate"
    ADD CONSTRAINT "fk_ProductDetailTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDetail_Product (OID = 25257) :
--
ALTER TABLE ONLY "ProductDetail"
    ADD CONSTRAINT "fk_ProductDetail_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductDiscountTemplate_DiscountTemplate (OID = 25262) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "fk_ProductDiscountTemplate_DiscountTemplate"
    FOREIGN KEY ("DiscountTemplateID", "DiscountTemplateVersionNumber") REFERENCES "DiscountTemplate"("DiscountTemplateID", "DiscountTemplateVersionNumber");
--
-- Definition for index fk_ProductDiscountTemplate_ProductTemplate (OID = 25267) :
--
ALTER TABLE ONLY "ProductDiscountTemplate"
    ADD CONSTRAINT "fk_ProductDiscountTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductDiscount_Discount (OID = 25272) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "fk_ProductDiscount_Discount"
    FOREIGN KEY ("DiscountID", "DiscountVersionNumber") REFERENCES "Discount"("DiscountID", "DiscountVersionNumber");
--
-- Definition for index fk_ProductDiscount_Product (OID = 25277) :
--
ALTER TABLE ONLY "ProductDiscount"
    ADD CONSTRAINT "fk_ProductDiscount_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_PackageProductTemplate (OID = 25282) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_PackageProductTemplate"
    FOREIGN KEY ("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber") REFERENCES "PackageProductTemplate"("PackageProductTemplateID", "PackageTemplateID", "PackageTemplateVersionNumber");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_ProductFamilyTemplate (OID = 25287) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_ProductFamilyTemplate"
    FOREIGN KEY ("ProductFamilyTemplateID") REFERENCES "ProductFamilyTemplate"("ProductFamilyTemplateID");
--
-- Definition for index fk_ProductFamilyProductPackageTemplate_ProductTemplate (OID = 25292) :
--
ALTER TABLE ONLY "ProductFamilyProductPackageTemplate"
    ADD CONSTRAINT "fk_ProductFamilyProductPackageTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackage_PackageProduct (OID = 25297) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_PackageProduct"
    FOREIGN KEY ("PackageProductID", "PackageID", "PackageVersionNumber") REFERENCES "PackageProduct"("PackageProductID", "PackageID", "PackageVersionNumber");
--
-- Definition for index fk_ProductFamilyProductPackage_Product (OID = 25302) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductFamilyProductPackage_ProductFamily (OID = 25307) :
--
ALTER TABLE ONLY "ProductFamilyProductPackage"
    ADD CONSTRAINT "fk_ProductFamilyProductPackage_ProductFamily"
    FOREIGN KEY ("ProductFamilyID") REFERENCES "ProductFamily"("ProductFamilyID");
--
-- Definition for index fk_ProductPlanTemplate_PlanTemplate (OID = 25312) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "fk_ProductPlanTemplate_PlanTemplate"
    FOREIGN KEY ("PlanTemplateID", "PlanTemplateVersionNumber") REFERENCES "PlanTemplate"("PlanTemplateID", "PlanTemplateVersionNumber");
--
-- Definition for index fk_ProductPlanTemplate_ProductTemplate (OID = 25317) :
--
ALTER TABLE ONLY "ProductPlanTemplate"
    ADD CONSTRAINT "fk_ProductPlanTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductPlan_Plan (OID = 25322) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "fk_ProductPlan_Plan"
    FOREIGN KEY ("PlanID", "PlanVersionNumber") REFERENCES "Plan"("PlanID", "PlanVersionNumber");
--
-- Definition for index fk_ProductPlan_Product (OID = 25327) :
--
ALTER TABLE ONLY "ProductPlan"
    ADD CONSTRAINT "fk_ProductPlan_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttributeTemplate_ProductTemplate (OID = 25332) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "fk_ProductProductAttributeTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttribute_Product (OID = 25337) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "fk_ProductProductAttribute_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductProductAttribute_ProductAttribute (OID = 25342) :
--
ALTER TABLE ONLY "ProductProductAttribute"
    ADD CONSTRAINT "fk_ProductProductAttribute_ProductAttribute"
    FOREIGN KEY ("ProductAttributeID") REFERENCES "ProductAttribute"("ProductAttributeID");
--
-- Definition for index fk_ProductProductAttribute_ProductAttributeTemplate (OID = 25347) :
--
ALTER TABLE ONLY "ProductProductAttributeTemplate"
    ADD CONSTRAINT "fk_ProductProductAttribute_ProductAttributeTemplate"
    FOREIGN KEY ("ProductAttributeTemplateID") REFERENCES "ProductAttributeTemplate"("ProductAttributeTemplateID");
--
-- Definition for index fk_ProductPurchaseBusTaskProcessDetail_ProductPurchaseBusTaskPr (OID = 25352) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessDetail"
    ADD CONSTRAINT "fk_ProductPurchaseBusTaskProcessDetail_ProductPurchaseBusTaskPr"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES "ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_ProductPurchaseBusTask_ProductBusTask (OID = 25357) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseBusTask_ProductBusTask"
    FOREIGN KEY ("ProductBusTaskID") REFERENCES "ProductBusTask"("ProductBusTaskID");
--
-- Definition for index fk_ProductPurchaseProcessLog_ProductPurchase (OID = 25362) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_ProductPurchase"
    FOREIGN KEY ("ProductPurchaseID") REFERENCES "ProductPurchase"("ProductPurchaseID");
--
-- Definition for index fk_ProductPurchaseProcessLog_StatusType (OID = 25367) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ProductPurchaseProcessLog_StatusTypeValue (OID = 25372) :
--
ALTER TABLE ONLY "ProductPurchaseProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ProductPurchaseProductTask_ProductPurchase (OID = 25377) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_ProductPurchase"
    FOREIGN KEY ("ProductPurchaseID") REFERENCES "ProductPurchase"("ProductPurchaseID");
--
-- Definition for index fk_ProductPurchaseProductTask_StatusType (OID = 25382) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ProductPurchaseProductTask_StatusTypeValue (OID = 25387) :
--
ALTER TABLE ONLY "ProductPurchaseBusTaskProcessLog"
    ADD CONSTRAINT "fk_ProductPurchaseProductTask_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ProductPurchaseReference_InvoiceLineItem (OID = 25392) :
--
ALTER TABLE ONLY "ProductPurchaseReference"
    ADD CONSTRAINT "fk_ProductPurchaseReference_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_ProductRelationshipBlueprintTe (OID = 25397) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipBlueprintTe"
    FOREIGN KEY ("ProductRelationshipTemplateID") REFERENCES "ProductRelationshipTemplate"("ProductRelationshipTemplateID");
--
-- Definition for index fk_ProductRelationshipBlueprint_ProductRelationship (OID = 25402) :
--
ALTER TABLE ONLY "ProductRelationshipBlueprint"
    ADD CONSTRAINT "fk_ProductRelationshipBlueprint_ProductRelationship"
    FOREIGN KEY ("ProductRelationshipID") REFERENCES "ProductRelationship"("ProductRelationshipID");
--
-- Definition for index fk_ProductRelationshipTemplate_ProductTemplate (OID = 25407) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipTemplate_ProductTemplate"
    FOREIGN KEY ("ParentProductTemplateID", "ParentProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationshipTemplate_ProductTemplate1 (OID = 25412) :
--
ALTER TABLE ONLY "ProductRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductRelationshipTemplate_ProductTemplate1"
    FOREIGN KEY ("ChildProductTemplateID", "ChildProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product (OID = 25417) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product"
    FOREIGN KEY ("ParentProductID", "ParentProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product1 (OID = 25422) :
--
ALTER TABLE ONLY "ProductRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product1"
    FOREIGN KEY ("ChildProductID", "ChildProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductRelationship_Product111 (OID = 25427) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "fk_ProductRelationship_Product111"
    FOREIGN KEY ("ParentSpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductRoleTemplate_ProductTemplate (OID = 25432) :
--
ALTER TABLE ONLY "ProductRoleTemplate"
    ADD CONSTRAINT "fk_ProductRoleTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductRole_Product (OID = 25437) :
--
ALTER TABLE ONLY "ProductRole"
    ADD CONSTRAINT "fk_ProductRole_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecficiationAttribute (OID = 25442) :
--
ALTER TABLE ONLY "SpecificiationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecficiationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttributeOe (OID = 25447) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOe"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_ProductSate (OID = 25452) :
--
ALTER TABLE ONLY "SpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_ProductSate"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_Proplate1 (OID = 25457) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_Proplate1"
    FOREIGN KEY ("ProductSpecificationAttributeTemplateID") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeOptionTemplate_Specificamplate1 (OID = 25462) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOptionTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeOptionTemplate_Specificamplate1"
    FOREIGN KEY ("SpecificationAttributeOptionTemplateID") REFERENCES "SpecificationAttributeOptionTemplate"("SpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_ProductSpecificationAttributeTemplate_ProductTemplate (OID = 25467) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecificationAttributeTempte (OID = 25472) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationAttributeTempte"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttribute_Producte (OID = 25477) :
--
ALTER TABLE ONLY "SpecificationAttribute"
    ADD CONSTRAINT "fk_ProductSpecificationAttribute_Producte"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationAttribute_SpecificationAttribute (OID = 25482) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT "fk_ProductSpecificationAttribute_SpecificationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationAttritributeOption (OID = 25487) :
--
ALTER TABLE ONLY "ProductSpecificationAttributeOption"
    ADD CONSTRAINT "fk_ProductSpecificationAttritributeOption"
    FOREIGN KEY ("SpecficiationAttributeOptionID") REFERENCES "SpecificiationAttributeOption"("SpecficiationAttributeOptionID");
--
-- Definition for index fk_ProductSpecificationBlueprintTemplate_Prod (OID = 25492) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprintTemplate_Prod"
    FOREIGN KEY ("ProductSpecificationAttributeTemplateID") REFERENCES "ProductSpecificationAttributeTemplate"("ProductSpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductSpecificationBlueprintTemplate_ProductS (OID = 25497) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprintTemplate"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprintTemplate_ProductS"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionTemplateID") REFERENCES "ProductSpecificationAttributeOptionTemplate"("ProductSpecificationAttributeOptionTemplateID");
--
-- Definition for index fk_ProductSpecificationBlueprint_Product (OID = 25502) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductSpecificationBlueprint_ProductSpecificationAttribute (OID = 25507) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_ProductSpecificationAttribute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_ProductSpecificationBlueprint_tion (OID = 25512) :
--
ALTER TABLE ONLY "ProductSpecificationBlueprint"
    ADD CONSTRAINT "fk_ProductSpecificationBlueprint_tion"
    FOREIGN KEY ("DefaultProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_ProductTFProductTaskTemplate_ProductTemplate (OID = 25517) :
--
ALTER TABLE ONLY "ProductBusTaskTemplate"
    ADD CONSTRAINT "fk_ProductTFProductTaskTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductTFProductTask_Product (OID = 25522) :
--
ALTER TABLE ONLY "ProductBusTask"
    ADD CONSTRAINT "fk_ProductTFProductTask_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductTagTemplate_ProductTemplate (OID = 25527) :
--
ALTER TABLE ONLY "ProductTagTemplate"
    ADD CONSTRAINT "fk_ProductTagTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductTag_Product (OID = 25532) :
--
ALTER TABLE ONLY "ProductTag"
    ADD CONSTRAINT "fk_ProductTag_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeCombinationTemplate_ProductTemplate (OID = 25537) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombinationTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeCombinationTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeCombination_Product (OID = 25542) :
--
ALTER TABLE ONLY "ProductVariantAttributeCombination"
    ADD CONSTRAINT "fk_ProductVariantAttributeCombination_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ProductVariantAttributeValueTemplate_ProductProductAttribute (OID = 25547) :
--
ALTER TABLE ONLY "ProductVariantAttributeValueTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeValueTemplate_ProductProductAttribute"
    FOREIGN KEY ("ProductProductAttributeTemplateID") REFERENCES "ProductProductAttributeTemplate"("ProductProductAttributeTemplateID");
--
-- Definition for index fk_ProductVariantAttributeValueTemplate_ProductTemplateParent (OID = 25552) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "fk_ProductVariantAttributeValueTemplate_ProductTemplateParent"
    FOREIGN KEY ("ParentSpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_ProductVariantAttributeValue_ProductProductAttribute (OID = 25557) :
--
ALTER TABLE ONLY "ProductVariantAttributeValue"
    ADD CONSTRAINT "fk_ProductVariantAttributeValue_ProductProductAttribute"
    FOREIGN KEY ("ProductProductAttributeID") REFERENCES "ProductProductAttribute"("ProductProductAttributeID");
--
-- Definition for index fk_Product_ProductTemplate (OID = 25562) :
--
ALTER TABLE ONLY "Product"
    ADD CONSTRAINT "fk_Product_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductTemplateVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_RepositoryMap_Repository (OID = 25567) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "fk_RepositoryMap_Repository"
    FOREIGN KEY ("RepositoryID") REFERENCES "Repository"("RepositoryID");
--
-- Definition for index fk_RepositoryStructureGroup_OrganisationRole (OID = 25572) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "fk_RepositoryStructureGroup_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_RepositoryStructureGroup_RepositoryStructure (OID = 25577) :
--
ALTER TABLE ONLY "RepositoryStructureRole"
    ADD CONSTRAINT "fk_RepositoryStructureGroup_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_RepositoryStructureRole_OrganisationGroup (OID = 25582) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "fk_RepositoryStructureRole_OrganisationGroup"
    FOREIGN KEY ("OrganisationGroupID") REFERENCES "OrganisationGroup"("OrganisationGroupID");
--
-- Definition for index fk_RepositoryStructureRole_RepositoryStructure (OID = 25587) :
--
ALTER TABLE ONLY "RepositoryStructureGroup"
    ADD CONSTRAINT "fk_RepositoryStructureRole_RepositoryStructure"
    FOREIGN KEY ("RepositoryStructureID") REFERENCES "RepositoryStructure"("RepositoryStructureID");
--
-- Definition for index fk_RepositoryStructure_Repository (OID = 25592) :
--
ALTER TABLE ONLY "RepositoryStructure"
    ADD CONSTRAINT "fk_RepositoryStructure_Repository"
    FOREIGN KEY ("RepositoryID") REFERENCES "Repository"("RepositoryID");
--
-- Definition for index fk_ResourceOperation_Operation (OID = 25597) :
--
ALTER TABLE ONLY "ResourceOperation"
    ADD CONSTRAINT "fk_ResourceOperation_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_ResourceOperation_Resource (OID = 25602) :
--
ALTER TABLE ONLY "ResourceOperation"
    ADD CONSTRAINT "fk_ResourceOperation_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_Operation (OID = 25607) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_RoleTemplateClaim_Resource (OID = 25612) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_RoleTemplateClaim_RoleTemplate (OID = 25617) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_RoleTemplate"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_RoleTemplateClaim_State (OID = 25622) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_RoleTemplateClaim_StateItem (OID = 25627) :
--
ALTER TABLE ONLY "RoleClaim"
    ADD CONSTRAINT "fk_RoleTemplateClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_Role_Organisation (OID = 25632) :
--
ALTER TABLE ONLY "OrganisationRole"
    ADD CONSTRAINT "fk_Role_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ServiceDefinitionDetail_ServiceDefinition (OID = 25637) :
--
ALTER TABLE ONLY "ServiceDefinitionDetail"
    ADD CONSTRAINT "fk_ServiceDefinitionDetail_ServiceDefinition"
    FOREIGN KEY ("ServiceDefinitionID") REFERENCES "ServiceDefinition"("ServiceDefinitionID");
--
-- Definition for index fk_ServiceDefinition_ServiceInterface (OID = 25642) :
--
ALTER TABLE ONLY "ServiceDefinition"
    ADD CONSTRAINT "fk_ServiceDefinition_ServiceInterface"
    FOREIGN KEY ("ServiceInterfaceID") REFERENCES "ServiceInterface"("ServiceInterfaceID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_ProductPurchaseProductTask (OID = 25647) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES "ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_ServiceDefinition (OID = 25652) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_ServiceDefinition"
    FOREIGN KEY ("ServiceDefinitionID") REFERENCES "ServiceDefinition"("ServiceDefinitionID");
--
-- Definition for index fk_ServiceInterfaceProcessLog_StatusType (OID = 25657) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_ServiceInterfaceProcessLog_StatusTypeValue (OID = 25662) :
--
ALTER TABLE ONLY "ServiceInterfaceProcessLog"
    ADD CONSTRAINT "fk_ServiceInterfaceProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_ShoppingCartDeduction_CountryDeduction (OID = 25667) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "fk_ShoppingCartDeduction_CountryDeduction"
    FOREIGN KEY ("CountryDeductionID", "DeductionID", "DeductionVersionNumber") REFERENCES "CountryDeduction"("CountryDeductionID", "DeductionID", "DeductionVersionNumber");
--
-- Definition for index fk_ShoppingCartDeduction_ShoppingCart (OID = 25672) :
--
ALTER TABLE ONLY "ShoppingCartDeduction"
    ADD CONSTRAINT "fk_ShoppingCartDeduction_ShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_ShoppingCartItem_Account (OID = 25677) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_ShoppingCartItem_Account"
    FOREIGN KEY ("AccountID") REFERENCES "Account"("AccountID");
--
-- Definition for index fk_ShoppingCartItem_InvoiceLineItem (OID = 25682) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_ShoppingCartItem_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_ShoppingCartProductProductTemplate_ProductTemplate (OID = 25687) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "fk_ShoppingCartProductProductTemplate_ProductTemplate"
    FOREIGN KEY ("ProductTemplateID", "ProductVersionID") REFERENCES "ProductTemplate"("ProductTemplateID", "ProductVersionID");
--
-- Definition for index fk_ShoppingCartProductProductTemplate_ShoppingCartProductTempla (OID = 25692) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProductTemplate"
    ADD CONSTRAINT "fk_ShoppingCartProductProductTemplate_ShoppingCartProductTempla"
    FOREIGN KEY ("ShoppingCartBlueprintTemplateID") REFERENCES "ShoppingCartBlueprintTemplate"("ShoppingCartBlueprintTemplateID");
--
-- Definition for index fk_ShoppingCartProductProduct_Product (OID = 25697) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "fk_ShoppingCartProductProduct_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_ShoppingCartProductProduct_ShoppingCartProductTempla (OID = 25702) :
--
ALTER TABLE ONLY "ShoppingCartBlueprintProduct"
    ADD CONSTRAINT "fk_ShoppingCartProductProduct_ShoppingCartProductTempla"
    FOREIGN KEY ("ShoppingCartBlueprintID") REFERENCES "ShoppingCartBlueprint"("ShoppingCartBlueprintID");
--
-- Definition for index fk_ShoppingCart_GlobalPaymentMethod (OID = 25707) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_ShoppingCart_Organisation (OID = 25712) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_ShoppingCart_UserAccountOrganisation (OID = 25717) :
--
ALTER TABLE ONLY "ShoppingCart"
    ADD CONSTRAINT "fk_ShoppingCart_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_SpecificationAttributeRelationshipTempTemplate (OID = 25722) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationshipTemplate"
    ADD CONSTRAINT "fk_SpecificationAttributeRelationshipTempTemplate"
    FOREIGN KEY ("SpecificationAttributeTemplateID") REFERENCES "SpecificationAttributeTemplate"("SpecificationAttributeTemplateID");
--
-- Definition for index fk_SpecificationAttributeRelationship_SpecificationAttribute (OID = 25727) :
--
ALTER TABLE ONLY "SpecificationAttributeRelationship"
    ADD CONSTRAINT "fk_SpecificationAttributeRelationship_SpecificationAttribute"
    FOREIGN KEY ("SpecificationAttributeID") REFERENCES "SpecificationAttribute"("SpecificationAttributeID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Operation (OID = 25732) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Resource (OID = 25737) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_StatusTypeClaimTemplate_Role (OID = 25742) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_StatusTypeClaimTemplate_State (OID = 25747) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StateItem (OID = 25752) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StatusTypeRoleTemplate (OID = 25757) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StatusTypeRoleTemplate"
    FOREIGN KEY ("StatusTypeRoleTemplateID") REFERENCES "StatusTypeRoleTemplate"("StatusTypeRoleTemplateID");
--
-- Definition for index fk_StatusTypeClaimTemplate_StatusTypeTemplate (OID = 25762) :
--
ALTER TABLE ONLY "StatusTypeClaimTemplate"
    ADD CONSTRAINT "fk_StatusTypeClaimTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeClaim_Operation (OID = 25767) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_StatusTypeClaim_Resource (OID = 25772) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_StatusTypeClaim_State (OID = 25777) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_StatusTypeClaim_StateItem (OID = 25782) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_StatusTypeClaim_StatusType (OID = 25787) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeClaim_StatusTypeRole (OID = 25792) :
--
ALTER TABLE ONLY "StatusTypeClaim"
    ADD CONSTRAINT "fk_StatusTypeClaim_StatusTypeRole"
    FOREIGN KEY ("StatusTypeRoleID") REFERENCES "StatusTypeRole"("StatusTypeRoleID");
--
-- Definition for index fk_StatusTypeRoleTemplate_StatusTypeTemplate (OID = 25797) :
--
ALTER TABLE ONLY "StatusTypeRoleTemplate"
    ADD CONSTRAINT "fk_StatusTypeRoleTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeRole_StatusType (OID = 25802) :
--
ALTER TABLE ONLY "StatusTypeRole"
    ADD CONSTRAINT "fk_StatusTypeRole_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeStructureMappeStructure (OID = 25807) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "fk_StatusTypeStructureMappeStructure"
    FOREIGN KEY ("NextStatusTypeStructureID") REFERENCES "StatusTypeStructure"("StatusTypeStructureID");
--
-- Definition for index fk_StatusTypeStructureMappeStructureTemplate (OID = 25812) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureMappeStructureTemplate"
    FOREIGN KEY ("NextStatusTypeStructureTemplateID") REFERENCES "StatusTypeStructureTemplate"("StatusTypeStructureTemplateID");
--
-- Definition for index fk_StatusTypeStructureMappingTemplate_StatusTypeStructureTempla (OID = 25817) :
--
ALTER TABLE ONLY "StatusTypeStructureTransitionTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureMappingTemplate_StatusTypeStructureTempla"
    FOREIGN KEY ("CurrentStatusTypeStructureTemplateID") REFERENCES "StatusTypeStructureTemplate"("StatusTypeStructureTemplateID");
--
-- Definition for index fk_StatusTypeStructureMapping_StatusTypeStructureTempla (OID = 25822) :
--
ALTER TABLE ONLY "StatusTypeStructureTransition"
    ADD CONSTRAINT "fk_StatusTypeStructureMapping_StatusTypeStructureTempla"
    FOREIGN KEY ("CurrentStatusTypeStructureID") REFERENCES "StatusTypeStructure"("StatusTypeStructureID");
--
-- Definition for index fk_StatusTypeStructureTemplate_StatusTypeTemplate (OID = 25827) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusTypeStructureTemplate_StatusTypeValueTemplateID (OID = 25832) :
--
ALTER TABLE ONLY "StatusTypeStructureTemplate"
    ADD CONSTRAINT "fk_StatusTypeStructureTemplate_StatusTypeValueTemplateID"
    FOREIGN KEY ("StatusTypeValueTemplateID") REFERENCES "StatusTypeValueTemplate"("StatusTypeValueTemplateID");
--
-- Definition for index fk_StatusTypeStructure_StatusType (OID = 25837) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "fk_StatusTypeStructure_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeStructure_StatusTypeValueID (OID = 25842) :
--
ALTER TABLE ONLY "StatusTypeStructure"
    ADD CONSTRAINT "fk_StatusTypeStructure_StatusTypeValueID"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StatusTypeValueID_StatusType (OID = 25847) :
--
ALTER TABLE ONLY "StatusTypeValue"
    ADD CONSTRAINT "fk_StatusTypeValueID_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StatusTypeValueTemplateID_StatusTypeTemplate (OID = 25852) :
--
ALTER TABLE ONLY "StatusTypeValueTemplate"
    ADD CONSTRAINT "fk_StatusTypeValueTemplateID_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_StatusType_StatusTypeTemplate (OID = 25857) :
--
ALTER TABLE ONLY "StatusType"
    ADD CONSTRAINT "fk_StatusType_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_TransactionOrderItem_InvoiceLineItem (OID = 25862) :
--
ALTER TABLE ONLY "TransactionOrderItem"
    ADD CONSTRAINT "fk_TransactionOrderItem_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_TransactionOrderPaymentError_TransactionOrderPayment (OID = 25867) :
--
ALTER TABLE ONLY "TransactionOrderPaymentError"
    ADD CONSTRAINT "fk_TransactionOrderPaymentError_TransactionOrderPayment"
    FOREIGN KEY ("TransactionOrderPaymentID") REFERENCES "TransactionOrderPayment"("TransactionOrderPaymentID");
--
-- Definition for index fk_TransactionOrderProcessLog_StatusType (OID = 25872) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_TransactionOrderProcessLog_StatusTypeValue (OID = 25877) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_TransactionOrderProcessLog_TransactionOrder (OID = 25882) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_TransactionOrder"
    FOREIGN KEY ("TransactionOrderID") REFERENCES "TransactionOrder"("TransactionOrderID");
--
-- Definition for index fk_TransactionOrderProcessLog_TransactionOrderPayment (OID = 25887) :
--
ALTER TABLE ONLY "TransactionOrderProcessLog"
    ADD CONSTRAINT "fk_TransactionOrderProcessLog_TransactionOrderPayment"
    FOREIGN KEY ("TransactionOrderPaymentID") REFERENCES "TransactionOrderPayment"("TransactionOrderPaymentID");
--
-- Definition for index fk_TransactionOrder_GlobalPaymentMethod (OID = 25892) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "fk_TransactionOrder_GlobalPaymentMethod"
    FOREIGN KEY ("GlobalPaymentMethodID") REFERENCES "GlobalPaymentMethod"("GlobalPaymentMethodID");
--
-- Definition for index fk_TransactionOrder_Invoice (OID = 25897) :
--
ALTER TABLE ONLY "TransactionOrder"
    ADD CONSTRAINT "fk_TransactionOrder_Invoice"
    FOREIGN KEY ("InvoiceID") REFERENCES "Invoice"("InvoiceID");
--
-- Definition for index fk_UserAccountLedgerAccount_LedgerAccount (OID = 25902) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "fk_UserAccountLedgerAccount_LedgerAccount"
    FOREIGN KEY ("LedgerAccountID") REFERENCES "OrganisationLedgerAccount"("OrganisationLedgerAccountID");
--
-- Definition for index fk_UserAccountLedgerAccount_UserAccounts (OID = 25907) :
--
ALTER TABLE ONLY "UserAccountLedgerAccount"
    ADD CONSTRAINT "fk_UserAccountLedgerAccount_UserAccounts"
    FOREIGN KEY ("UserAccountID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserAccountLoginSessionData_UserAccountLoginSession (OID = 25912) :
--
ALTER TABLE ONLY "UserAccountLoginSessionData"
    ADD CONSTRAINT "fk_UserAccountLoginSessionData_UserAccountLoginSession"
    FOREIGN KEY ("UserAccountID", "UserSessionID") REFERENCES "UserAccountLoginSession"("UserAccountID", "UserSessionID");
--
-- Definition for index fk_UserAccountOrganisationGroup_UserAccountOrganisationUnit (OID = 25917) :
--
ALTER TABLE ONLY "UserAccountOrganisationGroup"
    ADD CONSTRAINT "fk_UserAccountOrganisationGroup_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationProductPurchase_InvoiceLineItem (OID = 25922) :
--
ALTER TABLE ONLY "ProductPurchase"
    ADD CONSTRAINT "fk_UserAccountOrganisationProductPurchase_InvoiceLineItem"
    FOREIGN KEY ("InvoiceLineItemID") REFERENCES "InvoiceLineItem"("InvoiceLineItemID");
--
-- Definition for index fk_UserAccountOrganisationRole_OrganisationRole (OID = 25927) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "fk_UserAccountOrganisationRole_OrganisationRole"
    FOREIGN KEY ("OrganisationRoleID") REFERENCES "OrganisationRole"("OrganisationRoleID");
--
-- Definition for index fk_UserAccountOrganisationRole_UserAccountOrganisationUnit (OID = 25932) :
--
ALTER TABLE ONLY "UserAccountOrganisationRole"
    ADD CONSTRAINT "fk_UserAccountOrganisationRole_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationSecondaryUserType_UserType (OID = 25937) :
--
ALTER TABLE ONLY "UserAccountOrganisationSecondaryUserType"
    ADD CONSTRAINT "fk_UserAccountOrganisationSecondaryUserType_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_UserAccountOrganisationStatus_StatusType (OID = 25942) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_UserAccountOrganisationStatus_StatusTypeValue (OID = 25947) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES "StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_UserAccountOrganisationStatus_UserAccountOrganisation (OID = 25952) :
--
ALTER TABLE ONLY "UserAccountOrganisationStatus"
    ADD CONSTRAINT "fk_UserAccountOrganisationStatus_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationTeam_OrganisationTeam (OID = 25957) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "fk_UserAccountOrganisationTeam_OrganisationTeam"
    FOREIGN KEY ("OrganisationTeamID") REFERENCES "OrganisationTeam"("OrganisationTeamID");
--
-- Definition for index fk_UserAccountOrganisationTeam_UserAccountOrganisationUnit (OID = 25962) :
--
ALTER TABLE ONLY "UserAccountOrganisationTeam"
    ADD CONSTRAINT "fk_UserAccountOrganisationTeam_UserAccountOrganisationUnit"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_UserAccountOrganisationUnit_Organisation (OID = 25967) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisationUnit_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES "Organisation"("OrganisationID");
--
-- Definition for index fk_UserAccountOrganisationUnit_OrganisationUnit (OID = 25972) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisationUnit_OrganisationUnit"
    FOREIGN KEY ("OrganisationUnitID") REFERENCES "OrganisationUnit"("OrganisationUnitID");
--
-- Definition for index fk_UserAccountOrganisation_Contact (OID = 25977) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisation_Contact"
    FOREIGN KEY ("PrimaryContactID") REFERENCES "Contact"("ContactID");
--
-- Definition for index fk_UserAccountOrganisation_UserType (OID = 25982) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccountOrganisation_UserType"
    FOREIGN KEY ("UserTypeID") REFERENCES "UserType"("UserTypeID");
--
-- Definition for index fk_UserAccounts_ID (OID = 25987) :
--
ALTER TABLE ONLY "UserAccountArchive"
    ADD CONSTRAINT "fk_UserAccounts_ID"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserAccunts (OID = 25992) :
--
ALTER TABLE ONLY "UserAccountOrganisation"
    ADD CONSTRAINT "fk_UserAccunts"
    FOREIGN KEY ("UserID") REFERENCES "UserAccounts"("ID");
--
-- Definition for index fk_UserShoppingCartIteductSpecificationAttributeOption (OID = 25997) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingCartIteductSpecificationAttributeOption"
    FOREIGN KEY ("ProductSpecificationAttributeOptionID") REFERENCES "ProductSpecificationAttributeOption"("ProductSpecificationAttributeOptionID");
--
-- Definition for index fk_UserShoppingCartItemProductAttribute_ProductVariantAttribute (OID = 26002) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductAttribute_ProductVariantAttribute"
    FOREIGN KEY ("ProductVariantAttributeValueID") REFERENCES "ProductVariantAttributeValue"("ProductVariantAttributeValueID");
--
-- Definition for index fk_UserShoppingCartItemProductAttribute_UserShoppingCartItem (OID = 26007) :
--
ALTER TABLE ONLY "ShoppingCartItemProductAttribute"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductAttribute_UserShoppingCartItem"
    FOREIGN KEY ("ShoppingCartItemID") REFERENCES "ShoppingCartItem"("ShoppingCartItemID");
--
-- Definition for index fk_UserShoppingCartItemProductSpecification_UserShoppingCartIte (OID = 26012) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingCartItemProductSpecification_UserShoppingCartIte"
    FOREIGN KEY ("ShoppingCartItemID") REFERENCES "ShoppingCartItem"("ShoppingCartItemID");
--
-- Definition for index fk_UserShoppingCartItem_Product (OID = 26017) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_UserShoppingCartItem_Product"
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index fk_UserShoppingCartItem_UserShoppingCart (OID = 26022) :
--
ALTER TABLE ONLY "ShoppingCartItem"
    ADD CONSTRAINT "fk_UserShoppingCartItem_UserShoppingCart"
    FOREIGN KEY ("ShoppingCartID") REFERENCES "ShoppingCart"("ShoppingCartID");
--
-- Definition for index fk_UserShoppingroductSpecificationAttribute (OID = 26027) :
--
ALTER TABLE ONLY "ShoppingCartItemProductSpecification"
    ADD CONSTRAINT "fk_UserShoppingroductSpecificationAttribute"
    FOREIGN KEY ("ProductSpecificationAttributeID") REFERENCES "ProductSpecificationAttribute"("ProductSpecificationAttributeID");
--
-- Definition for index fk_WorflowParameterTemplate_WorkflowTemplate (OID = 26032) :
--
ALTER TABLE ONLY "WorflowParameterTemplate"
    ADD CONSTRAINT "fk_WorflowParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteConditionTe (OID = 26037) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionCompleteConditionTe"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteConditionTemate (OID = 26042) :
--
ALTER TABLE ONLY "WorkflowActionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionCompleteConditionTemate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionCompleteCondition_WorkflowAction (OID = 26047) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowActionCompleteCondition_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionCompleteCondition_WorkflowCondition (OID = 26052) :
--
ALTER TABLE ONLY "WorkflowActionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowActionCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate (OID = 26057) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate (OID = 26062) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowAction (OID = 26067) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionExecuteCommand_WorkflowCommand (OID = 26072) :
--
ALTER TABLE ONLY "WorkflowActionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowActionExecuteCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionNotificationTemplate_WorkflowActionTemplate (OID = 26077) :
--
ALTER TABLE ONLY "WorkflowActionNotificationTemplate"
    ADD CONSTRAINT "fk_WorkflowActionNotificationTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParameterNotificationConstructTemplate_Notific (OID = 26082) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParameterNotificationConstructTemplate_Notific"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParameterNotificationConstruct_NotificationCon (OID = 26087) :
--
ALTER TABLE ONLY "WorkflowActionParameterNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowActionParameterNotificationConstruct_NotificationCon"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_WorkflowActionParameter_WorkflowAction (OID = 26092) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "fk_WorkflowActionParameter_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionParameter_WorkflowParameter (OID = 26097) :
--
ALTER TABLE ONLY "WorkflowActionParameter"
    ADD CONSTRAINT "fk_WorkflowActionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowActionParamter_WorkflowActionTemplate (OID = 26102) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParamter_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionParamter_WorkflowParameterTemplate (OID = 26107) :
--
ALTER TABLE ONLY "WorkflowActionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowActionParamter_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate (OID = 26112) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate (OID = 26117) :
--
ALTER TABLE ONLY "WorkflowActionPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPostCommand_WorkflowAction (OID = 26122) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "fk_WorkflowActionPostCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate (OID = 26127) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate (OID = 26132) :
--
ALTER TABLE ONLY "WorkflowActionPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommand_WorkflowAction (OID = 26137) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "fk_WorkflowActionPreCommand_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowActionPreCommand_WorkflowCommand (OID = 26142) :
--
ALTER TABLE ONLY "WorkflowActionPreCommand"
    ADD CONSTRAINT "fk_WorkflowActionPreCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionProductPlaceholder_WorkflowActionTemplate (OID = 26147) :
--
ALTER TABLE ONLY "WorkflowActionProductPlaceholder"
    ADD CONSTRAINT "fk_WorkflowActionProductPlaceholder_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartConditionTememplate (OID = 26152) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStartConditionTememplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate (OID = 26157) :
--
ALTER TABLE ONLY "WorkflowActionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionStartCondition_WorkflowAction (OID = 26162) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "fk_WorkflowActionStartCondition_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionStartCondition_WorkflowCondition (OID = 26167) :
--
ALTER TABLE ONLY "WorkflowActionStartCondition"
    ADD CONSTRAINT "fk_WorkflowActionStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowActionStateExecutionTemplate_WorkflowActionTemplate (OID = 26172) :
--
ALTER TABLE ONLY "WorkflowActionExecutionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionStateExecutionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate (OID = 26177) :
--
ALTER TABLE ONLY "WorkflowActionTemplate"
    ADD CONSTRAINT "fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowActionValidationTemplate_WorkflowActionTemplate (OID = 26182) :
--
ALTER TABLE ONLY "WorkflowActionValidationTemplate"
    ADD CONSTRAINT "fk_WorkflowActionValidationTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowAction_Workflow (OID = 26187) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "fk_WorkflowAction_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowAction_WorkflowObjectType (OID = 26192) :
--
ALTER TABLE ONLY "WorkflowAction"
    ADD CONSTRAINT "fk_WorkflowAction_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowClaimTemplate_Role (OID = 26197) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowClaimTemplate_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_WorkflowClaimTemplate_WorkflowTemplate (OID = 26202) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowClaimTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowClaim_Role (OID = 26207) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowClaim_Role"
    FOREIGN KEY ("RoleID") REFERENCES "Role"("RoleID");
--
-- Definition for index fk_WorkflowClaim_Workflow (OID = 26212) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowClaim_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate (OID = 26217) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate (OID = 26222) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandConditionTemplate_WorkflowTemplate (OID = 26227) :
--
ALTER TABLE ONLY "WorkflowCommandConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandCondition_Workflow (OID = 26232) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandCondition_WorkflowCommand (OID = 26237) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandCondition_WorkflowCondition (OID = 26242) :
--
ALTER TABLE ONLY "WorkflowCommandCondition"
    ADD CONSTRAINT "fk_WorkflowCommandCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate (OID = 26247) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate (OID = 26252) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameterTemplate_WorkflowTemplate (OID = 26257) :
--
ALTER TABLE ONLY "WorkflowCommandParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameter_Workflow (OID = 26262) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandParameter_WorkflowCommand (OID = 26267) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowCommandParameter_WorkflowParameter (OID = 26272) :
--
ALTER TABLE ONLY "WorkflowCommandParameter"
    ADD CONSTRAINT "fk_WorkflowCommandParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate (OID = 26277) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommandTemplate_WorkflowTemplate (OID = 26282) :
--
ALTER TABLE ONLY "WorkflowCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCommand_Workflow (OID = 26287) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "fk_WorkflowCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowCommand_WorkflowObjectType (OID = 26292) :
--
ALTER TABLE ONLY "WorkflowCommand"
    ADD CONSTRAINT "fk_WorkflowCommand_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameterTemplate_WorkflowTemplate (OID = 26297) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_Workflow (OID = 26302) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowCondition (OID = 26307) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowConditionTemplate (OID = 26312) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowParameter (OID = 26317) :
--
ALTER TABLE ONLY "WorkflowConditionParameter"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowConditionParameter_WorkflowParameterTemplate (OID = 26322) :
--
ALTER TABLE ONLY "WorkflowConditionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionParameter_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate (OID = 26327) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowConditionTemplate_WorkflowTemplate (OID = 26332) :
--
ALTER TABLE ONLY "WorkflowConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowCondition_Workflow (OID = 26337) :
--
ALTER TABLE ONLY "WorkflowCondition"
    ADD CONSTRAINT "fk_WorkflowCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionEflowDecision (OID = 26342) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionEflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorActionTemplate_WorkflowActionTemplate (OID = 26347) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorActionTemplate_WorkflowDecisionTemplate (OID = 26352) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorActionTemplate_WorkflowDecisionTemplate"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorAction_WorkflowAction (OID = 26357) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorAction_WorkflowDecision (OID = 26362) :
--
ALTER TABLE ONLY "WorkflowDecisionError"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionErrorTDecisionTemplate (OID = 26367) :
--
ALTER TABLE ONLY "WorkflowDecisionErrorTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionErrorTDecisionTemplate"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteCate_WorkflowDecisionTemplate (OID = 26372) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowDecisionExecuteCate_WorkflowDecisionTemplate"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTempl (OID = 26377) :
--
ALTER TABLE ONLY "WorkflowDecisionExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTempl"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailukflowDecision (OID = 26382) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailukflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate (OID = 26387) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureAction_WorkflowAction (OID = 26392) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFailureAction_WorkflowDecision (OID = 26397) :
--
ALTER TABLE ONLY "WorkflowDecisionFailure"
    ADD CONSTRAINT "fk_WorkflowDecisionFailureAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionFrkflowDecisionTemplate (OID = 26402) :
--
ALTER TABLE ONLY "WorkflowDecisionFailureTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionFrkflowDecisionTemplate"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate (OID = 26407) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionParameter_WorkflowParameter (OID = 26412) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "fk_WorkflowDecisionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate (OID = 26417) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate"
    FOREIGN KEY ("NextWorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowActionTemplate"("WorkflowActionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessAction_WorkflowAction (OID = 26422) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessAction_WorkflowAction"
    FOREIGN KEY ("NextWorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowDecisionSuccessAction_WorkflowDecision (OID = 26427) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessAction_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisionSuccessTemp (OID = 26432) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccessTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionSuccessTemp"
    FOREIGN KEY ("NextWorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate (OID = 26437) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate"
    FOREIGN KEY ("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowObjectTypeTemplate"("WorkflowObjectTypeTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecisionTemplate_WorkflowTemplate (OID = 26442) :
--
ALTER TABLE ONLY "WorkflowDecisionTemplate"
    ADD CONSTRAINT "fk_WorkflowDecisionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowDecision_Workflow (OID = 26447) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowDecision_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecision_WorkflowObjectType (OID = 26452) :
--
ALTER TABLE ONLY "WorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowDecision_WorkflowObjectType"
    FOREIGN KEY ("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowObjectType"("WorkflowObjectTypeID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowDecisioorkflowDecision (OID = 26457) :
--
ALTER TABLE ONLY "WorkflowDecisionSuccess"
    ADD CONSTRAINT "fk_WorkflowDecisioorkflowDecision"
    FOREIGN KEY ("NextWorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_Workflow (OID = 26462) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "fk_WorkflowHierarchy_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowHierarchy_WorkflowTransistion (OID = 26467) :
--
ALTER TABLE ONLY "WorkflowHierarchy"
    ADD CONSTRAINT "fk_WorkflowHierarchy_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceExecutionDataItem_Workfl (OID = 26472) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionDataItem"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionDataItem_Workfl"
    FOREIGN KEY ("WorkflowInstanceExecutionStatusEventID") REFERENCES "WorkflowInstanceExecutionStatusEvent"("WorkflowInstanceExecutionStatusEventID");
--
-- Definition for index fk_WorkflowInstanceExecutionSta (OID = 26477) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionSta"
    FOREIGN KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceExecution"("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceExecutionStatusEve (OID = 26482) :
--
ALTER TABLE ONLY "WorkflowActionPostCommand"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionStatusEve"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus (OID = 26487) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionStatusEvent"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus"
    FOREIGN KEY ("WorkflowExecutionStatusID") REFERENCES "WorkflowExecutionStatus"("WorkflowExecutionStatusID");
--
-- Definition for index fk_WorkflowInstanceExecutionTrace_WorkflowInstanceExecution (OID = 26492) :
--
ALTER TABLE ONLY "WorkflowInstanceExecutionTrace"
    ADD CONSTRAINT "fk_WorkflowInstanceExecutionTrace_WorkflowInstanceExecution"
    FOREIGN KEY ("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceExecution"("WorkflowInstanceExecutionID", "WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceExecution_WorkflowInstanceSession (OID = 26497) :
--
ALTER TABLE ONLY "WorkflowInstanceExecution"
    ADD CONSTRAINT "fk_WorkflowInstanceExecution_WorkflowInstanceSession"
    FOREIGN KEY ("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID") REFERENCES "WorkflowInstanceSession"("WorkflowInstanceSessionID", "WorkflowID", "WorkflowVersionNumber", "WorkflowInstanceID");
--
-- Definition for index fk_WorkflowInstanceRestriction_UserAccountOrganisation (OID = 26502) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "fk_WorkflowInstanceRestriction_UserAccountOrganisation"
    FOREIGN KEY ("UserAccountOrganisationID") REFERENCES "UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_WorkflowInstanceRestriction_WorkflowInstance (OID = 26507) :
--
ALTER TABLE ONLY "WorkflowInstanceRestriction"
    ADD CONSTRAINT "fk_WorkflowInstanceRestriction_WorkflowInstance"
    FOREIGN KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowInstance"("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstanceSession_WorkflowInstance (OID = 26512) :
--
ALTER TABLE ONLY "WorkflowInstanceSession"
    ADD CONSTRAINT "fk_WorkflowInstanceSession_WorkflowInstance"
    FOREIGN KEY ("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowInstance"("WorkflowInstanceID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowInstance_Workflow (OID = 26517) :
--
ALTER TABLE ONLY "WorkflowInstance"
    ADD CONSTRAINT "fk_WorkflowInstance_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditionTem (OID = 26522) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainCompleteConditionTem"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate (OID = 26527) :
--
ALTER TABLE ONLY "WorkflowMainCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_Workflow (OID = 26532) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowMainCompleteCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainCompleteCondition_WorkflowCondition (OID = 26537) :
--
ALTER TABLE ONLY "WorkflowMainCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowMainCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate (OID = 26542) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate (OID = 26547) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_Workflow (OID = 26552) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainExecuteCommand_WorkflowCommand (OID = 26557) :
--
ALTER TABLE ONLY "WorkflowMainExecuteCommand"
    ADD CONSTRAINT "fk_WorkflowMainExecuteCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate (OID = 26562) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainParameterTemplate_WorkflowTemplate (OID = 26567) :
--
ALTER TABLE ONLY "WorkflowMainParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowMainParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_Workflow (OID = 26572) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "fk_WorkflowMainParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainParameter_WorkflowParameter (OID = 26577) :
--
ALTER TABLE ONLY "WorkflowMainParameter"
    ADD CONSTRAINT "fk_WorkflowMainParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate (OID = 26582) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommandTemplate_WorkflowTemplate (OID = 26587) :
--
ALTER TABLE ONLY "WorkflowMainPostCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPostCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_Workflow (OID = 26592) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "fk_WorkflowMainPostCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPostCommand_WorkflowCommand (OID = 26597) :
--
ALTER TABLE ONLY "WorkflowMainPostCommand"
    ADD CONSTRAINT "fk_WorkflowMainPostCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate (OID = 26602) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate"
    FOREIGN KEY ("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowCommandTemplate"("WorkflowCommandTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommandTemplate_WorkflowTemplate (OID = 26607) :
--
ALTER TABLE ONLY "WorkflowMainPreCommandTemplate"
    ADD CONSTRAINT "fk_WorkflowMainPreCommandTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_Workflow (OID = 26612) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "fk_WorkflowMainPreCommand_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainPreCommand_WorkflowCommand (OID = 26617) :
--
ALTER TABLE ONLY "WorkflowMainPreCommand"
    ADD CONSTRAINT "fk_WorkflowMainPreCommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCommand"("WorkflowCommandID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate (OID = 26622) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainStartConditionTemplate_WorkflowTemplate (OID = 26627) :
--
ALTER TABLE ONLY "WorkflowMainStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowMainStartConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_Workflow (OID = 26632) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "fk_WorkflowMainStartCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowMainStartCondition_WorkflowCondition (OID = 26637) :
--
ALTER TABLE ONLY "WorkflowMainStartCondition"
    ADD CONSTRAINT "fk_WorkflowMainStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowNotificationConstructTemplate_NotificationConstructT (OID = 26642) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowNotificationConstructTemplate_NotificationConstructT"
    FOREIGN KEY ("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber") REFERENCES "NotificationConstructTemplate"("NotificationConstructTemplateID", "NotificationConstructTemplateVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstructTemplate_WorkflowTemplate (OID = 26647) :
--
ALTER TABLE ONLY "WorkflowNotificationConstructTemplate"
    ADD CONSTRAINT "fk_WorkflowNotificationConstructTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstruct_NotificationConstruct (OID = 26652) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowNotificationConstruct_NotificationConstruct"
    FOREIGN KEY ("NotificationConstructID", "NotificationConstructVersionNumber") REFERENCES "NotificationConstruct"("NotificationConstructID", "NotificationConstructVersionNumber");
--
-- Definition for index fk_WorkflowNotificationConstruct_Workflow (OID = 26657) :
--
ALTER TABLE ONLY "WorkflowNotificationConstruct"
    ADD CONSTRAINT "fk_WorkflowNotificationConstruct_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowObjectTypeTemplate_WorkflowTemplate1 (OID = 26662) :
--
ALTER TABLE ONLY "WorkflowObjectTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowObjectTypeTemplate_WorkflowTemplate1"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowObjectType_Workflow (OID = 26667) :
--
ALTER TABLE ONLY "WorkflowObjectType"
    ADD CONSTRAINT "fk_WorkflowObjectType_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowParameterTemplate_WorkflowTemplate (OID = 26672) :
--
ALTER TABLE ONLY "WorkflowParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowParameter_Workflow (OID = 26677) :
--
ALTER TABLE ONLY "WorkflowParameter"
    ADD CONSTRAINT "fk_WorkflowParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_Operation (OID = 26682) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_Resource (OID = 26687) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_State (OID = 26692) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_StateItem (OID = 26697) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_WorkflowRoleClaimTemplate_WorkflowRoleTemplate (OID = 26702) :
--
ALTER TABLE ONLY "WorkflowClaimTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleClaimTemplate_WorkflowRoleTemplate"
    FOREIGN KEY ("WorkflowRoleTemplateID") REFERENCES "WorkflowRoleTemplate"("WorkflowRoleTemplateID");
--
-- Definition for index fk_WorkflowRoleClaim_Operation (OID = 26707) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_Operation"
    FOREIGN KEY ("OperationID") REFERENCES "Operation"("OperationID");
--
-- Definition for index fk_WorkflowRoleClaim_Resource (OID = 26712) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_Resource"
    FOREIGN KEY ("ResourceID") REFERENCES "Resource"("ResourceID");
--
-- Definition for index fk_WorkflowRoleClaim_State (OID = 26717) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_State"
    FOREIGN KEY ("StateID") REFERENCES "State"("StateID");
--
-- Definition for index fk_WorkflowRoleClaim_StateItem (OID = 26722) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_StateItem"
    FOREIGN KEY ("StateItemID") REFERENCES "StateItem"("StateItemID");
--
-- Definition for index fk_WorkflowRoleClaim_WorkflowRole (OID = 26727) :
--
ALTER TABLE ONLY "WorkflowClaim"
    ADD CONSTRAINT "fk_WorkflowRoleClaim_WorkflowRole"
    FOREIGN KEY ("WorkflowRoleID") REFERENCES "WorkflowRole"("WorkflowRoleID");
--
-- Definition for index fk_WorkflowRoleTemplate_WorkflowTemplate (OID = 26732) :
--
ALTER TABLE ONLY "WorkflowRoleTemplate"
    ADD CONSTRAINT "fk_WorkflowRoleTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowRole_Workflow (OID = 26737) :
--
ALTER TABLE ONLY "WorkflowRole"
    ADD CONSTRAINT "fk_WorkflowRole_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowStatusTypeTemplate_StatusTypeTemplate (OID = 26742) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowStatusTypeTemplate_StatusTypeTemplate"
    FOREIGN KEY ("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber") REFERENCES "StatusTypeTemplate"("StatusTypeTemplateID", "StatusTypeTemplateVersionNumber");
--
-- Definition for index fk_WorkflowStatusTypeTemplate_WorkflowTemplate (OID = 26747) :
--
ALTER TABLE ONLY "WorkflowStatusTypeTemplate"
    ADD CONSTRAINT "fk_WorkflowStatusTypeTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowStatusType_StatusType (OID = 26752) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "fk_WorkflowStatusType_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES "StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_WorkflowStatusType_Workflow (OID = 26757) :
--
ALTER TABLE ONLY "WorkflowStatusType"
    ADD CONSTRAINT "fk_WorkflowStatusType_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTempate (OID = 26762) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTempate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTemplat (OID = 26767) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTemplat"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteConditionTeplate (OID = 26772) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteConditionTeplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_Workflow (OID = 26777) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_WorkflowCondition (OID = 26782) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionCompleteCondition_WorkflowTransistion (OID = 26787) :
--
ALTER TABLE ONLY "WorkflowTransistionCompleteCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionCompleteCondition_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemp (OID = 26792) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemp"
    FOREIGN KEY ("ParentComponentID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplamplate11 (OID = 26797) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemplamplate11"
    FOREIGN KEY ("ParentComponentID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate (OID = 26802) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchyTte (OID = 26807) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchyTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchyTte"
    FOREIGN KEY ("ChildComponentID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_Workflow (OID = 26812) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchy_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionHierarchy_WorkflowTransistion (OID = 26817) :
--
ALTER TABLE ONLY "WorkflowTransistionHierarchy"
    ADD CONSTRAINT "fk_WorkflowTransistionHierarchy_WorkflowTransistion"
    FOREIGN KEY ("ChildComponentID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTemplate_WorkflowTemplate (OID = 26822) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTemplate_ate (OID = 26827) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTemplate_ate"
    FOREIGN KEY ("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowParameterTemplate"("WorkflowParameterTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameterTempplate (OID = 26832) :
--
ALTER TABLE ONLY "WorkflowTransistionParameterTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionParameterTempplate"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_Workflow (OID = 26837) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_WorkflowParameter (OID = 26842) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_WorkflowParameter"
    FOREIGN KEY ("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowParameter"("WorkflowParameterID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionParameter_WorkflowTransistion (OID = 26847) :
--
ALTER TABLE ONLY "WorkflowTransistionParameter"
    ADD CONSTRAINT "fk_WorkflowTransistionParameter_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTeate (OID = 26852) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTeate"
    FOREIGN KEY ("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowConditionTemplate"("WorkflowConditionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTemplate_WorkflowTemplate (OID = 26857) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartConditionTete (OID = 26862) :
--
ALTER TABLE ONLY "WorkflowTransistionStartConditionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionStartConditionTete"
    FOREIGN KEY ("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTransistionTemplate"("WorkflowTransistionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartCondition_Workflow (OID = 26867) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionStartCondition_WorkflowCondition (OID = 26872) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_WorkflowCondition"
    FOREIGN KEY ("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowCondition"("WorkflowConditionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionStartCondition_WorkflowTransistion (OID = 26877) :
--
ALTER TABLE ONLY "WorkflowTransistionStartCondition"
    ADD CONSTRAINT "fk_WorkflowTransistionStartCondition_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowActionTemplate_WorkflowTemplate (OID = 26882) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowActionTemplate"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowActionTemplate_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_Workflow (OID = 26887) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_WorkflowAction (OID = 26892) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_WorkflowAction"
    FOREIGN KEY ("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowAction"("WorkflowActionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionWorkflowAction_WorkflowTransistion (OID = 26897) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowAction"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowAction_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_Workflow (OID = 26902) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_WorkflowDecision (OID = 26907) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_WorkflowDecision"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowVersionNumber", "WorkflowID");
--
-- Definition for index fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion (OID = 26912) :
--
ALTER TABLE ONLY "WorkflowTransistionWorkflowDecision"
    ADD CONSTRAINT "fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion"
    FOREIGN KEY ("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowTransistion"("WorkflowTransistionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_WorkflowTransistion_Workflow (OID = 26917) :
--
ALTER TABLE ONLY "WorkflowTransistion"
    ADD CONSTRAINT "fk_WorkflowTransistion_Workflow"
    FOREIGN KEY ("WorkflowID", "WorkflowVersionNumber") REFERENCES "Workflow"("WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index fk_Workflow_WorkflowTemplate (OID = 26922) :
--
ALTER TABLE ONLY "Workflow"
    ADD CONSTRAINT "fk_Workflow_WorkflowTemplate"
    FOREIGN KEY ("WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowTemplate"("WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_Workfommand_WorkflowCommand (OID = 26927) :
--
ALTER TABLE ONLY "WorkflowDecisionParameterTemplate"
    ADD CONSTRAINT "fk_Workfommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber") REFERENCES "WorkflowDecisionTemplate"("WorkflowDecisionTemplateID", "WorkflowTemplateID", "WorkflowTemplateVersionNumber");
--
-- Definition for index fk_Workfommand_WorkflowCommand (OID = 26932) :
--
ALTER TABLE ONLY "WorkflowDecisionParameter"
    ADD CONSTRAINT "fk_Workfommand_WorkflowCommand"
    FOREIGN KEY ("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber") REFERENCES "WorkflowDecision"("WorkflowDecisionID", "WorkflowID", "WorkflowVersionNumber");
--
-- Definition for index productspecificationattribute_fk (OID = 26937) :
--
ALTER TABLE ONLY "ProductSpecificationAttribute"
    ADD CONSTRAINT productspecificationattribute_fk
    FOREIGN KEY ("ProductID", "ProductVersionID") REFERENCES "Product"("ProductID", "ProductVersionID");
--
-- Definition for index questionfk (OID = 26942) :
--
ALTER TABLE ONLY "PasswordResetSecrets"
    ADD CONSTRAINT questionfk
    FOREIGN KEY ("QuestionID") REFERENCES "ClassificationType"("ClassificationTypeID") ON DELETE CASCADE;
--
-- Definition for index fk_AccountDocument_Account (OID = 26947) :
--
SET search_path = sts, pg_catalog;
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "fk_AccountDocument_Account"
    FOREIGN KEY ("AccountID") REFERENCES public."Account"("AccountID");
--
-- Definition for index fk_AccountDocument_StsDocument (OID = 26952) :
--
ALTER TABLE ONLY "StsAccountDocument"
    ADD CONSTRAINT "fk_AccountDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_LRDocument_Attachment (OID = 26957) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_Attachment"
    FOREIGN KEY ("AttachmentID") REFERENCES public."Attachment"("AttachmentID");
--
-- Definition for index fk_LRDocument_LRTitle (OID = 26962) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_LRTitle"
    FOREIGN KEY ("LRTitleID") REFERENCES "LRTitle"("LRTitleID");
--
-- Definition for index fk_LRDocument_ProductPurchaseProductTask (OID = 26967) :
--
ALTER TABLE ONLY "LRDocument"
    ADD CONSTRAINT "fk_LRDocument_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRRegisterExtract_LRTitle (OID = 26972) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "fk_LRRegisterExtract_LRTitle"
    FOREIGN KEY ("LRTitleID") REFERENCES "LRTitle"("LRTitleID");
--
-- Definition for index fk_LRRegisterExtract_ProductPurchaseProductTask (OID = 26977) :
--
ALTER TABLE ONLY "LRRegisterExtract"
    ADD CONSTRAINT "fk_LRRegisterExtract_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRTitle_Address (OID = 26982) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_Address"
    FOREIGN KEY ("AddressID") REFERENCES public."Address"("AddressID");
--
-- Definition for index fk_LRTitle_ProductPurchaseProductTask (OID = 26987) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_ProductPurchaseProductTask"
    FOREIGN KEY ("ProductPurchaseProductTaskID") REFERENCES public."ProductPurchaseBusTaskProcessLog"("ProductPurchaseProductTaskID");
--
-- Definition for index fk_LRTitle_StsProperty (OID = 26992) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_StsProperty"
    FOREIGN KEY ("StsPropertyID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_LRTitle_StsSearchProperty (OID = 26997) :
--
ALTER TABLE ONLY "LRTitle"
    ADD CONSTRAINT "fk_LRTitle_StsSearchProperty"
    FOREIGN KEY ("StsSearchPropertyID") REFERENCES "StsSearchPropertyDetail"("StsSearchPropertyDetailID");
--
-- Definition for index fk_StsActorAuthority_StsActor (OID = 27002) :
--
ALTER TABLE ONLY "StsActorAuthority"
    ADD CONSTRAINT "fk_StsActorAuthority_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorProcessLog_StatusType (OID = 27007) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorProcessLog_StatusTypeValue (OID = 27012) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorProcessLog_StsActor (OID = 27017) :
--
ALTER TABLE ONLY "StsActorProcessLog"
    ADD CONSTRAINT "fk_StsActorProcessLog_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorPurchase_StsActorStructure (OID = 27022) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsActorPurchase_StsActorStructure"
    FOREIGN KEY ("MortgageBrokerStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorPurchase_StsActorStructure22 (OID = 27027) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsActorPurchase_StsActorStructure22"
    FOREIGN KEY ("MortgageApplicantStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStructure_Account (OID = 27032) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_Account"
    FOREIGN KEY ("SecondaryStsActorAccountID") REFERENCES public."Account"("AccountID");
--
-- Definition for index fk_StsActorStructure_StsActor (OID = 27037) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_StsActor"
    FOREIGN KEY ("PrimaryStsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStructure_StsActorP (OID = 27042) :
--
ALTER TABLE ONLY "StsActorStructure"
    ADD CONSTRAINT "fk_StsActorStructure_StsActorP"
    FOREIGN KEY ("SecondaryStsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsSearch_StatusType (OID = 27047) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorStsSearch_StatusTypeValue (OID = 27052) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorStsSearch_StsActor (OID = 27057) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsSearch_StsActorStructure (OID = 27062) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsActorStructure"
    FOREIGN KEY ("StsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStsSearch_StsSearch (OID = 27067) :
--
ALTER TABLE ONLY "StsActorStsSearch"
    ADD CONSTRAINT "fk_StsActorStsSearch_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsActorStsTransaction_StatusType (OID = 27072) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsActorStsTransaction_StatusTypeValue (OID = 27077) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsActorStsTransaction_StsActor (OID = 27082) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsActorStsTransaction_StsActorStructure (OID = 27087) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsActorStructure"
    FOREIGN KEY ("StsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsActorStsTransaction_StsTransaction (OID = 27092) :
--
ALTER TABLE ONLY "StsActorStsTransaction"
    ADD CONSTRAINT "fk_StsActorStsTransaction_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsActor_Contact (OID = 27097) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsActor_Contact"
    FOREIGN KEY ("ActorContactID") REFERENCES public."Contact"("ContactID");
--
-- Definition for index fk_StsActor_UserAccountOrganisation (OID = 27102) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsActor_UserAccountOrganisation"
    FOREIGN KEY ("CreatedBy") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsAuthorityStsDocument_StsAuthority (OID = 27107) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "fk_StsAuthorityStsDocument_StsAuthority"
    FOREIGN KEY ("StsAuthorityID") REFERENCES "StsAuthority"("StsAuthorityID");
--
-- Definition for index fk_StsAuthorityStsDocument_StsDocument (OID = 27112) :
--
ALTER TABLE ONLY "StsAuthorityStsDocument"
    ADD CONSTRAINT "fk_StsAuthorityStsDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsAuthority_StsActorAuthority (OID = 27117) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "fk_StsAuthority_StsActorAuthority"
    FOREIGN KEY ("StsActorAuthorityID") REFERENCES "StsActorAuthority"("StsActorAuthorityID");
--
-- Definition for index fk_StsAuthority_StsActorStructure (OID = 27122) :
--
ALTER TABLE ONLY "StsAuthority"
    ADD CONSTRAINT "fk_StsAuthority_StsActorStructure"
    FOREIGN KEY ("StsAuthorityStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsDocumentProcessLog_Contact (OID = 27127) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_Contact"
    FOREIGN KEY ("StatusChangedByContactID") REFERENCES public."Contact"("ContactID");
--
-- Definition for index fk_StsDocumentProcessLog_StatusType (OID = 27132) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsDocumentProcessLog_StatusTypeValue (OID = 27137) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsDocumentProcessLog_StsDocument (OID = 27142) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsDocumentProcessLog_UserAccountOrganisation (OID = 27147) :
--
ALTER TABLE ONLY "StsDocumentProcessLog"
    ADD CONSTRAINT "fk_StsDocumentProcessLog_UserAccountOrganisation"
    FOREIGN KEY ("StatusChangedBy") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsDocument_Attachment (OID = 27152) :
--
ALTER TABLE ONLY "StsDocument"
    ADD CONSTRAINT "fk_StsDocument_Attachment"
    FOREIGN KEY ("AttachmentID") REFERENCES public."Attachment"("AttachmentID");
--
-- Definition for index fk_StsInviteProcessLog_StatusType (OID = 27157) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsInviteProcessLog_StatusTypeValue (OID = 27162) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsInviteProcessLog_StsInvite (OID = 27167) :
--
ALTER TABLE ONLY "StsInviteProcessLog"
    ADD CONSTRAINT "fk_StsInviteProcessLog_StsInvite"
    FOREIGN KEY ("StsInviteID") REFERENCES "StsInvite"("StsInviteID");
--
-- Definition for index fk_StsMortgageShare_StsActor (OID = 27172) :
--
ALTER TABLE ONLY "StsActorPurchase"
    ADD CONSTRAINT "fk_StsMortgageShare_StsActor"
    FOREIGN KEY ("StsActorID") REFERENCES "StsActor"("StsActorID");
--
-- Definition for index fk_StsProperty_Address (OID = 27177) :
--
ALTER TABLE ONLY "PropertyDetail"
    ADD CONSTRAINT "fk_StsProperty_Address"
    FOREIGN KEY ("PropertyDetailAddressID") REFERENCES public."Address"("AddressID");
--
-- Definition for index fk_StsSearchActorDetailDeposit_StsActorPurchase (OID = 27182) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "fk_StsSearchActorDetailDeposit_StsActorPurchase"
    FOREIGN KEY ("StsActorPurchaseID") REFERENCES "StsActorPurchase"("StsActorPurchaseID");
--
-- Definition for index fk_StsSearchDetail_StsSearch (OID = 27187) :
--
ALTER TABLE ONLY "StsSearchDetail"
    ADD CONSTRAINT "fk_StsSearchDetail_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchOrganisationActor_Actor (OID = 27192) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchOrganisationActor_Actor"
    FOREIGN KEY ("ActorID") REFERENCES public."Actor"("ActorID");
--
-- Definition for index fk_StsSearchOrganisationActor_Organisation (OID = 27197) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchOrganisationActor_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index fk_StsSearchPrimaryActor_Invite (OID = 27202) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchPrimaryActor_Invite"
    FOREIGN KEY ("StsInviteID") REFERENCES "StsInvite"("StsInviteID");
--
-- Definition for index fk_StsSearchPrimaryActor_UserAccountOrganisation (OID = 27207) :
--
ALTER TABLE ONLY "StsActor"
    ADD CONSTRAINT "fk_StsSearchPrimaryActor_UserAccountOrganisation"
    FOREIGN KEY ("ActorUserAccountOrganisationID") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsSearchProcessLog_StatusType (OID = 27212) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsSearchProcessLog_StatusTypeValue (OID = 27217) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsSearchProcessLog_StsSearch (OID = 27222) :
--
ALTER TABLE ONLY "StsSearchProcessLog"
    ADD CONSTRAINT "fk_StsSearchProcessLog_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchProperty_StsProperty (OID = 27227) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "fk_StsSearchProperty_StsProperty"
    FOREIGN KEY ("PropertyDetailID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_StsSearchProperty_StsSearch (OID = 27232) :
--
ALTER TABLE ONLY "StsSearchPropertyDetail"
    ADD CONSTRAINT "fk_StsSearchProperty_StsSearch"
    FOREIGN KEY ("StsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchRelation_StatusType (OID = 27237) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsSearchRelation_StatusTypeValue (OID = 27242) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsSearchRelation_StsSearch (OID = 27247) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StsSearch"
    FOREIGN KEY ("BuyerStsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearchRelation_StsSearch2 (OID = 27252) :
--
ALTER TABLE ONLY "StsSearchRelation"
    ADD CONSTRAINT "fk_StsSearchRelation_StsSearch2"
    FOREIGN KEY ("SellerStsSearchID") REFERENCES "StsSearch"("StsSearchID");
--
-- Definition for index fk_StsSearch_UserAccountOrganisation (OID = 27257) :
--
ALTER TABLE ONLY "StsSearch"
    ADD CONSTRAINT "fk_StsSearch_UserAccountOrganisation"
    FOREIGN KEY ("AssignedToUserAccountOrganisationID") REFERENCES public."UserAccountOrganisation"("UserAccountOrganisationID");
--
-- Definition for index fk_StsSourceOfFundsStsDocument_StsDocument (OID = 27262) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "fk_StsSourceOfFundsStsDocument_StsDocument"
    FOREIGN KEY ("StsDocumentID") REFERENCES "StsDocument"("StsDocumentID");
--
-- Definition for index fk_StsSourceOfFundsStsDocument_StsSourceOfFunds (OID = 27267) :
--
ALTER TABLE ONLY "StsSourceOfFundsStsDocument"
    ADD CONSTRAINT "fk_StsSourceOfFundsStsDocument_StsSourceOfFunds"
    FOREIGN KEY ("StsSourceOfFunds") REFERENCES "StsSourceOfFunds"("StsSourceOfFunds");
--
-- Definition for index fk_StsSourceOfFunds_StsActorStructure (OID = 27272) :
--
ALTER TABLE ONLY "StsSourceOfFunds"
    ADD CONSTRAINT "fk_StsSourceOfFunds_StsActorStructure"
    FOREIGN KEY ("SourceOfFundsStsActorStructureID") REFERENCES "StsActorStructure"("StsActorStructureID");
--
-- Definition for index fk_StsTransactionComponent_Artefact (OID = 27277) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "fk_StsTransactionComponent_Artefact"
    FOREIGN KEY ("ArtefactID", "ArtefactVersionNumber") REFERENCES public."Artefact"("ArtefactID", "ArtefactVersionNumber");
--
-- Definition for index fk_StsTransactionComponent_StsTransaction (OID = 27282) :
--
ALTER TABLE ONLY "StsTransactionComponent"
    ADD CONSTRAINT "fk_StsTransactionComponent_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransactionProcessLog_StatusType (OID = 27287) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StatusType"
    FOREIGN KEY ("StatusTypeID", "StatusTypeVersionNumber") REFERENCES public."StatusType"("StatusTypeID", "StatusTypeVersionNumber");
--
-- Definition for index fk_StsTransactionProcessLog_StatusTypeValue (OID = 27292) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StatusTypeValue"
    FOREIGN KEY ("StatusTypeValueID") REFERENCES public."StatusTypeValue"("StatusTypeValueID");
--
-- Definition for index fk_StsTransactionProcessLog_StsTransaction (OID = 27297) :
--
ALTER TABLE ONLY "StsTransactionProcessLog"
    ADD CONSTRAINT "fk_StsTransactionProcessLog_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransactionPropertyDetail_PropertyDetail (OID = 27302) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "fk_StsTransactionPropertyDetail_PropertyDetail"
    FOREIGN KEY ("PropertyDetailID") REFERENCES "PropertyDetail"("PropertyDetailID");
--
-- Definition for index fk_StsTransactionPropertyDetail_StsTransaction (OID = 27307) :
--
ALTER TABLE ONLY "StsTransactionPropertyDetail"
    ADD CONSTRAINT "fk_StsTransactionPropertyDetail_StsTransaction"
    FOREIGN KEY ("StsTransactionID") REFERENCES "StsTransaction"("StsTransactionID");
--
-- Definition for index fk_StsTransaction_Organisation (OID = 27312) :
--
ALTER TABLE ONLY "StsTransaction"
    ADD CONSTRAINT "fk_StsTransaction_Organisation"
    FOREIGN KEY ("OrganisationID") REFERENCES public."Organisation"("OrganisationID");
--
-- Definition for index pkContactRegulator (OID = 27879) :
--
SET search_path = public, pg_catalog;
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "pkContactRegulator"
    PRIMARY KEY ("ContactID", "RegulatorID");
--
-- Definition for index ContactRegulator_RegulatorID_key (OID = 27882) :
--
ALTER TABLE ONLY "ContactRegulator"
    ADD CONSTRAINT "ContactRegulator_RegulatorID_key"
    UNIQUE ("RegulatorID");
--
-- Definition for trigger "public_Plan_audit" (OID = 22350) :
--
CREATE TRIGGER """public_Plan_audit"""
    AFTER INSERT OR DELETE OR UPDATE ON "Plan"
    FOR EACH ROW
    EXECUTE PROCEDURE public_audit."Plan" ();
--
-- Definition for trigger "public_ProductDetail_audit" (OID = 22351) :
--
CREATE TRIGGER """public_ProductDetail_audit"""
    AFTER INSERT OR DELETE OR UPDATE ON "ProductDetail"
    FOR EACH ROW
    EXECUTE PROCEDURE public_audit."ProductDetail" ();
--
-- Comments
--
COMMENT ON SCHEMA public IS 'standard public schema';
COMMENT ON SCHEMA audit IS 'Out-of-table audit/history logging tables and trigger functions';
SET search_path = audit, pg_catalog;
COMMENT ON FUNCTION audit.audit_table (target_table varchar) IS '
Add auditing support to the given table. Row-level changes will be logged with full client query text. No cols are ignored.
';
COMMENT ON FUNCTION audit.audit_table (target_table varchar, audit_rows boolean, audit_query_text boolean, ignored_cols text[]) IS '
Add auditing support to a table.

Arguments:
   target_table:     Table name, schema qualified if not on search_path
   audit_rows:       Record each row change, or only audit at a statement level
   audit_query_text: Record the text of the client query that triggered the audit event?
   ignored_cols:     Columns to exclude from update diffs, ignore updates that change only ignored cols.
';
COMMENT ON FUNCTION audit.if_modified_func () IS '
Track changes to a table at the statement and/or row level.

Optional parameters to trigger in CREATE TRIGGER call:

param 0: boolean, whether to log the query text. Default ''t''.

param 1: text[], columns to ignore in updates. Default [].

         Updates to ignored cols are omitted from changed_fields.

         Updates with only ignored cols changed are not inserted
         into the audit log.

         Almost all the processing work is still done for updates
         that ignored. If you need to save the load, you need to use
         WHEN clause on the trigger instead.

         No warning or error is issued if ignored_cols contains columns
         that do not exist in the target table. This lets you specify
         a standard set of ignored columns.

There is no parameter to disable logging of values. Add this trigger as
a ''FOR EACH STATEMENT'' rather than ''FOR EACH ROW'' trigger if you do not
want to log row values.

Note that the user name logged is the login role for the session. The audit trigger
cannot obtain the active role because it is reset by the SECURITY DEFINER invocation
of the audit trigger its self.
';
COMMENT ON TABLE audit.logged_actions IS 'History of auditable actions on audited tables, from audit.if_modified_func()';
COMMENT ON COLUMN audit.logged_actions.event_id IS 'Unique identifier for each auditable event';
COMMENT ON COLUMN audit.logged_actions.schema_name IS 'Database schema audited table for this event is in';
COMMENT ON COLUMN audit.logged_actions.table_name IS 'Non-schema-qualified table name of table event occured in';
COMMENT ON COLUMN audit.logged_actions.relid IS 'Table OID. Changes with drop/create. Get with ''tablename''::regclass';
COMMENT ON COLUMN audit.logged_actions.session_user_name IS 'Login / session user whose statement caused the audited event';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_tx IS 'Transaction start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_stm IS 'Statement start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_clk IS 'Wall clock time at which audited event''s trigger call occurred';
COMMENT ON COLUMN audit.logged_actions.transaction_id IS 'Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.';
COMMENT ON COLUMN audit.logged_actions.application_name IS 'Application name set when this audit event occurred. Can be changed in-session by client.';
COMMENT ON COLUMN audit.logged_actions.client_addr IS 'IP address of client that issued query. Null for unix domain socket.';
COMMENT ON COLUMN audit.logged_actions.client_port IS 'Remote peer IP port address of client that issued query. Undefined for unix socket.';
COMMENT ON COLUMN audit.logged_actions.client_query IS 'Top-level query that caused this auditable event. May be more than one statement.';
COMMENT ON COLUMN audit.logged_actions.action IS 'Action type; I = insert, D = delete, U = update, T = truncate';
COMMENT ON COLUMN audit.logged_actions.row_data IS 'Record value. Null for statement-level trigger. For INSERT this is the new tuple. For DELETE and UPDATE it is the old tuple.';
COMMENT ON COLUMN audit.logged_actions.changed_fields IS 'New values of fields changed by UPDATE. Null except for row-level UPDATE events.';
COMMENT ON COLUMN audit.logged_actions.statement_only IS '''t'' if audit event is from an FOR EACH STATEMENT trigger, ''f'' for FOR EACH ROW';
SET search_path = public, pg_catalog;
COMMENT ON TABLE public."UserAccountOrganisationStructure" IS 'This can be used when a user needs access to multiple branches';
COMMENT ON VIEW public."vInterfacePanelFieldDetails" IS 'This needs more modifications';
s reset by the SECURITY DEFINER invocation
of the audit trigger its self.
';
COMMENT ON TABLE audit.logged_actions IS 'History of auditable actions on audited tables, from audit.if_modified_func()';
COMMENT ON COLUMN audit.logged_actions.event_id IS 'Unique identifier for each auditable event';
COMMENT ON COLUMN audit.logged_actions.schema_name IS 'Database schema audited table for this event is in';
COMMENT ON COLUMN audit.logged_actions.table_name IS 'Non-schema-qualified table name of table event occured in';
COMMENT ON COLUMN audit.logged_actions.relid IS 'Table OID. Changes with drop/create. Get with ''tablename''::regclass';
COMMENT ON COLUMN audit.logged_actions.session_user_name IS 'Login / session user whose statement caused the audited event';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_tx IS 'Transaction start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_stm IS 'Statement start timestamp for tx in which audited event occurred';
COMMENT ON COLUMN audit.logged_actions.action_tstamp_clk IS 'Wall clock time at which audited event''s trigger call occurred';
COMMENT ON COLUMN audit.logged_actions.transaction_id IS 'Identifier of transaction that made the change. May wrap, but unique paired with action_tstamp_tx.';
COMMENT ON COLUMN audit.logged_actions.application_name IS 'Application name set when this audit event occurred. Can be changed in-session by client.';
COMMENT ON COLUMN audit.logged_actions.client_addr IS 'IP address of client that issued query. Null for unix domain socket.';
COMMENT ON COLUMN audit.logged_actions.client_port IS 'Remote peer IP port address of client that issued query. Undefined for unix socket.';
COMMENT ON COLUMN audit.logged_actions.client_query IS 'Top-level query that caused this auditable event. May be more than one statement.';
COMMENT ON COLUMN audit.logged_actions.action IS 'Action type; I = insert, D = delete, U = update, T = truncate';
COMMENT ON COLUMN audit.logged_actions.row_data IS 'Record value. Null for statement-level trigger. For INSERT this is the new tuple. For DELETE and UPDATE it is the old tuple.';
COMMENT ON COLUMN audit.logged_actions.changed_fields IS 'New values of fields changed by UPDATE. Null except for row-level UPDATE events.';
COMMENT ON COLUMN audit.logged_actions.statement_only IS '''t'' if audit event is from an FOR EACH STATEMENT trigger, ''f'' for FOR EACH ROW';
SET search_path = public, pg_catalog;
COMMENT ON TABLE public."UserAccountOrganisationStructure" IS 'This can be used when a user needs access to multiple branches';
COMMENT ON VIEW public."vInterfacePanelFieldDetails" IS 'This needs more modifications';
