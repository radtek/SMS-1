<?xml version="1.0" encoding="UTF-8"?><Db flnm="TargetFramework" nm="TargetFramework" ver="1.3.4">
  <VerLbl/>
  <VerNotes/>
  <DefTblOpts/>
  <DocFolder>C:\Software\Applications\Bec.TargetFramework\MainLine\Documents</DocFolder>
  <Sch Cm="" nm="Audit">
    <Tbl UsSo="1" nm="AuditAllExclusions">
      <TblOpts/>
      <Pk ClNs="AuditAllExclusionID" nm="PK_AuditAllExclusions"/>
      <Cl au="1" df="" nm="AuditAllExclusionID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SchemaName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TableName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Comment" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="256" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditBaseTables">
      <TblOpts/>
      <Pk ClNs="AuditBaseTableID" nm="PK_AuditBaseTables"/>
      <Cl au="1" df="" nm="AuditBaseTableID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SchemaName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TableName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StrictUserContext" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LogSQL" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BaseTableDDL" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LogInsert" nu="0">
        <DT arr="0" ds="TinyInt" en="" id="-6" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LogUpdate" nu="0">
        <DT arr="0" ds="TinyInt" en="" id="-6" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LogDelete" nu="0">
        <DT arr="0" ds="TinyInt" en="" id="-6" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EnabledFlag" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ViewSchema" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="&lt;All&gt;" nm="ColumnNames" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Idx clu="0" nm="IX_AuditBaseTables_SchemaAndTableName" unq="0">
        <ClNs>SchemaName, TableName</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditDetail">
      <TblOpts/>
      <Pk ClNs="AuditDetailID" nm="pkAuditDetail"/>
      <Cl au="1" df="" nm="AuditDetailID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AuditHeaderID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ColumnName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OldValue" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="NewValue" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fkAuditHeader" prLkCl="AuditHeaderID" upAc="3">
        <PrTb mn="0" nm="AuditHeader" oe="1" sch="Audit" zr="0"/>
        <CdTb mn="1" nm="AuditDetail" oe="0" sch="Audit" zr="1"/>
        <ClPr cdCl="AuditHeaderID" prCl="AuditHeaderID"/>
      </Fk>
      <Idx clu="0" nm="IX_AuditDetail_AuditHeaderID" unq="0">
        <ClNs>AuditHeaderID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditDetailArchive">
      <TblOpts/>
      <Pk ClNs="AuditDetailID" nm="pkAuditDetailArchive"/>
      <Cl au="0" df="" nm="AuditDetailID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AuditHeaderID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ColumnName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OldValue" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="NewValue" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fkAuditHeaderArchive" prLkCl="AuditHeaderID" upAc="3">
        <PrTb mn="0" nm="AuditHeaderArchive" oe="1" sch="Audit" zr="0"/>
        <CdTb mn="1" nm="AuditDetailArchive" oe="0" sch="Audit" zr="1"/>
        <ClPr cdCl="AuditHeaderID" prCl="AuditHeaderID"/>
      </Fk>
      <Idx clu="0" nm="IX_AuditDetailArchive_AuditHeaderID" unq="0">
        <ClNs>AuditHeaderID</ClNs>
      </Idx>
      <Idx clu="0" nm="IX_AuditDetailArchive_ColumnName" unq="0">
        <ClNs>ColumnName</ClNs>
      </Idx>
      <Idx clu="0" nm="IX_AuditDetailArchive_NewValue" unq="0">
        <ClNs>NewValue</ClNs>
      </Idx>
      <Idx clu="0" nm="IX_AuditDetailArchive_OldValue" unq="0">
        <ClNs>OldValue</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditHeader">
      <TblOpts/>
      <Pk ClNs="AuditHeaderID" nm="pkAuditHeader"/>
      <Cl au="1" df="" nm="AuditHeaderID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AuditDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HostName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SysUser" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Application" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TableName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Operation" nu="0">
        <DT arr="0" ds="Char" en="" id="1" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SQLStatement" nu="1">
        <DT arr="0" ds="VarChar(MAX)" en="" id="731" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey2" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey3" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey4" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey5" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RowDescription" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SecondaryRow" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Idx clu="0" nm="IX_AuditHeader_PrimaryKey" unq="0">
        <ClNs>PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowVersion, PrimaryKey</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditHeaderArchive">
      <TblOpts/>
      <Pk ClNs="AuditHeaderID" nm="pkAuditHeaderArchive"/>
      <Cl au="0" df="" nm="AuditHeaderID" nu="0">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AuditDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HostName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SysUser" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Application" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TableName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Operation" nu="0">
        <DT arr="0" ds="Char" en="" id="1" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SQLStatement" nu="1">
        <DT arr="0" ds="VarChar(MAX)" en="" id="731" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey2" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey3" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey4" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryKey5" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="36" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RowDescription" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SecondaryRow" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Idx clu="0" nm="IX_AuditHeaderArchive_AuditDate" unq="0">
        <ClNs>AuditDate</ClNs>
      </Idx>
      <Idx clu="0" nm="IX_AuditHeaderArchive_HostName" unq="0">
        <ClNs>HostName</ClNs>
      </Idx>
      <Idx clu="0" nm="IX_AuditHeaderArchive_PrimaryKeyTableName" unq="0">
        <ClNs>PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, PrimaryKey, TableName</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AuditSettings">
      <TblOpts/>
      <Pk ClNs="AuditSettingID" nm="PK_AuditSettings"/>
      <Cl au="1" df="" nm="AuditSettingID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SettingName" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SettingValue" nu="1">
        <DT arr="0" ds="VarChar" en="" id="12" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AdditionalInfo" nu="1">
        <DT arr="0" ds="VarChar(MAX)" en="" id="731" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints>
        <UnCon nm="U_AuditSettings_SettingName">
          <ClNs>SettingName</ClNs>
        </UnCon>
      </UniqueConstraints>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="SchemaAudit">
      <TblOpts/>
      <Pk ClNs="SchemaAuditID" nm="PK_SchemaAudit"/>
      <Cl au="1" df="" nm="SchemaAuditID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AuditDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LoginName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Event" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Schema" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Object" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TSQL" nu="0">
        <DT arr="0" ds="VarChar(MAX)" en="" id="731" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="XMLEventData" nu="0">
        <DT arr="0" ds="XML" en="" id="728" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Proc nm="[pAutoAuditRebuildAll]">
      <src>&#13;
CREATE PROC [pAutoAuditRebuildAll] &#13;
&#13;
AS &#13;
&#13;
-- Created for AutoAudit Version 3.30a&#13;
-- created by Paul Nielsen and John Sigouin&#13;
-- www.SQLServerBible.com&#13;
-- AutoAudit.codeplex.com&#13;
-- This SP is used to rebuild AutoAudit triggers for ALL tables that are currently setup with AutoAudit based on the settings saved in the AuditBaseTables table.&#13;
&#13;
SET NoCount ON &#13;
&#13;
--get [AuditSettings] &#13;
DECLARE @AuditSchema VARCHAR(50)&#13;
SELECT @AuditSchema = [SettingValue] from [AuditSettings] where [SettingName] = 'AuditSchema'&#13;
&#13;
DECLARE &#13;
   @TableName sysname, &#13;
   @SchemaName sysname, &#13;
   @SQL NVARCHAR(max)&#13;
&#13;
--save the list or tables to a temp table to prevent a cursor issue&#13;
SELECT	SchemaName, TableName&#13;
INTO	#Tables&#13;
FROM	AuditBaseTables&#13;
EXCEPT&#13;
SELECT	SchemaName, TableName&#13;
FROM	AuditAllExclusions&#13;
&#13;
-- for each table&#13;
-- 1&#13;
DECLARE cTables CURSOR FAST_FORWARD READ_ONLY&#13;
  FOR  SELECT SchemaName, TableName &#13;
			  from #Tables&#13;
       INTERSECT&#13;
       SELECT Schema_Name([schema_id]), [name] as TableName&#13;
       FROM sys.objects where type = 'U'&#13;
       Order by 1,2&#13;
--2 &#13;
OPEN cTables&#13;
--3 &#13;
FETCH cTables INTO @SchemaName, @TableName   -- prime the cursor&#13;
WHILE @@Fetch_Status = 0 &#13;
  BEGIN&#13;
		SET @SQL = 'EXEC ' + quotename(@AuditSchema) + '.pAutoAuditRebuild ''' + @SchemaName + ''', ''' + @TableName + ''''&#13;
&#13;
		EXEC (@SQL)&#13;
      FETCH cTables INTO @SchemaName, @TableName   -- fetch next&#13;
  END&#13;
-- 4  &#13;
CLOSE cTables&#13;
-- 5&#13;
DEALLOCATE cTables&#13;
&#13;
DROP TABLE #Tables&#13;
&#13;
RETURN &#13;
&#13;
</src>
    </Proc>
    <Proc nm="[pAutoAuditSetTriggerState]">
      <src>Create PROC [pAutoAuditSetTriggerState] &#13;
	(&#13;
	@SchemaName sysname = 'dbo',  --this is the default schema name for the tables getting AutoAudit added&#13;
	@TableName sysname,&#13;
	@InsertEnabledFlag BIT = 1,	-- State for Insert Trigger: 1 = enabled, 0 = disabled&#13;
	@UpdateEnabledFlag BIT = 1,	-- State for Update Trigger: 1 = enabled, 0 = disabled&#13;
	@DeleteEnabledFlag BIT = 1	-- State for Delete Trigger: 1 = enabled, 0 = disabled&#13;
	) with recompile&#13;
&#13;
AS &#13;
&#13;
-- Created for AutoAudit Version 3.30a&#13;
-- created by Paul Nielsen and John Sigouin&#13;
-- www.SQLServerBible.com&#13;
-- AutoAudit.codeplex.com&#13;
-- This SP is used to enable/disable AutoAudit triggers at the SQL Server level for the specified table.&#13;
&#13;
SET NoCount ON&#13;
 &#13;
DECLARE @SQL NVARCHAR(max),&#13;
		@AuditSchema VARCHAR(50),&#13;
		@AutopAutoAuditRebuildCurrentSetting varchar(100)&#13;
&#13;
--get @AuditSchema &#13;
SELECT @AuditSchema = [SettingValue] from [AuditSettings] where [SettingName] = 'AuditSchema'&#13;
&#13;
--get [AuditSettings] - Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag&#13;
Select	@SQL = 'SELECT @SettingValue = [SettingValue] from ' + quotename(@AuditSchema) + '.[AuditSettings] where [SettingName] = ''Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag'''&#13;
EXEC sp_executesql @SQL, N'@SettingValue varchar(100) OUTPUT', @AutopAutoAuditRebuildCurrentSetting OUTPUT&#13;
&#13;
--disable auto trigger rebuild on schema changes&#13;
--set [AuditSettings] = 0 - Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag&#13;
If @AutopAutoAuditRebuildCurrentSetting = 1&#13;
	BEGIN&#13;
		Select	@SQL = 'Update ' + quotename(@AuditSchema) + '.[AuditSettings] Set [SettingValue] = 0 where [SettingName] = ''Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag'''&#13;
		EXEC (@SQL)&#13;
	END&#13;
&#13;
--Set the Insert Trigger as requested&#13;
Select	@SQL = 'ALTER TABLE ' + quotename(@SchemaName) + '.' + quotename(@TableName) &#13;
	+ Case when @InsertEnabledFlag = 1 then ' ENABLE TRIGGER ' else ' DISABLE TRIGGER ' END&#13;
	+ '[' + @TableName + '_Audit_Insert]'&#13;
EXEC (@SQL)&#13;
&#13;
--Set the Update Trigger as requested&#13;
Select	@SQL = 'ALTER TABLE ' + quotename(@SchemaName) + '.' + quotename(@TableName) &#13;
	+ Case when @UpdateEnabledFlag = 1 then ' ENABLE TRIGGER ' else ' DISABLE TRIGGER ' END&#13;
	+ '[' + @TableName + '_Audit_Update]'&#13;
EXEC (@SQL)&#13;
&#13;
--Set the Delete Trigger as requested&#13;
Select	@SQL = 'ALTER TABLE ' + quotename(@SchemaName) + '.' + quotename(@TableName) &#13;
	+ Case when @DeleteEnabledFlag = 1 then ' ENABLE TRIGGER ' else ' DISABLE TRIGGER ' END&#13;
	+ '[' + @TableName + '_Audit_Delete]'&#13;
EXEC (@SQL)&#13;
&#13;
--reset auto trigger rebuild on schema changes&#13;
--set [AuditSettings] = 1 - Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag&#13;
If @AutopAutoAuditRebuildCurrentSetting = 1&#13;
	BEGIN&#13;
		Select	@SQL = 'Update ' + quotename(@AuditSchema) + '.[AuditSettings] Set [SettingValue] = 1 where [SettingName] = ''Launch pAutoAuditRebuild from SchemaAuditDDLTrigger Enabled Flag'''&#13;
print (@SQL)&#13;
		EXEC (@SQL)&#13;
	END&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[pAutoAuditSetTriggerStateAll]">
      <src>&#13;
CREATE PROC [pAutoAuditSetTriggerStateAll] &#13;
	(&#13;
	@InsertEnabledFlag BIT = 1,	-- State for Insert Trigger: 1 = enabled, 0 = disabled&#13;
	@UpdateEnabledFlag BIT = 1,	-- State for Update Trigger: 1 = enabled, 0 = disabled&#13;
	@DeleteEnabledFlag BIT = 1	-- State for Delete Trigger: 1 = enabled, 0 = disabled&#13;
	)&#13;
AS &#13;
&#13;
-- Created for AutoAudit Version 3.30a&#13;
-- created by Paul Nielsen and John Sigouin&#13;
-- www.SQLServerBible.com&#13;
-- AutoAudit.codeplex.com&#13;
-- This SP is used to enable/disable AutoAudit triggers at the SQL Server level for all tables that are setup with AutoAudit.&#13;
&#13;
SET NoCount ON &#13;
&#13;
--get [AuditSettings] &#13;
DECLARE @AuditSchema VARCHAR(50)&#13;
SELECT @AuditSchema = [SettingValue] from [AuditSettings] where [SettingName] = 'AuditSchema'&#13;
&#13;
DECLARE &#13;
   @TableName sysname, &#13;
   @SchemaName sysname, &#13;
   @SQL NVARCHAR(max)&#13;
&#13;
--save the list or tables to a temp table to prevent a cursor issue&#13;
SELECT	SchemaName, TableName&#13;
INTO	#Tables&#13;
FROM	AuditBaseTables&#13;
EXCEPT&#13;
SELECT	SchemaName, TableName&#13;
FROM	AuditAllExclusions&#13;
&#13;
-- for each table&#13;
-- 1&#13;
DECLARE cTables CURSOR FAST_FORWARD READ_ONLY&#13;
  FOR  SELECT SchemaName, TableName &#13;
			  from #Tables&#13;
       INTERSECT&#13;
       SELECT Schema_Name([schema_id]), [name] as TableName&#13;
       FROM sys.objects where type = 'U'&#13;
--2 &#13;
OPEN cTables&#13;
--3 &#13;
FETCH cTables INTO @SchemaName, @TableName   -- prime the cursor&#13;
WHILE @@Fetch_Status = 0 &#13;
  BEGIN&#13;
		SET @SQL = 'EXEC ' + quotename(@AuditSchema) + '.pAutoAuditSetTriggerState ''' + @SchemaName + ''', ''' + @TableName + ''', '&#13;
			+ cast(@InsertEnabledFlag as varchar(1)) + ', '&#13;
			+ cast(@UpdateEnabledFlag as varchar(1)) + ', '&#13;
			+ cast(@DeleteEnabledFlag as varchar(1)) + ';'&#13;
		EXEC (@SQL)&#13;
      FETCH cTables INTO @SchemaName, @TableName   -- fetch next&#13;
  END&#13;
-- 4  &#13;
CLOSE cTables&#13;
-- 5&#13;
DEALLOCATE cTables&#13;
&#13;
DROP TABLE #Tables&#13;
&#13;
RETURN &#13;
&#13;
</src>
    </Proc>
    <Proc nm="defaultRevEng">
      <src/>
    </Proc>
    <Proc nm="pAutoAuditRebuild">
      <src>CREATE PROC pAutoAuditRebuild (&#13;
   @SchemaName sysname = 'dbo',  --the schema of the table to rebuild&#13;
   @TableName sysname  --the tablename to rebuild&#13;
	) &#13;
AS &#13;
&#13;
-- Created for AutoAudit Version 3.30a&#13;
-- created by Paul Nielsen and John Sigouin&#13;
-- www.SQLServerBible.com&#13;
-- AutoAudit.codeplex.com&#13;
-- This SP is used to rebuild AutoAudit triggers for the specified table based on the settings saved in the AuditBaseTables table.&#13;
&#13;
SET NoCount ON&#13;
&#13;
DECLARE&#13;
   @StrictUserContext	BIT,		-- 2.00 if 0 then permits DML setting of Created, CreatedBy, Modified, ModifiedBy&#13;
   @LogSQL				BIT,&#13;
   @BaseTableDDL		BIT,		-- 0 = don't add audit columns to base table, 1 = add audit columns to base table&#13;
   @LogInsert			TINYINT,	-- 0 = nothing, 1 = header only, 2 = header and detail&#13;
   @LogUpdate			TINYINT,	-- 0 = nothing, 1 = header only, 2 = header and detail&#13;
   @LogDelete			TINYINT,	-- 0 = nothing, 1 = header only, 2 = header and detail&#13;
   @ColumnNames			NVARCHAR(max),  --columns to include when logging details (@Log...=2). Default = '&lt;All&gt;'. Format: '[Col1],[Col2],...'&#13;
   @SQL					NVARCHAR(max)&#13;
&#13;
--get [AuditSettings] &#13;
DECLARE @AuditSchema VARCHAR(50)&#13;
SELECT @AuditSchema = [SettingValue] from [AuditSettings] where [SettingName] = 'AuditSchema'&#13;
   &#13;
--retrieve base table AutoAudit settings from AuditBaseTables table&#13;
SELECT	@StrictUserContext = StrictUserContext,&#13;
		@LogSQL = LogSQL,&#13;
		@BaseTableDDL = BaseTableDDL,&#13;
		@LogInsert = LogInsert,&#13;
		@LogUpdate = LogUpdate,&#13;
		@LogDelete = LogDelete,&#13;
		@ColumnNames = ColumnNames&#13;
FROM	[AuditBaseTables]&#13;
WHERE	[SchemaName] = @SchemaName&#13;
	AND	[TableName] = @TableName;&#13;
&#13;
IF @@rowcount = 0&#13;
	BEGIN&#13;
		--RAISERROR ('INFO - AutoAudit cannot be rebuilt for table [%s].[%s] because it''s settings don''t exist in the AuditBaseTables table.',0,0,@SchemaName,@TableName);&#13;
		RETURN&#13;
	END&#13;
ELSE&#13;
	PRINT 'Rebuilding AutoAudit for table: ' + quotename(@SchemaName) + '.' + quotename(@TableName) &#13;
	SET @SQL = 'EXEC ' + quotename(@AuditSchema) + '.pAutoAudit' + Char(13) + Char(10)&#13;
+ '			@SchemaName = ''' + @SchemaName + ''',' + Char(13) + Char(10)&#13;
+ '			@TableName = ''' + @TableName + ''',' + Char(13) + Char(10)&#13;
+ '			@StrictUserContext = ' + cast(@StrictUserContext as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@LogSQL = ' + cast(@LogSQL as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@BaseTableDDL = ' + cast(@BaseTableDDL as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@LogInsert = ' + cast(@LogInsert as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@LogUpdate = ' + cast(@LogUpdate as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@LogDelete = ' + cast(@LogDelete as varchar) + ',' + Char(13) + Char(10)&#13;
+ '			@ColumnNames = ''' + @ColumnNames + ''';' + Char(13) + Char(10)&#13;
EXEC (@SQL)&#13;
&#13;
</src>
    </Proc>
    <View nm="vAudit">
      <Sql>SELECT	AH.[AuditHeaderID] as AuditID&#13;
			,AH.[AuditDate]&#13;
			,AH.[HostName]&#13;
			,AH.[SysUser]&#13;
			,AH.[Application]&#13;
			,AH.[TableName]&#13;
			,AH.[Operation]&#13;
			,AH.[SQLStatement]&#13;
			,AH.[PrimaryKey]&#13;
			,AH.[PrimaryKey2]&#13;
			,AH.[PrimaryKey3]&#13;
			,AH.[PrimaryKey4]&#13;
			,AH.[PrimaryKey5]&#13;
			,AH.[RowDescription]&#13;
			,AH.[SecondaryRow]&#13;
			,AD.[ColumnName]&#13;
			,AD.[OldValue]&#13;
			,AD.[NewValue]&#13;
			,AH.[RowVersion]&#13;
FROM		[Audit].[AuditHeader] AH&#13;
LEFT JOIN [Audit].[AuditDetail] AD&#13;
	ON		AH.[AuditHeaderID] = AD.[AuditHeaderID];&#13;
</Sql>
    </View>
    <View nm="vAuditAll">
      <Sql>SELECT	cast('Active' as varchar(7)) as Source, * FROM		[Audit].[vAudit] vA&#13;
UNION All &#13;
SELECT	cast('Archive' as varchar(7)) as Source, * FROM		[Audit].[vAuditArchive] vAA;&#13;
</Sql>
    </View>
    <View nm="vAuditArchive">
      <Sql>SELECT	AH.[AuditHeaderID] as AuditID&#13;
			,AH.[AuditDate]&#13;
			,AH.[HostName]&#13;
			,AH.[SysUser]&#13;
			,AH.[Application]&#13;
			,AH.[TableName]&#13;
			,AH.[Operation]&#13;
			,AH.[SQLStatement]&#13;
			,AH.[PrimaryKey]&#13;
			,AH.[PrimaryKey2]&#13;
			,AH.[PrimaryKey3]&#13;
			,AH.[PrimaryKey4]&#13;
			,AH.[PrimaryKey5]&#13;
			,AH.[RowDescription]&#13;
			,AH.[SecondaryRow]&#13;
			,AD.[ColumnName]&#13;
			,AD.[OldValue]&#13;
			,AD.[NewValue]&#13;
			,AH.[RowVersion]&#13;
FROM		[Audit].[AuditHeaderArchive] AH&#13;
LEFT JOIN [Audit].[AuditDetailArchive] AD&#13;
	ON		AH.[AuditHeaderID] = AD.[AuditHeaderID];&#13;
</Sql>
    </View>
    <View nm="vAuditDetailAll">
      <Sql>SELECT	cast('Active' as varchar(7)) as Source &#13;
,[AuditDetailID]&#13;
,[AuditHeaderID]&#13;
,[ColumnName]&#13;
,[OldValue]&#13;
,[NewValue]&#13;
FROM		[Audit].[AuditDetail] AD&#13;
UNION All &#13;
SELECT	cast('Archive' as varchar(7)) as Source &#13;
,[AuditDetailID]&#13;
,[AuditHeaderID]&#13;
,[ColumnName]&#13;
,[OldValue]&#13;
,[NewValue]&#13;
FROM		[Audit].[AuditDetailArchive] ADA;&#13;
</Sql>
    </View>
    <View nm="vAuditHeaderAll">
      <Sql>SELECT	cast('Active' as varchar(7)) as Source &#13;
			,[AuditHeaderID]&#13;
			,[AuditDate]&#13;
			,[HostName]&#13;
			,[SysUser]&#13;
			,[Application]&#13;
			,[TableName]&#13;
			,[Operation]&#13;
			,[SQLStatement]&#13;
			,[PrimaryKey]&#13;
			,[PrimaryKey2]&#13;
			,[PrimaryKey3]&#13;
			,[PrimaryKey4]&#13;
			,[PrimaryKey5]&#13;
			,[RowDescription]&#13;
			,[SecondaryRow]&#13;
			,[RowVersion]&#13;
FROM		[Audit].[AuditHeader] AH&#13;
UNION All &#13;
SELECT	cast('Archive' as varchar(7)) as Source &#13;
			,[AuditHeaderID]&#13;
			,[AuditDate]&#13;
			,[HostName]&#13;
			,[SysUser]&#13;
			,[Application]&#13;
			,[TableName]&#13;
			,[Operation]&#13;
			,[SQLStatement]&#13;
			,[PrimaryKey]&#13;
			,[PrimaryKey2]&#13;
			,[PrimaryKey3]&#13;
			,[PrimaryKey4]&#13;
			,[PrimaryKey5]&#13;
			,[RowDescription]&#13;
			,[SecondaryRow]&#13;
			,[RowVersion]&#13;
FROM		[Audit].[AuditHeaderArchive] AHA;&#13;
</Sql>
    </View>
    <CustomTypes/>
  </Sch>
  <Sch Cm="" nm="dbo">
    <Tbl UsSo="1" nm="Account">
      <TblOpts/>
      <Pk ClNs="AccountID" nm="pkAccount"/>
      <Cl au="0" df="newid()" nm="AccountID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="CountryTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountClassificationTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="CustomerTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BusinessTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PreferredContactMethodID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IndustryTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress1" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress2" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress3" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DoNotPhone" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DoNotEmail" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Fax" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsPrivate" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OwnerID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryContactID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentAccountID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MasterID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DoNotTelephone" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_Account_Account" prLkCl="AccountID" upAc="3">
        <PrTb mn="0" nm="Account" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="Account" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ParentAccountID" prCl="AccountID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Account_Contact" prLkCl="ContactID" upAc="3">
        <PrTb mn="0" nm="Contact" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="Account" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PrimaryContactID" prCl="ContactID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Account_OrganisationUnit" prLkCl="OrganisationUnitID" upAc="3">
        <PrTb mn="0" nm="OrganisationUnit" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="Account" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationUnitID" prCl="OrganisationUnitID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Account_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Account_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Account' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Account]', 'd', NULL, &#13;
  convert(varchar(36),src.[AccountID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AccountID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Account]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AccountID],121) as [AccountID]&#13;
	,convert(varchar(50),deleted.[AccountName],121) as [AccountName]&#13;
	,convert(varchar(50),deleted.[CountryTypeID],121) as [CountryTypeID]&#13;
	,convert(varchar(50),deleted.[AccountClassificationTypeID],121) as [AccountClassificationTypeID]&#13;
	,convert(varchar(50),deleted.[CustomerTypeID],121) as [CustomerTypeID]&#13;
	,convert(varchar(50),deleted.[BusinessTypeID],121) as [BusinessTypeID]&#13;
	,convert(varchar(50),deleted.[PreferredContactMethodID],121) as [PreferredContactMethodID]&#13;
	,convert(varchar(50),deleted.[IndustryTypeID],121) as [IndustryTypeID]&#13;
	,convert(varchar(50),deleted.[AccountTypeID],121) as [AccountTypeID]&#13;
	,convert(varchar(50),deleted.[AccountSubTypeID],121) as [AccountSubTypeID]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[EmailAddress1],121) as [EmailAddress1]&#13;
	,convert(varchar(50),deleted.[EmailAddress2],121) as [EmailAddress2]&#13;
	,convert(varchar(50),deleted.[EmailAddress3],121) as [EmailAddress3]&#13;
	,convert(varchar(50),deleted.[DoNotPhone],121) as [DoNotPhone]&#13;
	,convert(varchar(50),deleted.[DoNotEmail],121) as [DoNotEmail]&#13;
	,convert(varchar(50),deleted.[Fax],121) as [Fax]&#13;
	,convert(varchar(50),deleted.[IsPrivate],121) as [IsPrivate]&#13;
	,convert(varchar(50),deleted.[Telephone1],121) as [Telephone1]&#13;
	,convert(varchar(50),deleted.[Telephone2],121) as [Telephone2]&#13;
	,convert(varchar(50),deleted.[Telephone3],121) as [Telephone3]&#13;
	,convert(varchar(50),deleted.[StateTypeID],121) as [StateTypeID]&#13;
	,convert(varchar(50),deleted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[PrimaryContactID],121) as [PrimaryContactID]&#13;
	,convert(varchar(50),deleted.[ParentAccountID],121) as [ParentAccountID]&#13;
	,convert(varchar(50),deleted.[MasterID],121) as [MasterID]&#13;
	,convert(varchar(50),deleted.[DoNotTelephone],121) as [DoNotTelephone]&#13;
	,convert(varchar(50),deleted.[MobileNumber1],121) as [MobileNumber1]&#13;
	,convert(varchar(50),deleted.[MobileNumber2],121) as [MobileNumber2]&#13;
	,convert(varchar(50),deleted.[MobileNumber3],121) as [MobileNumber3]&#13;
	,convert(varchar(50),deleted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),deleted.[AccountCategoryID],121) as [AccountCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AccountID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AccountID]&#13;
,[AccountName]&#13;
,[CountryTypeID]&#13;
,[AccountClassificationTypeID]&#13;
,[CustomerTypeID]&#13;
,[BusinessTypeID]&#13;
,[PreferredContactMethodID]&#13;
,[IndustryTypeID]&#13;
,[AccountTypeID]&#13;
,[AccountSubTypeID]&#13;
,[Description]&#13;
,[EmailAddress1]&#13;
,[EmailAddress2]&#13;
,[EmailAddress3]&#13;
,[DoNotPhone]&#13;
,[DoNotEmail]&#13;
,[Fax]&#13;
,[IsPrivate]&#13;
,[Telephone1]&#13;
,[Telephone2]&#13;
,[Telephone3]&#13;
,[StateTypeID]&#13;
,[OwnerID]&#13;
,[OrganisationUnitID]&#13;
,[PrimaryContactID]&#13;
,[ParentAccountID]&#13;
,[MasterID]&#13;
,[DoNotTelephone]&#13;
,[MobileNumber1]&#13;
,[MobileNumber2]&#13;
,[MobileNumber3]&#13;
,[ParentID]&#13;
,[AccountCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Account_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Account_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Account_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Account' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Account]', 'i', NULL, &#13;
		convert(varchar(36),src.[AccountID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AccountID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Account]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Account] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AccountID],121) as [AccountID]&#13;
	,convert(varchar(50),inserted.[AccountName],121) as [AccountName]&#13;
	,convert(varchar(50),inserted.[CountryTypeID],121) as [CountryTypeID]&#13;
	,convert(varchar(50),inserted.[AccountClassificationTypeID],121) as [AccountClassificationTypeID]&#13;
	,convert(varchar(50),inserted.[CustomerTypeID],121) as [CustomerTypeID]&#13;
	,convert(varchar(50),inserted.[BusinessTypeID],121) as [BusinessTypeID]&#13;
	,convert(varchar(50),inserted.[PreferredContactMethodID],121) as [PreferredContactMethodID]&#13;
	,convert(varchar(50),inserted.[IndustryTypeID],121) as [IndustryTypeID]&#13;
	,convert(varchar(50),inserted.[AccountTypeID],121) as [AccountTypeID]&#13;
	,convert(varchar(50),inserted.[AccountSubTypeID],121) as [AccountSubTypeID]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[EmailAddress1],121) as [EmailAddress1]&#13;
	,convert(varchar(50),inserted.[EmailAddress2],121) as [EmailAddress2]&#13;
	,convert(varchar(50),inserted.[EmailAddress3],121) as [EmailAddress3]&#13;
	,convert(varchar(50),inserted.[DoNotPhone],121) as [DoNotPhone]&#13;
	,convert(varchar(50),inserted.[DoNotEmail],121) as [DoNotEmail]&#13;
	,convert(varchar(50),inserted.[Fax],121) as [Fax]&#13;
	,convert(varchar(50),inserted.[IsPrivate],121) as [IsPrivate]&#13;
	,convert(varchar(50),inserted.[Telephone1],121) as [Telephone1]&#13;
	,convert(varchar(50),inserted.[Telephone2],121) as [Telephone2]&#13;
	,convert(varchar(50),inserted.[Telephone3],121) as [Telephone3]&#13;
	,convert(varchar(50),inserted.[StateTypeID],121) as [StateTypeID]&#13;
	,convert(varchar(50),inserted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[PrimaryContactID],121) as [PrimaryContactID]&#13;
	,convert(varchar(50),inserted.[ParentAccountID],121) as [ParentAccountID]&#13;
	,convert(varchar(50),inserted.[MasterID],121) as [MasterID]&#13;
	,convert(varchar(50),inserted.[DoNotTelephone],121) as [DoNotTelephone]&#13;
	,convert(varchar(50),inserted.[MobileNumber1],121) as [MobileNumber1]&#13;
	,convert(varchar(50),inserted.[MobileNumber2],121) as [MobileNumber2]&#13;
	,convert(varchar(50),inserted.[MobileNumber3],121) as [MobileNumber3]&#13;
	,convert(varchar(50),inserted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),inserted.[AccountCategoryID],121) as [AccountCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AccountID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AccountID]&#13;
,[AccountName]&#13;
,[CountryTypeID]&#13;
,[AccountClassificationTypeID]&#13;
,[CustomerTypeID]&#13;
,[BusinessTypeID]&#13;
,[PreferredContactMethodID]&#13;
,[IndustryTypeID]&#13;
,[AccountTypeID]&#13;
,[AccountSubTypeID]&#13;
,[Description]&#13;
,[EmailAddress1]&#13;
,[EmailAddress2]&#13;
,[EmailAddress3]&#13;
,[DoNotPhone]&#13;
,[DoNotEmail]&#13;
,[Fax]&#13;
,[IsPrivate]&#13;
,[Telephone1]&#13;
,[Telephone2]&#13;
,[Telephone3]&#13;
,[StateTypeID]&#13;
,[OwnerID]&#13;
,[OrganisationUnitID]&#13;
,[PrimaryContactID]&#13;
,[ParentAccountID]&#13;
,[MasterID]&#13;
,[DoNotTelephone]&#13;
,[MobileNumber1]&#13;
,[MobileNumber2]&#13;
,[MobileNumber3]&#13;
,[ParentID]&#13;
,[AccountCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Account_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Account_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Account_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Account' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AccountID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AccountID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AccountID],121),'&lt;-null-&gt;') as [dAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountID],121),'&lt;-null-&gt;') as [iAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountName],121),'&lt;-null-&gt;') as [dAccountName]&#13;
	,isnull(convert(varchar(50),inserted.[AccountName],121),'&lt;-null-&gt;') as [iAccountName]&#13;
	,isnull(convert(varchar(50),deleted.[CountryTypeID],121),'&lt;-null-&gt;') as [dCountryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CountryTypeID],121),'&lt;-null-&gt;') as [iCountryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountClassificationTypeID],121),'&lt;-null-&gt;') as [dAccountClassificationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountClassificationTypeID],121),'&lt;-null-&gt;') as [iAccountClassificationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[CustomerTypeID],121),'&lt;-null-&gt;') as [dCustomerTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CustomerTypeID],121),'&lt;-null-&gt;') as [iCustomerTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[BusinessTypeID],121),'&lt;-null-&gt;') as [dBusinessTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[BusinessTypeID],121),'&lt;-null-&gt;') as [iBusinessTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [dPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),inserted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [iPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),deleted.[IndustryTypeID],121),'&lt;-null-&gt;') as [dIndustryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[IndustryTypeID],121),'&lt;-null-&gt;') as [iIndustryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountTypeID],121),'&lt;-null-&gt;') as [dAccountTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountTypeID],121),'&lt;-null-&gt;') as [iAccountTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountSubTypeID],121),'&lt;-null-&gt;') as [dAccountSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountSubTypeID],121),'&lt;-null-&gt;') as [iAccountSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress1],121),'&lt;-null-&gt;') as [dEmailAddress1]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress1],121),'&lt;-null-&gt;') as [iEmailAddress1]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress2],121),'&lt;-null-&gt;') as [dEmailAddress2]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress2],121),'&lt;-null-&gt;') as [iEmailAddress2]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress3],121),'&lt;-null-&gt;') as [dEmailAddress3]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress3],121),'&lt;-null-&gt;') as [iEmailAddress3]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotPhone],121),'&lt;-null-&gt;') as [dDoNotPhone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotPhone],121),'&lt;-null-&gt;') as [iDoNotPhone]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotEmail],121),'&lt;-null-&gt;') as [dDoNotEmail]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotEmail],121),'&lt;-null-&gt;') as [iDoNotEmail]&#13;
	,isnull(convert(varchar(50),deleted.[Fax],121),'&lt;-null-&gt;') as [dFax]&#13;
	,isnull(convert(varchar(50),inserted.[Fax],121),'&lt;-null-&gt;') as [iFax]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrivate],121),'&lt;-null-&gt;') as [dIsPrivate]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrivate],121),'&lt;-null-&gt;') as [iIsPrivate]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone1],121),'&lt;-null-&gt;') as [dTelephone1]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone1],121),'&lt;-null-&gt;') as [iTelephone1]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone2],121),'&lt;-null-&gt;') as [dTelephone2]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone2],121),'&lt;-null-&gt;') as [iTelephone2]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone3],121),'&lt;-null-&gt;') as [dTelephone3]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone3],121),'&lt;-null-&gt;') as [iTelephone3]&#13;
	,isnull(convert(varchar(50),deleted.[StateTypeID],121),'&lt;-null-&gt;') as [dStateTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[StateTypeID],121),'&lt;-null-&gt;') as [iStateTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[PrimaryContactID],121),'&lt;-null-&gt;') as [dPrimaryContactID]&#13;
	,isnull(convert(varchar(50),inserted.[PrimaryContactID],121),'&lt;-null-&gt;') as [iPrimaryContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentAccountID],121),'&lt;-null-&gt;') as [dParentAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentAccountID],121),'&lt;-null-&gt;') as [iParentAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[MasterID],121),'&lt;-null-&gt;') as [dMasterID]&#13;
	,isnull(convert(varchar(50),inserted.[MasterID],121),'&lt;-null-&gt;') as [iMasterID]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotTelephone],121),'&lt;-null-&gt;') as [dDoNotTelephone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotTelephone],121),'&lt;-null-&gt;') as [iDoNotTelephone]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber1],121),'&lt;-null-&gt;') as [dMobileNumber1]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber1],121),'&lt;-null-&gt;') as [iMobileNumber1]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber2],121),'&lt;-null-&gt;') as [dMobileNumber2]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber2],121),'&lt;-null-&gt;') as [iMobileNumber2]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber3],121),'&lt;-null-&gt;') as [dMobileNumber3]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber3],121),'&lt;-null-&gt;') as [iMobileNumber3]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountCategoryID],121),'&lt;-null-&gt;') as [dAccountCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountCategoryID],121),'&lt;-null-&gt;') as [iAccountCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAccountID]&#13;
,[dAccountName]&#13;
,[dCountryTypeID]&#13;
,[dAccountClassificationTypeID]&#13;
,[dCustomerTypeID]&#13;
,[dBusinessTypeID]&#13;
,[dPreferredContactMethodID]&#13;
,[dIndustryTypeID]&#13;
,[dAccountTypeID]&#13;
,[dAccountSubTypeID]&#13;
,[dDescription]&#13;
,[dEmailAddress1]&#13;
,[dEmailAddress2]&#13;
,[dEmailAddress3]&#13;
,[dDoNotPhone]&#13;
,[dDoNotEmail]&#13;
,[dFax]&#13;
,[dIsPrivate]&#13;
,[dTelephone1]&#13;
,[dTelephone2]&#13;
,[dTelephone3]&#13;
,[dStateTypeID]&#13;
,[dOwnerID]&#13;
,[dOrganisationUnitID]&#13;
,[dPrimaryContactID]&#13;
,[dParentAccountID]&#13;
,[dMasterID]&#13;
,[dDoNotTelephone]&#13;
,[dMobileNumber1]&#13;
,[dMobileNumber2]&#13;
,[dMobileNumber3]&#13;
,[dParentID]&#13;
,[dAccountCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAccountID]&#13;
,[iAccountName]&#13;
,[iCountryTypeID]&#13;
,[iAccountClassificationTypeID]&#13;
,[iCustomerTypeID]&#13;
,[iBusinessTypeID]&#13;
,[iPreferredContactMethodID]&#13;
,[iIndustryTypeID]&#13;
,[iAccountTypeID]&#13;
,[iAccountSubTypeID]&#13;
,[iDescription]&#13;
,[iEmailAddress1]&#13;
,[iEmailAddress2]&#13;
,[iEmailAddress3]&#13;
,[iDoNotPhone]&#13;
,[iDoNotEmail]&#13;
,[iFax]&#13;
,[iIsPrivate]&#13;
,[iTelephone1]&#13;
,[iTelephone2]&#13;
,[iTelephone3]&#13;
,[iStateTypeID]&#13;
,[iOwnerID]&#13;
,[iOrganisationUnitID]&#13;
,[iPrimaryContactID]&#13;
,[iParentAccountID]&#13;
,[iMasterID]&#13;
,[iDoNotTelephone]&#13;
,[iMobileNumber1]&#13;
,[iMobileNumber2]&#13;
,[iMobileNumber3]&#13;
,[iParentID]&#13;
,[iAccountCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Account]', 'u', NULL, 		convert(varchar(36),inserted.[AccountID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AccountID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Account]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Account] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AccountID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AccountID],121),'&lt;-null-&gt;') as [dAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountID],121),'&lt;-null-&gt;') as [iAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountName],121),'&lt;-null-&gt;') as [dAccountName]&#13;
	,isnull(convert(varchar(50),inserted.[AccountName],121),'&lt;-null-&gt;') as [iAccountName]&#13;
	,isnull(convert(varchar(50),deleted.[CountryTypeID],121),'&lt;-null-&gt;') as [dCountryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CountryTypeID],121),'&lt;-null-&gt;') as [iCountryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountClassificationTypeID],121),'&lt;-null-&gt;') as [dAccountClassificationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountClassificationTypeID],121),'&lt;-null-&gt;') as [iAccountClassificationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[CustomerTypeID],121),'&lt;-null-&gt;') as [dCustomerTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CustomerTypeID],121),'&lt;-null-&gt;') as [iCustomerTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[BusinessTypeID],121),'&lt;-null-&gt;') as [dBusinessTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[BusinessTypeID],121),'&lt;-null-&gt;') as [iBusinessTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [dPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),inserted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [iPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),deleted.[IndustryTypeID],121),'&lt;-null-&gt;') as [dIndustryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[IndustryTypeID],121),'&lt;-null-&gt;') as [iIndustryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountTypeID],121),'&lt;-null-&gt;') as [dAccountTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountTypeID],121),'&lt;-null-&gt;') as [iAccountTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountSubTypeID],121),'&lt;-null-&gt;') as [dAccountSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountSubTypeID],121),'&lt;-null-&gt;') as [iAccountSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress1],121),'&lt;-null-&gt;') as [dEmailAddress1]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress1],121),'&lt;-null-&gt;') as [iEmailAddress1]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress2],121),'&lt;-null-&gt;') as [dEmailAddress2]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress2],121),'&lt;-null-&gt;') as [iEmailAddress2]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress3],121),'&lt;-null-&gt;') as [dEmailAddress3]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress3],121),'&lt;-null-&gt;') as [iEmailAddress3]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotPhone],121),'&lt;-null-&gt;') as [dDoNotPhone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotPhone],121),'&lt;-null-&gt;') as [iDoNotPhone]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotEmail],121),'&lt;-null-&gt;') as [dDoNotEmail]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotEmail],121),'&lt;-null-&gt;') as [iDoNotEmail]&#13;
	,isnull(convert(varchar(50),deleted.[Fax],121),'&lt;-null-&gt;') as [dFax]&#13;
	,isnull(convert(varchar(50),inserted.[Fax],121),'&lt;-null-&gt;') as [iFax]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrivate],121),'&lt;-null-&gt;') as [dIsPrivate]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrivate],121),'&lt;-null-&gt;') as [iIsPrivate]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone1],121),'&lt;-null-&gt;') as [dTelephone1]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone1],121),'&lt;-null-&gt;') as [iTelephone1]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone2],121),'&lt;-null-&gt;') as [dTelephone2]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone2],121),'&lt;-null-&gt;') as [iTelephone2]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone3],121),'&lt;-null-&gt;') as [dTelephone3]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone3],121),'&lt;-null-&gt;') as [iTelephone3]&#13;
	,isnull(convert(varchar(50),deleted.[StateTypeID],121),'&lt;-null-&gt;') as [dStateTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[StateTypeID],121),'&lt;-null-&gt;') as [iStateTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[PrimaryContactID],121),'&lt;-null-&gt;') as [dPrimaryContactID]&#13;
	,isnull(convert(varchar(50),inserted.[PrimaryContactID],121),'&lt;-null-&gt;') as [iPrimaryContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentAccountID],121),'&lt;-null-&gt;') as [dParentAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentAccountID],121),'&lt;-null-&gt;') as [iParentAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[MasterID],121),'&lt;-null-&gt;') as [dMasterID]&#13;
	,isnull(convert(varchar(50),inserted.[MasterID],121),'&lt;-null-&gt;') as [iMasterID]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotTelephone],121),'&lt;-null-&gt;') as [dDoNotTelephone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotTelephone],121),'&lt;-null-&gt;') as [iDoNotTelephone]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber1],121),'&lt;-null-&gt;') as [dMobileNumber1]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber1],121),'&lt;-null-&gt;') as [iMobileNumber1]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber2],121),'&lt;-null-&gt;') as [dMobileNumber2]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber2],121),'&lt;-null-&gt;') as [iMobileNumber2]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber3],121),'&lt;-null-&gt;') as [dMobileNumber3]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber3],121),'&lt;-null-&gt;') as [iMobileNumber3]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[AccountCategoryID],121),'&lt;-null-&gt;') as [dAccountCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountCategoryID],121),'&lt;-null-&gt;') as [iAccountCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AccountID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAccountID]&#13;
,[dAccountName]&#13;
,[dCountryTypeID]&#13;
,[dAccountClassificationTypeID]&#13;
,[dCustomerTypeID]&#13;
,[dBusinessTypeID]&#13;
,[dPreferredContactMethodID]&#13;
,[dIndustryTypeID]&#13;
,[dAccountTypeID]&#13;
,[dAccountSubTypeID]&#13;
,[dDescription]&#13;
,[dEmailAddress1]&#13;
,[dEmailAddress2]&#13;
,[dEmailAddress3]&#13;
,[dDoNotPhone]&#13;
,[dDoNotEmail]&#13;
,[dFax]&#13;
,[dIsPrivate]&#13;
,[dTelephone1]&#13;
,[dTelephone2]&#13;
,[dTelephone3]&#13;
,[dStateTypeID]&#13;
,[dOwnerID]&#13;
,[dOrganisationUnitID]&#13;
,[dPrimaryContactID]&#13;
,[dParentAccountID]&#13;
,[dMasterID]&#13;
,[dDoNotTelephone]&#13;
,[dMobileNumber1]&#13;
,[dMobileNumber2]&#13;
,[dMobileNumber3]&#13;
,[dParentID]&#13;
,[dAccountCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAccountID]&#13;
,[iAccountName]&#13;
,[iCountryTypeID]&#13;
,[iAccountClassificationTypeID]&#13;
,[iCustomerTypeID]&#13;
,[iBusinessTypeID]&#13;
,[iPreferredContactMethodID]&#13;
,[iIndustryTypeID]&#13;
,[iAccountTypeID]&#13;
,[iAccountSubTypeID]&#13;
,[iDescription]&#13;
,[iEmailAddress1]&#13;
,[iEmailAddress2]&#13;
,[iEmailAddress3]&#13;
,[iDoNotPhone]&#13;
,[iDoNotEmail]&#13;
,[iFax]&#13;
,[iIsPrivate]&#13;
,[iTelephone1]&#13;
,[iTelephone2]&#13;
,[iTelephone3]&#13;
,[iStateTypeID]&#13;
,[iOwnerID]&#13;
,[iOrganisationUnitID]&#13;
,[iPrimaryContactID]&#13;
,[iParentAccountID]&#13;
,[iMasterID]&#13;
,[iDoNotTelephone]&#13;
,[iMobileNumber1]&#13;
,[iMobileNumber2]&#13;
,[iMobileNumber3]&#13;
,[iParentID]&#13;
,[iAccountCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Account]', 'u', NULL,   convert(varchar(36),inserted.[AccountID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AccountID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AccountID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Account] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Account] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Account_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Address">
      <TblOpts/>
      <Pk ClNs="AddressID" nm="Key3"/>
      <Cl au="0" df="newid()" nm="AddressID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PrimaryContactName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Line1" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Line2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Line3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="City" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateOrProvince" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="County" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Country" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PostOfficeBox" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PostalCode" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UTCOffSet" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Latitude" nu="1">
        <DT arr="0" ds="Float" en="" id="6" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Longitude" nu="1">
        <DT arr="0" ds="Float" en="" id="6" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Fax" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AddressTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="AddressNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsPrimaryAddress" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AddressCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AddressSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BuildingName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_Address_ClassificationType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="Address" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="AddressTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ApplicationLog">
      <TblOpts/>
      <Pk ClNs="Id" nm="PK_Logs"/>
      <Cl au="1" df="" nm="Id" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventDateTime" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventLevel" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MachineName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventMessage" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ErrorSource" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ErrorClass" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ErrorMethod" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ErrorMessage" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="InnerErrorMessage" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Attachment">
      <TblOpts/>
      <Pk ClNs="AttachmentID" nm="pkAttachment"/>
      <Cl au="0" df="newid()" nm="AttachmentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MimeType" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="256" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Body" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Subject" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FileName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FileSize" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AttachmentDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_Attachment_AttachmentDetail" prLkCl="AttachmentDetailID" upAc="3">
        <PrTb mn="0" nm="AttachmentDetail" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="Attachment" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="AttachmentDetailID" prCl="AttachmentDetailID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Attachment_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Attachment_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Attachment' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Attachment]', 'd', NULL, &#13;
  convert(varchar(36),src.[AttachmentID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AttachmentID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Attachment]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AttachmentID],121) as [AttachmentID]&#13;
	,convert(varchar(50),deleted.[MimeType],121) as [MimeType]&#13;
	,convert(varchar(50),deleted.[Body],121) as [Body]&#13;
	,convert(varchar(50),deleted.[Subject],121) as [Subject]&#13;
	,convert(varchar(50),deleted.[FileName],121) as [FileName]&#13;
	,convert(varchar(50),deleted.[FileSize],121) as [FileSize]&#13;
	,convert(varchar(50),deleted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AttachmentID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AttachmentID]&#13;
,[MimeType]&#13;
,[Body]&#13;
,[Subject]&#13;
,[FileName]&#13;
,[FileSize]&#13;
,[AttachmentDetailID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Attachment_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Attachment_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Attachment_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Attachment' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Attachment]', 'i', NULL, &#13;
		convert(varchar(36),src.[AttachmentID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AttachmentID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Attachment]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Attachment] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AttachmentID],121) as [AttachmentID]&#13;
	,convert(varchar(50),inserted.[MimeType],121) as [MimeType]&#13;
	,convert(varchar(50),inserted.[Body],121) as [Body]&#13;
	,convert(varchar(50),inserted.[Subject],121) as [Subject]&#13;
	,convert(varchar(50),inserted.[FileName],121) as [FileName]&#13;
	,convert(varchar(50),inserted.[FileSize],121) as [FileSize]&#13;
	,convert(varchar(50),inserted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AttachmentID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AttachmentID]&#13;
,[MimeType]&#13;
,[Body]&#13;
,[Subject]&#13;
,[FileName]&#13;
,[FileSize]&#13;
,[AttachmentDetailID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Attachment_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Attachment_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Attachment_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Attachment' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AttachmentID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentID],121),'&lt;-null-&gt;') as [dAttachmentID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentID],121),'&lt;-null-&gt;') as [iAttachmentID]&#13;
	,isnull(convert(varchar(50),deleted.[MimeType],121),'&lt;-null-&gt;') as [dMimeType]&#13;
	,isnull(convert(varchar(50),inserted.[MimeType],121),'&lt;-null-&gt;') as [iMimeType]&#13;
	,isnull(convert(varchar(50),deleted.[Body],121),'&lt;-null-&gt;') as [dBody]&#13;
	,isnull(convert(varchar(50),inserted.[Body],121),'&lt;-null-&gt;') as [iBody]&#13;
	,isnull(convert(varchar(50),deleted.[Subject],121),'&lt;-null-&gt;') as [dSubject]&#13;
	,isnull(convert(varchar(50),inserted.[Subject],121),'&lt;-null-&gt;') as [iSubject]&#13;
	,isnull(convert(varchar(50),deleted.[FileName],121),'&lt;-null-&gt;') as [dFileName]&#13;
	,isnull(convert(varchar(50),inserted.[FileName],121),'&lt;-null-&gt;') as [iFileName]&#13;
	,isnull(convert(varchar(50),deleted.[FileSize],121),'&lt;-null-&gt;') as [dFileSize]&#13;
	,isnull(convert(varchar(50),inserted.[FileSize],121),'&lt;-null-&gt;') as [iFileSize]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentID]&#13;
,[dMimeType]&#13;
,[dBody]&#13;
,[dSubject]&#13;
,[dFileName]&#13;
,[dFileSize]&#13;
,[dAttachmentDetailID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentID]&#13;
,[iMimeType]&#13;
,[iBody]&#13;
,[iSubject]&#13;
,[iFileName]&#13;
,[iFileSize]&#13;
,[iAttachmentDetailID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Attachment]', 'u', NULL, 		convert(varchar(36),inserted.[AttachmentID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Attachment]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Attachment] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentID],121),'&lt;-null-&gt;') as [dAttachmentID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentID],121),'&lt;-null-&gt;') as [iAttachmentID]&#13;
	,isnull(convert(varchar(50),deleted.[MimeType],121),'&lt;-null-&gt;') as [dMimeType]&#13;
	,isnull(convert(varchar(50),inserted.[MimeType],121),'&lt;-null-&gt;') as [iMimeType]&#13;
	,isnull(convert(varchar(50),deleted.[Body],121),'&lt;-null-&gt;') as [dBody]&#13;
	,isnull(convert(varchar(50),inserted.[Body],121),'&lt;-null-&gt;') as [iBody]&#13;
	,isnull(convert(varchar(50),deleted.[Subject],121),'&lt;-null-&gt;') as [dSubject]&#13;
	,isnull(convert(varchar(50),inserted.[Subject],121),'&lt;-null-&gt;') as [iSubject]&#13;
	,isnull(convert(varchar(50),deleted.[FileName],121),'&lt;-null-&gt;') as [dFileName]&#13;
	,isnull(convert(varchar(50),inserted.[FileName],121),'&lt;-null-&gt;') as [iFileName]&#13;
	,isnull(convert(varchar(50),deleted.[FileSize],121),'&lt;-null-&gt;') as [dFileSize]&#13;
	,isnull(convert(varchar(50),inserted.[FileSize],121),'&lt;-null-&gt;') as [iFileSize]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AttachmentID],121)) = quotename(convert(varchar(36),deleted.[AttachmentID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentID]&#13;
,[dMimeType]&#13;
,[dBody]&#13;
,[dSubject]&#13;
,[dFileName]&#13;
,[dFileSize]&#13;
,[dAttachmentDetailID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentID]&#13;
,[iMimeType]&#13;
,[iBody]&#13;
,[iSubject]&#13;
,[iFileName]&#13;
,[iFileSize]&#13;
,[iAttachmentDetailID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Attachment]', 'u', NULL,   convert(varchar(36),inserted.[AttachmentID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
  NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AttachmentID],121)) = quotename(convert(varchar(36),deleted.[AttachmentID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Attachment] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AttachmentID],121)) = quotename(convert(varchar(36),deleted.[AttachmentID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Attachment] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Attachment_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AttachmentDetail">
      <TblOpts/>
      <Pk ClNs="AttachmentDetailID" nm="pkAttachmentDetail"/>
      <Cl au="0" df="newid()" nm="AttachmentDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AttachmentTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AttachmentSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AttachmentCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RepositoryMapID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_AttachmentDetail_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetail" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_AttachmentDetail_RepositoryMap" prLkCl="RepositoryStructureID" upAc="3">
        <PrTb mn="0" nm="RepositoryStructure" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetail" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RepositoryMapID" prCl="RepositoryStructureID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="AttachmentDetail_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetail_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetail]', 'd', NULL, &#13;
  convert(varchar(36),src.[AttachmentDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AttachmentDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[AttachmentTypeID],121) as [AttachmentTypeID]&#13;
	,convert(varchar(50),deleted.[AttachmentSubTypeID],121) as [AttachmentSubTypeID]&#13;
	,convert(varchar(50),deleted.[AttachmentCategoryID],121) as [AttachmentCategoryID]&#13;
	,convert(varchar(50),deleted.[RepositoryMapID],121) as [RepositoryMapID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AttachmentDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailID]&#13;
,[OrganisationID]&#13;
,[AttachmentTypeID]&#13;
,[AttachmentSubTypeID]&#13;
,[AttachmentCategoryID]&#13;
,[RepositoryMapID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[AttachmentDetail_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="AttachmentDetail_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetail_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetail]', 'i', NULL, &#13;
		convert(varchar(36),src.[AttachmentDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AttachmentDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
   FROM [dbo].[AttachmentDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[AttachmentTypeID],121) as [AttachmentTypeID]&#13;
	,convert(varchar(50),inserted.[AttachmentSubTypeID],121) as [AttachmentSubTypeID]&#13;
	,convert(varchar(50),inserted.[AttachmentCategoryID],121) as [AttachmentCategoryID]&#13;
	,convert(varchar(50),inserted.[RepositoryMapID],121) as [RepositoryMapID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailID]&#13;
,[OrganisationID]&#13;
,[AttachmentTypeID]&#13;
,[AttachmentSubTypeID]&#13;
,[AttachmentCategoryID]&#13;
,[RepositoryMapID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[AttachmentDetail_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="AttachmentDetail_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetail_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AttachmentDetailID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentTypeID],121),'&lt;-null-&gt;') as [dAttachmentTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentTypeID],121),'&lt;-null-&gt;') as [iAttachmentTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentSubTypeID],121),'&lt;-null-&gt;') as [dAttachmentSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentSubTypeID],121),'&lt;-null-&gt;') as [iAttachmentSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentCategoryID],121),'&lt;-null-&gt;') as [dAttachmentCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentCategoryID],121),'&lt;-null-&gt;') as [iAttachmentCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryMapID],121),'&lt;-null-&gt;') as [dRepositoryMapID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryMapID],121),'&lt;-null-&gt;') as [iRepositoryMapID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailID]&#13;
,[dOrganisationID]&#13;
,[dAttachmentTypeID]&#13;
,[dAttachmentSubTypeID]&#13;
,[dAttachmentCategoryID]&#13;
,[dRepositoryMapID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailID]&#13;
,[iOrganisationID]&#13;
,[iAttachmentTypeID]&#13;
,[iAttachmentSubTypeID]&#13;
,[iAttachmentCategoryID]&#13;
,[iRepositoryMapID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetail]', 'u', NULL, 		convert(varchar(36),inserted.[AttachmentDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentTypeID],121),'&lt;-null-&gt;') as [dAttachmentTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentTypeID],121),'&lt;-null-&gt;') as [iAttachmentTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentSubTypeID],121),'&lt;-null-&gt;') as [dAttachmentSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentSubTypeID],121),'&lt;-null-&gt;') as [iAttachmentSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentCategoryID],121),'&lt;-null-&gt;') as [dAttachmentCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentCategoryID],121),'&lt;-null-&gt;') as [iAttachmentCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryMapID],121),'&lt;-null-&gt;') as [dRepositoryMapID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryMapID],121),'&lt;-null-&gt;') as [iRepositoryMapID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailID]&#13;
,[dOrganisationID]&#13;
,[dAttachmentTypeID]&#13;
,[dAttachmentSubTypeID]&#13;
,[dAttachmentCategoryID]&#13;
,[dRepositoryMapID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailID]&#13;
,[iOrganisationID]&#13;
,[iAttachmentTypeID]&#13;
,[iAttachmentSubTypeID]&#13;
,[iAttachmentCategoryID]&#13;
,[iRepositoryMapID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetail]', 'u', NULL,   convert(varchar(36),inserted.[AttachmentDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[AttachmentDetail] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[AttachmentDetail_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AttachmentDetailGroup">
      <TblOpts/>
      <Pk ClNs="AttachmentDetailGroupID" nm="pkAttachmentDetailGroup"/>
      <Cl au="1" df="" nm="AttachmentDetailGroupID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AttachmentDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_AttachmentDetailGroup_AttachmentDetail" prLkCl="AttachmentDetailID" upAc="3">
        <PrTb mn="0" nm="AttachmentDetail" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="AttachmentDetailGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="AttachmentDetailID" prCl="AttachmentDetailID"/>
      </Fk>
      <Fk deAc="3" nm="fk_AttachmentDetailGroup_OrganisationExternalGroup" prLkCl="OrganisationExternalGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalGroup" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetailGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalGroupID" prCl="OrganisationExternalGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_AttachmentDetailGroup_OrganisationGroup" prLkCl="OrganisationGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationGroup" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetailGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationGroupID" prCl="OrganisationGroupID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="AttachmentDetailGroup_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailGroup_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailGroup]', 'd', NULL, &#13;
  convert(varchar(36),src.[AttachmentDetailGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AttachmentDetailGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AttachmentDetailGroupID],121) as [AttachmentDetailGroupID]&#13;
	,convert(varchar(50),deleted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),deleted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AttachmentDetailGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailGroupID]&#13;
,[AttachmentDetailID]&#13;
,[OrganisationGroupID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[AttachmentDetailGroup_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="AttachmentDetailGroup_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailGroup_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailGroup]', 'i', NULL, &#13;
		convert(varchar(36),src.[AttachmentDetailGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AttachmentDetailGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
  AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailGroupID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AttachmentDetailGroupID],121) as [AttachmentDetailGroupID]&#13;
	,convert(varchar(50),inserted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),inserted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailGroupID]&#13;
,[AttachmentDetailID]&#13;
,[OrganisationGroupID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[AttachmentDetailGroup_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="AttachmentDetailGroup_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailGroup_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AttachmentDetailGroupID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailGroupID],121),'&lt;-null-&gt;') as [dAttachmentDetailGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailGroupID],121),'&lt;-null-&gt;') as [iAttachmentDetailGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailGroupID]&#13;
,[dAttachmentDetailID]&#13;
,[dOrganisationGroupID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailGroupID]&#13;
,[iAttachmentDetailID]&#13;
,[iOrganisationGroupID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailGroup]', 'u', NULL, 		convert(varchar(36),inserted.[AttachmentDetailGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailGroupID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailGroupID],121),'&lt;-null-&gt;') as [dAttachmentDetailGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailGroupID],121),'&lt;-null-&gt;') as [iAttachmentDetailGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailGroupID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailGroupID]&#13;
,[dAttachmentDetailID]&#13;
,[dOrganisationGroupID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailGroupID]&#13;
,[iAttachmentDetailID]&#13;
,[iOrganisationGroupID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailGroup]', 'u', NULL,   convert(varchar(36),inserted.[AttachmentDetailGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailGroupID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[AttachmentDetailGroup] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailGroupID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailGroupID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailGroupID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[AttachmentDetailGroup_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="AttachmentDetailRole">
      <TblOpts/>
      <Pk ClNs="AttachmentDetailRoleID" nm="pkAttachmenDetailRole"/>
      <Cl au="0" df="" nm="AttachmentDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="AttachmentDetailRoleID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_AttachmenDetailRole_OrganisationExternalRole" prLkCl="OrganisationExternalRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalRole" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetailRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalRoleID" prCl="OrganisationExternalRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_AttachmenDetailRole_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="AttachmentDetailRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_AttachmentRole_AttachmentDetail" prLkCl="AttachmentDetailID" upAc="3">
        <PrTb mn="0" nm="AttachmentDetail" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="AttachmentDetailRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="AttachmentDetailID" prCl="AttachmentDetailID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="AttachmentDetailRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[AttachmentDetailRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AttachmentDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[AttachmentDetailRoleID],121) as [AttachmentDetailRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AttachmentDetailRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailID]&#13;
,[OrganisationRoleID]&#13;
,[OrganisationExternalRoleID]&#13;
,[AttachmentDetailRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[AttachmentDetailRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="AttachmentDetailRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[AttachmentDetailRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AttachmentDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AttachmentDetailID],121) as [AttachmentDetailID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[AttachmentDetailRoleID],121) as [AttachmentDetailRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AttachmentDetailID]&#13;
,[OrganisationRoleID]&#13;
,[OrganisationExternalRoleID]&#13;
,[AttachmentDetailRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[AttachmentDetailRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="AttachmentDetailRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[AttachmentDetailRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'AttachmentDetailRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AttachmentDetailRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailRoleID],121),'&lt;-null-&gt;') as [dAttachmentDetailRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailRoleID],121),'&lt;-null-&gt;') as [iAttachmentDetailRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailID]&#13;
,[dOrganisationRoleID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dAttachmentDetailRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailID]&#13;
,[iOrganisationRoleID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iAttachmentDetailRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailRole]', 'u', NULL, 		convert(varchar(36),inserted.[AttachmentDetailRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[AttachmentDetailRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [dAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailID],121),'&lt;-null-&gt;') as [iAttachmentDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[AttachmentDetailRoleID],121),'&lt;-null-&gt;') as [dAttachmentDetailRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[AttachmentDetailRoleID],121),'&lt;-null-&gt;') as [iAttachmentDetailRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAttachmentDetailID]&#13;
,[dOrganisationRoleID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dAttachmentDetailRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAttachmentDetailID]&#13;
,[iOrganisationRoleID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iAttachmentDetailRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[AttachmentDetailRole]', 'u', NULL,   convert(varchar(36),inserted.[AttachmentDetailRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AttachmentDetailRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[AttachmentDetailRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailRoleID],121)) = quotename(convert(varchar(36),deleted.[AttachmentDetailRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[AttachmentDetailRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AttachmentDetailRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[AttachmentDetailRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ClassificationType">
      <TblOpts/>
      <Pk ClNs="ClassificationTypeID" nm="PK_ClassificationType"/>
      <Cl au="1" df="" nm="ClassificationTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ClassificationTypeCategoryID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentClassificationTypeCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK_ClassificationType_ClassificationTypeCategory" prLkCl="ClassificationTypeCategoryID" upAc="3">
        <PrTb mn="0" nm="ClassificationTypeCategory" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ClassificationType" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ClassificationTypeCategoryID" prCl="ClassificationTypeCategoryID"/>
      </Fk>
      <Fk deAc="3" nm="FK_ClassificationType_ClassificationTypeCategory2" prLkCl="ClassificationTypeCategoryID" upAc="3">
        <PrTb mn="0" nm="ClassificationTypeCategory" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="ClassificationType" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ParentClassificationTypeCategoryID" prCl="ClassificationTypeCategoryID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ClassificationType_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationType_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ClassificationType]', 'd', NULL, &#13;
  convert(varchar(36),src.[ClassificationTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ClassificationTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationType]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ClassificationTypeID],121) as [ClassificationTypeID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[ClassificationTypeCategoryID],121) as [ClassificationTypeCategoryID]&#13;
	,convert(varchar(50),deleted.[ParentClassificationTypeCategoryID],121) as [ParentClassificationTypeCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ClassificationTypeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ClassificationTypeID]&#13;
,[Name]&#13;
,[Description]&#13;
,[ClassificationTypeCategoryID]&#13;
,[ParentClassificationTypeCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ClassificationType_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ClassificationType_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationType_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ClassificationType]', 'i', NULL, &#13;
		convert(varchar(36),src.[ClassificationTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ClassificationTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationType]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ClassificationTypeID],121) as [ClassificationTypeID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[ClassificationTypeCategoryID],121) as [ClassificationTypeCategoryID]&#13;
	,convert(varchar(50),inserted.[ParentClassificationTypeCategoryID],121) as [ParentClassificationTypeCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ClassificationTypeID]&#13;
,[Name]&#13;
,[Description]&#13;
,[ClassificationTypeCategoryID]&#13;
,[ParentClassificationTypeCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ClassificationType_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ClassificationType_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationType_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ClassificationTypeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeID],121),'&lt;-null-&gt;') as [dClassificationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeID],121),'&lt;-null-&gt;') as [iClassificationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dParentClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iParentClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dClassificationTypeID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dClassificationTypeCategoryID]&#13;
,[dParentClassificationTypeCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iClassificationTypeID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iClassificationTypeCategoryID]&#13;
,[iParentClassificationTypeCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ClassificationType]', 'u', NULL, 		convert(varchar(36),inserted.[ClassificationTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationType]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeID],121),'&lt;-null-&gt;') as [dClassificationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeID],121),'&lt;-null-&gt;') as [iClassificationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dParentClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iParentClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dClassificationTypeID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dClassificationTypeCategoryID]&#13;
,[dParentClassificationTypeCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iClassificationTypeID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iClassificationTypeCategoryID]&#13;
,[iParentClassificationTypeCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ClassificationType]', 'u', NULL,   convert(varchar(36),inserted.[ClassificationTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ClassificationTypeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ClassificationType] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ClassificationType_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ClassificationTypeCategory">
      <TblOpts/>
      <Pk ClNs="ClassificationTypeCategoryID" nm="PK_ClassificationTypeCategory"/>
      <Cl au="1" df="" nm="ClassificationTypeCategoryID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ClassificationTypeCategory_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationTypeCategory_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationTypeCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ClassificationTypeCategory]', 'd', NULL, &#13;
  convert(varchar(36),src.[ClassificationTypeCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ClassificationTypeCategoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationTypeCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ClassificationTypeCategoryID],121) as [ClassificationTypeCategoryID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ClassificationTypeCategoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ClassificationTypeCategoryID]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ClassificationTypeCategory_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ClassificationTypeCategory_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationTypeCategory_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationTypeCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ClassificationTypeCategory]', 'i', NULL, &#13;
		convert(varchar(36),src.[ClassificationTypeCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ClassificationTypeCategoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationTypeCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
  AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationTypeCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeCategoryID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ClassificationTypeCategoryID],121) as [ClassificationTypeCategoryID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ClassificationTypeCategoryID]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ClassificationTypeCategory_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ClassificationTypeCategory_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ClassificationTypeCategory_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ClassificationTypeCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ClassificationTypeCategoryID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dClassificationTypeCategoryID]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iClassificationTypeCategoryID]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ClassificationTypeCategory]', 'u', NULL, 		convert(varchar(36),inserted.[ClassificationTypeCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ClassificationTypeCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationTypeCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeCategoryID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [dClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ClassificationTypeCategoryID],121),'&lt;-null-&gt;') as [iClassificationTypeCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeCategoryID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dClassificationTypeCategoryID]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iClassificationTypeCategoryID]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ClassificationTypeCategory]', 'u', NULL,   convert(varchar(36),inserted.[ClassificationTypeCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeCategoryID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ClassificationTypeCategoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ClassificationTypeCategory] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeCategoryID],121)) = quotename(convert(varchar(36),deleted.[ClassificationTypeCategoryID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ClassificationTypeCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ClassificationTypeCategoryID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ClassificationTypeCategory_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Contact">
      <TblOpts/>
      <Pk ClNs="ContactID" nm="pkContact"/>
      <Cl au="0" df="newid()" nm="ContactID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ContactName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MasterContactID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OwnerID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="CustomerTypeID" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PreferredContactMethodID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsBackOfficeCustomer" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Salutation" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="JobTitle" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FirstName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Department" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="NickName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MiddleName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BirthDate" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GenderTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HasChildren" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EducationTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WebSiteURL" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AssistantName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AssistantPhone" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ManagerName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ManagerPhone" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="CountryTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DoNotFax" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DoNotEmail" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DoNotTelephone" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsPrivate" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Telephone3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Fax" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber1" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber2" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileNumber3" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentContactID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsPrimaryContact" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ContactTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ContactSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ContactCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Contact_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Contact_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Contact' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Contact]', 'd', NULL, &#13;
  convert(varchar(36),src.[ContactID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ContactID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Contact]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ContactID],121) as [ContactID]&#13;
	,convert(varchar(50),deleted.[ContactName],121) as [ContactName]&#13;
	,convert(varchar(50),deleted.[MasterContactID],121) as [MasterContactID]&#13;
	,convert(varchar(50),deleted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),deleted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),deleted.[CustomerTypeID],121) as [CustomerTypeID]&#13;
	,convert(varchar(50),deleted.[PreferredContactMethodID],121) as [PreferredContactMethodID]&#13;
	,convert(varchar(50),deleted.[IsBackOfficeCustomer],121) as [IsBackOfficeCustomer]&#13;
	,convert(varchar(50),deleted.[Salutation],121) as [Salutation]&#13;
	,convert(varchar(50),deleted.[JobTitle],121) as [JobTitle]&#13;
	,convert(varchar(50),deleted.[FirstName],121) as [FirstName]&#13;
	,convert(varchar(50),deleted.[Department],121) as [Department]&#13;
	,convert(varchar(50),deleted.[NickName],121) as [NickName]&#13;
	,convert(varchar(50),deleted.[MiddleName],121) as [MiddleName]&#13;
	,convert(varchar(50),deleted.[LastName],121) as [LastName]&#13;
	,convert(varchar(50),deleted.[BirthDate],121) as [BirthDate]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[GenderTypeID],121) as [GenderTypeID]&#13;
	,convert(varchar(50),deleted.[HasChildren],121) as [HasChildren]&#13;
	,convert(varchar(50),deleted.[EducationTypeID],121) as [EducationTypeID]&#13;
	,convert(varchar(50),deleted.[WebSiteURL],121) as [WebSiteURL]&#13;
	,convert(varchar(50),deleted.[EmailAddress1],121) as [EmailAddress1]&#13;
	,convert(varchar(50),deleted.[EmailAddress2],121) as [EmailAddress2]&#13;
	,convert(varchar(50),deleted.[EmailAddress3],121) as [EmailAddress3]&#13;
	,convert(varchar(50),deleted.[AssistantName],121) as [AssistantName]&#13;
	,convert(varchar(50),deleted.[AssistantPhone],121) as [AssistantPhone]&#13;
	,convert(varchar(50),deleted.[ManagerName],121) as [ManagerName]&#13;
	,convert(varchar(50),deleted.[ManagerPhone],121) as [ManagerPhone]&#13;
	,convert(varchar(50),deleted.[CountryTypeID],121) as [CountryTypeID]&#13;
	,convert(varchar(50),deleted.[DoNotFax],121) as [DoNotFax]&#13;
	,convert(varchar(50),deleted.[DoNotEmail],121) as [DoNotEmail]&#13;
	,convert(varchar(50),deleted.[DoNotTelephone],121) as [DoNotTelephone]&#13;
	,convert(varchar(50),deleted.[IsPrivate],121) as [IsPrivate]&#13;
	,convert(varchar(50),deleted.[Telephone1],121) as [Telephone1]&#13;
	,convert(varchar(50),deleted.[Telephone2],121) as [Telephone2]&#13;
	,convert(varchar(50),deleted.[Telephone3],121) as [Telephone3]&#13;
	,convert(varchar(50),deleted.[Fax],121) as [Fax]&#13;
	,convert(varchar(50),deleted.[MobileNumber1],121) as [MobileNumber1]&#13;
	,convert(varchar(50),deleted.[MobileNumber2],121) as [MobileNumber2]&#13;
	,convert(varchar(50),deleted.[MobileNumber3],121) as [MobileNumber3]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[ParentContactID],121) as [ParentContactID]&#13;
	,convert(varchar(50),deleted.[IsPrimaryContact],121) as [IsPrimaryContact]&#13;
	,convert(varchar(50),deleted.[ContactTypeID],121) as [ContactTypeID]&#13;
	,convert(varchar(50),deleted.[ContactSubTypeID],121) as [ContactSubTypeID]&#13;
	,convert(varchar(50),deleted.[ContactCategoryID],121) as [ContactCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ContactID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ContactID]&#13;
,[ContactName]&#13;
,[MasterContactID]&#13;
,[ParentID]&#13;
,[OwnerID]&#13;
,[CustomerTypeID]&#13;
,[PreferredContactMethodID]&#13;
,[IsBackOfficeCustomer]&#13;
,[Salutation]&#13;
,[JobTitle]&#13;
,[FirstName]&#13;
,[Department]&#13;
,[NickName]&#13;
,[MiddleName]&#13;
,[LastName]&#13;
,[BirthDate]&#13;
,[Description]&#13;
,[GenderTypeID]&#13;
,[HasChildren]&#13;
,[EducationTypeID]&#13;
,[WebSiteURL]&#13;
,[EmailAddress1]&#13;
,[EmailAddress2]&#13;
,[EmailAddress3]&#13;
,[AssistantName]&#13;
,[AssistantPhone]&#13;
,[ManagerName]&#13;
,[ManagerPhone]&#13;
,[CountryTypeID]&#13;
,[DoNotFax]&#13;
,[DoNotEmail]&#13;
,[DoNotTelephone]&#13;
,[IsPrivate]&#13;
,[Telephone1]&#13;
,[Telephone2]&#13;
,[Telephone3]&#13;
,[Fax]&#13;
,[MobileNumber1]&#13;
,[MobileNumber2]&#13;
,[MobileNumber3]&#13;
,[OrganisationUnitID]&#13;
,[ParentContactID]&#13;
,[IsPrimaryContact]&#13;
,[ContactTypeID]&#13;
,[ContactSubTypeID]&#13;
,[ContactCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Contact_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Contact_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Contact_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Contact' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Contact]', 'i', NULL, &#13;
		convert(varchar(36),src.[ContactID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ContactID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Contact]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Contact] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ContactID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ContactID],121) as [ContactID]&#13;
	,convert(varchar(50),inserted.[ContactName],121) as [ContactName]&#13;
	,convert(varchar(50),inserted.[MasterContactID],121) as [MasterContactID]&#13;
	,convert(varchar(50),inserted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),inserted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),inserted.[CustomerTypeID],121) as [CustomerTypeID]&#13;
	,convert(varchar(50),inserted.[PreferredContactMethodID],121) as [PreferredContactMethodID]&#13;
	,convert(varchar(50),inserted.[IsBackOfficeCustomer],121) as [IsBackOfficeCustomer]&#13;
	,convert(varchar(50),inserted.[Salutation],121) as [Salutation]&#13;
	,convert(varchar(50),inserted.[JobTitle],121) as [JobTitle]&#13;
	,convert(varchar(50),inserted.[FirstName],121) as [FirstName]&#13;
	,convert(varchar(50),inserted.[Department],121) as [Department]&#13;
	,convert(varchar(50),inserted.[NickName],121) as [NickName]&#13;
	,convert(varchar(50),inserted.[MiddleName],121) as [MiddleName]&#13;
	,convert(varchar(50),inserted.[LastName],121) as [LastName]&#13;
	,convert(varchar(50),inserted.[BirthDate],121) as [BirthDate]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[GenderTypeID],121) as [GenderTypeID]&#13;
	,convert(varchar(50),inserted.[HasChildren],121) as [HasChildren]&#13;
	,convert(varchar(50),inserted.[EducationTypeID],121) as [EducationTypeID]&#13;
	,convert(varchar(50),inserted.[WebSiteURL],121) as [WebSiteURL]&#13;
	,convert(varchar(50),inserted.[EmailAddress1],121) as [EmailAddress1]&#13;
	,convert(varchar(50),inserted.[EmailAddress2],121) as [EmailAddress2]&#13;
	,convert(varchar(50),inserted.[EmailAddress3],121) as [EmailAddress3]&#13;
	,convert(varchar(50),inserted.[AssistantName],121) as [AssistantName]&#13;
	,convert(varchar(50),inserted.[AssistantPhone],121) as [AssistantPhone]&#13;
	,convert(varchar(50),inserted.[ManagerName],121) as [ManagerName]&#13;
	,convert(varchar(50),inserted.[ManagerPhone],121) as [ManagerPhone]&#13;
	,convert(varchar(50),inserted.[CountryTypeID],121) as [CountryTypeID]&#13;
	,convert(varchar(50),inserted.[DoNotFax],121) as [DoNotFax]&#13;
	,convert(varchar(50),inserted.[DoNotEmail],121) as [DoNotEmail]&#13;
	,convert(varchar(50),inserted.[DoNotTelephone],121) as [DoNotTelephone]&#13;
	,convert(varchar(50),inserted.[IsPrivate],121) as [IsPrivate]&#13;
	,convert(varchar(50),inserted.[Telephone1],121) as [Telephone1]&#13;
	,convert(varchar(50),inserted.[Telephone2],121) as [Telephone2]&#13;
	,convert(varchar(50),inserted.[Telephone3],121) as [Telephone3]&#13;
	,convert(varchar(50),inserted.[Fax],121) as [Fax]&#13;
	,convert(varchar(50),inserted.[MobileNumber1],121) as [MobileNumber1]&#13;
	,convert(varchar(50),inserted.[MobileNumber2],121) as [MobileNumber2]&#13;
	,convert(varchar(50),inserted.[MobileNumber3],121) as [MobileNumber3]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[ParentContactID],121) as [ParentContactID]&#13;
	,convert(varchar(50),inserted.[IsPrimaryContact],121) as [IsPrimaryContact]&#13;
	,convert(varchar(50),inserted.[ContactTypeID],121) as [ContactTypeID]&#13;
	,convert(varchar(50),inserted.[ContactSubTypeID],121) as [ContactSubTypeID]&#13;
	,convert(varchar(50),inserted.[ContactCategoryID],121) as [ContactCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ContactID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ContactID]&#13;
,[ContactName]&#13;
,[MasterContactID]&#13;
,[ParentID]&#13;
,[OwnerID]&#13;
,[CustomerTypeID]&#13;
,[PreferredContactMethodID]&#13;
,[IsBackOfficeCustomer]&#13;
,[Salutation]&#13;
,[JobTitle]&#13;
,[FirstName]&#13;
,[Department]&#13;
,[NickName]&#13;
,[MiddleName]&#13;
,[LastName]&#13;
,[BirthDate]&#13;
,[Description]&#13;
,[GenderTypeID]&#13;
,[HasChildren]&#13;
,[EducationTypeID]&#13;
,[WebSiteURL]&#13;
,[EmailAddress1]&#13;
,[EmailAddress2]&#13;
,[EmailAddress3]&#13;
,[AssistantName]&#13;
,[AssistantPhone]&#13;
,[ManagerName]&#13;
,[ManagerPhone]&#13;
,[CountryTypeID]&#13;
,[DoNotFax]&#13;
,[DoNotEmail]&#13;
,[DoNotTelephone]&#13;
,[IsPrivate]&#13;
,[Telephone1]&#13;
,[Telephone2]&#13;
,[Telephone3]&#13;
,[Fax]&#13;
,[MobileNumber1]&#13;
,[MobileNumber2]&#13;
,[MobileNumber3]&#13;
,[OrganisationUnitID]&#13;
,[ParentContactID]&#13;
,[IsPrimaryContact]&#13;
,[ContactTypeID]&#13;
,[ContactSubTypeID]&#13;
,[ContactCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Contact_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Contact_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Contact_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Contact' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ContactID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ContactID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ContactID],121),'&lt;-null-&gt;') as [dContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactID],121),'&lt;-null-&gt;') as [iContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactName],121),'&lt;-null-&gt;') as [dContactName]&#13;
	,isnull(convert(varchar(50),inserted.[ContactName],121),'&lt;-null-&gt;') as [iContactName]&#13;
	,isnull(convert(varchar(50),deleted.[MasterContactID],121),'&lt;-null-&gt;') as [dMasterContactID]&#13;
	,isnull(convert(varchar(50),inserted.[MasterContactID],121),'&lt;-null-&gt;') as [iMasterContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[CustomerTypeID],121),'&lt;-null-&gt;') as [dCustomerTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CustomerTypeID],121),'&lt;-null-&gt;') as [iCustomerTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [dPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),inserted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [iPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),deleted.[IsBackOfficeCustomer],121),'&lt;-null-&gt;') as [dIsBackOfficeCustomer]&#13;
	,isnull(convert(varchar(50),inserted.[IsBackOfficeCustomer],121),'&lt;-null-&gt;') as [iIsBackOfficeCustomer]&#13;
	,isnull(convert(varchar(50),deleted.[Salutation],121),'&lt;-null-&gt;') as [dSalutation]&#13;
	,isnull(convert(varchar(50),inserted.[Salutation],121),'&lt;-null-&gt;') as [iSalutation]&#13;
	,isnull(convert(varchar(50),deleted.[JobTitle],121),'&lt;-null-&gt;') as [dJobTitle]&#13;
	,isnull(convert(varchar(50),inserted.[JobTitle],121),'&lt;-null-&gt;') as [iJobTitle]&#13;
	,isnull(convert(varchar(50),deleted.[FirstName],121),'&lt;-null-&gt;') as [dFirstName]&#13;
	,isnull(convert(varchar(50),inserted.[FirstName],121),'&lt;-null-&gt;') as [iFirstName]&#13;
	,isnull(convert(varchar(50),deleted.[Department],121),'&lt;-null-&gt;') as [dDepartment]&#13;
	,isnull(convert(varchar(50),inserted.[Department],121),'&lt;-null-&gt;') as [iDepartment]&#13;
	,isnull(convert(varchar(50),deleted.[NickName],121),'&lt;-null-&gt;') as [dNickName]&#13;
	,isnull(convert(varchar(50),inserted.[NickName],121),'&lt;-null-&gt;') as [iNickName]&#13;
	,isnull(convert(varchar(50),deleted.[MiddleName],121),'&lt;-null-&gt;') as [dMiddleName]&#13;
	,isnull(convert(varchar(50),inserted.[MiddleName],121),'&lt;-null-&gt;') as [iMiddleName]&#13;
	,isnull(convert(varchar(50),deleted.[LastName],121),'&lt;-null-&gt;') as [dLastName]&#13;
	,isnull(convert(varchar(50),inserted.[LastName],121),'&lt;-null-&gt;') as [iLastName]&#13;
	,isnull(convert(varchar(50),deleted.[BirthDate],121),'&lt;-null-&gt;') as [dBirthDate]&#13;
	,isnull(convert(varchar(50),inserted.[BirthDate],121),'&lt;-null-&gt;') as [iBirthDate]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[GenderTypeID],121),'&lt;-null-&gt;') as [dGenderTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GenderTypeID],121),'&lt;-null-&gt;') as [iGenderTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[HasChildren],121),'&lt;-null-&gt;') as [dHasChildren]&#13;
	,isnull(convert(varchar(50),inserted.[HasChildren],121),'&lt;-null-&gt;') as [iHasChildren]&#13;
	,isnull(convert(varchar(50),deleted.[EducationTypeID],121),'&lt;-null-&gt;') as [dEducationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[EducationTypeID],121),'&lt;-null-&gt;') as [iEducationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[WebSiteURL],121),'&lt;-null-&gt;') as [dWebSiteURL]&#13;
	,isnull(convert(varchar(50),inserted.[WebSiteURL],121),'&lt;-null-&gt;') as [iWebSiteURL]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress1],121),'&lt;-null-&gt;') as [dEmailAddress1]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress1],121),'&lt;-null-&gt;') as [iEmailAddress1]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress2],121),'&lt;-null-&gt;') as [dEmailAddress2]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress2],121),'&lt;-null-&gt;') as [iEmailAddress2]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress3],121),'&lt;-null-&gt;') as [dEmailAddress3]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress3],121),'&lt;-null-&gt;') as [iEmailAddress3]&#13;
	,isnull(convert(varchar(50),deleted.[AssistantName],121),'&lt;-null-&gt;') as [dAssistantName]&#13;
	,isnull(convert(varchar(50),inserted.[AssistantName],121),'&lt;-null-&gt;') as [iAssistantName]&#13;
	,isnull(convert(varchar(50),deleted.[AssistantPhone],121),'&lt;-null-&gt;') as [dAssistantPhone]&#13;
	,isnull(convert(varchar(50),inserted.[AssistantPhone],121),'&lt;-null-&gt;') as [iAssistantPhone]&#13;
	,isnull(convert(varchar(50),deleted.[ManagerName],121),'&lt;-null-&gt;') as [dManagerName]&#13;
	,isnull(convert(varchar(50),inserted.[ManagerName],121),'&lt;-null-&gt;') as [iManagerName]&#13;
	,isnull(convert(varchar(50),deleted.[ManagerPhone],121),'&lt;-null-&gt;') as [dManagerPhone]&#13;
	,isnull(convert(varchar(50),inserted.[ManagerPhone],121),'&lt;-null-&gt;') as [iManagerPhone]&#13;
	,isnull(convert(varchar(50),deleted.[CountryTypeID],121),'&lt;-null-&gt;') as [dCountryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CountryTypeID],121),'&lt;-null-&gt;') as [iCountryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotFax],121),'&lt;-null-&gt;') as [dDoNotFax]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotFax],121),'&lt;-null-&gt;') as [iDoNotFax]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotEmail],121),'&lt;-null-&gt;') as [dDoNotEmail]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotEmail],121),'&lt;-null-&gt;') as [iDoNotEmail]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotTelephone],121),'&lt;-null-&gt;') as [dDoNotTelephone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotTelephone],121),'&lt;-null-&gt;') as [iDoNotTelephone]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrivate],121),'&lt;-null-&gt;') as [dIsPrivate]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrivate],121),'&lt;-null-&gt;') as [iIsPrivate]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone1],121),'&lt;-null-&gt;') as [dTelephone1]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone1],121),'&lt;-null-&gt;') as [iTelephone1]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone2],121),'&lt;-null-&gt;') as [dTelephone2]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone2],121),'&lt;-null-&gt;') as [iTelephone2]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone3],121),'&lt;-null-&gt;') as [dTelephone3]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone3],121),'&lt;-null-&gt;') as [iTelephone3]&#13;
	,isnull(convert(varchar(50),deleted.[Fax],121),'&lt;-null-&gt;') as [dFax]&#13;
	,isnull(convert(varchar(50),inserted.[Fax],121),'&lt;-null-&gt;') as [iFax]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber1],121),'&lt;-null-&gt;') as [dMobileNumber1]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber1],121),'&lt;-null-&gt;') as [iMobileNumber1]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber2],121),'&lt;-null-&gt;') as [dMobileNumber2]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber2],121),'&lt;-null-&gt;') as [iMobileNumber2]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber3],121),'&lt;-null-&gt;') as [dMobileNumber3]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber3],121),'&lt;-null-&gt;') as [iMobileNumber3]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentContactID],121),'&lt;-null-&gt;') as [dParentContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentContactID],121),'&lt;-null-&gt;') as [iParentContactID]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrimaryContact],121),'&lt;-null-&gt;') as [dIsPrimaryContact]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrimaryContact],121),'&lt;-null-&gt;') as [iIsPrimaryContact]&#13;
	,isnull(convert(varchar(50),deleted.[ContactTypeID],121),'&lt;-null-&gt;') as [dContactTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactTypeID],121),'&lt;-null-&gt;') as [iContactTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactSubTypeID],121),'&lt;-null-&gt;') as [dContactSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactSubTypeID],121),'&lt;-null-&gt;') as [iContactSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactCategoryID],121),'&lt;-null-&gt;') as [dContactCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactCategoryID],121),'&lt;-null-&gt;') as [iContactCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dContactID]&#13;
,[dContactName]&#13;
,[dMasterContactID]&#13;
,[dParentID]&#13;
,[dOwnerID]&#13;
,[dCustomerTypeID]&#13;
,[dPreferredContactMethodID]&#13;
,[dIsBackOfficeCustomer]&#13;
,[dSalutation]&#13;
,[dJobTitle]&#13;
,[dFirstName]&#13;
,[dDepartment]&#13;
,[dNickName]&#13;
,[dMiddleName]&#13;
,[dLastName]&#13;
,[dBirthDate]&#13;
,[dDescription]&#13;
,[dGenderTypeID]&#13;
,[dHasChildren]&#13;
,[dEducationTypeID]&#13;
,[dWebSiteURL]&#13;
,[dEmailAddress1]&#13;
,[dEmailAddress2]&#13;
,[dEmailAddress3]&#13;
,[dAssistantName]&#13;
,[dAssistantPhone]&#13;
,[dManagerName]&#13;
,[dManagerPhone]&#13;
,[dCountryTypeID]&#13;
,[dDoNotFax]&#13;
,[dDoNotEmail]&#13;
,[dDoNotTelephone]&#13;
,[dIsPrivate]&#13;
,[dTelephone1]&#13;
,[dTelephone2]&#13;
,[dTelephone3]&#13;
,[dFax]&#13;
,[dMobileNumber1]&#13;
,[dMobileNumber2]&#13;
,[dMobileNumber3]&#13;
,[dOrganisationUnitID]&#13;
,[dParentContactID]&#13;
,[dIsPrimaryContact]&#13;
,[dContactTypeID]&#13;
,[dContactSubTypeID]&#13;
,[dContactCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iContactID]&#13;
,[iContactName]&#13;
,[iMasterContactID]&#13;
,[iParentID]&#13;
,[iOwnerID]&#13;
,[iCustomerTypeID]&#13;
,[iPreferredContactMethodID]&#13;
,[iIsBackOfficeCustomer]&#13;
,[iSalutation]&#13;
,[iJobTitle]&#13;
,[iFirstName]&#13;
,[iDepartment]&#13;
,[iNickName]&#13;
,[iMiddleName]&#13;
,[iLastName]&#13;
,[iBirthDate]&#13;
,[iDescription]&#13;
,[iGenderTypeID]&#13;
,[iHasChildren]&#13;
,[iEducationTypeID]&#13;
,[iWebSiteURL]&#13;
,[iEmailAddress1]&#13;
,[iEmailAddress2]&#13;
,[iEmailAddress3]&#13;
,[iAssistantName]&#13;
,[iAssistantPhone]&#13;
,[iManagerName]&#13;
,[iManagerPhone]&#13;
,[iCountryTypeID]&#13;
,[iDoNotFax]&#13;
,[iDoNotEmail]&#13;
,[iDoNotTelephone]&#13;
,[iIsPrivate]&#13;
,[iTelephone1]&#13;
,[iTelephone2]&#13;
,[iTelephone3]&#13;
,[iFax]&#13;
,[iMobileNumber1]&#13;
,[iMobileNumber2]&#13;
,[iMobileNumber3]&#13;
,[iOrganisationUnitID]&#13;
,[iParentContactID]&#13;
,[iIsPrimaryContact]&#13;
,[iContactTypeID]&#13;
,[iContactSubTypeID]&#13;
,[iContactCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Contact]', 'u', NULL, 		convert(varchar(36),inserted.[ContactID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ContactID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Contact]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Contact] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ContactID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ContactID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ContactID],121),'&lt;-null-&gt;') as [dContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactID],121),'&lt;-null-&gt;') as [iContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactName],121),'&lt;-null-&gt;') as [dContactName]&#13;
	,isnull(convert(varchar(50),inserted.[ContactName],121),'&lt;-null-&gt;') as [iContactName]&#13;
	,isnull(convert(varchar(50),deleted.[MasterContactID],121),'&lt;-null-&gt;') as [dMasterContactID]&#13;
	,isnull(convert(varchar(50),inserted.[MasterContactID],121),'&lt;-null-&gt;') as [iMasterContactID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[CustomerTypeID],121),'&lt;-null-&gt;') as [dCustomerTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CustomerTypeID],121),'&lt;-null-&gt;') as [iCustomerTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [dPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),inserted.[PreferredContactMethodID],121),'&lt;-null-&gt;') as [iPreferredContactMethodID]&#13;
	,isnull(convert(varchar(50),deleted.[IsBackOfficeCustomer],121),'&lt;-null-&gt;') as [dIsBackOfficeCustomer]&#13;
	,isnull(convert(varchar(50),inserted.[IsBackOfficeCustomer],121),'&lt;-null-&gt;') as [iIsBackOfficeCustomer]&#13;
	,isnull(convert(varchar(50),deleted.[Salutation],121),'&lt;-null-&gt;') as [dSalutation]&#13;
	,isnull(convert(varchar(50),inserted.[Salutation],121),'&lt;-null-&gt;') as [iSalutation]&#13;
	,isnull(convert(varchar(50),deleted.[JobTitle],121),'&lt;-null-&gt;') as [dJobTitle]&#13;
	,isnull(convert(varchar(50),inserted.[JobTitle],121),'&lt;-null-&gt;') as [iJobTitle]&#13;
	,isnull(convert(varchar(50),deleted.[FirstName],121),'&lt;-null-&gt;') as [dFirstName]&#13;
	,isnull(convert(varchar(50),inserted.[FirstName],121),'&lt;-null-&gt;') as [iFirstName]&#13;
	,isnull(convert(varchar(50),deleted.[Department],121),'&lt;-null-&gt;') as [dDepartment]&#13;
	,isnull(convert(varchar(50),inserted.[Department],121),'&lt;-null-&gt;') as [iDepartment]&#13;
	,isnull(convert(varchar(50),deleted.[NickName],121),'&lt;-null-&gt;') as [dNickName]&#13;
	,isnull(convert(varchar(50),inserted.[NickName],121),'&lt;-null-&gt;') as [iNickName]&#13;
	,isnull(convert(varchar(50),deleted.[MiddleName],121),'&lt;-null-&gt;') as [dMiddleName]&#13;
	,isnull(convert(varchar(50),inserted.[MiddleName],121),'&lt;-null-&gt;') as [iMiddleName]&#13;
	,isnull(convert(varchar(50),deleted.[LastName],121),'&lt;-null-&gt;') as [dLastName]&#13;
	,isnull(convert(varchar(50),inserted.[LastName],121),'&lt;-null-&gt;') as [iLastName]&#13;
	,isnull(convert(varchar(50),deleted.[BirthDate],121),'&lt;-null-&gt;') as [dBirthDate]&#13;
	,isnull(convert(varchar(50),inserted.[BirthDate],121),'&lt;-null-&gt;') as [iBirthDate]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[GenderTypeID],121),'&lt;-null-&gt;') as [dGenderTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GenderTypeID],121),'&lt;-null-&gt;') as [iGenderTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[HasChildren],121),'&lt;-null-&gt;') as [dHasChildren]&#13;
	,isnull(convert(varchar(50),inserted.[HasChildren],121),'&lt;-null-&gt;') as [iHasChildren]&#13;
	,isnull(convert(varchar(50),deleted.[EducationTypeID],121),'&lt;-null-&gt;') as [dEducationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[EducationTypeID],121),'&lt;-null-&gt;') as [iEducationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[WebSiteURL],121),'&lt;-null-&gt;') as [dWebSiteURL]&#13;
	,isnull(convert(varchar(50),inserted.[WebSiteURL],121),'&lt;-null-&gt;') as [iWebSiteURL]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress1],121),'&lt;-null-&gt;') as [dEmailAddress1]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress1],121),'&lt;-null-&gt;') as [iEmailAddress1]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress2],121),'&lt;-null-&gt;') as [dEmailAddress2]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress2],121),'&lt;-null-&gt;') as [iEmailAddress2]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress3],121),'&lt;-null-&gt;') as [dEmailAddress3]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress3],121),'&lt;-null-&gt;') as [iEmailAddress3]&#13;
	,isnull(convert(varchar(50),deleted.[AssistantName],121),'&lt;-null-&gt;') as [dAssistantName]&#13;
	,isnull(convert(varchar(50),inserted.[AssistantName],121),'&lt;-null-&gt;') as [iAssistantName]&#13;
	,isnull(convert(varchar(50),deleted.[AssistantPhone],121),'&lt;-null-&gt;') as [dAssistantPhone]&#13;
	,isnull(convert(varchar(50),inserted.[AssistantPhone],121),'&lt;-null-&gt;') as [iAssistantPhone]&#13;
	,isnull(convert(varchar(50),deleted.[ManagerName],121),'&lt;-null-&gt;') as [dManagerName]&#13;
	,isnull(convert(varchar(50),inserted.[ManagerName],121),'&lt;-null-&gt;') as [iManagerName]&#13;
	,isnull(convert(varchar(50),deleted.[ManagerPhone],121),'&lt;-null-&gt;') as [dManagerPhone]&#13;
	,isnull(convert(varchar(50),inserted.[ManagerPhone],121),'&lt;-null-&gt;') as [iManagerPhone]&#13;
	,isnull(convert(varchar(50),deleted.[CountryTypeID],121),'&lt;-null-&gt;') as [dCountryTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[CountryTypeID],121),'&lt;-null-&gt;') as [iCountryTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotFax],121),'&lt;-null-&gt;') as [dDoNotFax]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotFax],121),'&lt;-null-&gt;') as [iDoNotFax]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotEmail],121),'&lt;-null-&gt;') as [dDoNotEmail]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotEmail],121),'&lt;-null-&gt;') as [iDoNotEmail]&#13;
	,isnull(convert(varchar(50),deleted.[DoNotTelephone],121),'&lt;-null-&gt;') as [dDoNotTelephone]&#13;
	,isnull(convert(varchar(50),inserted.[DoNotTelephone],121),'&lt;-null-&gt;') as [iDoNotTelephone]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrivate],121),'&lt;-null-&gt;') as [dIsPrivate]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrivate],121),'&lt;-null-&gt;') as [iIsPrivate]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone1],121),'&lt;-null-&gt;') as [dTelephone1]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone1],121),'&lt;-null-&gt;') as [iTelephone1]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone2],121),'&lt;-null-&gt;') as [dTelephone2]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone2],121),'&lt;-null-&gt;') as [iTelephone2]&#13;
	,isnull(convert(varchar(50),deleted.[Telephone3],121),'&lt;-null-&gt;') as [dTelephone3]&#13;
	,isnull(convert(varchar(50),inserted.[Telephone3],121),'&lt;-null-&gt;') as [iTelephone3]&#13;
	,isnull(convert(varchar(50),deleted.[Fax],121),'&lt;-null-&gt;') as [dFax]&#13;
	,isnull(convert(varchar(50),inserted.[Fax],121),'&lt;-null-&gt;') as [iFax]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber1],121),'&lt;-null-&gt;') as [dMobileNumber1]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber1],121),'&lt;-null-&gt;') as [iMobileNumber1]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber2],121),'&lt;-null-&gt;') as [dMobileNumber2]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber2],121),'&lt;-null-&gt;') as [iMobileNumber2]&#13;
	,isnull(convert(varchar(50),deleted.[MobileNumber3],121),'&lt;-null-&gt;') as [dMobileNumber3]&#13;
	,isnull(convert(varchar(50),inserted.[MobileNumber3],121),'&lt;-null-&gt;') as [iMobileNumber3]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentContactID],121),'&lt;-null-&gt;') as [dParentContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentContactID],121),'&lt;-null-&gt;') as [iParentContactID]&#13;
	,isnull(convert(varchar(50),deleted.[IsPrimaryContact],121),'&lt;-null-&gt;') as [dIsPrimaryContact]&#13;
	,isnull(convert(varchar(50),inserted.[IsPrimaryContact],121),'&lt;-null-&gt;') as [iIsPrimaryContact]&#13;
	,isnull(convert(varchar(50),deleted.[ContactTypeID],121),'&lt;-null-&gt;') as [dContactTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactTypeID],121),'&lt;-null-&gt;') as [iContactTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactSubTypeID],121),'&lt;-null-&gt;') as [dContactSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactSubTypeID],121),'&lt;-null-&gt;') as [iContactSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactCategoryID],121),'&lt;-null-&gt;') as [dContactCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactCategoryID],121),'&lt;-null-&gt;') as [iContactCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ContactID],121)) = quotename(convert(varchar(36),deleted.[ContactID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dContactID]&#13;
,[dContactName]&#13;
,[dMasterContactID]&#13;
,[dParentID]&#13;
,[dOwnerID]&#13;
,[dCustomerTypeID]&#13;
,[dPreferredContactMethodID]&#13;
,[dIsBackOfficeCustomer]&#13;
,[dSalutation]&#13;
,[dJobTitle]&#13;
,[dFirstName]&#13;
,[dDepartment]&#13;
,[dNickName]&#13;
,[dMiddleName]&#13;
,[dLastName]&#13;
,[dBirthDate]&#13;
,[dDescription]&#13;
,[dGenderTypeID]&#13;
,[dHasChildren]&#13;
,[dEducationTypeID]&#13;
,[dWebSiteURL]&#13;
,[dEmailAddress1]&#13;
,[dEmailAddress2]&#13;
,[dEmailAddress3]&#13;
,[dAssistantName]&#13;
,[dAssistantPhone]&#13;
,[dManagerName]&#13;
,[dManagerPhone]&#13;
,[dCountryTypeID]&#13;
,[dDoNotFax]&#13;
,[dDoNotEmail]&#13;
,[dDoNotTelephone]&#13;
,[dIsPrivate]&#13;
,[dTelephone1]&#13;
,[dTelephone2]&#13;
,[dTelephone3]&#13;
,[dFax]&#13;
,[dMobileNumber1]&#13;
,[dMobileNumber2]&#13;
,[dMobileNumber3]&#13;
,[dOrganisationUnitID]&#13;
,[dParentContactID]&#13;
,[dIsPrimaryContact]&#13;
,[dContactTypeID]&#13;
,[dContactSubTypeID]&#13;
,[dContactCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iContactID]&#13;
,[iContactName]&#13;
,[iMasterContactID]&#13;
,[iParentID]&#13;
,[iOwnerID]&#13;
,[iCustomerTypeID]&#13;
,[iPreferredContactMethodID]&#13;
,[iIsBackOfficeCustomer]&#13;
,[iSalutation]&#13;
,[iJobTitle]&#13;
,[iFirstName]&#13;
,[iDepartment]&#13;
,[iNickName]&#13;
,[iMiddleName]&#13;
,[iLastName]&#13;
,[iBirthDate]&#13;
,[iDescription]&#13;
,[iGenderTypeID]&#13;
,[iHasChildren]&#13;
,[iEducationTypeID]&#13;
,[iWebSiteURL]&#13;
,[iEmailAddress1]&#13;
,[iEmailAddress2]&#13;
,[iEmailAddress3]&#13;
,[iAssistantName]&#13;
,[iAssistantPhone]&#13;
,[iManagerName]&#13;
,[iManagerPhone]&#13;
,[iCountryTypeID]&#13;
,[iDoNotFax]&#13;
,[iDoNotEmail]&#13;
,[iDoNotTelephone]&#13;
,[iIsPrivate]&#13;
,[iTelephone1]&#13;
,[iTelephone2]&#13;
,[iTelephone3]&#13;
,[iFax]&#13;
,[iMobileNumber1]&#13;
,[iMobileNumber2]&#13;
,[iMobileNumber3]&#13;
,[iOrganisationUnitID]&#13;
,[iParentContactID]&#13;
,[iIsPrimaryContact]&#13;
,[iContactTypeID]&#13;
,[iContactSubTypeID]&#13;
,[iContactCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Contact]', 'u', NULL,   convert(varchar(36),inserted.[ContactID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ContactID],121)) = quotename(convert(varchar(36),deleted.[ContactID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ContactID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Contact] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ContactID],121)) = quotename(convert(varchar(36),deleted.[ContactID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Contact] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ContactID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Contact_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ELMAH_Error">
      <TblOpts/>
      <Pk ClNs="ErrorId" nm="PK_ELMAH_Error"/>
      <Cl au="0" df="newid()" nm="ErrorId" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Application" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="60" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Host" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Type" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Source" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="60" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Message" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="User" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StatusCode" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TimeUtc" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="Sequence" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AllXml" nu="0">
        <DT arr="0" ds="NText" en="" id="723" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Idx clu="0" nm="IX_ELMAH_Error_App_Time_Seq" unq="0">
        <ClNs>Application, TimeUtc, Sequence</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ExternalGroupTemplate">
      <TblOpts/>
      <Pk ClNs="ExternalGroupTemplateID" nm="pkExternalGroupTemplate"/>
      <Cl au="0" df="newid()" nm="ExternalGroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupTemplateName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupTemplateDescription" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ExternalGroupTemplateRole">
      <TblOpts/>
      <Pk ClNs="ExternalGroupTemplateID, ExternalRoleTemplateID" nm="PK_ExternalGroupTemplateRole"/>
      <Cl au="0" df="newid()" nm="ExternalGroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="ExternalRoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ExternalRoleTemplate">
      <TblOpts/>
      <Pk ClNs="ExternalRoleTemplateID" nm="pkExternalRoleTemplate"/>
      <Cl au="0" df="newid()" nm="ExternalRoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTemplateName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTemplateDescription" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ExternalRoleTemplateClaim">
      <TblOpts/>
      <Pk ClNs="ExternalRoleTemplateClaimID" nm="pkExternalRoleTemplateClaim"/>
      <Cl au="1" df="" nm="ExternalRoleTemplateClaimID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ExternalRoleTemplateClaim_ExternalRoleTemplate" prLkCl="ExternalRoleTemplateID" upAc="3">
        <PrTb mn="0" nm="ExternalRoleTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ExternalRoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalRoleTemplateID" prCl="ExternalRoleTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRoleTemplateClaim_Operation" prLkCl="OperationID" upAc="3">
        <PrTb mn="0" nm="Operation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="ExternalRoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OperationID" prCl="OperationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRoleTemplateClaim_Resource" prLkCl="ResourceID" upAc="3">
        <PrTb mn="0" nm="Resource" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="ExternalRoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ResourceID" prCl="ResourceID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRoleTemplateClaim_State" prLkCl="StateID" upAc="3">
        <PrTb mn="0" nm="State" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="ExternalRoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateID" prCl="StateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRoleTemplateClaim_StateItem" prLkCl="StateItemID" upAc="3">
        <PrTb mn="0" nm="StateItem" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="ExternalRoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateItemID" prCl="StateItemID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="GroupChilds">
      <TblOpts/>
      <Pk ClNs="GroupID, ChildGroupID" nm="PK_dbo.GroupChilds"/>
      <Cl au="0" df="newid()" nm="GroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="ChildGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.GroupChilds_dbo.Groups_GroupID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="Groups" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="GroupChilds" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="GroupID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_GroupID" unq="0">
        <ClNs>GroupID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Groups">
      <TblOpts/>
      <Pk ClNs="ID" nm="PK_dbo.Groups"/>
      <Cl au="0" df="newid()" nm="ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Tenant" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Created" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastUpdated" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="GroupTemplate">
      <TblOpts/>
      <Pk ClNs="GroupTemplateID" nm="pkGroupTemplate"/>
      <Cl au="0" df="newid()" nm="GroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupTemplateName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupTemplateDescription" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="GroupTemplateRole">
      <TblOpts/>
      <Pk ClNs="GroupTemplateID, RoleTemplateID" nm="PK_GroupTemplateRole"/>
      <Cl au="0" df="newid()" nm="GroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="RoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="IdentityCheckProvider">
      <TblOpts/>
      <Pk ClNs="IdentityCheckProviderID" nm="pkIdentityCheckProvider"/>
      <Cl au="0" df="newid()" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ServiceProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_IdentityCheckProvider_ServiceProvider" prLkCl="ServiceProviderID" upAc="3">
        <PrTb mn="0" nm="ServiceProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="IdentityCheckProvider" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ServiceProviderID" prCl="ServiceProviderID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="IdentityCheckProvider_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[IdentityCheckProvider_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'IdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[IdentityCheckProvider]', 'd', NULL, &#13;
  convert(varchar(36),src.[IdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[IdentityCheckProviderID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[IdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[ServiceProviderID],121) as [ServiceProviderID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[IdentityCheckProviderID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[IdentityCheckProviderID]&#13;
,[ServiceProviderID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[IdentityCheckProvider_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="IdentityCheckProvider_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[IdentityCheckProvider_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'IdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[IdentityCheckProvider]', 'i', NULL, &#13;
		convert(varchar(36),src.[IdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[IdentityCheckProviderID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[IdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
  AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[IdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[IdentityCheckProviderID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[ServiceProviderID],121) as [ServiceProviderID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[IdentityCheckProviderID]&#13;
,[ServiceProviderID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[IdentityCheckProvider_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="IdentityCheckProvider_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[IdentityCheckProvider_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'IdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([IdentityCheckProviderID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[ServiceProviderID],121),'&lt;-null-&gt;') as [dServiceProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[ServiceProviderID],121),'&lt;-null-&gt;') as [iServiceProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dIdentityCheckProviderID]&#13;
,[dServiceProviderID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iIdentityCheckProviderID]&#13;
,[iServiceProviderID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[IdentityCheckProvider]', 'u', NULL, 		convert(varchar(36),inserted.[IdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[IdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[IdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[IdentityCheckProviderID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[ServiceProviderID],121),'&lt;-null-&gt;') as [dServiceProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[ServiceProviderID],121),'&lt;-null-&gt;') as [iServiceProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[IdentityCheckProviderID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dIdentityCheckProviderID]&#13;
,[dServiceProviderID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iIdentityCheckProviderID]&#13;
,[iServiceProviderID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[IdentityCheckProvider]', 'u', NULL,   convert(varchar(36),inserted.[IdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[IdentityCheckProviderID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[IdentityCheckProviderID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[IdentityCheckProvider] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[IdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[IdentityCheckProviderID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[IdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[IdentityCheckProviderID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[IdentityCheckProvider_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="LinkedAccountClaims">
      <TblOpts/>
      <Pk ClNs="Type, Value" nm="PK_dbo.LinkedAccountClaims"/>
      <Cl au="0" df="" nm="LinkedAccount_ProviderName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="30" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LinkedAccount_ProviderAccountID" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Type" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Value" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.LinkedAccountClaims_dbo.LinkedAccounts_LinkedAccount_ProviderName_LinkedAccount_ProviderAccountID" prLkCl="ProviderName" upAc="3">
        <PrTb mn="0" nm="LinkedAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="LinkedAccountClaims" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="LinkedAccount_ProviderName" prCl="ProviderName"/>
        <ClPr cdCl="LinkedAccount_ProviderAccountID" prCl="ProviderAccountID"/>
      </Fk>
      <Idx clu="0" nm="IX_LinkedAccount_ProviderName_LinkedAccount_ProviderAccountID" unq="0">
        <ClNs>LinkedAccount_ProviderName, LinkedAccount_ProviderAccountID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="LinkedAccounts">
      <TblOpts/>
      <Pk ClNs="ProviderName, ProviderAccountID" nm="PK_dbo.LinkedAccounts"/>
      <Cl au="0" df="" nm="UserAccount_ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProviderName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="30" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProviderAccountID" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastLogin" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.LinkedAccounts_dbo.UserAccounts_UserAccount_ID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="LinkedAccounts" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserAccount_ID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserAccount_ID" unq="0">
        <ClNs>UserAccount_ID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Operation">
      <TblOpts/>
      <Pk ClNs="OperationID" nm="PK_Operation"/>
      <Cl au="0" df="newid()" nm="OperationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationDescription" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Organisation">
      <TblOpts/>
      <Pk ClNs="OrganisationID" nm="PK_Organisation"/>
      <Cl au="0" df="newid()" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsBranch" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsHeadOffice" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Organisation_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Organisation_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Organisation' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Organisation]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Organisation]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[OrganisationTypeID],121) as [OrganisationTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationSubTypeID],121) as [OrganisationSubTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationCategoryID],121) as [OrganisationCategoryID]&#13;
	,convert(varchar(50),deleted.[IsBranch],121) as [IsBranch]&#13;
	,convert(varchar(50),deleted.[IsHeadOffice],121) as [IsHeadOffice]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationID]&#13;
,[OrganisationTypeID]&#13;
,[OrganisationSubTypeID]&#13;
,[OrganisationCategoryID]&#13;
,[IsBranch]&#13;
,[IsHeadOffice]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Organisation_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Organisation_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Organisation_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Organisation' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Organisation]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Organisation]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Organisation] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[OrganisationTypeID],121) as [OrganisationTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationSubTypeID],121) as [OrganisationSubTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationCategoryID],121) as [OrganisationCategoryID]&#13;
	,convert(varchar(50),inserted.[IsBranch],121) as [IsBranch]&#13;
	,convert(varchar(50),inserted.[IsHeadOffice],121) as [IsHeadOffice]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationID]&#13;
,[OrganisationTypeID]&#13;
,[OrganisationSubTypeID]&#13;
,[OrganisationCategoryID]&#13;
,[IsBranch]&#13;
,[IsHeadOffice]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Organisation_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Organisation_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Organisation_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Organisation' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [dOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [iOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationSubTypeID],121),'&lt;-null-&gt;') as [dOrganisationSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationSubTypeID],121),'&lt;-null-&gt;') as [iOrganisationSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [dOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [iOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsBranch],121),'&lt;-null-&gt;') as [dIsBranch]&#13;
	,isnull(convert(varchar(50),inserted.[IsBranch],121),'&lt;-null-&gt;') as [iIsBranch]&#13;
	,isnull(convert(varchar(50),deleted.[IsHeadOffice],121),'&lt;-null-&gt;') as [dIsHeadOffice]&#13;
	,isnull(convert(varchar(50),inserted.[IsHeadOffice],121),'&lt;-null-&gt;') as [iIsHeadOffice]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationID]&#13;
,[dOrganisationTypeID]&#13;
,[dOrganisationSubTypeID]&#13;
,[dOrganisationCategoryID]&#13;
,[dIsBranch]&#13;
,[dIsHeadOffice]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationID]&#13;
,[iOrganisationTypeID]&#13;
,[iOrganisationSubTypeID]&#13;
,[iOrganisationCategoryID]&#13;
,[iIsBranch]&#13;
,[iIsHeadOffice]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Organisation]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Organisation]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Organisation] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
      ON quotename(convert(varchar(36),src.[OrganisationID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [dOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [iOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationSubTypeID],121),'&lt;-null-&gt;') as [dOrganisationSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationSubTypeID],121),'&lt;-null-&gt;') as [iOrganisationSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [dOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [iOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsBranch],121),'&lt;-null-&gt;') as [dIsBranch]&#13;
	,isnull(convert(varchar(50),inserted.[IsBranch],121),'&lt;-null-&gt;') as [iIsBranch]&#13;
	,isnull(convert(varchar(50),deleted.[IsHeadOffice],121),'&lt;-null-&gt;') as [dIsHeadOffice]&#13;
	,isnull(convert(varchar(50),inserted.[IsHeadOffice],121),'&lt;-null-&gt;') as [iIsHeadOffice]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationID],121)) = quotename(convert(varchar(36),deleted.[OrganisationID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationID]&#13;
,[dOrganisationTypeID]&#13;
,[dOrganisationSubTypeID]&#13;
,[dOrganisationCategoryID]&#13;
,[dIsBranch]&#13;
,[dIsHeadOffice]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationID]&#13;
,[iOrganisationTypeID]&#13;
,[iOrganisationSubTypeID]&#13;
,[iOrganisationCategoryID]&#13;
,[iIsBranch]&#13;
,[iIsHeadOffice]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Organisation]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationID],121)) = quotename(convert(varchar(36),deleted.[OrganisationID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Organisation] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationID],121)) = quotename(convert(varchar(36),deleted.[OrganisationID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Organisation] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Organisation_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationCategory">
      <TblOpts/>
      <Pk ClNs="OrganisationCategoryID" nm="pkOrganisationCategory"/>
      <Cl au="0" df="newid()" nm="OrganisationCategoryID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationCategory_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationCategory_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationCategory]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationCategoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationCategoryID],121) as [OrganisationCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationCategoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationCategory_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationCategory_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationCategory_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationCategory]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationCategoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationCategoryID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationCategoryID],121) as [OrganisationCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationCategory_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationCategory_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationCategory_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationCategory' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationCategoryID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [dOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [iOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationCategory]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationCategory]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationCategoryID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [dOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationCategoryID],121),'&lt;-null-&gt;') as [iOrganisationCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) = quotename(convert(varchar(36),deleted.[OrganisationCategoryID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationCategory]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationCategoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) = quotename(convert(varchar(36),deleted.[OrganisationCategoryID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationCategoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationCategory] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationCategoryID],121)) = quotename(convert(varchar(36),deleted.[OrganisationCategoryID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationCategory] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationCategoryID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationCategory_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationDetail">
      <TblOpts/>
      <Pk ClNs="OrganisationDetailID" nm="PK__Organisa__4AF48AB2EE2ED16C"/>
      <Cl au="0" df="newid()" nm="OrganisationDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationDetail_Organisation_1" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationDetail" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationDetail_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationDetail_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationDetail]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationDetailID],121) as [OrganisationDetailID]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationDetailID]&#13;
,[OrganisationID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationDetail_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationDetail_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationDetail_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationDetail]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationDetailID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationDetailID],121) as [OrganisationDetailID]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationDetailID]&#13;
,[OrganisationID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationDetail_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationDetail_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationDetail_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationDetailID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationDetailID],121),'&lt;-null-&gt;') as [dOrganisationDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationDetailID],121),'&lt;-null-&gt;') as [iOrganisationDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationDetailID]&#13;
,[dOrganisationID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationDetailID]&#13;
,[iOrganisationID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationDetail]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationDetailID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationDetailID],121),'&lt;-null-&gt;') as [dOrganisationDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationDetailID],121),'&lt;-null-&gt;') as [iOrganisationDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) = quotename(convert(varchar(36),deleted.[OrganisationDetailID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationDetailID]&#13;
,[dOrganisationID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationDetailID]&#13;
,[iOrganisationID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationDetail]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) = quotename(convert(varchar(36),deleted.[OrganisationDetailID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationDetail] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationDetailID],121)) = quotename(convert(varchar(36),deleted.[OrganisationDetailID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationDetailID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationDetail_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationExternalGroup">
      <TblOpts/>
      <Pk ClNs="OrganisationExternalGroupID" nm="pkOrganisationExternalGroup"/>
      <Cl au="0" df="newid()" nm="OrganisationExternalGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentRootExternalGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManaged" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalGroupCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ExternalGroup_ClassificationType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalGroupTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalGroup_ClassificationType2" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalGroupSubTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalGroup_GroupTemplate" prLkCl="ExternalGroupTemplateID" upAc="3">
        <PrTb mn="0" nm="ExternalGroupTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalGroupTemplateID" prCl="ExternalGroupTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalGroup_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalGroup_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroup_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroup]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationExternalGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationExternalGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[ExternalGroupTemplateID],121) as [ExternalGroupTemplateID]&#13;
	,convert(varchar(50),deleted.[ParentOrganisationExternalGroupID],121) as [ParentOrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[ParentRootExternalGroupID],121) as [ParentRootExternalGroupID]&#13;
	,convert(varchar(50),deleted.[IsManaged],121) as [IsManaged]&#13;
	,convert(varchar(50),deleted.[ExternalGroupTypeID],121) as [ExternalGroupTypeID]&#13;
	,convert(varchar(50),deleted.[ExternalGroupSubTypeID],121) as [ExternalGroupSubTypeID]&#13;
	,convert(varchar(50),deleted.[ExternalGroupCategoryID],121) as [ExternalGroupCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalGroupID]&#13;
,[Name]&#13;
,[OrganisationID]&#13;
,[ExternalGroupTemplateID]&#13;
,[ParentOrganisationExternalGroupID]&#13;
,[ParentRootExternalGroupID]&#13;
,[IsManaged]&#13;
,[ExternalGroupTypeID]&#13;
,[ExternalGroupSubTypeID]&#13;
,[ExternalGroupCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationExternalGroup_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationExternalGroup_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroup_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroup]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationExternalGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationExternalGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[ExternalGroupTemplateID],121) as [ExternalGroupTemplateID]&#13;
	,convert(varchar(50),inserted.[ParentOrganisationExternalGroupID],121) as [ParentOrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[ParentRootExternalGroupID],121) as [ParentRootExternalGroupID]&#13;
	,convert(varchar(50),inserted.[IsManaged],121) as [IsManaged]&#13;
	,convert(varchar(50),inserted.[ExternalGroupTypeID],121) as [ExternalGroupTypeID]&#13;
	,convert(varchar(50),inserted.[ExternalGroupSubTypeID],121) as [ExternalGroupSubTypeID]&#13;
	,convert(varchar(50),inserted.[ExternalGroupCategoryID],121) as [ExternalGroupCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalGroupID]&#13;
,[Name]&#13;
,[OrganisationID]&#13;
,[ExternalGroupTemplateID]&#13;
,[ParentOrganisationExternalGroupID]&#13;
,[ParentRootExternalGroupID]&#13;
,[IsManaged]&#13;
,[ExternalGroupTypeID]&#13;
,[ExternalGroupSubTypeID]&#13;
,[ExternalGroupCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationExternalGroup_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalGroup_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroup_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationExternalGroupID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupTemplateID],121),'&lt;-null-&gt;') as [dExternalGroupTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupTemplateID],121),'&lt;-null-&gt;') as [iExternalGroupTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dParentOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iParentOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRootExternalGroupID],121),'&lt;-null-&gt;') as [dParentRootExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRootExternalGroupID],121),'&lt;-null-&gt;') as [iParentRootExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsManaged],121),'&lt;-null-&gt;') as [dIsManaged]&#13;
	,isnull(convert(varchar(50),inserted.[IsManaged],121),'&lt;-null-&gt;') as [iIsManaged]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupTypeID],121),'&lt;-null-&gt;') as [dExternalGroupTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupTypeID],121),'&lt;-null-&gt;') as [iExternalGroupTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupSubTypeID],121),'&lt;-null-&gt;') as [dExternalGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupSubTypeID],121),'&lt;-null-&gt;') as [iExternalGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupCategoryID],121),'&lt;-null-&gt;') as [dExternalGroupCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupCategoryID],121),'&lt;-null-&gt;') as [iExternalGroupCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalGroupID]&#13;
,[dName]&#13;
,[dOrganisationID]&#13;
,[dExternalGroupTemplateID]&#13;
,[dParentOrganisationExternalGroupID]&#13;
,[dParentRootExternalGroupID]&#13;
,[dIsManaged]&#13;
,[dExternalGroupTypeID]&#13;
,[dExternalGroupSubTypeID]&#13;
,[dExternalGroupCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalGroupID]&#13;
,[iName]&#13;
,[iOrganisationID]&#13;
,[iExternalGroupTemplateID]&#13;
,[iParentOrganisationExternalGroupID]&#13;
,[iParentRootExternalGroupID]&#13;
,[iIsManaged]&#13;
,[iExternalGroupTypeID]&#13;
,[iExternalGroupSubTypeID]&#13;
,[iExternalGroupCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroup]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationExternalGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupTemplateID],121),'&lt;-null-&gt;') as [dExternalGroupTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupTemplateID],121),'&lt;-null-&gt;') as [iExternalGroupTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dParentOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iParentOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRootExternalGroupID],121),'&lt;-null-&gt;') as [dParentRootExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRootExternalGroupID],121),'&lt;-null-&gt;') as [iParentRootExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsManaged],121),'&lt;-null-&gt;') as [dIsManaged]&#13;
	,isnull(convert(varchar(50),inserted.[IsManaged],121),'&lt;-null-&gt;') as [iIsManaged]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupTypeID],121),'&lt;-null-&gt;') as [dExternalGroupTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupTypeID],121),'&lt;-null-&gt;') as [iExternalGroupTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupSubTypeID],121),'&lt;-null-&gt;') as [dExternalGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupSubTypeID],121),'&lt;-null-&gt;') as [iExternalGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[ExternalGroupCategoryID],121),'&lt;-null-&gt;') as [dExternalGroupCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[ExternalGroupCategoryID],121),'&lt;-null-&gt;') as [iExternalGroupCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalGroupID]&#13;
,[dName]&#13;
,[dOrganisationID]&#13;
,[dExternalGroupTemplateID]&#13;
,[dParentOrganisationExternalGroupID]&#13;
,[dParentRootExternalGroupID]&#13;
,[dIsManaged]&#13;
,[dExternalGroupTypeID]&#13;
,[dExternalGroupSubTypeID]&#13;
,[dExternalGroupCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalGroupID]&#13;
,[iName]&#13;
,[iOrganisationID]&#13;
,[iExternalGroupTemplateID]&#13;
,[iParentOrganisationExternalGroupID]&#13;
,[iParentRootExternalGroupID]&#13;
,[iIsManaged]&#13;
,[iExternalGroupTypeID]&#13;
,[iExternalGroupSubTypeID]&#13;
,[iExternalGroupCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroup]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationExternalGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationExternalGroup] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationExternalGroup_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationExternalGroupOrganisationExternalRole">
      <TblOpts/>
      <Pk ClNs="OrganisationExternalGroupID, OrganisationExternalRoleID" nm="pkOrganisationExternalGroupOrganisationExternalRole"/>
      <Cl au="0" df="newid()" nm="OrganisationExternalGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationExternalRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationExternalGroupOrganisationExternalRole_OrganisationExternalGroup" prLkCl="OrganisationExternalGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalGroup" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalGroupOrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalGroupID" prCl="OrganisationExternalGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationExternalGroupOrganisationExternalRole_OrganisationExternalRole" prLkCl="OrganisationExternalRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalGroupOrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalRoleID" prCl="OrganisationExternalRoleID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalGroupOrganisationExternalRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroupOrganisationExternalRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroupOrganisationExternalRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationExternalGroupID],121), convert(varchar(36),src.[OrganisationExternalRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationExternalGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroupOrganisationExternalRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalGroupID]&#13;
,[OrganisationExternalRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationExternalGroupOrganisationExternalRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroupOrganisationExternalRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroupOrganisationExternalRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationExternalGroupID],121), convert(varchar(36),src.[OrganisationExternalRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationExternalGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroupOrganisationExternalRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroupOrganisationExternalRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalGroupID]&#13;
,[OrganisationExternalRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalGroupOrganisationExternalRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalGroupOrganisationExternalRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationExternalGroupID]) or update ([OrganisationExternalRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalGroupID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalGroupID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroupOrganisationExternalRole]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationExternalGroupID],121), convert(varchar(36),inserted.[OrganisationExternalRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalGroupOrganisationExternalRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroupOrganisationExternalRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalGroupID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalGroupID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalGroupOrganisationExternalRole]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationExternalGroupID],121), convert(varchar(36),inserted.[OrganisationExternalRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationExternalGroupOrganisationExternalRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalGroupOrganisationExternalRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationExternalGroupOrganisationExternalRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationExternalRole">
      <TblOpts/>
      <Pk ClNs="OrganisationExternalRoleID" nm="pkExternalRole"/>
      <Cl au="0" df="newid()" nm="OrganisationExternalRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentRootExternalRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManaged" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ExternalRoleCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ExternalRole_ClassificationType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalRoleTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRole_ClassificationType2" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalRoleSubTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRole_ExternalRoleTemplate" prLkCl="ExternalRoleTemplateID" upAc="3">
        <PrTb mn="0" nm="ExternalRoleTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ExternalRoleTemplateID" prCl="ExternalRoleTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ExternalRole_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationExternalRoleClaim">
      <TblOpts/>
      <Pk ClNs="OrganisationExternalRoleClaimID" nm="pkOrganisationExternalRoleClaim"/>
      <Cl au="1" df="" nm="OrganisationExternalRoleClaimID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationExternalRoleClaim_Operation" prLkCl="OperationID" upAc="3">
        <PrTb mn="0" nm="Operation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OperationID" prCl="OperationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationExternalRoleClaim_OrganisationExternalRole" prLkCl="OrganisationExternalRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationExternalRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalRoleID" prCl="OrganisationExternalRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationExternalRoleClaim_Resource" prLkCl="ResourceID" upAc="3">
        <PrTb mn="0" nm="Resource" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ResourceID" prCl="ResourceID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationExternalRoleClaim_State" prLkCl="StateID" upAc="3">
        <PrTb mn="0" nm="State" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateID" prCl="StateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationExternalRoleClaim_StateItem" prLkCl="StateItemID" upAc="3">
        <PrTb mn="0" nm="StateItem" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationExternalRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateItemID" prCl="StateItemID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalRoleClaim_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalRoleClaim_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalRoleClaim]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationExternalRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationExternalRoleClaimID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleClaimID],121) as [OrganisationExternalRoleClaimID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[ResourceID],121) as [ResourceID]&#13;
	,convert(varchar(50),deleted.[OperationID],121) as [OperationID]&#13;
	,convert(varchar(50),deleted.[StateID],121) as [StateID]&#13;
	,convert(varchar(50),deleted.[StateItemID],121) as [StateItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationExternalRoleClaimID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalRoleClaimID]&#13;
,[OrganisationExternalRoleID]&#13;
,[ResourceID]&#13;
,[OperationID]&#13;
,[StateID]&#13;
,[StateItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationExternalRoleClaim_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationExternalRoleClaim_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalRoleClaim_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalRoleClaim]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationExternalRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationExternalRoleClaimID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalRoleClaim] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalRoleClaimID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleClaimID],121) as [OrganisationExternalRoleClaimID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[ResourceID],121) as [ResourceID]&#13;
	,convert(varchar(50),inserted.[OperationID],121) as [OperationID]&#13;
	,convert(varchar(50),inserted.[StateID],121) as [StateID]&#13;
	,convert(varchar(50),inserted.[StateItemID],121) as [StateItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationExternalRoleClaimID]&#13;
,[OrganisationExternalRoleID]&#13;
,[ResourceID]&#13;
,[OperationID]&#13;
,[StateID]&#13;
,[StateItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationExternalRoleClaim_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationExternalRoleClaim_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationExternalRoleClaim_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationExternalRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationExternalRoleClaimID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleClaimID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleClaimID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleClaimID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleClaimID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[ResourceID],121),'&lt;-null-&gt;') as [dResourceID]&#13;
	,isnull(convert(varchar(50),inserted.[ResourceID],121),'&lt;-null-&gt;') as [iResourceID]&#13;
	,isnull(convert(varchar(50),deleted.[OperationID],121),'&lt;-null-&gt;') as [dOperationID]&#13;
	,isnull(convert(varchar(50),inserted.[OperationID],121),'&lt;-null-&gt;') as [iOperationID]&#13;
	,isnull(convert(varchar(50),deleted.[StateID],121),'&lt;-null-&gt;') as [dStateID]&#13;
	,isnull(convert(varchar(50),inserted.[StateID],121),'&lt;-null-&gt;') as [iStateID]&#13;
	,isnull(convert(varchar(50),deleted.[StateItemID],121),'&lt;-null-&gt;') as [dStateItemID]&#13;
	,isnull(convert(varchar(50),inserted.[StateItemID],121),'&lt;-null-&gt;') as [iStateItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalRoleClaimID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dResourceID]&#13;
,[dOperationID]&#13;
,[dStateID]&#13;
,[dStateItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalRoleClaimID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iResourceID]&#13;
,[iOperationID]&#13;
,[iStateID]&#13;
,[iStateItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalRoleClaim]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationExternalRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalRoleClaim] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalRoleClaimID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleClaimID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleClaimID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleClaimID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleClaimID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[ResourceID],121),'&lt;-null-&gt;') as [dResourceID]&#13;
	,isnull(convert(varchar(50),inserted.[ResourceID],121),'&lt;-null-&gt;') as [iResourceID]&#13;
	,isnull(convert(varchar(50),deleted.[OperationID],121),'&lt;-null-&gt;') as [dOperationID]&#13;
	,isnull(convert(varchar(50),inserted.[OperationID],121),'&lt;-null-&gt;') as [iOperationID]&#13;
	,isnull(convert(varchar(50),deleted.[StateID],121),'&lt;-null-&gt;') as [dStateID]&#13;
	,isnull(convert(varchar(50),inserted.[StateID],121),'&lt;-null-&gt;') as [iStateID]&#13;
	,isnull(convert(varchar(50),deleted.[StateItemID],121),'&lt;-null-&gt;') as [dStateItemID]&#13;
	,isnull(convert(varchar(50),inserted.[StateItemID],121),'&lt;-null-&gt;') as [iStateItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalRoleClaimID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationExternalRoleClaimID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dResourceID]&#13;
,[dOperationID]&#13;
,[dStateID]&#13;
,[dStateItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationExternalRoleClaimID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iResourceID]&#13;
,[iOperationID]&#13;
,[iStateID]&#13;
,[iStateItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationExternalRoleClaim]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalRoleClaimID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationExternalRoleClaimID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationExternalRoleClaim] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationExternalRoleClaimID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationExternalRoleClaim] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationExternalRoleClaimID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationExternalRoleClaim_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationGroup">
      <TblOpts/>
      <Pk ClNs="OrganisationGroupID" nm="pkOrganisationGroup"/>
      <Cl au="0" df="newid()" nm="OrganisationGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentRootGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManaged" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="GroupCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_Group_ClassificationType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="GroupTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Group_ClassificationType2" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="GroupSubTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Group_GroupTemplate" prLkCl="GroupTemplateID" upAc="3">
        <PrTb mn="0" nm="GroupTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="GroupTemplateID" prCl="GroupTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Group_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationGroup_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroup_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroup]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[GroupTemplateID],121) as [GroupTemplateID]&#13;
	,convert(varchar(50),deleted.[ParentOrganisationGroupID],121) as [ParentOrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[ParentRootGroupID],121) as [ParentRootGroupID]&#13;
	,convert(varchar(50),deleted.[IsManaged],121) as [IsManaged]&#13;
	,convert(varchar(50),deleted.[GroupTypeID],121) as [GroupTypeID]&#13;
	,convert(varchar(50),deleted.[GroupSubTypeID],121) as [GroupSubTypeID]&#13;
	,convert(varchar(50),deleted.[GroupCategoryID],121) as [GroupCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationGroupID]&#13;
,[Name]&#13;
,[OrganisationID]&#13;
,[GroupTemplateID]&#13;
,[ParentOrganisationGroupID]&#13;
,[ParentRootGroupID]&#13;
,[IsManaged]&#13;
,[GroupTypeID]&#13;
,[GroupSubTypeID]&#13;
,[GroupCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationGroup_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationGroup_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroup_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroup]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[GroupTemplateID],121) as [GroupTemplateID]&#13;
	,convert(varchar(50),inserted.[ParentOrganisationGroupID],121) as [ParentOrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[ParentRootGroupID],121) as [ParentRootGroupID]&#13;
	,convert(varchar(50),inserted.[IsManaged],121) as [IsManaged]&#13;
	,convert(varchar(50),inserted.[GroupTypeID],121) as [GroupTypeID]&#13;
	,convert(varchar(50),inserted.[GroupSubTypeID],121) as [GroupSubTypeID]&#13;
	,convert(varchar(50),inserted.[GroupCategoryID],121) as [GroupCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationGroupID]&#13;
,[Name]&#13;
,[OrganisationID]&#13;
,[GroupTemplateID]&#13;
,[ParentOrganisationGroupID]&#13;
,[ParentRootGroupID]&#13;
,[IsManaged]&#13;
,[GroupTypeID]&#13;
,[GroupSubTypeID]&#13;
,[GroupCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationGroup_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationGroup_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroup_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationGroupID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupTemplateID],121),'&lt;-null-&gt;') as [dGroupTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupTemplateID],121),'&lt;-null-&gt;') as [iGroupTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationGroupID],121),'&lt;-null-&gt;') as [dParentOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationGroupID],121),'&lt;-null-&gt;') as [iParentOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRootGroupID],121),'&lt;-null-&gt;') as [dParentRootGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRootGroupID],121),'&lt;-null-&gt;') as [iParentRootGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsManaged],121),'&lt;-null-&gt;') as [dIsManaged]&#13;
	,isnull(convert(varchar(50),inserted.[IsManaged],121),'&lt;-null-&gt;') as [iIsManaged]&#13;
	,isnull(convert(varchar(50),deleted.[GroupTypeID],121),'&lt;-null-&gt;') as [dGroupTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupTypeID],121),'&lt;-null-&gt;') as [iGroupTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupSubTypeID],121),'&lt;-null-&gt;') as [dGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupSubTypeID],121),'&lt;-null-&gt;') as [iGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupCategoryID],121),'&lt;-null-&gt;') as [dGroupCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupCategoryID],121),'&lt;-null-&gt;') as [iGroupCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationGroupID]&#13;
,[dName]&#13;
,[dOrganisationID]&#13;
,[dGroupTemplateID]&#13;
,[dParentOrganisationGroupID]&#13;
,[dParentRootGroupID]&#13;
,[dIsManaged]&#13;
,[dGroupTypeID]&#13;
,[dGroupSubTypeID]&#13;
,[dGroupCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationGroupID]&#13;
,[iName]&#13;
,[iOrganisationID]&#13;
,[iGroupTemplateID]&#13;
,[iParentOrganisationGroupID]&#13;
,[iParentRootGroupID]&#13;
,[iIsManaged]&#13;
,[iGroupTypeID]&#13;
,[iGroupSubTypeID]&#13;
,[iGroupCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroup]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupTemplateID],121),'&lt;-null-&gt;') as [dGroupTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupTemplateID],121),'&lt;-null-&gt;') as [iGroupTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationGroupID],121),'&lt;-null-&gt;') as [dParentOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationGroupID],121),'&lt;-null-&gt;') as [iParentOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRootGroupID],121),'&lt;-null-&gt;') as [dParentRootGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRootGroupID],121),'&lt;-null-&gt;') as [iParentRootGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsManaged],121),'&lt;-null-&gt;') as [dIsManaged]&#13;
	,isnull(convert(varchar(50),inserted.[IsManaged],121),'&lt;-null-&gt;') as [iIsManaged]&#13;
	,isnull(convert(varchar(50),deleted.[GroupTypeID],121),'&lt;-null-&gt;') as [dGroupTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupTypeID],121),'&lt;-null-&gt;') as [iGroupTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupSubTypeID],121),'&lt;-null-&gt;') as [dGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupSubTypeID],121),'&lt;-null-&gt;') as [iGroupSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[GroupCategoryID],121),'&lt;-null-&gt;') as [dGroupCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[GroupCategoryID],121),'&lt;-null-&gt;') as [iGroupCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationGroupID]&#13;
,[dName]&#13;
,[dOrganisationID]&#13;
,[dGroupTemplateID]&#13;
,[dParentOrganisationGroupID]&#13;
,[dParentRootGroupID]&#13;
,[dIsManaged]&#13;
,[dGroupTypeID]&#13;
,[dGroupSubTypeID]&#13;
,[dGroupCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationGroupID]&#13;
,[iName]&#13;
,[iOrganisationID]&#13;
,[iGroupTemplateID]&#13;
,[iParentOrganisationGroupID]&#13;
,[iParentRootGroupID]&#13;
,[iIsManaged]&#13;
,[iGroupTypeID]&#13;
,[iGroupSubTypeID]&#13;
,[iGroupCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroup]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationGroup] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationGroup_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationGroupOrganisationRole">
      <TblOpts/>
      <Pk ClNs="OrganisationGroupID, OrganisationRoleID" nm="pkOrganisationGroupOrganisationRole"/>
      <Cl au="0" df="newid()" nm="OrganisationGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationGroupOrganisationRole_OrganisationGroup" prLkCl="OrganisationGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationGroup" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationGroupOrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationGroupID" prCl="OrganisationGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationGroupOrganisationRole_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationGroupOrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationGroupOrganisationRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroupOrganisationRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroupOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroupOrganisationRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationGroupID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroupOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationGroupID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationGroupOrganisationRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationGroupOrganisationRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroupOrganisationRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroupOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroupOrganisationRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationGroupID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationGroupID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroupOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroupOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationGroupID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationGroupOrganisationRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationGroupOrganisationRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationGroupOrganisationRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationGroupOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationGroupID]) or update ([OrganisationRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationGroupID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationGroupID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroupOrganisationRole]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationGroupID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationGroupOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroupOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationGroupID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationGroupID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationGroupOrganisationRole]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationGroupID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationGroupOrganisationRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationGroupOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationGroupOrganisationRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationIdentityCheckProvider">
      <TblOpts/>
      <Pk ClNs="OrganisationIdentityCheckProviderID" nm="pkOrganisationIdentityCheckProvider"/>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="OrganisationIdentityCheckProviderID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDefault" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationIdentityCheckProvider_IdentityCheckProvider" prLkCl="IdentityCheckProviderID" upAc="3">
        <PrTb mn="0" nm="IdentityCheckProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationIdentityCheckProvider" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="IdentityCheckProviderID" prCl="IdentityCheckProviderID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationIdentityCheckProvider_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationIdentityCheckProvider" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationIdentityCheckProvider_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationIdentityCheckProvider_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationIdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationIdentityCheckProvider]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationIdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[OrganisationIdentityCheckProviderID],121) as [OrganisationIdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),deleted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationIdentityCheckProviderID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationID]&#13;
,[IdentityCheckProviderID]&#13;
,[OrganisationIdentityCheckProviderID]&#13;
,[IsDefault]&#13;
,[UserTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationIdentityCheckProvider_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationIdentityCheckProvider_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationIdentityCheckProvider_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationIdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationIdentityCheckProvider]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationIdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
   AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationIdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[OrganisationIdentityCheckProviderID],121) as [OrganisationIdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),inserted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationID]&#13;
,[IdentityCheckProviderID]&#13;
,[OrganisationIdentityCheckProviderID]&#13;
,[IsDefault]&#13;
,[UserTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationIdentityCheckProvider_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationIdentityCheckProvider_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationIdentityCheckProvider_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationIdentityCheckProvider' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationIdentityCheckProviderID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationIdentityCheckProviderID],121),'&lt;-null-&gt;') as [dOrganisationIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationIdentityCheckProviderID],121),'&lt;-null-&gt;') as [iOrganisationIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dOrganisationIdentityCheckProviderID]&#13;
,[dIsDefault]&#13;
,[dUserTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iOrganisationIdentityCheckProviderID]&#13;
,[iIsDefault]&#13;
,[iUserTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationIdentityCheckProvider]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationIdentityCheckProvider]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationIdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationIdentityCheckProviderID],121),'&lt;-null-&gt;') as [dOrganisationIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationIdentityCheckProviderID],121),'&lt;-null-&gt;') as [iOrganisationIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[OrganisationIdentityCheckProviderID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dOrganisationIdentityCheckProviderID]&#13;
,[dIsDefault]&#13;
,[dUserTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iOrganisationIdentityCheckProviderID]&#13;
,[iIsDefault]&#13;
,[iUserTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationIdentityCheckProvider]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[OrganisationIdentityCheckProviderID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationIdentityCheckProviderID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationIdentityCheckProvider] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121)) = quotename(convert(varchar(36),deleted.[OrganisationIdentityCheckProviderID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationIdentityCheckProvider] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationIdentityCheckProviderID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationIdentityCheckProvider_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationProductTemplate">
      <TblOpts/>
      <Pk ClNs="OrganisationProductTemplateID" nm="pkOrganisationProductTemplate"/>
      <Cl au="0" df="newid()" nm="OrganisationProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationProductTemplate_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationProductTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationProductTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationProductTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationProductTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationProductTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationProductTemplateID],121) as [OrganisationProductTemplateID]&#13;
	,convert(varchar(50),deleted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationProductTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationProductTemplateID]&#13;
,[ProductTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationProductTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationProductTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationProductTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationProductTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationProductTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationProductTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationProductTemplateID],121) as [OrganisationProductTemplateID]&#13;
	,convert(varchar(50),inserted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationProductTemplateID]&#13;
,[ProductTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationProductTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationProductTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationProductTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationProductTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationProductTemplateID],121),'&lt;-null-&gt;') as [dOrganisationProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationProductTemplateID],121),'&lt;-null-&gt;') as [iOrganisationProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationProductTemplateID]&#13;
,[dProductTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationProductTemplateID]&#13;
,[iProductTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationProductTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationProductTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationProductTemplateID],121),'&lt;-null-&gt;') as [dOrganisationProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationProductTemplateID],121),'&lt;-null-&gt;') as [iOrganisationProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationProductTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationProductTemplateID]&#13;
,[dProductTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationProductTemplateID]&#13;
,[iProductTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationProductTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationProductTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationProductTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationProductTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationProductTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationProductTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationProductTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationRelationship">
      <TblOpts/>
      <Pk ClNs="AccountID, ContactID, OrganisationRelationshipRoleID" nm="pkOrganisationRelationship"/>
      <Cl au="0" df="newid()" nm="AccountID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="ContactID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationRelationshipRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationRelationship_Account" prLkCl="AccountID" upAc="3">
        <PrTb mn="0" nm="Account" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRelationship" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="AccountID" prCl="AccountID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRelationship_Contact" prLkCl="ContactID" upAc="3">
        <PrTb mn="0" nm="Contact" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRelationship" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ContactID" prCl="ContactID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRelationship_OrganisationRelationshipRole" prLkCl="OrganisationRelationshipRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRelationshipRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRelationship" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRelationshipRoleID" prCl="OrganisationRelationshipRoleID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationship_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationship_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationship' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationship]', 'd', NULL, &#13;
  convert(varchar(36),src.[AccountID],121), convert(varchar(36),src.[ContactID],121), convert(varchar(36),src.[OrganisationRelationshipRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[AccountID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationship]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[AccountID],121) as [AccountID]&#13;
	,convert(varchar(50),deleted.[ContactID],121) as [ContactID]&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[AccountID],121)) + quotename(convert(varchar(36),deleted.[ContactID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[AccountID]&#13;
,[ContactID]&#13;
,[OrganisationRelationshipRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationRelationship_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationRelationship_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationship_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationship' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationship]', 'i', NULL, &#13;
		convert(varchar(36),src.[AccountID],121), convert(varchar(36),src.[ContactID],121), convert(varchar(36),src.[OrganisationRelationshipRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[AccountID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationship]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationship] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) + quotename(convert(varchar(36),src.[ContactID],121)) + quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[AccountID],121) as [AccountID]&#13;
	,convert(varchar(50),inserted.[ContactID],121) as [ContactID]&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[AccountID]&#13;
,[ContactID]&#13;
,[OrganisationRelationshipRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationRelationship_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationship_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationship_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationship' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([AccountID]) or update ([ContactID]) or update ([OrganisationRelationshipRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AccountID],121),'&lt;-null-&gt;') as [dAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountID],121),'&lt;-null-&gt;') as [iAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactID],121),'&lt;-null-&gt;') as [dContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactID],121),'&lt;-null-&gt;') as [iContactID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAccountID]&#13;
,[dContactID]&#13;
,[dOrganisationRelationshipRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAccountID]&#13;
,[iContactID]&#13;
,[iOrganisationRelationshipRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationship]', 'u', NULL, 		convert(varchar(36),inserted.[AccountID],121), convert(varchar(36),inserted.[ContactID],121), convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationship]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationship] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) + quotename(convert(varchar(36),src.[ContactID],121)) + quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[AccountID],121),'&lt;-null-&gt;') as [dAccountID]&#13;
	,isnull(convert(varchar(50),inserted.[AccountID],121),'&lt;-null-&gt;') as [iAccountID]&#13;
	,isnull(convert(varchar(50),deleted.[ContactID],121),'&lt;-null-&gt;') as [dContactID]&#13;
	,isnull(convert(varchar(50),inserted.[ContactID],121),'&lt;-null-&gt;') as [iContactID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121)) + quotename(convert(varchar(36),deleted.[ContactID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dAccountID]&#13;
,[dContactID]&#13;
,[dOrganisationRelationshipRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iAccountID]&#13;
,[iContactID]&#13;
,[iOrganisationRelationshipRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationship]', 'u', NULL,   convert(varchar(36),inserted.[AccountID],121), convert(varchar(36),inserted.[ContactID],121), convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121)) + quotename(convert(varchar(36),deleted.[ContactID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[AccountID],121)) + quotename(convert(varchar(36),inserted.[ContactID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationRelationship] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) + quotename(convert(varchar(36),src.[ContactID],121)) + quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[AccountID],121)) + quotename(convert(varchar(36),deleted.[ContactID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationship] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[AccountID],121)) + quotename(convert(varchar(36),src.[ContactID],121)) + quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationRelationship_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationRelationshipRole">
      <TblOpts/>
      <Pk ClNs="OrganisationRelationshipRoleID" nm="pkOrganisationRelationshipRole"/>
      <Cl au="0" df="newid()" nm="OrganisationRelationshipRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRelationshipRoleStatusID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRelationshipRoleStateID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRelationshipRoleTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_RelationshipRole_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRelationshipRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationshipRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationRelationshipRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationRelationshipRoleID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleStatusID],121) as [OrganisationRelationshipRoleStatusID]&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleStateID],121) as [OrganisationRelationshipRoleStateID]&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleTypeID],121) as [OrganisationRelationshipRoleTypeID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationRelationshipRoleID]&#13;
,[Name]&#13;
,[Description]&#13;
,[OrganisationID]&#13;
,[OrganisationRelationshipRoleStatusID]&#13;
,[OrganisationRelationshipRoleStateID]&#13;
,[OrganisationRelationshipRoleTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationRelationshipRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationRelationshipRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationRelationshipRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationRelationshipRoleID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleStatusID],121) as [OrganisationRelationshipRoleStatusID]&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleStateID],121) as [OrganisationRelationshipRoleStateID]&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleTypeID],121) as [OrganisationRelationshipRoleTypeID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationRelationshipRoleID]&#13;
,[Name]&#13;
,[Description]&#13;
,[OrganisationID]&#13;
,[OrganisationRelationshipRoleStatusID]&#13;
,[OrganisationRelationshipRoleStateID]&#13;
,[OrganisationRelationshipRoleTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationRelationshipRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationshipRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationRelationshipRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleStatusID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleStatusID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleStatusID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleStatusID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleStateID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleStateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleStateID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleStateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleTypeID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleTypeID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRelationshipRoleID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dOrganisationID]&#13;
,[dOrganisationRelationshipRoleStatusID]&#13;
,[dOrganisationRelationshipRoleStateID]&#13;
,[dOrganisationRelationshipRoleTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRelationshipRoleID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iOrganisationID]&#13;
,[iOrganisationRelationshipRoleStatusID]&#13;
,[iOrganisationRelationshipRoleStateID]&#13;
,[iOrganisationRelationshipRoleTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRole]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleStatusID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleStatusID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleStatusID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleStatusID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleStateID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleStateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleStateID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleStateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleTypeID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleTypeID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRelationshipRoleID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dOrganisationID]&#13;
,[dOrganisationRelationshipRoleStatusID]&#13;
,[dOrganisationRelationshipRoleStateID]&#13;
,[dOrganisationRelationshipRoleTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRelationshipRoleID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iOrganisationID]&#13;
,[iOrganisationRelationshipRoleStatusID]&#13;
,[iOrganisationRelationshipRoleStateID]&#13;
,[iOrganisationRelationshipRoleTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRole]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationRelationshipRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationRelationshipRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationRelationshipRoleExternal">
      <TblOpts/>
      <Pk ClNs="OrganisationRelationshipRoleID, OrganisationExternalGroupID, OrganisationExternalRoleID" nm="PK_OrganisationRelationshipRoleExternal"/>
      <Cl au="0" df="newid()" nm="OrganisationRelationshipRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationExternalGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationExternalRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationshipRoleExternal_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRoleExternal_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRoleExternal' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRoleExternal]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationRelationshipRoleID],121), convert(varchar(36),src.[OrganisationExternalGroupID],121), convert(varchar(36),src.[OrganisationExternalRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationRelationshipRoleID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRoleExternal]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
   (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationRelationshipRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[OrganisationExternalRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationRelationshipRoleExternal_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationRelationshipRoleExternal_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRoleExternal_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRoleExternal' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRoleExternal]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationRelationshipRoleID],121), convert(varchar(36),src.[OrganisationExternalGroupID],121), convert(varchar(36),src.[OrganisationExternalRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationRelationshipRoleID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRoleExternal]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRoleExternal] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121) as [OrganisationRelationshipRoleID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationRelationshipRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[OrganisationExternalRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationRelationshipRoleExternal_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationRelationshipRoleExternal_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRelationshipRoleExternal_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRelationshipRoleExternal' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationRelationshipRoleID]) or update ([OrganisationExternalGroupID]) or update ([OrganisationExternalRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRelationshipRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRelationshipRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRoleExternal]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121), convert(varchar(36),inserted.[OrganisationExternalGroupID],121), convert(varchar(36),inserted.[OrganisationExternalRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRelationshipRoleExternal]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRoleExternal] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [dOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRelationshipRoleID],121),'&lt;-null-&gt;') as [iOrganisationRelationshipRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRelationshipRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRelationshipRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
 OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRelationshipRoleExternal]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121), convert(varchar(36),inserted.[OrganisationExternalGroupID],121), convert(varchar(36),inserted.[OrganisationExternalRoleID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),inserted.[OrganisationExternalRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationRelationshipRoleExternal] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),deleted.[OrganisationExternalRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRelationshipRoleExternal] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRelationshipRoleID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalGroupID],121)) + quotename(convert(varchar(36),src.[OrganisationExternalRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationRelationshipRoleExternal_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationRole">
      <TblOpts/>
      <Pk ClNs="OrganisationRoleID" nm="pkRole"/>
      <Cl au="0" df="newid()" nm="OrganisationRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentRootRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManaged" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_Role_ClassificationType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RoleTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Role_ClassificationType2" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RoleSubTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Role_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Role_RoleTemplate" prLkCl="RoleTemplateID" upAc="3">
        <PrTb mn="0" nm="RoleTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RoleTemplateID" prCl="RoleTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationRoleClaim">
      <TblOpts/>
      <Pk ClNs="OrganisationRoleClaimID" nm="pkOrganisationRoleClaim"/>
      <Cl au="1" df="" nm="OrganisationRoleClaimID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationRoleClaim_Operation" prLkCl="OperationID" upAc="3">
        <PrTb mn="0" nm="Operation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OperationID" prCl="OperationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRoleClaim_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRoleClaim_Resource" prLkCl="ResourceID" upAc="3">
        <PrTb mn="0" nm="Resource" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ResourceID" prCl="ResourceID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRoleClaim_State" prLkCl="StateID" upAc="3">
        <PrTb mn="0" nm="State" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateID" prCl="StateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationRoleClaim_StateItem" prLkCl="StateItemID" upAc="3">
        <PrTb mn="0" nm="StateItem" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationRoleClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateItemID" prCl="StateItemID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationRoleClaim_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRoleClaim_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRoleClaim]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationRoleClaimID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationRoleClaimID],121) as [OrganisationRoleClaimID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[ResourceID],121) as [ResourceID]&#13;
	,convert(varchar(50),deleted.[OperationID],121) as [OperationID]&#13;
	,convert(varchar(50),deleted.[StateID],121) as [StateID]&#13;
	,convert(varchar(50),deleted.[StateItemID],121) as [StateItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationRoleClaimID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationRoleClaimID]&#13;
,[OrganisationRoleID]&#13;
,[ResourceID]&#13;
,[OperationID]&#13;
,[StateID]&#13;
,[StateItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationRoleClaim_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationRoleClaim_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRoleClaim_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRoleClaim]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationRoleClaimID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
  AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRoleClaim] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRoleClaimID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationRoleClaimID],121) as [OrganisationRoleClaimID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[ResourceID],121) as [ResourceID]&#13;
	,convert(varchar(50),inserted.[OperationID],121) as [OperationID]&#13;
	,convert(varchar(50),inserted.[StateID],121) as [StateID]&#13;
	,convert(varchar(50),inserted.[StateItemID],121) as [StateItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationRoleClaimID]&#13;
,[OrganisationRoleID]&#13;
,[ResourceID]&#13;
,[OperationID]&#13;
,[StateID]&#13;
,[StateItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationRoleClaim_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationRoleClaim_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationRoleClaim_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationRoleClaim' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationRoleClaimID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleClaimID],121),'&lt;-null-&gt;') as [dOrganisationRoleClaimID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleClaimID],121),'&lt;-null-&gt;') as [iOrganisationRoleClaimID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[ResourceID],121),'&lt;-null-&gt;') as [dResourceID]&#13;
	,isnull(convert(varchar(50),inserted.[ResourceID],121),'&lt;-null-&gt;') as [iResourceID]&#13;
	,isnull(convert(varchar(50),deleted.[OperationID],121),'&lt;-null-&gt;') as [dOperationID]&#13;
	,isnull(convert(varchar(50),inserted.[OperationID],121),'&lt;-null-&gt;') as [iOperationID]&#13;
	,isnull(convert(varchar(50),deleted.[StateID],121),'&lt;-null-&gt;') as [dStateID]&#13;
	,isnull(convert(varchar(50),inserted.[StateID],121),'&lt;-null-&gt;') as [iStateID]&#13;
	,isnull(convert(varchar(50),deleted.[StateItemID],121),'&lt;-null-&gt;') as [dStateItemID]&#13;
	,isnull(convert(varchar(50),inserted.[StateItemID],121),'&lt;-null-&gt;') as [iStateItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRoleClaimID]&#13;
,[dOrganisationRoleID]&#13;
,[dResourceID]&#13;
,[dOperationID]&#13;
,[dStateID]&#13;
,[dStateItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRoleClaimID]&#13;
,[iOrganisationRoleID]&#13;
,[iResourceID]&#13;
,[iOperationID]&#13;
,[iStateID]&#13;
,[iStateItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRoleClaim]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationRoleClaim]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRoleClaim] as src with (nolock) &#13;
   JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRoleClaimID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleClaimID],121),'&lt;-null-&gt;') as [dOrganisationRoleClaimID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleClaimID],121),'&lt;-null-&gt;') as [iOrganisationRoleClaimID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[ResourceID],121),'&lt;-null-&gt;') as [dResourceID]&#13;
	,isnull(convert(varchar(50),inserted.[ResourceID],121),'&lt;-null-&gt;') as [iResourceID]&#13;
	,isnull(convert(varchar(50),deleted.[OperationID],121),'&lt;-null-&gt;') as [dOperationID]&#13;
	,isnull(convert(varchar(50),inserted.[OperationID],121),'&lt;-null-&gt;') as [iOperationID]&#13;
	,isnull(convert(varchar(50),deleted.[StateID],121),'&lt;-null-&gt;') as [dStateID]&#13;
	,isnull(convert(varchar(50),inserted.[StateID],121),'&lt;-null-&gt;') as [iStateID]&#13;
	,isnull(convert(varchar(50),deleted.[StateItemID],121),'&lt;-null-&gt;') as [dStateItemID]&#13;
	,isnull(convert(varchar(50),inserted.[StateItemID],121),'&lt;-null-&gt;') as [iStateItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRoleClaimID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationRoleClaimID]&#13;
,[dOrganisationRoleID]&#13;
,[dResourceID]&#13;
,[dOperationID]&#13;
,[dStateID]&#13;
,[dStateItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationRoleClaimID]&#13;
,[iOrganisationRoleID]&#13;
,[iResourceID]&#13;
,[iOperationID]&#13;
,[iStateID]&#13;
,[iStateItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationRoleClaim]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationRoleClaimID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRoleClaimID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationRoleClaimID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationRoleClaim] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRoleClaimID],121)) = quotename(convert(varchar(36),deleted.[OrganisationRoleClaimID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationRoleClaim] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationRoleClaimID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationRoleClaim_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationService">
      <TblOpts/>
      <Cl au="0" df="" nm="OrganisationServiceID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Duration" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsSchedulable" nu="1">
        <DT arr="0" ds="BigInt" en="" id="-5" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsVisible" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StatusID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationService_Organisation" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationService" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationStructure">
      <TblOpts/>
      <Pk ClNs="OrganisationStructureID" nm="pkOrganisationStructure"/>
      <Cl au="0" df="newid()" nm="OrganisationStructureID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationStructureID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="50" nm="Name" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsLeafNode" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK_OrganisationStructure" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationStructure" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationStructure_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationStructure_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationStructure]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationStructureID],121) as [OrganisationStructureID]&#13;
	,convert(varchar(50),deleted.[ParentOrganisationStructureID],121) as [ParentOrganisationStructureID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationStructureID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationStructureID]&#13;
,[ParentOrganisationStructureID]&#13;
,[Name]&#13;
,[IsLeafNode]&#13;
,[OrganisationID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationStructure_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationStructure_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationStructure_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationStructure]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
  AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationStructureID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationStructureID],121) as [OrganisationStructureID]&#13;
	,convert(varchar(50),inserted.[ParentOrganisationStructureID],121) as [ParentOrganisationStructureID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationStructureID]&#13;
,[ParentOrganisationStructureID]&#13;
,[Name]&#13;
,[IsLeafNode]&#13;
,[OrganisationID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationStructure_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationStructure_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationStructure_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationStructureID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationStructureID],121),'&lt;-null-&gt;') as [dOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationStructureID],121),'&lt;-null-&gt;') as [iOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationStructureID],121),'&lt;-null-&gt;') as [dParentOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationStructureID],121),'&lt;-null-&gt;') as [iParentOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationStructureID]&#13;
,[dParentOrganisationStructureID]&#13;
,[dName]&#13;
,[dIsLeafNode]&#13;
,[dOrganisationID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationStructureID]&#13;
,[iParentOrganisationStructureID]&#13;
,[iName]&#13;
,[iIsLeafNode]&#13;
,[iOrganisationID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationStructure]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationStructureID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationStructureID],121),'&lt;-null-&gt;') as [dOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationStructureID],121),'&lt;-null-&gt;') as [iOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationStructureID],121),'&lt;-null-&gt;') as [dParentOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationStructureID],121),'&lt;-null-&gt;') as [iParentOrganisationStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) = quotename(convert(varchar(36),deleted.[OrganisationStructureID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationStructureID]&#13;
,[dParentOrganisationStructureID]&#13;
,[dName]&#13;
,[dIsLeafNode]&#13;
,[dOrganisationID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationStructureID]&#13;
,[iParentOrganisationStructureID]&#13;
,[iName]&#13;
,[iIsLeafNode]&#13;
,[iOrganisationID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationStructure]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
 ON quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) = quotename(convert(varchar(36),deleted.[OrganisationStructureID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationStructureID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationStructure] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationStructureID],121)) = quotename(convert(varchar(36),deleted.[OrganisationStructureID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationStructureID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationStructure_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationTeam">
      <TblOpts/>
      <Pk ClNs="OrganisationTeamID" nm="Key2"/>
      <Cl au="1" df="" nm="OrganisationTeamID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EmailAddress" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDefault" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TeamTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TeamSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TeamCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK ClassificationTypeTeamType" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationTeam" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TeamTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationTeam_ClassificationType_1" prLkCl="ClassificationTypeID" upAc="3">
        <PrTb mn="0" nm="ClassificationType" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationTeam" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TeamTypeID" prCl="ClassificationTypeID"/>
      </Fk>
      <Fk deAc="3" nm="FK_TeamUnit" prLkCl="OrganisationUnitID" upAc="3">
        <PrTb mn="0" nm="OrganisationUnit" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationTeam" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationUnitID" prCl="OrganisationUnitID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationTeam_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTeam_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTeam' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTeam]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationTeamID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationTeamID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTeam]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationTeamID],121) as [OrganisationTeamID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[EmailAddress],121) as [EmailAddress]&#13;
	,convert(varchar(50),deleted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),deleted.[TeamTypeID],121) as [TeamTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[TeamSubTypeID],121) as [TeamSubTypeID]&#13;
	,convert(varchar(50),deleted.[TeamCategoryID],121) as [TeamCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationTeamID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationTeamID]&#13;
,[Name]&#13;
,[Description]&#13;
,[EmailAddress]&#13;
,[IsDefault]&#13;
,[TeamTypeID]&#13;
,[OrganisationUnitID]&#13;
,[TeamSubTypeID]&#13;
,[TeamCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationTeam_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationTeam_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTeam_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTeam' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTeam]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationTeamID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationTeamID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTeam]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
   FROM [dbo].[OrganisationTeam] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTeamID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationTeamID],121) as [OrganisationTeamID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[EmailAddress],121) as [EmailAddress]&#13;
	,convert(varchar(50),inserted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),inserted.[TeamTypeID],121) as [TeamTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[TeamSubTypeID],121) as [TeamSubTypeID]&#13;
	,convert(varchar(50),inserted.[TeamCategoryID],121) as [TeamCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationTeamID]&#13;
,[Name]&#13;
,[Description]&#13;
,[EmailAddress]&#13;
,[IsDefault]&#13;
,[TeamTypeID]&#13;
,[OrganisationUnitID]&#13;
,[TeamSubTypeID]&#13;
,[TeamCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationTeam_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationTeam_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTeam_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTeam' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationTeamID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTeamID],121),'&lt;-null-&gt;') as [dOrganisationTeamID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTeamID],121),'&lt;-null-&gt;') as [iOrganisationTeamID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress],121),'&lt;-null-&gt;') as [dEmailAddress]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress],121),'&lt;-null-&gt;') as [iEmailAddress]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[TeamTypeID],121),'&lt;-null-&gt;') as [dTeamTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamTypeID],121),'&lt;-null-&gt;') as [iTeamTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[TeamSubTypeID],121),'&lt;-null-&gt;') as [dTeamSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamSubTypeID],121),'&lt;-null-&gt;') as [iTeamSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[TeamCategoryID],121),'&lt;-null-&gt;') as [dTeamCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamCategoryID],121),'&lt;-null-&gt;') as [iTeamCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationTeamID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dEmailAddress]&#13;
,[dIsDefault]&#13;
,[dTeamTypeID]&#13;
,[dOrganisationUnitID]&#13;
,[dTeamSubTypeID]&#13;
,[dTeamCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationTeamID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iEmailAddress]&#13;
,[iIsDefault]&#13;
,[iTeamTypeID]&#13;
,[iOrganisationUnitID]&#13;
,[iTeamSubTypeID]&#13;
,[iTeamCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTeam]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationTeamID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTeam]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationTeam] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTeamID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTeamID],121),'&lt;-null-&gt;') as [dOrganisationTeamID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTeamID],121),'&lt;-null-&gt;') as [iOrganisationTeamID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[EmailAddress],121),'&lt;-null-&gt;') as [dEmailAddress]&#13;
	,isnull(convert(varchar(50),inserted.[EmailAddress],121),'&lt;-null-&gt;') as [iEmailAddress]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[TeamTypeID],121),'&lt;-null-&gt;') as [dTeamTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamTypeID],121),'&lt;-null-&gt;') as [iTeamTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[TeamSubTypeID],121),'&lt;-null-&gt;') as [dTeamSubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamSubTypeID],121),'&lt;-null-&gt;') as [iTeamSubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[TeamCategoryID],121),'&lt;-null-&gt;') as [dTeamCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[TeamCategoryID],121),'&lt;-null-&gt;') as [iTeamCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTeamID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationTeamID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dEmailAddress]&#13;
,[dIsDefault]&#13;
,[dTeamTypeID]&#13;
,[dOrganisationUnitID]&#13;
,[dTeamSubTypeID]&#13;
,[dTeamCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationTeamID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iEmailAddress]&#13;
,[iIsDefault]&#13;
,[iTeamTypeID]&#13;
,[iOrganisationUnitID]&#13;
,[iTeamSubTypeID]&#13;
,[iTeamCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTeam]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationTeamID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTeamID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationTeamID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationTeam] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTeamID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTeamID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationTeam] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTeamID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationTeam_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationTypeUserTypeIdentityCheckTemplate">
      <TblOpts/>
      <Pk ClNs="OrganisationTypeIdentityCheckTemplateID" nm="pkOrganisationTypeUserTypeIdentityCheckTemplate"/>
      <Cl au="0" df="" nm="OrganisationTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="OrganisationTypeIdentityCheckTemplateID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDefault" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationTypeIdentityCheckProvider_IdentityCheckProvider" prLkCl="IdentityCheckProviderID" upAc="3">
        <PrTb mn="0" nm="IdentityCheckProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationTypeUserTypeIdentityCheckTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="IdentityCheckProviderID" prCl="IdentityCheckProviderID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTypeUserTypeIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationTypeID],121) as [OrganisationTypeID]&#13;
	,convert(varchar(50),deleted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[OrganisationTypeIdentityCheckTemplateID],121) as [OrganisationTypeIdentityCheckTemplateID]&#13;
	,convert(varchar(50),deleted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),deleted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationTypeIdentityCheckTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationTypeID]&#13;
,[IdentityCheckProviderID]&#13;
,[OrganisationTypeIdentityCheckTemplateID]&#13;
,[UserTypeID]&#13;
,[IsDefault]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTypeUserTypeIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationTypeID],121) as [OrganisationTypeID]&#13;
	,convert(varchar(50),inserted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[OrganisationTypeIdentityCheckTemplateID],121) as [OrganisationTypeIdentityCheckTemplateID]&#13;
	,convert(varchar(50),inserted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),inserted.[IsDefault],121) as [IsDefault]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationTypeID]&#13;
,[IdentityCheckProviderID]&#13;
,[OrganisationTypeIdentityCheckTemplateID]&#13;
,[UserTypeID]&#13;
,[IsDefault]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationTypeUserTypeIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationTypeIdentityCheckTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [dOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [iOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeIdentityCheckTemplateID],121),'&lt;-null-&gt;') as [dOrganisationTypeIdentityCheckTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeIdentityCheckTemplateID],121),'&lt;-null-&gt;') as [iOrganisationTypeIdentityCheckTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationTypeID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dOrganisationTypeIdentityCheckTemplateID]&#13;
,[dUserTypeID]&#13;
,[dIsDefault]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationTypeID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iOrganisationTypeIdentityCheckTemplateID]&#13;
,[iUserTypeID]&#13;
,[iIsDefault]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [dOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeID],121),'&lt;-null-&gt;') as [iOrganisationTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationTypeIdentityCheckTemplateID],121),'&lt;-null-&gt;') as [dOrganisationTypeIdentityCheckTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationTypeIdentityCheckTemplateID],121),'&lt;-null-&gt;') as [iOrganisationTypeIdentityCheckTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsDefault],121),'&lt;-null-&gt;') as [dIsDefault]&#13;
	,isnull(convert(varchar(50),inserted.[IsDefault],121),'&lt;-null-&gt;') as [iIsDefault]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTypeIdentityCheckTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationTypeID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dOrganisationTypeIdentityCheckTemplateID]&#13;
,[dUserTypeID]&#13;
,[dIsDefault]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationTypeID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iOrganisationTypeIdentityCheckTemplateID]&#13;
,[iUserTypeID]&#13;
,[iIsDefault]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTypeIdentityCheckTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationTypeIdentityCheckTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganisationTypeIdentityCheckTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationTypeIdentityCheckTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationUnit">
      <TblOpts/>
      <Pk ClNs="OrganisationUnitID" nm="Key1"/>
      <Cl au="1" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DivisionName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK OrganisationUnit" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationUnit" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationUnit_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnit_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnit]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[DivisionName],121) as [DivisionName]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitTypeID],121) as [OrganisationUnitTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitCategoryID],121) as [OrganisationUnitCategoryID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[Name]&#13;
,[Description]&#13;
,[DivisionName]&#13;
,[OrganisationID]&#13;
,[OrganisationUnitTypeID]&#13;
,[OrganisationUnitCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationUnit_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationUnit_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnit_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnit]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
   FROM [dbo].[OrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[DivisionName],121) as [DivisionName]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitTypeID],121) as [OrganisationUnitTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitCategoryID],121) as [OrganisationUnitCategoryID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[Name]&#13;
,[Description]&#13;
,[DivisionName]&#13;
,[OrganisationID]&#13;
,[OrganisationUnitTypeID]&#13;
,[OrganisationUnitCategoryID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationUnit_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationUnit_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnit_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationUnitID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[DivisionName],121),'&lt;-null-&gt;') as [dDivisionName]&#13;
	,isnull(convert(varchar(50),inserted.[DivisionName],121),'&lt;-null-&gt;') as [iDivisionName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitTypeID],121),'&lt;-null-&gt;') as [dOrganisationUnitTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitTypeID],121),'&lt;-null-&gt;') as [iOrganisationUnitTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitCategoryID],121),'&lt;-null-&gt;') as [dOrganisationUnitCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitCategoryID],121),'&lt;-null-&gt;') as [iOrganisationUnitCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dDivisionName]&#13;
,[dOrganisationID]&#13;
,[dOrganisationUnitTypeID]&#13;
,[dOrganisationUnitCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iDivisionName]&#13;
,[iOrganisationID]&#13;
,[iOrganisationUnitTypeID]&#13;
,[iOrganisationUnitCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnit]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[DivisionName],121),'&lt;-null-&gt;') as [dDivisionName]&#13;
	,isnull(convert(varchar(50),inserted.[DivisionName],121),'&lt;-null-&gt;') as [iDivisionName]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitTypeID],121),'&lt;-null-&gt;') as [dOrganisationUnitTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitTypeID],121),'&lt;-null-&gt;') as [iOrganisationUnitTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitCategoryID],121),'&lt;-null-&gt;') as [dOrganisationUnitCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitCategoryID],121),'&lt;-null-&gt;') as [iOrganisationUnitCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dDivisionName]&#13;
,[dOrganisationID]&#13;
,[dOrganisationUnitTypeID]&#13;
,[dOrganisationUnitCategoryID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iDivisionName]&#13;
,[iOrganisationID]&#13;
,[iOrganisationUnitTypeID]&#13;
,[iOrganisationUnitCategoryID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnit]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationUnit] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationUnit_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationUnitOrganisationGroup">
      <TblOpts/>
      <Pk ClNs="OrganisationUnitID, OrganisationGroupID" nm="pkOrganisationUnitOrganisationGroup"/>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationGroupID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationUnitOrganisationGroup_OrganisationGroup" prLkCl="OrganisationGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationGroup" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationUnitOrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationGroupID" prCl="OrganisationGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationUnitOrganisationGroup_OrganisationUnit" prLkCl="OrganisationUnitID" upAc="3">
        <PrTb mn="0" nm="OrganisationUnit" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationUnitOrganisationGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationUnitID" prCl="OrganisationUnitID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitOrganisationGroup_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationGroup_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationGroup]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationUnitID],121), convert(varchar(36),src.[OrganisationGroupID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[OrganisationGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationUnitOrganisationGroup_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationUnitOrganisationGroup_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationGroup_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationGroup]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationUnitID],121), convert(varchar(36),src.[OrganisationGroupID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[OrganisationGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationUnitOrganisationGroup_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitOrganisationGroup_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationGroup_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationUnitID]) or update ([OrganisationGroupID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dOrganisationGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iOrganisationGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationGroup]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationUnitID],121), convert(varchar(36),inserted.[OrganisationGroupID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dOrganisationGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iOrganisationGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationGroup]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationUnitID],121), convert(varchar(36),inserted.[OrganisationGroupID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationUnitOrganisationGroup] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationGroupID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationGroupID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationGroupID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationUnitOrganisationGroup_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationUnitOrganisationRole">
      <TblOpts/>
      <Pk ClNs="OrganisationUnitID, OrganisationRoleID" nm="pkOrganisationUnitOrganisationRole"/>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganisationUnitOrganisationRole_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationUnitOrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganisationUnitOrganisationRole_OrganisationUnit" prLkCl="OrganisationUnitID" upAc="3">
        <PrTb mn="0" nm="OrganisationUnit" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationUnitOrganisationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationUnitID" prCl="OrganisationUnitID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitOrganisationRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationUnitID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationUnitOrganisationRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationUnitOrganisationRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationUnitID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationUnitID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationUnitOrganisationRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitOrganisationRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitOrganisationRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitOrganisationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationUnitID]) or update ([OrganisationRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationRole]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationUnitID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitOrganisationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitOrganisationRole]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationUnitID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationUnitOrganisationRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitOrganisationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationUnitOrganisationRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganisationUnitStructure">
      <TblOpts/>
      <Pk ClNs="OrganisationUnitStructureID, OrganisationUnitID" nm="PK_ClassificationHierarchy"/>
      <Cl au="1" df="" nm="OrganisationUnitStructureID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentOrganisationUnitStructureID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsLeafNode" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK UnitMap" prLkCl="OrganisationUnitID" upAc="3">
        <PrTb mn="0" nm="OrganisationUnit" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganisationUnitStructure" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationUnitID" prCl="OrganisationUnitID"/>
      </Fk>
      <Fk deAc="3" nm="FK_OrganisationUnit" prLkCl="OrganisationID" upAc="3">
        <PrTb mn="0" nm="Organisation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="OrganisationUnitStructure" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationID" prCl="OrganisationID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitStructure_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitStructure_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitStructure]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganisationUnitStructureID],121), convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganisationUnitStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganisationUnitStructureID],121) as [OrganisationUnitStructureID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[ParentOrganisationUnitStructureID],121) as [ParentOrganisationUnitStructureID]&#13;
	,convert(varchar(50),deleted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitStructureID]&#13;
,[OrganisationUnitID]&#13;
,[OrganisationID]&#13;
,[ParentOrganisationUnitStructureID]&#13;
,[IsLeafNode]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganisationUnitStructure_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganisationUnitStructure_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitStructure_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitStructure]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganisationUnitStructureID],121), convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganisationUnitStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganisationUnitStructureID],121) as [OrganisationUnitStructureID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[ParentOrganisationUnitStructureID],121) as [ParentOrganisationUnitStructureID]&#13;
	,convert(varchar(50),inserted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganisationUnitStructureID]&#13;
,[OrganisationUnitID]&#13;
,[OrganisationID]&#13;
,[ParentOrganisationUnitStructureID]&#13;
,[IsLeafNode]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganisationUnitStructure_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganisationUnitStructure_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganisationUnitStructure_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganisationUnitStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganisationUnitStructureID]) or update ([OrganisationUnitID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitStructureID],121),'&lt;-null-&gt;') as [dOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitStructureID],121),'&lt;-null-&gt;') as [iOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationUnitStructureID],121),'&lt;-null-&gt;') as [dParentOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationUnitStructureID],121),'&lt;-null-&gt;') as [iParentOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitStructureID]&#13;
,[dOrganisationUnitID]&#13;
,[dOrganisationID]&#13;
,[dParentOrganisationUnitStructureID]&#13;
,[dIsLeafNode]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitStructureID]&#13;
,[iOrganisationUnitID]&#13;
,[iOrganisationID]&#13;
,[iParentOrganisationUnitStructureID]&#13;
,[iIsLeafNode]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitStructure]', 'u', NULL, 		convert(varchar(36),inserted.[OrganisationUnitStructureID],121), convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganisationUnitStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitStructureID],121),'&lt;-null-&gt;') as [dOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitStructureID],121),'&lt;-null-&gt;') as [iOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentOrganisationUnitStructureID],121),'&lt;-null-&gt;') as [dParentOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentOrganisationUnitStructureID],121),'&lt;-null-&gt;') as [iParentOrganisationUnitStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganisationUnitStructureID]&#13;
,[dOrganisationUnitID]&#13;
,[dOrganisationID]&#13;
,[dParentOrganisationUnitStructureID]&#13;
,[dIsLeafNode]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganisationUnitStructureID]&#13;
,[iOrganisationUnitID]&#13;
,[iOrganisationID]&#13;
,[iParentOrganisationUnitStructureID]&#13;
,[iIsLeafNode]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganisationUnitStructure]', 'u', NULL,   convert(varchar(36),inserted.[OrganisationUnitStructureID],121), convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganisationUnitStructure] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganisationUnitStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganisationUnitStructureID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganisationUnitStructure_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganPricingItemAttributeTemplate">
      <TblOpts/>
      <Pk ClNs="OrganPricingItemAttributeID" nm="pkOrganPricingItemAttributeTemplate"/>
      <Cl au="0" df="newid()" nm="OrganPricingItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganPricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganPricingItemAttributeTemplate_OrganPricingItemTemplate" prLkCl="OrganPricingItemTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganPricingItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganPricingItemAttributeTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganPricingItemTemplateID" prCl="OrganPricingItemTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganPricingItemAttributeTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemAttributeTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemAttributeTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganPricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganPricingItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganPricingItemAttributeID],121) as [OrganPricingItemAttributeID]&#13;
	,convert(varchar(50),deleted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganPricingItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganPricingItemAttributeID]&#13;
,[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganPricingItemAttributeTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganPricingItemAttributeTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemAttributeTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemAttributeTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganPricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganPricingItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
        AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemAttributeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganPricingItemAttributeID],121) as [OrganPricingItemAttributeID]&#13;
	,convert(varchar(50),inserted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganPricingItemAttributeID]&#13;
,[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganPricingItemAttributeTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganPricingItemAttributeTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemAttributeTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganPricingItemAttributeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemAttributeID],121),'&lt;-null-&gt;') as [dOrganPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemAttributeID],121),'&lt;-null-&gt;') as [iOrganPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganPricingItemAttributeID]&#13;
,[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganPricingItemAttributeID]&#13;
,[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemAttributeTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganPricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemAttributeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemAttributeID],121),'&lt;-null-&gt;') as [dOrganPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemAttributeID],121),'&lt;-null-&gt;') as [iOrganPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemAttributeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganPricingItemAttributeID]&#13;
,[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganPricingItemAttributeID]&#13;
,[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemAttributeTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganPricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemAttributeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganPricingItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganPricingItemAttributeTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemAttributeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemAttributeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganPricingItemAttributeTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganPricingItemTemplate">
      <TblOpts/>
      <Pk ClNs="OrganPricingItemTemplateID" nm="pkOrganPricingItemTemplate"/>
      <Cl au="0" df="newid()" nm="OrganPricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganPricingItemTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganPricingItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganPricingItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganPricingItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganPricingItemTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganPricingItemTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganPricingItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganPricingItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganPricingItemTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganPricingItemTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganPricingItemTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganPricingItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganPricingItemTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganPricingItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganPricingItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganPricingItemTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganPricingItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganPricingItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganPricingItemTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganPricingItemTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganPricingItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganPricingItemTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganPricingItemTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductItemTemplate">
      <TblOpts/>
      <Pk ClNs="OrganProductItemTemplateID" nm="pkOrganProductItemTemplate"/>
      <Cl au="0" df="newid()" nm="OrganProductItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganPricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductItemTemplate_OrganPricingItemTemplate" prLkCl="OrganPricingItemTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganPricingItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductItemTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganPricingItemTemplateID" prCl="OrganPricingItemTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductItemTemplate_OrganProductTemplate" prLkCl="OrganProductTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductItemTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganProductTemplateID" prCl="OrganProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganProductItemTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductItemTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductItemTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganProductItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganProductItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganProductItemTemplateID],121) as [OrganProductItemTemplateID]&#13;
	,convert(varchar(50),deleted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),deleted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganProductItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganProductItemTemplateID]&#13;
,[OrganProductTemplateID]&#13;
,[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganProductItemTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganProductItemTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductItemTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductItemTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganProductItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganProductItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductItemTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganProductItemTemplateID],121) as [OrganProductItemTemplateID]&#13;
	,convert(varchar(50),inserted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),inserted.[OrganPricingItemTemplateID],121) as [OrganPricingItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganProductItemTemplateID]&#13;
,[OrganProductTemplateID]&#13;
,[OrganPricingItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganProductItemTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganProductItemTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductItemTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganProductItemTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductItemTemplateID],121),'&lt;-null-&gt;') as [dOrganProductItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductItemTemplateID],121),'&lt;-null-&gt;') as [iOrganProductItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductItemTemplateID]&#13;
,[dOrganProductTemplateID]&#13;
,[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductItemTemplateID]&#13;
,[iOrganProductTemplateID]&#13;
,[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductItemTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganProductItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductItemTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductItemTemplateID],121),'&lt;-null-&gt;') as [dOrganProductItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductItemTemplateID],121),'&lt;-null-&gt;') as [iOrganProductItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [dOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganPricingItemTemplateID],121),'&lt;-null-&gt;') as [iOrganPricingItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductItemTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductItemTemplateID]&#13;
,[dOrganProductTemplateID]&#13;
,[dOrganPricingItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductItemTemplateID]&#13;
,[iOrganProductTemplateID]&#13;
,[iOrganPricingItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductItemTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganProductItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductItemTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganProductItemTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganProductItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductItemTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductItemTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganProductItemTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductPricingItemAttributeVariantTemplate">
      <TblOpts/>
      <Cl au="0" df="" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganPricingItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganProductItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductItemAttributeVariantTemplate_OrganPricingAttributeTemplate" prLkCl="OrganPricingItemAttributeID" upAc="3">
        <PrTb mn="0" nm="OrganPricingItemAttributeTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganPricingItemAttributeID" prCl="OrganPricingItemAttributeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductItemAttributeVariantTemplate_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductPricingItemAttributeVariantTemplate_OrganProductItemTemplate" prLkCl="OrganProductItemTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganProductItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganProductItemTemplateID" prCl="OrganProductItemTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductTargetItemAttributeVariantTemplate">
      <TblOpts/>
      <Cl au="0" df="" nm="OrganProductTargetTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganTargetItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateFrom" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateTo" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductTargetAttributeVariantTemplate_OrganProductTargetTemplate" prLkCl="OrganProductTargetTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganProductTargetTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganProductTargetTemplateID" prCl="OrganProductTargetTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductTargetAttributeVariantTemplate_OrganTargetAttributeTemplate" prLkCl="OrganTargetItemAttributeID" upAc="3">
        <PrTb mn="0" nm="OrganTargetItemAttributeTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganTargetItemAttributeID" prCl="OrganTargetItemAttributeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductTargetAttributeVariantTemplate_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductTargetTemplate">
      <TblOpts/>
      <Pk ClNs="OrganProductTargetTemplateID" nm="pkOrganProductTargetTemplate"/>
      <Cl au="0" df="newid()" nm="OrganProductTargetTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganTargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductTargetTemplate_OrganProductTemplate" prLkCl="OrganProductTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTargetTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganProductTemplateID" prCl="OrganProductTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductTargetTemplate_OrganTargetItemTemplate" prLkCl="OrganTargetItemTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganTargetItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTargetTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganTargetItemTemplateID" prCl="OrganTargetItemTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganProductTargetTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTargetTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTargetTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTargetTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganProductTargetTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganProductTargetTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTargetTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganProductTargetTemplateID],121) as [OrganProductTargetTemplateID]&#13;
	,convert(varchar(50),deleted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),deleted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganProductTargetTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganProductTargetTemplateID]&#13;
,[OrganProductTemplateID]&#13;
,[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganProductTargetTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganProductTargetTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTargetTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTargetTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTargetTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganProductTargetTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganProductTargetTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTargetTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
  AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTargetTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTargetTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganProductTargetTemplateID],121) as [OrganProductTargetTemplateID]&#13;
	,convert(varchar(50),inserted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),inserted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganProductTargetTemplateID]&#13;
,[OrganProductTemplateID]&#13;
,[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganProductTargetTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganProductTargetTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTargetTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTargetTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganProductTargetTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTargetTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTargetTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTargetTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTargetTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductTargetTemplateID]&#13;
,[dOrganProductTemplateID]&#13;
,[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductTargetTemplateID]&#13;
,[iOrganProductTemplateID]&#13;
,[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTargetTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganProductTargetTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTargetTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTargetTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTargetTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTargetTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTargetTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTargetTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTargetTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTargetTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductTargetTemplateID]&#13;
,[dOrganProductTemplateID]&#13;
,[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductTargetTemplateID]&#13;
,[iOrganProductTemplateID]&#13;
,[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTargetTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganProductTargetTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTargetTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductTargetTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganProductTargetTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTargetTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTargetTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTargetTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTargetTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganProductTargetTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductTemplate">
      <TblOpts/>
      <Pk ClNs="OrganProductTemplateID" nm="pkOrganProductTemplate"/>
      <Cl au="0" df="newid()" nm="OrganProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductTemplate_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganProductTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganProductTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),deleted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),deleted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganProductTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganProductTemplateID]&#13;
,[ProductTemplateID]&#13;
,[ParentID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganProductTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganProductTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganProductTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),inserted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),inserted.[ParentID],121) as [ParentID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganProductTemplateID]&#13;
,[ProductTemplateID]&#13;
,[ParentID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganProductTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganProductTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganProductTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductTemplateID]&#13;
,[dProductTemplateID]&#13;
,[dParentID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductTemplateID]&#13;
,[iProductTemplateID]&#13;
,[iParentID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentID],121),'&lt;-null-&gt;') as [dParentID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentID],121),'&lt;-null-&gt;') as [iParentID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductTemplateID]&#13;
,[dProductTemplateID]&#13;
,[dParentID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductTemplateID]&#13;
,[iProductTemplateID]&#13;
,[iParentID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganProductTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganProductTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganProductTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganProductTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganProductUserTypeExternalIdentityCheckTemplate">
      <TblOpts/>
      <Pk ClNs="OrganProductUserTypeIdentityCheckID" nm="pkOrganProductUserTypeExternalIdentityCheckTemplate"/>
      <Cl au="0" df="newid()" nm="OrganProductUserTypeIdentityCheckID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganProductUserTypeIdentityCheck_IdentityCheckProvider" prLkCl="IdentityCheckProviderID" upAc="3">
        <PrTb mn="0" nm="IdentityCheckProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductUserTypeExternalIdentityCheckTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="IdentityCheckProviderID" prCl="IdentityCheckProviderID"/>
      </Fk>
      <Fk deAc="3" nm="fk_OrganProductUserTypeIdentityCheck_OrganProductTemplate" prLkCl="OrganProductTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganProductUserTypeExternalIdentityCheckTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganProductTemplateID" prCl="OrganProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductUserTypeExternalIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganProductUserTypeIdentityCheckID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganProductUserTypeIdentityCheckID],121) as [OrganProductUserTypeIdentityCheckID]&#13;
	,convert(varchar(50),deleted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),deleted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganProductUserTypeIdentityCheckID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganProductUserTypeIdentityCheckID]&#13;
,[OrganProductTemplateID]&#13;
,[IdentityCheckProviderID]&#13;
,[UserTypeID]&#13;
,[OrganisationExternalRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductUserTypeExternalIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganProductUserTypeIdentityCheckID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganProductUserTypeIdentityCheckID],121) as [OrganProductUserTypeIdentityCheckID]&#13;
	,convert(varchar(50),inserted.[OrganProductTemplateID],121) as [OrganProductTemplateID]&#13;
	,convert(varchar(50),inserted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganProductUserTypeIdentityCheckID]&#13;
,[OrganProductTemplateID]&#13;
,[IdentityCheckProviderID]&#13;
,[UserTypeID]&#13;
,[OrganisationExternalRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganProductUserTypeExternalIdentityCheckTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganProductUserTypeIdentityCheckID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [dOrganProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [iOrganProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductUserTypeIdentityCheckID]&#13;
,[dOrganProductTemplateID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dUserTypeID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductUserTypeIdentityCheckID]&#13;
,[iOrganProductTemplateID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iUserTypeID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
  UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [dOrganProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [iOrganProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [dOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganProductTemplateID],121),'&lt;-null-&gt;') as [iOrganProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[OrganProductUserTypeIdentityCheckID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganProductUserTypeIdentityCheckID]&#13;
,[dOrganProductTemplateID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dUserTypeID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganProductUserTypeIdentityCheckID]&#13;
,[iOrganProductTemplateID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iUserTypeID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[OrganProductUserTypeIdentityCheckID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganProductUserTypeIdentityCheckID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[OrganProductUserTypeIdentityCheckID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganTargetItemAttributeTemplate">
      <TblOpts/>
      <Pk ClNs="OrganTargetItemAttributeID" nm="pkOrganTargetItemAttributeTemplate"/>
      <Cl au="0" df="newid()" nm="OrganTargetItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganTargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_OrganTargetAttributeTemplate_OrganTargetItemTemplate" prLkCl="OrganTargetItemTemplateID" upAc="3">
        <PrTb mn="0" nm="OrganTargetItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="OrganTargetItemAttributeTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganTargetItemTemplateID" prCl="OrganTargetItemTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganTargetItemAttributeTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemAttributeTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemAttributeTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganTargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganTargetItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganTargetItemAttributeID],121) as [OrganTargetItemAttributeID]&#13;
	,convert(varchar(50),deleted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganTargetItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganTargetItemAttributeID]&#13;
,[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganTargetItemAttributeTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganTargetItemAttributeTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemAttributeTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemAttributeTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganTargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganTargetItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemAttributeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganTargetItemAttributeID],121) as [OrganTargetItemAttributeID]&#13;
	,convert(varchar(50),inserted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganTargetItemAttributeID]&#13;
,[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganTargetItemAttributeTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganTargetItemAttributeTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemAttributeTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemAttributeTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganTargetItemAttributeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemAttributeID],121),'&lt;-null-&gt;') as [dOrganTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemAttributeID],121),'&lt;-null-&gt;') as [iOrganTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganTargetItemAttributeID]&#13;
,[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganTargetItemAttributeID]&#13;
,[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemAttributeTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganTargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemAttributeTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemAttributeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemAttributeID],121),'&lt;-null-&gt;') as [dOrganTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemAttributeID],121),'&lt;-null-&gt;') as [iOrganTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemAttributeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganTargetItemAttributeID]&#13;
,[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganTargetItemAttributeID]&#13;
,[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemAttributeTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganTargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemAttributeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganTargetItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganTargetItemAttributeTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemAttributeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemAttributeTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemAttributeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganTargetItemAttributeTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="OrganTargetItemTemplate">
      <TblOpts/>
      <Pk ClNs="OrganTargetItemTemplateID" nm="pkOrganTargetItemTemplate"/>
      <Cl au="0" df="newid()" nm="OrganTargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsActive" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="OrganTargetItemTemplate_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemTemplate_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemTemplate]', 'd', NULL, &#13;
  convert(varchar(36),src.[OrganTargetItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[OrganTargetItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[OrganTargetItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[OrganTargetItemTemplate_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="OrganTargetItemTemplate_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemTemplate_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemTemplate]', 'i', NULL, &#13;
		convert(varchar(36),src.[OrganTargetItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[OrganTargetItemTemplateID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemTemplateID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[OrganTargetItemTemplateID],121) as [OrganTargetItemTemplateID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[OrganTargetItemTemplateID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[OrganTargetItemTemplate_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="OrganTargetItemTemplate_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[OrganTargetItemTemplate_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'OrganTargetItemTemplate' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([OrganTargetItemTemplateID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemTemplate]', 'u', NULL, 		convert(varchar(36),inserted.[OrganTargetItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[OrganTargetItemTemplate]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemTemplateID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [dOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganTargetItemTemplateID],121),'&lt;-null-&gt;') as [iOrganTargetItemTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemTemplateID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dOrganTargetItemTemplateID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iOrganTargetItemTemplateID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[OrganTargetItemTemplate]', 'u', NULL,   convert(varchar(36),inserted.[OrganTargetItemTemplateID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemTemplateID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[OrganTargetItemTemplateID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[OrganTargetItemTemplate] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemTemplateID],121)) = quotename(convert(varchar(36),deleted.[OrganTargetItemTemplateID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[OrganTargetItemTemplate] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[OrganTargetItemTemplateID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[OrganTargetItemTemplate_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PasswordResetSecrets">
      <TblOpts/>
      <Pk ClNs="PasswordResetSecretID" nm="PK_dbo.PasswordResetSecrets"/>
      <Cl au="0" df="newid()" nm="PasswordResetSecretID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Question" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Answer" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserAccount_ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.PasswordResetSecrets_dbo.UserAccounts_UserAccount_ID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="PasswordResetSecrets" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserAccount_ID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserAccount_ID" unq="0">
        <ClNs>UserAccount_ID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PricingItem">
      <TblOpts/>
      <Pk ClNs="PricingItemID" nm="pkPricingItem"/>
      <Cl au="0" df="newid()" nm="PricingItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="PricingItem_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItem_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PricingItem]', 'd', NULL, &#13;
  convert(varchar(36),src.[PricingItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[PricingItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItem]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[PricingItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[PricingItem_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="PricingItem_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItem_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PricingItem]', 'i', NULL, &#13;
		convert(varchar(36),src.[PricingItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[PricingItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[PricingItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[PricingItem_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="PricingItem_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItem_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([PricingItemID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PricingItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PricingItem]', 'u', NULL, 		convert(varchar(36),inserted.[PricingItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[PricingItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PricingItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[PricingItemID],121)) = quotename(convert(varchar(36),deleted.[PricingItemID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PricingItem]', 'u', NULL,   convert(varchar(36),inserted.[PricingItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[PricingItemID],121)) = quotename(convert(varchar(36),deleted.[PricingItemID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[PricingItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[PricingItem] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[PricingItemID],121)) = quotename(convert(varchar(36),deleted.[PricingItemID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[PricingItem_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PricingItemAttribute">
      <TblOpts/>
      <Pk ClNs="PricingItemAttributeID" nm="pkPricingItemAttribute"/>
      <Cl au="0" df="newid()" nm="PricingItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PricingItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_PricingAttribute_PricingItem" prLkCl="PricingItemID" upAc="3">
        <PrTb mn="0" nm="PricingItem" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="PricingItemAttribute" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemID" prCl="PricingItemID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="PricingItemAttribute_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItemAttribute_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PricingItemAttribute]', 'd', NULL, &#13;
  convert(varchar(36),src.[PricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[PricingItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[PricingItemAttributeID],121) as [PricingItemAttributeID]&#13;
	,convert(varchar(50),deleted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[PricingItemAttributeID]&#13;
,[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[PricingItemAttribute_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="PricingItemAttribute_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItemAttribute_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PricingItemAttribute]', 'i', NULL, &#13;
		convert(varchar(36),src.[PricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[PricingItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[PricingItemAttributeID],121) as [PricingItemAttributeID]&#13;
	,convert(varchar(50),inserted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[PricingItemAttributeID]&#13;
,[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[PricingItemAttribute_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="PricingItemAttribute_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PricingItemAttribute_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PricingItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([PricingItemAttributeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [dPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [iPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPricingItemAttributeID]&#13;
,[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPricingItemAttributeID]&#13;
,[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PricingItemAttribute]', 'u', NULL, 		convert(varchar(36),inserted.[PricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PricingItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [dPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [iPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPricingItemAttributeID]&#13;
,[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPricingItemAttributeID]&#13;
,[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PricingItemAttribute]', 'u', NULL,   convert(varchar(36),inserted.[PricingItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[PricingItemAttribute] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PricingItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[PricingItemAttribute_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PricingItemAttributeTemplate">
      <TblOpts/>
      <Pk ClNs="PricingItemAttributeTemplateID" nm="pkPricingItemAttributeTemplate"/>
      <Cl au="0" df="newid()" nm="PricingItemAttributeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_PricingAttributeTemplate_PricingItemTemplate" prLkCl="PricingItemTemplateID" upAc="3">
        <PrTb mn="0" nm="PricingItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="PricingItemAttributeTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemTemplateID" prCl="PricingItemTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PricingItemTemplate">
      <TblOpts/>
      <Pk ClNs="PricingItemTemplateID" nm="pkPricingItemTemplate"/>
      <Cl au="0" df="newid()" nm="PricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Product">
      <TblOpts/>
      <Pk ClNs="ProductID" nm="pkProduct"/>
      <Cl au="0" df="newid()" nm="ProductID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_Product_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="Product" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_Product_ProductType" prLkCl="ProductTypeID" upAc="3">
        <PrTb mn="0" nm="ProductType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="Product" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTypeID" prCl="ProductTypeID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Product_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Product_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Product' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Product]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Product]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),deleted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),deleted.[ProductTypeID],121) as [ProductTypeID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductID]&#13;
,[ProductTemplateID]&#13;
,[ProductTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Product_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Product_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Product_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Product' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Product]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Product]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Product] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),inserted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),inserted.[ProductTypeID],121) as [ProductTypeID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductID]&#13;
,[ProductTemplateID]&#13;
,[ProductTypeID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Product_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Product_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Product_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Product' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTypeID],121),'&lt;-null-&gt;') as [dProductTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTypeID],121),'&lt;-null-&gt;') as [iProductTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductID]&#13;
,[dProductTemplateID]&#13;
,[dProductTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductID]&#13;
,[iProductTemplateID]&#13;
,[iProductTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Product]', 'u', NULL, 		convert(varchar(36),inserted.[ProductID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Product]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Product] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
  (SELECT quotename(convert(varchar(36),inserted.[ProductID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTypeID],121),'&lt;-null-&gt;') as [dProductTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTypeID],121),'&lt;-null-&gt;') as [iProductTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductID],121)) = quotename(convert(varchar(36),deleted.[ProductID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductID]&#13;
,[dProductTemplateID]&#13;
,[dProductTypeID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductID]&#13;
,[iProductTemplateID]&#13;
,[iProductTypeID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Product]', 'u', NULL,   convert(varchar(36),inserted.[ProductID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductID],121)) = quotename(convert(varchar(36),deleted.[ProductID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Product] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductID],121)) = quotename(convert(varchar(36),deleted.[ProductID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Product] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Product_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductDetail">
      <TblOpts/>
      <Pk ClNs="ProductDetailID" nm="pkProductDetail"/>
      <Cl au="0" df="newid()" nm="ProductDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductDetail_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductDetail" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductDetail_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductDetail_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductDetail]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductDetailID],121) as [ProductDetailID]&#13;
	,convert(varchar(50),deleted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductDetailID]&#13;
,[ProductTemplateID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductDetail_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductDetail_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductDetail_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductDetail]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductDetailID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductDetailID],121) as [ProductDetailID]&#13;
	,convert(varchar(50),inserted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductDetailID]&#13;
,[ProductTemplateID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductDetail_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductDetail_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductDetail_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductDetailID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductDetailID],121),'&lt;-null-&gt;') as [dProductDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductDetailID],121),'&lt;-null-&gt;') as [iProductDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductDetailID]&#13;
,[dProductTemplateID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductDetailID]&#13;
,[iProductTemplateID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductDetail]', 'u', NULL, 		convert(varchar(36),inserted.[ProductDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductDetailID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductDetailID],121),'&lt;-null-&gt;') as [dProductDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductDetailID],121),'&lt;-null-&gt;') as [iProductDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductDetailID],121)) = quotename(convert(varchar(36),deleted.[ProductDetailID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductDetailID]&#13;
,[dProductTemplateID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductDetailID]&#13;
,[iProductTemplateID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductDetail]', 'u', NULL,   convert(varchar(36),inserted.[ProductDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductDetailID],121)) = quotename(convert(varchar(36),deleted.[ProductDetailID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductDetail] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductDetailID],121)) = quotename(convert(varchar(36),deleted.[ProductDetailID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductDetailID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductDetail_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductItem">
      <TblOpts/>
      <Pk ClNs="ProductItemID" nm="pkProductItem"/>
      <Cl au="0" df="newid()" nm="ProductItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PricingItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductItem_PricingItem" prLkCl="PricingItemID" upAc="3">
        <PrTb mn="0" nm="PricingItem" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductItem" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemID" prCl="PricingItemID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItem_Product" prLkCl="ProductID" upAc="3">
        <PrTb mn="0" nm="Product" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductItem" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductID" prCl="ProductID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductItem_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductItem_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductItem]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductItem]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductItemID],121) as [ProductItemID]&#13;
	,convert(varchar(50),deleted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),deleted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductItemID]&#13;
,[ProductID]&#13;
,[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductItem_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductItem_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductItem_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductItem]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductItemID],121) as [ProductItemID]&#13;
	,convert(varchar(50),inserted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),inserted.[PricingItemID],121) as [PricingItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductItemID]&#13;
,[ProductID]&#13;
,[PricingItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductItem_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductItem_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductItem_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductItemID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductItemID],121),'&lt;-null-&gt;') as [dProductItemID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductItemID],121),'&lt;-null-&gt;') as [iProductItemID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductItemID]&#13;
,[dProductID]&#13;
,[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductItemID]&#13;
,[iProductID]&#13;
,[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductItem]', 'u', NULL, 		convert(varchar(36),inserted.[ProductItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductItemID],121),'&lt;-null-&gt;') as [dProductItemID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductItemID],121),'&lt;-null-&gt;') as [iProductItemID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemID],121),'&lt;-null-&gt;') as [dPricingItemID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemID],121),'&lt;-null-&gt;') as [iPricingItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductItemID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductItemID]&#13;
,[dProductID]&#13;
,[dPricingItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductItemID]&#13;
,[iProductID]&#13;
,[iPricingItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductItem]', 'u', NULL,   convert(varchar(36),inserted.[ProductItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductItemID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductItem] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductItem_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductItemTemplate">
      <TblOpts/>
      <Pk ClNs="ProductItemTemplateID" nm="pkProductItemTemplate"/>
      <Cl au="0" df="newid()" nm="ProductItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PricingItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ProductItemTemplate_PricingItemTemplate" prLkCl="PricingItemTemplateID" upAc="3">
        <PrTb mn="0" nm="PricingItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductItemTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemTemplateID" prCl="PricingItemTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItemTemplate_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductItemTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductPricingItemAttributeVariant">
      <TblOpts/>
      <Pk ClNs="ProductItemID, PricingItemAttributeID, VariantID" nm="pkProductPricingItemAttributeVariant"/>
      <Cl au="0" df="newid()" nm="ProductItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="PricingItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariant_PricingAttribute" prLkCl="PricingItemAttributeID" upAc="3">
        <PrTb mn="0" nm="PricingItemAttribute" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemAttributeID" prCl="PricingItemAttributeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariant_ProductItem" prLkCl="ProductItemID" upAc="3">
        <PrTb mn="0" nm="ProductItem" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductItemID" prCl="ProductItemID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariant_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductPricingItemAttributeVariant_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductPricingItemAttributeVariant_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductPricingItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductPricingItemAttributeVariant]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductItemID],121), convert(varchar(36),src.[PricingItemAttributeID],121), convert(varchar(36),src.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductPricingItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductItemID],121) as [ProductItemID]&#13;
	,convert(varchar(50),deleted.[PricingItemAttributeID],121) as [PricingItemAttributeID]&#13;
	,convert(varchar(50),deleted.[VariantID],121) as [VariantID]&#13;
	,convert(varchar(50),deleted.[BandFrom],121) as [BandFrom]&#13;
	,convert(varchar(50),deleted.[BandTo],121) as [BandTo]&#13;
	,convert(varchar(50),deleted.[VariantValue],121) as [VariantValue]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductItemID],121)) + quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductItemID]&#13;
,[PricingItemAttributeID]&#13;
,[VariantID]&#13;
,[BandFrom]&#13;
,[BandTo]&#13;
,[VariantValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductPricingItemAttributeVariant_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductPricingItemAttributeVariant_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductPricingItemAttributeVariant_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductPricingItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductPricingItemAttributeVariant]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductItemID],121), convert(varchar(36),src.[PricingItemAttributeID],121), convert(varchar(36),src.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductPricingItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductPricingItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) + quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductItemID],121) as [ProductItemID]&#13;
	,convert(varchar(50),inserted.[PricingItemAttributeID],121) as [PricingItemAttributeID]&#13;
	,convert(varchar(50),inserted.[VariantID],121) as [VariantID]&#13;
	,convert(varchar(50),inserted.[BandFrom],121) as [BandFrom]&#13;
	,convert(varchar(50),inserted.[BandTo],121) as [BandTo]&#13;
	,convert(varchar(50),inserted.[VariantValue],121) as [VariantValue]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductItemID]&#13;
,[PricingItemAttributeID]&#13;
,[VariantID]&#13;
,[BandFrom]&#13;
,[BandTo]&#13;
,[VariantValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductPricingItemAttributeVariant_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductPricingItemAttributeVariant_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductPricingItemAttributeVariant_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductPricingItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductItemID]) or update ([PricingItemAttributeID]) or update ([VariantID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductItemID],121),'&lt;-null-&gt;') as [dProductItemID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductItemID],121),'&lt;-null-&gt;') as [iProductItemID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [dPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [iPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[VariantID],121),'&lt;-null-&gt;') as [dVariantID]&#13;
	,isnull(convert(varchar(50),inserted.[VariantID],121),'&lt;-null-&gt;') as [iVariantID]&#13;
	,isnull(convert(varchar(50),deleted.[BandFrom],121),'&lt;-null-&gt;') as [dBandFrom]&#13;
	,isnull(convert(varchar(50),inserted.[BandFrom],121),'&lt;-null-&gt;') as [iBandFrom]&#13;
	,isnull(convert(varchar(50),deleted.[BandTo],121),'&lt;-null-&gt;') as [dBandTo]&#13;
	,isnull(convert(varchar(50),inserted.[BandTo],121),'&lt;-null-&gt;') as [iBandTo]&#13;
	,isnull(convert(varchar(50),deleted.[VariantValue],121),'&lt;-null-&gt;') as [dVariantValue]&#13;
	,isnull(convert(varchar(50),inserted.[VariantValue],121),'&lt;-null-&gt;') as [iVariantValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductItemID]&#13;
,[dPricingItemAttributeID]&#13;
,[dVariantID]&#13;
,[dBandFrom]&#13;
,[dBandTo]&#13;
,[dVariantValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductItemID]&#13;
,[iPricingItemAttributeID]&#13;
,[iVariantID]&#13;
,[iBandFrom]&#13;
,[iBandTo]&#13;
,[iVariantValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductPricingItemAttributeVariant]', 'u', NULL, 		convert(varchar(36),inserted.[ProductItemID],121), convert(varchar(36),inserted.[PricingItemAttributeID],121), convert(varchar(36),inserted.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductPricingItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductPricingItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) + quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductItemID],121),'&lt;-null-&gt;') as [dProductItemID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductItemID],121),'&lt;-null-&gt;') as [iProductItemID]&#13;
	,isnull(convert(varchar(50),deleted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [dPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[PricingItemAttributeID],121),'&lt;-null-&gt;') as [iPricingItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[VariantID],121),'&lt;-null-&gt;') as [dVariantID]&#13;
	,isnull(convert(varchar(50),inserted.[VariantID],121),'&lt;-null-&gt;') as [iVariantID]&#13;
	,isnull(convert(varchar(50),deleted.[BandFrom],121),'&lt;-null-&gt;') as [dBandFrom]&#13;
	,isnull(convert(varchar(50),inserted.[BandFrom],121),'&lt;-null-&gt;') as [iBandFrom]&#13;
	,isnull(convert(varchar(50),deleted.[BandTo],121),'&lt;-null-&gt;') as [dBandTo]&#13;
	,isnull(convert(varchar(50),inserted.[BandTo],121),'&lt;-null-&gt;') as [iBandTo]&#13;
	,isnull(convert(varchar(50),deleted.[VariantValue],121),'&lt;-null-&gt;') as [dVariantValue]&#13;
	,isnull(convert(varchar(50),inserted.[VariantValue],121),'&lt;-null-&gt;') as [iVariantValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121)) + quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductItemID]&#13;
,[dPricingItemAttributeID]&#13;
,[dVariantID]&#13;
,[dBandFrom]&#13;
,[dBandTo]&#13;
,[dVariantValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductItemID]&#13;
,[iPricingItemAttributeID]&#13;
,[iVariantID]&#13;
,[iBandFrom]&#13;
,[iBandTo]&#13;
,[iVariantValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductPricingItemAttributeVariant]', 'u', NULL,   convert(varchar(36),inserted.[ProductItemID],121), convert(varchar(36),inserted.[PricingItemAttributeID],121), convert(varchar(36),inserted.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121)) + quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductItemID],121)) + quotename(convert(varchar(36),inserted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductPricingItemAttributeVariant] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) + quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductItemID],121)) + quotename(convert(varchar(36),deleted.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductPricingItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductItemID],121)) + quotename(convert(varchar(36),src.[PricingItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductPricingItemAttributeVariant_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductPricingItemAttributeVariantTemplate">
      <TblOpts/>
      <Pk ClNs="ProductItemTemplateID, VariantID, PricingItemAttributeTemplateID" nm="pkProductPricingItemAttributeVariantTemplate"/>
      <Cl au="0" df="newid()" nm="ProductItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="PricingItemAttributeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariantTemplate_PricingAttributeTemplate" prLkCl="PricingItemAttributeTemplateID" upAc="3">
        <PrTb mn="0" nm="PricingItemAttributeTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="PricingItemAttributeTemplateID" prCl="PricingItemAttributeTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariantTemplate_ProductItemTemplate" prLkCl="ProductItemTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductItemTemplateID" prCl="ProductItemTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductItemAttributeVariantTemplate_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductPricingItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductTarget">
      <TblOpts/>
      <Pk ClNs="ProductTargetID" nm="pkProductTarget"/>
      <Cl au="0" df="newid()" nm="ProductTargetID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TargetItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductTarget_Product" prLkCl="ProductID" upAc="3">
        <PrTb mn="0" nm="Product" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTarget" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductID" prCl="ProductID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductTarget_TargetItem" prLkCl="TargetItemID" upAc="3">
        <PrTb mn="0" nm="TargetItem" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTarget" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemID" prCl="TargetItemID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductTarget_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTarget_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTarget' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductTarget]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductTargetID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductTargetID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTarget]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductTargetID],121) as [ProductTargetID]&#13;
	,convert(varchar(50),deleted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),deleted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductTargetID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductTargetID]&#13;
,[ProductID]&#13;
,[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductTarget_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductTarget_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTarget_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTarget' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductTarget]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductTargetID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductTargetID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTarget]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTarget] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductTargetID],121) as [ProductTargetID]&#13;
	,convert(varchar(50),inserted.[ProductID],121) as [ProductID]&#13;
	,convert(varchar(50),inserted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductTargetID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductTargetID]&#13;
,[ProductID]&#13;
,[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductTarget_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductTarget_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTarget_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTarget' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductTargetID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTargetID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTargetID],121),'&lt;-null-&gt;') as [dProductTargetID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTargetID],121),'&lt;-null-&gt;') as [iProductTargetID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTargetID]&#13;
,[dProductID]&#13;
,[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTargetID]&#13;
,[iProductID]&#13;
,[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductTarget]', 'u', NULL, 		convert(varchar(36),inserted.[ProductTargetID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTargetID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTarget]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTarget] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTargetID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTargetID],121),'&lt;-null-&gt;') as [dProductTargetID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTargetID],121),'&lt;-null-&gt;') as [iProductTargetID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductID],121),'&lt;-null-&gt;') as [dProductID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductID],121),'&lt;-null-&gt;') as [iProductID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductTargetID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTargetID]&#13;
,[dProductID]&#13;
,[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTargetID]&#13;
,[iProductID]&#13;
,[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductTarget]', 'u', NULL,   convert(varchar(36),inserted.[ProductTargetID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductTargetID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTargetID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductTarget] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTarget] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductTarget_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductTargetItemAttributeVariant">
      <TblOpts/>
      <Pk ClNs="ProductTargetID, TargetItemAttributeID, VariantID" nm="pkProductTargetItemAttributeVariant"/>
      <Cl au="0" df="newid()" nm="ProductTargetID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="TargetItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateFrom" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateTo" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductTargetAttributeVariant_ProductTarget" prLkCl="ProductTargetID" upAc="3">
        <PrTb mn="0" nm="ProductTarget" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTargetID" prCl="ProductTargetID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductTargetAttributeVariant_TargetAttribute" prLkCl="TargetItemAttributeID" upAc="3">
        <PrTb mn="0" nm="TargetItemAttribute" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemAttributeID" prCl="TargetItemAttributeID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductTargetAttributeVariant_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariant" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductTargetItemAttributeVariant_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTargetItemAttributeVariant_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTargetItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductTargetItemAttributeVariant]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductTargetID],121), convert(varchar(36),src.[TargetItemAttributeID],121), convert(varchar(36),src.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductTargetID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTargetItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductTargetID],121) as [ProductTargetID]&#13;
	,convert(varchar(50),deleted.[TargetItemAttributeID],121) as [TargetItemAttributeID]&#13;
	,convert(varchar(50),deleted.[VariantID],121) as [VariantID]&#13;
	,convert(varchar(50),deleted.[BandFrom],121) as [BandFrom]&#13;
	,convert(varchar(50),deleted.[BandTo],121) as [BandTo]&#13;
	,convert(varchar(50),deleted.[DateFrom],121) as [DateFrom]&#13;
	,convert(varchar(50),deleted.[DateTo],121) as [DateTo]&#13;
	,convert(varchar(50),deleted.[VariantValue],121) as [VariantValue]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductTargetID],121)) + quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductTargetID]&#13;
,[TargetItemAttributeID]&#13;
,[VariantID]&#13;
,[BandFrom]&#13;
,[BandTo]&#13;
,[DateFrom]&#13;
,[DateTo]&#13;
,[VariantValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductTargetItemAttributeVariant_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductTargetItemAttributeVariant_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTargetItemAttributeVariant_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTargetItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductTargetItemAttributeVariant]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductTargetID],121), convert(varchar(36),src.[TargetItemAttributeID],121), convert(varchar(36),src.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductTargetID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTargetItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTargetItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) + quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductTargetID],121) as [ProductTargetID]&#13;
	,convert(varchar(50),inserted.[TargetItemAttributeID],121) as [TargetItemAttributeID]&#13;
	,convert(varchar(50),inserted.[VariantID],121) as [VariantID]&#13;
	,convert(varchar(50),inserted.[BandFrom],121) as [BandFrom]&#13;
	,convert(varchar(50),inserted.[BandTo],121) as [BandTo]&#13;
	,convert(varchar(50),inserted.[DateFrom],121) as [DateFrom]&#13;
	,convert(varchar(50),inserted.[DateTo],121) as [DateTo]&#13;
	,convert(varchar(50),inserted.[VariantValue],121) as [VariantValue]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductTargetID]&#13;
,[TargetItemAttributeID]&#13;
,[VariantID]&#13;
,[BandFrom]&#13;
,[BandTo]&#13;
,[DateFrom]&#13;
,[DateTo]&#13;
,[VariantValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductTargetItemAttributeVariant_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductTargetItemAttributeVariant_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductTargetItemAttributeVariant_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductTargetItemAttributeVariant' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductTargetID]) or update ([TargetItemAttributeID]) or update ([VariantID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTargetID],121),'&lt;-null-&gt;') as [dProductTargetID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTargetID],121),'&lt;-null-&gt;') as [iProductTargetID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [dTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [iTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[VariantID],121),'&lt;-null-&gt;') as [dVariantID]&#13;
	,isnull(convert(varchar(50),inserted.[VariantID],121),'&lt;-null-&gt;') as [iVariantID]&#13;
	,isnull(convert(varchar(50),deleted.[BandFrom],121),'&lt;-null-&gt;') as [dBandFrom]&#13;
	,isnull(convert(varchar(50),inserted.[BandFrom],121),'&lt;-null-&gt;') as [iBandFrom]&#13;
	,isnull(convert(varchar(50),deleted.[BandTo],121),'&lt;-null-&gt;') as [dBandTo]&#13;
	,isnull(convert(varchar(50),inserted.[BandTo],121),'&lt;-null-&gt;') as [iBandTo]&#13;
	,isnull(convert(varchar(50),deleted.[DateFrom],121),'&lt;-null-&gt;') as [dDateFrom]&#13;
	,isnull(convert(varchar(50),inserted.[DateFrom],121),'&lt;-null-&gt;') as [iDateFrom]&#13;
	,isnull(convert(varchar(50),deleted.[DateTo],121),'&lt;-null-&gt;') as [dDateTo]&#13;
	,isnull(convert(varchar(50),inserted.[DateTo],121),'&lt;-null-&gt;') as [iDateTo]&#13;
	,isnull(convert(varchar(50),deleted.[VariantValue],121),'&lt;-null-&gt;') as [dVariantValue]&#13;
	,isnull(convert(varchar(50),inserted.[VariantValue],121),'&lt;-null-&gt;') as [iVariantValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTargetID]&#13;
,[dTargetItemAttributeID]&#13;
,[dVariantID]&#13;
,[dBandFrom]&#13;
,[dBandTo]&#13;
,[dDateFrom]&#13;
,[dDateTo]&#13;
,[dVariantValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTargetID]&#13;
,[iTargetItemAttributeID]&#13;
,[iVariantID]&#13;
,[iBandFrom]&#13;
,[iBandTo]&#13;
,[iDateFrom]&#13;
,[iDateTo]&#13;
,[iVariantValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductTargetItemAttributeVariant]', 'u', NULL, 		convert(varchar(36),inserted.[ProductTargetID],121), convert(varchar(36),inserted.[TargetItemAttributeID],121), convert(varchar(36),inserted.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductTargetItemAttributeVariant]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTargetItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) + quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTargetID],121),'&lt;-null-&gt;') as [dProductTargetID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTargetID],121),'&lt;-null-&gt;') as [iProductTargetID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [dTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [iTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[VariantID],121),'&lt;-null-&gt;') as [dVariantID]&#13;
	,isnull(convert(varchar(50),inserted.[VariantID],121),'&lt;-null-&gt;') as [iVariantID]&#13;
	,isnull(convert(varchar(50),deleted.[BandFrom],121),'&lt;-null-&gt;') as [dBandFrom]&#13;
	,isnull(convert(varchar(50),inserted.[BandFrom],121),'&lt;-null-&gt;') as [iBandFrom]&#13;
	,isnull(convert(varchar(50),deleted.[BandTo],121),'&lt;-null-&gt;') as [dBandTo]&#13;
	,isnull(convert(varchar(50),inserted.[BandTo],121),'&lt;-null-&gt;') as [iBandTo]&#13;
	,isnull(convert(varchar(50),deleted.[DateFrom],121),'&lt;-null-&gt;') as [dDateFrom]&#13;
	,isnull(convert(varchar(50),inserted.[DateFrom],121),'&lt;-null-&gt;') as [iDateFrom]&#13;
	,isnull(convert(varchar(50),deleted.[DateTo],121),'&lt;-null-&gt;') as [dDateTo]&#13;
	,isnull(convert(varchar(50),inserted.[DateTo],121),'&lt;-null-&gt;') as [iDateTo]&#13;
	,isnull(convert(varchar(50),deleted.[VariantValue],121),'&lt;-null-&gt;') as [dVariantValue]&#13;
	,isnull(convert(varchar(50),inserted.[VariantValue],121),'&lt;-null-&gt;') as [iVariantValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121)) + quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTargetID]&#13;
,[dTargetItemAttributeID]&#13;
,[dVariantID]&#13;
,[dBandFrom]&#13;
,[dBandTo]&#13;
,[dDateFrom]&#13;
,[dDateTo]&#13;
,[dVariantValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTargetID]&#13;
,[iTargetItemAttributeID]&#13;
,[iVariantID]&#13;
,[iBandFrom]&#13;
,[iBandTo]&#13;
,[iDateFrom]&#13;
,[iDateTo]&#13;
,[iVariantValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductTargetItemAttributeVariant]', 'u', NULL,   convert(varchar(36),inserted.[ProductTargetID],121), convert(varchar(36),inserted.[TargetItemAttributeID],121), convert(varchar(36),inserted.[VariantID],121),null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121)) + quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTargetID],121)) + quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),inserted.[VariantID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductTargetItemAttributeVariant] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) + quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) = quotename(convert(varchar(36),deleted.[ProductTargetID],121)) + quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),deleted.[VariantID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductTargetItemAttributeVariant] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTargetID],121)) + quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) + quotename(convert(varchar(36),src.[VariantID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductTargetItemAttributeVariant_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductTargetItemAttributeVariantTemplate">
      <TblOpts/>
      <Pk ClNs="VariantID, TargetItemTemplateID, TargetAttributeTemplateID" nm="pkProductTargetItemAttributeVariantTemplate"/>
      <Cl au="0" df="newid()" nm="TargetAttributeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="TargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandFrom" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="BandTo" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VariantValue" nu="1">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateFrom" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DateTo" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_TargetItemAttributeVariantTemplate_TargetAttributeTemplate" prLkCl="TargetItemAttributeTemplateID" upAc="3">
        <PrTb mn="0" nm="TargetItemAttributeTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetAttributeTemplateID" prCl="TargetItemAttributeTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_TargetItemAttributeVariantTemplate_TargetItemTemplate" prLkCl="TargetItemTemplateID" upAc="3">
        <PrTb mn="0" nm="TargetItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemTemplateID" prCl="TargetItemTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_TargetItemAttributeVariantTemplate_Variant" prLkCl="VariantID" upAc="3">
        <PrTb mn="0" nm="Variant" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetItemAttributeVariantTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="VariantID" prCl="VariantID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductTargetTemplate">
      <TblOpts/>
      <Pk ClNs="ProductTargetTemplateID" nm="pkProductTargetTemplate"/>
      <Cl au="0" df="newid()" nm="ProductTargetTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ProductTargetTemplate_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductTargetTemplate_TargetItemTemplate" prLkCl="TargetItemTemplateID" upAc="3">
        <PrTb mn="0" nm="TargetItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTargetTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemTemplateID" prCl="TargetItemTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductTemplate">
      <TblOpts/>
      <Pk ClNs="ProductTemplateID" nm="pkProductTemplate"/>
      <Cl au="0" df="newid()" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ProductTemplate_ProductType" prLkCl="ProductTypeID" upAc="3">
        <PrTb mn="0" nm="ProductType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTypeID" prCl="ProductTypeID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductType">
      <TblOpts/>
      <Pk ClNs="ProductTypeID" nm="pkProductType"/>
      <Cl au="0" df="newid()" nm="ProductTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductType_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductType_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductType]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductType]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductTypeID],121) as [ProductTypeID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductTypeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductTypeID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductType_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductType_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductType_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductType]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductTypeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductType]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTypeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductTypeID],121) as [ProductTypeID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductTypeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductTypeID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductType_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductType_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductType_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductType' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductTypeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTypeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTypeID],121),'&lt;-null-&gt;') as [dProductTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTypeID],121),'&lt;-null-&gt;') as [iProductTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTypeID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTypeID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductType]', 'u', NULL, 		convert(varchar(36),inserted.[ProductTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTypeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductType]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTypeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductTypeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductTypeID],121),'&lt;-null-&gt;') as [dProductTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTypeID],121),'&lt;-null-&gt;') as [iProductTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductTypeID],121)) = quotename(convert(varchar(36),deleted.[ProductTypeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductTypeID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductTypeID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductType]', 'u', NULL,   convert(varchar(36),inserted.[ProductTypeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductTypeID],121)) = quotename(convert(varchar(36),deleted.[ProductTypeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductTypeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductType] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductTypeID],121)) = quotename(convert(varchar(36),deleted.[ProductTypeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductType] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductTypeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductType_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductUserTypeExternalIdentityCheck">
      <TblOpts/>
      <Pk ClNs="ProductUserTypeIdentityCheckID" nm="pkProductUserTypeExternalIdentityCheck"/>
      <Cl au="0" df="newid()" nm="ProductUserTypeIdentityCheckID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_ProductUserTypeIdentityCheck_IdentityCheckProvider" prLkCl="IdentityCheckProviderID" upAc="3">
        <PrTb mn="0" nm="IdentityCheckProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductUserTypeExternalIdentityCheck" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="IdentityCheckProviderID" prCl="IdentityCheckProviderID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductUserTypeIdentityCheck_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductUserTypeExternalIdentityCheck" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="ProductUserTypeExternalIdentityCheck_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductUserTypeExternalIdentityCheck_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductUserTypeExternalIdentityCheck' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductUserTypeExternalIdentityCheck]', 'd', NULL, &#13;
  convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[ProductUserTypeIdentityCheckID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductUserTypeExternalIdentityCheck]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[ProductUserTypeIdentityCheckID],121) as [ProductUserTypeIdentityCheckID]&#13;
	,convert(varchar(50),deleted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),deleted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),deleted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[ProductUserTypeIdentityCheckID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[ProductUserTypeIdentityCheckID]&#13;
,[ProductTemplateID]&#13;
,[IdentityCheckProviderID]&#13;
,[UserTypeID]&#13;
,[OrganisationExternalRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[ProductUserTypeExternalIdentityCheck_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="ProductUserTypeExternalIdentityCheck_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductUserTypeExternalIdentityCheck_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductUserTypeExternalIdentityCheck' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[ProductUserTypeExternalIdentityCheck]', 'i', NULL, &#13;
		convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[ProductUserTypeIdentityCheckID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductUserTypeExternalIdentityCheck]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductUserTypeExternalIdentityCheck] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[ProductUserTypeIdentityCheckID],121) as [ProductUserTypeIdentityCheckID]&#13;
	,convert(varchar(50),inserted.[ProductTemplateID],121) as [ProductTemplateID]&#13;
	,convert(varchar(50),inserted.[IdentityCheckProviderID],121) as [IdentityCheckProviderID]&#13;
	,convert(varchar(50),inserted.[UserTypeID],121) as [UserTypeID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[ProductUserTypeIdentityCheckID]&#13;
,[ProductTemplateID]&#13;
,[IdentityCheckProviderID]&#13;
,[UserTypeID]&#13;
,[OrganisationExternalRoleID]&#13;
,[OrganisationExternalGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[ProductUserTypeExternalIdentityCheck_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="ProductUserTypeExternalIdentityCheck_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[ProductUserTypeExternalIdentityCheck_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'ProductUserTypeExternalIdentityCheck' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([ProductUserTypeIdentityCheckID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [dProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [iProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductUserTypeIdentityCheckID]&#13;
,[dProductTemplateID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dUserTypeID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductUserTypeIdentityCheckID]&#13;
,[iProductTemplateID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iUserTypeID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductUserTypeExternalIdentityCheck]', 'u', NULL, 		convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[ProductUserTypeExternalIdentityCheck]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductUserTypeExternalIdentityCheck] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[ProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [dProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductUserTypeIdentityCheckID],121),'&lt;-null-&gt;') as [iProductUserTypeIdentityCheckID]&#13;
	,isnull(convert(varchar(50),deleted.[ProductTemplateID],121),'&lt;-null-&gt;') as [dProductTemplateID]&#13;
	,isnull(convert(varchar(50),inserted.[ProductTemplateID],121),'&lt;-null-&gt;') as [iProductTemplateID]&#13;
	,isnull(convert(varchar(50),deleted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [dIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),inserted.[IdentityCheckProviderID],121),'&lt;-null-&gt;') as [iIdentityCheckProviderID]&#13;
	,isnull(convert(varchar(50),deleted.[UserTypeID],121),'&lt;-null-&gt;') as [dUserTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[UserTypeID],121),'&lt;-null-&gt;') as [iUserTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[ProductUserTypeIdentityCheckID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dProductUserTypeIdentityCheckID]&#13;
,[dProductTemplateID]&#13;
,[dIdentityCheckProviderID]&#13;
,[dUserTypeID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iProductUserTypeIdentityCheckID]&#13;
,[iProductTemplateID]&#13;
,[iIdentityCheckProviderID]&#13;
,[iUserTypeID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[ProductUserTypeExternalIdentityCheck]', 'u', NULL,   convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[ProductUserTypeIdentityCheckID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[ProductUserTypeIdentityCheckID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[ProductUserTypeExternalIdentityCheck] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121)) = quotename(convert(varchar(36),deleted.[ProductUserTypeIdentityCheckID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[ProductUserTypeExternalIdentityCheck] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[ProductUserTypeIdentityCheckID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[ProductUserTypeExternalIdentityCheck_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ProductUserTypeExternalIdentityCheckTemplate">
      <TblOpts/>
      <Pk ClNs="ProductUserTypeIdentityCheckTemplateID" nm="pkProductUserTypeExternalIdentityCheckTemplate"/>
      <Cl au="0" df="newid()" nm="ProductUserTypeIdentityCheckTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ProductTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IdentityCheckProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_ProductUserTypeIdentityCheckTemplate_IdentityCheckProvider" prLkCl="IdentityCheckProviderID" upAc="3">
        <PrTb mn="0" nm="IdentityCheckProvider" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductUserTypeExternalIdentityCheckTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="IdentityCheckProviderID" prCl="IdentityCheckProviderID"/>
      </Fk>
      <Fk deAc="3" nm="fk_ProductUserTypeIdentityCheckTemplate_ProductTemplate" prLkCl="ProductTemplateID" upAc="3">
        <PrTb mn="0" nm="ProductTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ProductUserTypeExternalIdentityCheckTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ProductTemplateID" prCl="ProductTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="PropertyDetail">
      <TblOpts/>
      <Pk ClNs="PropertyDetailID" nm="pkPropertyDetail"/>
      <Cl au="0" df="newid()" nm="PropertyDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PropertyTypeID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PropertySubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PropertyCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PropertyValue" nu="0">
        <DT arr="0" ds="Decimal" en="" id="3" ln="30" sc="8" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="PropertyDetail_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PropertyDetail_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PropertyDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PropertyDetail]', 'd', NULL, &#13;
  convert(varchar(36),src.[PropertyDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[PropertyDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PropertyDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[PropertyDetailID],121) as [PropertyDetailID]&#13;
	,convert(varchar(50),deleted.[PropertyTypeID],121) as [PropertyTypeID]&#13;
	,convert(varchar(50),deleted.[PropertySubTypeID],121) as [PropertySubTypeID]&#13;
	,convert(varchar(50),deleted.[PropertyCategoryID],121) as [PropertyCategoryID]&#13;
	,convert(varchar(50),deleted.[PropertyValue],121) as [PropertyValue]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[PropertyDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[PropertyDetailID]&#13;
,[PropertyTypeID]&#13;
,[PropertySubTypeID]&#13;
,[PropertyCategoryID]&#13;
,[PropertyValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[PropertyDetail_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="PropertyDetail_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PropertyDetail_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PropertyDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[PropertyDetail]', 'i', NULL, &#13;
		convert(varchar(36),src.[PropertyDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[PropertyDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PropertyDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PropertyDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PropertyDetailID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[PropertyDetailID],121) as [PropertyDetailID]&#13;
	,convert(varchar(50),inserted.[PropertyTypeID],121) as [PropertyTypeID]&#13;
	,convert(varchar(50),inserted.[PropertySubTypeID],121) as [PropertySubTypeID]&#13;
	,convert(varchar(50),inserted.[PropertyCategoryID],121) as [PropertyCategoryID]&#13;
	,convert(varchar(50),inserted.[PropertyValue],121) as [PropertyValue]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[PropertyDetailID]&#13;
,[PropertyTypeID]&#13;
,[PropertySubTypeID]&#13;
,[PropertyCategoryID]&#13;
,[PropertyValue]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[PropertyDetail_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="PropertyDetail_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[PropertyDetail_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'PropertyDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([PropertyDetailID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PropertyDetailID],121),'&lt;-null-&gt;') as [dPropertyDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyDetailID],121),'&lt;-null-&gt;') as [iPropertyDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyTypeID],121),'&lt;-null-&gt;') as [dPropertyTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyTypeID],121),'&lt;-null-&gt;') as [iPropertyTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertySubTypeID],121),'&lt;-null-&gt;') as [dPropertySubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertySubTypeID],121),'&lt;-null-&gt;') as [iPropertySubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyCategoryID],121),'&lt;-null-&gt;') as [dPropertyCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyCategoryID],121),'&lt;-null-&gt;') as [iPropertyCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyValue],121),'&lt;-null-&gt;') as [dPropertyValue]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyValue],121),'&lt;-null-&gt;') as [iPropertyValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPropertyDetailID]&#13;
,[dPropertyTypeID]&#13;
,[dPropertySubTypeID]&#13;
,[dPropertyCategoryID]&#13;
,[dPropertyValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPropertyDetailID]&#13;
,[iPropertyTypeID]&#13;
,[iPropertySubTypeID]&#13;
,[iPropertyCategoryID]&#13;
,[iPropertyValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PropertyDetail]', 'u', NULL, 		convert(varchar(36),inserted.[PropertyDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[PropertyDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PropertyDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PropertyDetailID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[PropertyDetailID],121),'&lt;-null-&gt;') as [dPropertyDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyDetailID],121),'&lt;-null-&gt;') as [iPropertyDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyTypeID],121),'&lt;-null-&gt;') as [dPropertyTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyTypeID],121),'&lt;-null-&gt;') as [iPropertyTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertySubTypeID],121),'&lt;-null-&gt;') as [dPropertySubTypeID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertySubTypeID],121),'&lt;-null-&gt;') as [iPropertySubTypeID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyCategoryID],121),'&lt;-null-&gt;') as [dPropertyCategoryID]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyCategoryID],121),'&lt;-null-&gt;') as [iPropertyCategoryID]&#13;
	,isnull(convert(varchar(50),deleted.[PropertyValue],121),'&lt;-null-&gt;') as [dPropertyValue]&#13;
	,isnull(convert(varchar(50),inserted.[PropertyValue],121),'&lt;-null-&gt;') as [iPropertyValue]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) = quotename(convert(varchar(36),deleted.[PropertyDetailID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dPropertyDetailID]&#13;
,[dPropertyTypeID]&#13;
,[dPropertySubTypeID]&#13;
,[dPropertyCategoryID]&#13;
,[dPropertyValue]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iPropertyDetailID]&#13;
,[iPropertyTypeID]&#13;
,[iPropertySubTypeID]&#13;
,[iPropertyCategoryID]&#13;
,[iPropertyValue]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[PropertyDetail]', 'u', NULL,   convert(varchar(36),inserted.[PropertyDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) = quotename(convert(varchar(36),deleted.[PropertyDetailID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[PropertyDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[PropertyDetail] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[PropertyDetailID],121)) = quotename(convert(varchar(36),deleted.[PropertyDetailID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[PropertyDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[PropertyDetailID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[PropertyDetail_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RelationshipRoleTemplate">
      <TblOpts/>
      <Pk ClNs="RelationshipRoleTemplateID" nm="pkRelationshipRoleTemplate"/>
      <Cl au="0" df="newid()" nm="RelationshipRoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RelationshipRoleTemplateStatusID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RelationshipRoleTemplateStateID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Repository">
      <TblOpts/>
      <Pk ClNs="RepositoryID" nm="pkRepository"/>
      <Cl au="0" df="newid()" nm="RepositoryID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OwnerID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="256" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="Repository_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Repository_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Repository' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Repository]', 'd', NULL, &#13;
  convert(varchar(36),src.[RepositoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[RepositoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Repository]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[RepositoryID],121) as [RepositoryID]&#13;
	,convert(varchar(50),deleted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[Description],121) as [Description]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[RepositoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[RepositoryID]&#13;
,[OwnerID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[Repository_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="Repository_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Repository_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Repository' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[Repository]', 'i', NULL, &#13;
		convert(varchar(36),src.[RepositoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[RepositoryID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Repository]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Repository] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[RepositoryID],121) as [RepositoryID]&#13;
	,convert(varchar(50),inserted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[Description],121) as [Description]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[RepositoryID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[RepositoryID]&#13;
,[OwnerID]&#13;
,[Name]&#13;
,[Description]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[Repository_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="Repository_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[Repository_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'Repository' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([RepositoryID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryID],121),'&lt;-null-&gt;') as [dRepositoryID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryID],121),'&lt;-null-&gt;') as [iRepositoryID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryID]&#13;
,[dOwnerID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryID]&#13;
,[iOwnerID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Repository]', 'u', NULL, 		convert(varchar(36),inserted.[RepositoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[Repository]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Repository] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryID],121),'&lt;-null-&gt;') as [dRepositoryID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryID],121),'&lt;-null-&gt;') as [iRepositoryID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[Description],121),'&lt;-null-&gt;') as [dDescription]&#13;
	,isnull(convert(varchar(50),inserted.[Description],121),'&lt;-null-&gt;') as [iDescription]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[RepositoryID],121)) = quotename(convert(varchar(36),deleted.[RepositoryID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryID]&#13;
,[dOwnerID]&#13;
,[dName]&#13;
,[dDescription]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryID]&#13;
,[iOwnerID]&#13;
,[iName]&#13;
,[iDescription]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[Repository]', 'u', NULL,   convert(varchar(36),inserted.[RepositoryID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[RepositoryID],121)) = quotename(convert(varchar(36),deleted.[RepositoryID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[Repository] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[RepositoryID],121)) = quotename(convert(varchar(36),deleted.[RepositoryID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[Repository] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[Repository_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RepositoryStructure">
      <TblOpts/>
      <Pk ClNs="RepositoryStructureID" nm="pkRepositoryMap"/>
      <Cl au="0" df="newid()" nm="RepositoryStructureID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RepositoryID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OwnerID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentRepositoryStructureID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsLeafNode" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="256" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_RepositoryMap_Repository" prLkCl="RepositoryID" upAc="3">
        <PrTb mn="0" nm="Repository" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="RepositoryStructure" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RepositoryID" prCl="RepositoryID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RepositoryStructure_Repository" prLkCl="RepositoryID" upAc="3">
        <PrTb mn="0" nm="Repository" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="RepositoryStructure" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RepositoryID" prCl="RepositoryID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="RepositoryStructure_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructure_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructure]', 'd', NULL, &#13;
  convert(varchar(36),src.[RepositoryStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),deleted.[RepositoryID],121) as [RepositoryID]&#13;
	,convert(varchar(50),deleted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),deleted.[ParentRepositoryStructureID],121) as [ParentRepositoryStructureID]&#13;
	,convert(varchar(50),deleted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),deleted.[Name],121) as [Name]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[RepositoryStructureID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[RepositoryID]&#13;
,[OwnerID]&#13;
,[ParentRepositoryStructureID]&#13;
,[IsLeafNode]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[RepositoryStructure_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="RepositoryStructure_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructure_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructure]', 'i', NULL, &#13;
		convert(varchar(36),src.[RepositoryStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),inserted.[RepositoryID],121) as [RepositoryID]&#13;
	,convert(varchar(50),inserted.[OwnerID],121) as [OwnerID]&#13;
	,convert(varchar(50),inserted.[ParentRepositoryStructureID],121) as [ParentRepositoryStructureID]&#13;
	,convert(varchar(50),inserted.[IsLeafNode],121) as [IsLeafNode]&#13;
	,convert(varchar(50),inserted.[Name],121) as [Name]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[RepositoryID]&#13;
,[OwnerID]&#13;
,[ParentRepositoryStructureID]&#13;
,[IsLeafNode]&#13;
,[Name]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[RepositoryStructure_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="RepositoryStructure_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructure_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructure' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([RepositoryStructureID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryID],121),'&lt;-null-&gt;') as [dRepositoryID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryID],121),'&lt;-null-&gt;') as [iRepositoryID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRepositoryStructureID],121),'&lt;-null-&gt;') as [dParentRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRepositoryStructureID],121),'&lt;-null-&gt;') as [iParentRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dRepositoryID]&#13;
,[dOwnerID]&#13;
,[dParentRepositoryStructureID]&#13;
,[dIsLeafNode]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iRepositoryID]&#13;
,[iOwnerID]&#13;
,[iParentRepositoryStructureID]&#13;
,[iIsLeafNode]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructure]', 'u', NULL, 		convert(varchar(36),inserted.[RepositoryStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructure]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryID],121),'&lt;-null-&gt;') as [dRepositoryID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryID],121),'&lt;-null-&gt;') as [iRepositoryID]&#13;
	,isnull(convert(varchar(50),deleted.[OwnerID],121),'&lt;-null-&gt;') as [dOwnerID]&#13;
	,isnull(convert(varchar(50),inserted.[OwnerID],121),'&lt;-null-&gt;') as [iOwnerID]&#13;
	,isnull(convert(varchar(50),deleted.[ParentRepositoryStructureID],121),'&lt;-null-&gt;') as [dParentRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[ParentRepositoryStructureID],121),'&lt;-null-&gt;') as [iParentRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[IsLeafNode],121),'&lt;-null-&gt;') as [dIsLeafNode]&#13;
	,isnull(convert(varchar(50),inserted.[IsLeafNode],121),'&lt;-null-&gt;') as [iIsLeafNode]&#13;
	,isnull(convert(varchar(50),deleted.[Name],121),'&lt;-null-&gt;') as [dName]&#13;
	,isnull(convert(varchar(50),inserted.[Name],121),'&lt;-null-&gt;') as [iName]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dRepositoryID]&#13;
,[dOwnerID]&#13;
,[dParentRepositoryStructureID]&#13;
,[dIsLeafNode]&#13;
,[dName]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iRepositoryID]&#13;
,[iOwnerID]&#13;
,[iParentRepositoryStructureID]&#13;
,[iIsLeafNode]&#13;
,[iName]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructure]', 'u', NULL,   convert(varchar(36),inserted.[RepositoryStructureID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[RepositoryStructure] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructure] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[RepositoryStructure_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RepositoryStructureGroup">
      <TblOpts/>
      <Pk ClNs="RepositoryStructureGroupID" nm="pkRepositoryStructureGroup"/>
      <Cl au="0" df="" nm="RepositoryStructureID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalGroupID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="RepositoryStructureGroupID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_RepositoryStructureRole_OrganisationExternalGroup" prLkCl="OrganisationExternalGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalGroup" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RepositoryStructureGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalGroupID" prCl="OrganisationExternalGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RepositoryStructureRole_OrganisationGroup" prLkCl="OrganisationGroupID" upAc="3">
        <PrTb mn="0" nm="OrganisationGroup" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RepositoryStructureGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationGroupID" prCl="OrganisationGroupID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RepositoryStructureRole_RepositoryStructure" prLkCl="RepositoryStructureID" upAc="3">
        <PrTb mn="0" nm="RepositoryStructure" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="RepositoryStructureGroup" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RepositoryStructureID" prCl="RepositoryStructureID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="RepositoryStructureGroup_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureGroup_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureGroup]', 'd', NULL, &#13;
  convert(varchar(36),src.[RepositoryStructureGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),deleted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),deleted.[RepositoryStructureGroupID],121) as [RepositoryStructureGroupID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[RepositoryStructureGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[OrganisationGroupID]&#13;
,[OrganisationExternalGroupID]&#13;
,[RepositoryStructureGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[RepositoryStructureGroup_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="RepositoryStructureGroup_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureGroup_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureGroup]', 'i', NULL, &#13;
		convert(varchar(36),src.[RepositoryStructureGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureGroupID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),inserted.[OrganisationGroupID],121) as [OrganisationGroupID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalGroupID],121) as [OrganisationExternalGroupID]&#13;
	,convert(varchar(50),inserted.[RepositoryStructureGroupID],121) as [RepositoryStructureGroupID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[OrganisationGroupID]&#13;
,[OrganisationExternalGroupID]&#13;
,[RepositoryStructureGroupID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[RepositoryStructureGroup_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="RepositoryStructureGroup_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureGroup_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureGroup' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([RepositoryStructureGroupID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureGroupID],121),'&lt;-null-&gt;') as [dRepositoryStructureGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureGroupID],121),'&lt;-null-&gt;') as [iRepositoryStructureGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dOrganisationGroupID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dRepositoryStructureGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iOrganisationGroupID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iRepositoryStructureGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureGroup]', 'u', NULL, 		convert(varchar(36),inserted.[RepositoryStructureGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureGroup]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureGroupID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [dOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationGroupID],121),'&lt;-null-&gt;') as [iOrganisationGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [dOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalGroupID],121),'&lt;-null-&gt;') as [iOrganisationExternalGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureGroupID],121),'&lt;-null-&gt;') as [dRepositoryStructureGroupID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureGroupID],121),'&lt;-null-&gt;') as [iRepositoryStructureGroupID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureGroupID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dOrganisationGroupID]&#13;
,[dOrganisationExternalGroupID]&#13;
,[dRepositoryStructureGroupID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iOrganisationGroupID]&#13;
,[iOrganisationExternalGroupID]&#13;
,[iRepositoryStructureGroupID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureGroup]', 'u', NULL,   convert(varchar(36),inserted.[RepositoryStructureGroupID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureGroupID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureGroupID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[RepositoryStructureGroup] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureGroupID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureGroupID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureGroup] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureGroupID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[RepositoryStructureGroup_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RepositoryStructureRole">
      <TblOpts/>
      <Pk ClNs="RepositoryStructureRoleID" nm="pkRepositoryStructureRole"/>
      <Cl au="0" df="" nm="RepositoryStructureID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="RepositoryStructureRoleID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_RepositoryStructureGroup_OrganisationExternalRole" prLkCl="OrganisationExternalRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationExternalRole" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RepositoryStructureRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationExternalRoleID" prCl="OrganisationExternalRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RepositoryStructureGroup_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RepositoryStructureRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RepositoryStructureGroup_RepositoryStructure" prLkCl="RepositoryStructureID" upAc="3">
        <PrTb mn="0" nm="RepositoryStructure" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="RepositoryStructureRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RepositoryStructureID" prCl="RepositoryStructureID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="RepositoryStructureRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[RepositoryStructureRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),deleted.[RepositoryStructureRoleID],121) as [RepositoryStructureRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[RepositoryStructureRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[OrganisationRoleID]&#13;
,[OrganisationExternalRoleID]&#13;
,[RepositoryStructureRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[RepositoryStructureRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="RepositoryStructureRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[RepositoryStructureRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[RepositoryStructureID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[RepositoryStructureID],121) as [RepositoryStructureID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[OrganisationExternalRoleID],121) as [OrganisationExternalRoleID]&#13;
	,convert(varchar(50),inserted.[RepositoryStructureRoleID],121) as [RepositoryStructureRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[RepositoryStructureID]&#13;
,[OrganisationRoleID]&#13;
,[OrganisationExternalRoleID]&#13;
,[RepositoryStructureRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[RepositoryStructureRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="RepositoryStructureRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[RepositoryStructureRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'RepositoryStructureRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([RepositoryStructureRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureRoleID],121),'&lt;-null-&gt;') as [dRepositoryStructureRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureRoleID],121),'&lt;-null-&gt;') as [iRepositoryStructureRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dOrganisationRoleID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dRepositoryStructureRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iOrganisationRoleID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iRepositoryStructureRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureRole]', 'u', NULL, 		convert(varchar(36),inserted.[RepositoryStructureRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[RepositoryStructureRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [dRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureID],121),'&lt;-null-&gt;') as [iRepositoryStructureID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [dOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationExternalRoleID],121),'&lt;-null-&gt;') as [iOrganisationExternalRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[RepositoryStructureRoleID],121),'&lt;-null-&gt;') as [dRepositoryStructureRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[RepositoryStructureRoleID],121),'&lt;-null-&gt;') as [iRepositoryStructureRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dRepositoryStructureID]&#13;
,[dOrganisationRoleID]&#13;
,[dOrganisationExternalRoleID]&#13;
,[dRepositoryStructureRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iRepositoryStructureID]&#13;
,[iOrganisationRoleID]&#13;
,[iOrganisationExternalRoleID]&#13;
,[iRepositoryStructureRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[RepositoryStructureRole]', 'u', NULL,   convert(varchar(36),inserted.[RepositoryStructureRoleID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[RepositoryStructureRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[RepositoryStructureRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureRoleID],121)) = quotename(convert(varchar(36),deleted.[RepositoryStructureRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[RepositoryStructureRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[RepositoryStructureRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[RepositoryStructureRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Resource">
      <TblOpts/>
      <Pk ClNs="ResourceID" nm="PK_Resource"/>
      <Cl au="0" df="newid()" nm="ResourceID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceDescription" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceSubCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ResourceOperation">
      <TblOpts/>
      <Pk ClNs="ResourceID, OperationID" nm="PK_ResourceOperation"/>
      <Cl au="0" df="newid()" nm="ResourceID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OperationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_ResourceOperation_Operation" prLkCl="OperationID" upAc="3">
        <PrTb mn="0" nm="Operation" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ResourceOperation" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OperationID" prCl="OperationID"/>
      </Fk>
      <Fk deAc="3" nm="FK_ResourceOperation_Resource" prLkCl="ResourceID" upAc="3">
        <PrTb mn="0" nm="Resource" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="ResourceOperation" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ResourceID" prCl="ResourceID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RoleTemplate">
      <TblOpts/>
      <Pk ClNs="RoleTemplateID" nm="pkRoleTemplate"/>
      <Cl au="0" df="newid()" nm="RoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTemplateName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTemplateDescription" nu="0">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleSubTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="RoleTemplateClaim">
      <TblOpts/>
      <Pk ClNs="RoleTemplateClaimID" nm="pkRoleTemplateClaim"/>
      <Cl au="1" df="" nm="RoleTemplateClaimID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RoleTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ResourceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OperationID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_RoleTemplateClaim_Operation" prLkCl="OperationID" upAc="3">
        <PrTb mn="0" nm="Operation" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OperationID" prCl="OperationID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RoleTemplateClaim_Resource" prLkCl="ResourceID" upAc="3">
        <PrTb mn="0" nm="Resource" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ResourceID" prCl="ResourceID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RoleTemplateClaim_RoleTemplate" prLkCl="RoleTemplateID" upAc="3">
        <PrTb mn="0" nm="RoleTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="RoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="RoleTemplateID" prCl="RoleTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RoleTemplateClaim_State" prLkCl="StateID" upAc="3">
        <PrTb mn="0" nm="State" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateID" prCl="StateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_RoleTemplateClaim_StateItem" prLkCl="StateItemID" upAc="3">
        <PrTb mn="0" nm="StateItem" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="RoleTemplateClaim" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateItemID" prCl="StateItemID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="ServiceProvider">
      <TblOpts/>
      <Pk ClNs="ServiceProviderID" nm="pkServiceProvider"/>
      <Cl au="0" df="newid()" nm="ServiceProviderID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Setting">
      <TblOpts/>
      <Pk ClNs="Id" nm="PK__Setting__3214EC070659321D"/>
      <Cl au="1" df="" nm="Id" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Value" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="State">
      <TblOpts/>
      <Pk ClNs="StateID" nm="PK_State"/>
      <Cl au="0" df="newid()" nm="StateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateDescription" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateSubCategoryID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentStateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="StateItem">
      <TblOpts/>
      <Pk ClNs="StateItemID" nm="PK_StateItem"/>
      <Cl au="0" df="newid()" nm="StateItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemDescription" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SourceTableName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SourceTableField" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SourceTableFieldValue" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentStateItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="StateItemOrder" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_StateItem_State" prLkCl="StateID" upAc="3">
        <PrTb mn="0" nm="State" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="StateItem" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="StateID" prCl="StateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Structure">
      <TblOpts/>
      <Pk ClNs="StructureID" nm="pkStructure"/>
      <Cl au="0" df="" nm="RepositoryMapID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationExternalRoleID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="StructureID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="TargetItem">
      <TblOpts/>
      <Pk ClNs="TargetItemID" nm="pkTargetItem"/>
      <Cl au="0" df="newid()" nm="TargetItemID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="TargetItem_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItem_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[TargetItem]', 'd', NULL, &#13;
  convert(varchar(36),src.[TargetItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[TargetItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItem]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[TargetItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[TargetItem_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="TargetItem_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItem_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[TargetItem]', 'i', NULL, &#13;
		convert(varchar(36),src.[TargetItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[TargetItemID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[TargetItemID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[TargetItemID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[TargetItem_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="TargetItem_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItem_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItem' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([TargetItemID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[TargetItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[TargetItem]', 'u', NULL, 		convert(varchar(36),inserted.[TargetItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[TargetItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItem]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[TargetItemID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[TargetItemID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[TargetItemID],121)) = quotename(convert(varchar(36),deleted.[TargetItemID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[TargetItem]', 'u', NULL,   convert(varchar(36),inserted.[TargetItemID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[TargetItemID],121)) = quotename(convert(varchar(36),deleted.[TargetItemID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[TargetItemID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[TargetItem] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[TargetItemID],121)) = quotename(convert(varchar(36),deleted.[TargetItemID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItem] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[TargetItemID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[TargetItem_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
 DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="TargetItemAttribute">
      <TblOpts/>
      <Pk ClNs="TargetItemAttributeID" nm="pkTargetItemAttribute"/>
      <Cl au="0" df="newid()" nm="TargetItemAttributeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TargetItemID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="fk_TargetAttribute_TargetItem" prLkCl="TargetItemID" upAc="3">
        <PrTb mn="0" nm="TargetItem" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="TargetItemAttribute" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemID" prCl="TargetItemID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="TargetItemAttribute_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItemAttribute_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[TargetItemAttribute]', 'd', NULL, &#13;
  convert(varchar(36),src.[TargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[TargetItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[TargetItemAttributeID],121) as [TargetItemAttributeID]&#13;
	,convert(varchar(50),deleted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[TargetItemAttributeID]&#13;
,[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[TargetItemAttribute_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="TargetItemAttribute_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItemAttribute_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[TargetItemAttribute]', 'i', NULL, &#13;
		convert(varchar(36),src.[TargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[TargetItemAttributeID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[TargetItemAttributeID],121) as [TargetItemAttributeID]&#13;
	,convert(varchar(50),inserted.[TargetItemID],121) as [TargetItemID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[TargetItemAttributeID]&#13;
,[TargetItemID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[TargetItemAttribute_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="TargetItemAttribute_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[TargetItemAttribute_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'TargetItemAttribute' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([TargetItemAttributeID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [dTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [iTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dTargetItemAttributeID]&#13;
,[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iTargetItemAttributeID]&#13;
,[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[TargetItemAttribute]', 'u', NULL, 		convert(varchar(36),inserted.[TargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[TargetItemAttribute]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [dTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemAttributeID],121),'&lt;-null-&gt;') as [iTargetItemAttributeID]&#13;
	,isnull(convert(varchar(50),deleted.[TargetItemID],121),'&lt;-null-&gt;') as [dTargetItemID]&#13;
	,isnull(convert(varchar(50),inserted.[TargetItemID],121),'&lt;-null-&gt;') as [iTargetItemID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dTargetItemAttributeID]&#13;
,[dTargetItemID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iTargetItemAttributeID]&#13;
,[iTargetItemID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[TargetItemAttribute]', 'u', NULL,   convert(varchar(36),inserted.[TargetItemAttributeID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[TargetItemAttributeID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[TargetItemAttribute] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) = quotename(convert(varchar(36),deleted.[TargetItemAttributeID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[TargetItemAttribute] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
    ON quotename(convert(varchar(36),src.[TargetItemAttributeID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[TargetItemAttribute_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="TargetItemAttributeTemplate">
      <TblOpts/>
      <Pk ClNs="TargetItemAttributeTemplateID" nm="pkTargetItemAttributeTemplate"/>
      <Cl au="0" df="newid()" nm="TargetItemAttributeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_TargetAttributeTemplate_TargetItemTemplate" prLkCl="TargetItemTemplateID" upAc="3">
        <PrTb mn="0" nm="TargetItemTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="TargetItemAttributeTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="TargetItemTemplateID" prCl="TargetItemTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="TargetItemTemplate">
      <TblOpts/>
      <Pk ClNs="TargetItemTemplateID" nm="pkTargetItemTemplate"/>
      <Cl au="0" df="newid()" nm="TargetItemTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Tenant">
      <TblOpts/>
      <Pk ClNs="TenantID" nm="PK_Tenant"/>
      <Cl au="0" df="newid()" nm="TenantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TenantName" nu="0">
        <DT arr="0" ds="VarChar" en="" id="12" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="TwoFactorAuthTokens">
      <TblOpts/>
      <Pk ClNs="Token" nm="PK_dbo.TwoFactorAuthTokens"/>
      <Cl au="0" df="" nm="Token" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Issued" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserAccount_ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_UserAccount_ID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="TwoFactorAuthTokens" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserAccount_ID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserAccount_ID" unq="0">
        <ClNs>UserAccount_ID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserAccountAudit">
      <TblOpts/>
      <Pk ClNs="UserAccountID, UserSessionID, AuditID" nm="PK_UserAccountAudit"/>
      <Cl au="0" df="newid()" nm="UserAccountID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserSessionID" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="AuditID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserIPAddress" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="URLAccessed" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="TimeAccessed" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Data" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserAccountDetail">
      <TblOpts/>
      <Pk ClNs="UserDetailID" nm="pkUserAccountDetail"/>
      <Cl au="0" df="newid()" nm="UserDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Salutation" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FirstName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MiddleName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Title" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HomePhone" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HomeMobile" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.UserAccountDetail_dbo.UserAccounts_UserID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="UserAccountDetail" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserID" unq="0">
        <ClNs>UserID</ClNs>
      </Idx>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="UserAccountDetail_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountDetail_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserAccountDetail]', 'd', NULL, &#13;
  convert(varchar(36),src.[UserDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[UserDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[UserDetailID],121) as [UserDetailID]&#13;
	,convert(varchar(50),deleted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),deleted.[Salutation],121) as [Salutation]&#13;
	,convert(varchar(50),deleted.[FirstName],121) as [FirstName]&#13;
	,convert(varchar(50),deleted.[MiddleName],121) as [MiddleName]&#13;
	,convert(varchar(50),deleted.[LastName],121) as [LastName]&#13;
	,convert(varchar(50),deleted.[Title],121) as [Title]&#13;
	,convert(varchar(50),deleted.[HomePhone],121) as [HomePhone]&#13;
	,convert(varchar(50),deleted.[HomeMobile],121) as [HomeMobile]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[UserDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[UserDetailID]&#13;
,[UserID]&#13;
,[Salutation]&#13;
,[FirstName]&#13;
,[MiddleName]&#13;
,[LastName]&#13;
,[Title]&#13;
,[HomePhone]&#13;
,[HomeMobile]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[UserAccountDetail_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="UserAccountDetail_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountDetail_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserAccountDetail]', 'i', NULL, &#13;
		convert(varchar(36),src.[UserDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[UserDetailID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserDetailID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[UserDetailID],121) as [UserDetailID]&#13;
	,convert(varchar(50),inserted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),inserted.[Salutation],121) as [Salutation]&#13;
	,convert(varchar(50),inserted.[FirstName],121) as [FirstName]&#13;
	,convert(varchar(50),inserted.[MiddleName],121) as [MiddleName]&#13;
	,convert(varchar(50),inserted.[LastName],121) as [LastName]&#13;
	,convert(varchar(50),inserted.[Title],121) as [Title]&#13;
	,convert(varchar(50),inserted.[HomePhone],121) as [HomePhone]&#13;
	,convert(varchar(50),inserted.[HomeMobile],121) as [HomeMobile]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[UserDetailID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[UserDetailID]&#13;
,[UserID]&#13;
,[Salutation]&#13;
,[FirstName]&#13;
,[MiddleName]&#13;
,[LastName]&#13;
,[Title]&#13;
,[HomePhone]&#13;
,[HomeMobile]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[UserAccountDetail_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="UserAccountDetail_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountDetail_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountDetail' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([UserDetailID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserDetailID],121),'&lt;-null-&gt;') as [dUserDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[UserDetailID],121),'&lt;-null-&gt;') as [iUserDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[Salutation],121),'&lt;-null-&gt;') as [dSalutation]&#13;
	,isnull(convert(varchar(50),inserted.[Salutation],121),'&lt;-null-&gt;') as [iSalutation]&#13;
	,isnull(convert(varchar(50),deleted.[FirstName],121),'&lt;-null-&gt;') as [dFirstName]&#13;
	,isnull(convert(varchar(50),inserted.[FirstName],121),'&lt;-null-&gt;') as [iFirstName]&#13;
	,isnull(convert(varchar(50),deleted.[MiddleName],121),'&lt;-null-&gt;') as [dMiddleName]&#13;
	,isnull(convert(varchar(50),inserted.[MiddleName],121),'&lt;-null-&gt;') as [iMiddleName]&#13;
	,isnull(convert(varchar(50),deleted.[LastName],121),'&lt;-null-&gt;') as [dLastName]&#13;
	,isnull(convert(varchar(50),inserted.[LastName],121),'&lt;-null-&gt;') as [iLastName]&#13;
	,isnull(convert(varchar(50),deleted.[Title],121),'&lt;-null-&gt;') as [dTitle]&#13;
	,isnull(convert(varchar(50),inserted.[Title],121),'&lt;-null-&gt;') as [iTitle]&#13;
	,isnull(convert(varchar(50),deleted.[HomePhone],121),'&lt;-null-&gt;') as [dHomePhone]&#13;
	,isnull(convert(varchar(50),inserted.[HomePhone],121),'&lt;-null-&gt;') as [iHomePhone]&#13;
	,isnull(convert(varchar(50),deleted.[HomeMobile],121),'&lt;-null-&gt;') as [dHomeMobile]&#13;
	,isnull(convert(varchar(50),inserted.[HomeMobile],121),'&lt;-null-&gt;') as [iHomeMobile]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserDetailID]&#13;
,[dUserID]&#13;
,[dSalutation]&#13;
,[dFirstName]&#13;
,[dMiddleName]&#13;
,[dLastName]&#13;
,[dTitle]&#13;
,[dHomePhone]&#13;
,[dHomeMobile]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserDetailID]&#13;
,[iUserID]&#13;
,[iSalutation]&#13;
,[iFirstName]&#13;
,[iMiddleName]&#13;
,[iLastName]&#13;
,[iTitle]&#13;
,[iHomePhone]&#13;
,[iHomeMobile]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserAccountDetail]', 'u', NULL, 		convert(varchar(36),inserted.[UserDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountDetail]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
  SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserDetailID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserDetailID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserDetailID],121),'&lt;-null-&gt;') as [dUserDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[UserDetailID],121),'&lt;-null-&gt;') as [iUserDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[Salutation],121),'&lt;-null-&gt;') as [dSalutation]&#13;
	,isnull(convert(varchar(50),inserted.[Salutation],121),'&lt;-null-&gt;') as [iSalutation]&#13;
	,isnull(convert(varchar(50),deleted.[FirstName],121),'&lt;-null-&gt;') as [dFirstName]&#13;
	,isnull(convert(varchar(50),inserted.[FirstName],121),'&lt;-null-&gt;') as [iFirstName]&#13;
	,isnull(convert(varchar(50),deleted.[MiddleName],121),'&lt;-null-&gt;') as [dMiddleName]&#13;
	,isnull(convert(varchar(50),inserted.[MiddleName],121),'&lt;-null-&gt;') as [iMiddleName]&#13;
	,isnull(convert(varchar(50),deleted.[LastName],121),'&lt;-null-&gt;') as [dLastName]&#13;
	,isnull(convert(varchar(50),inserted.[LastName],121),'&lt;-null-&gt;') as [iLastName]&#13;
	,isnull(convert(varchar(50),deleted.[Title],121),'&lt;-null-&gt;') as [dTitle]&#13;
	,isnull(convert(varchar(50),inserted.[Title],121),'&lt;-null-&gt;') as [iTitle]&#13;
	,isnull(convert(varchar(50),deleted.[HomePhone],121),'&lt;-null-&gt;') as [dHomePhone]&#13;
	,isnull(convert(varchar(50),inserted.[HomePhone],121),'&lt;-null-&gt;') as [iHomePhone]&#13;
	,isnull(convert(varchar(50),deleted.[HomeMobile],121),'&lt;-null-&gt;') as [dHomeMobile]&#13;
	,isnull(convert(varchar(50),inserted.[HomeMobile],121),'&lt;-null-&gt;') as [iHomeMobile]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[UserDetailID],121)) = quotename(convert(varchar(36),deleted.[UserDetailID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserDetailID]&#13;
,[dUserID]&#13;
,[dSalutation]&#13;
,[dFirstName]&#13;
,[dMiddleName]&#13;
,[dLastName]&#13;
,[dTitle]&#13;
,[dHomePhone]&#13;
,[dHomeMobile]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserDetailID]&#13;
,[iUserID]&#13;
,[iSalutation]&#13;
,[iFirstName]&#13;
,[iMiddleName]&#13;
,[iLastName]&#13;
,[iTitle]&#13;
,[iHomePhone]&#13;
,[iHomeMobile]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserAccountDetail]', 'u', NULL,   convert(varchar(36),inserted.[UserDetailID],121),null,null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[UserDetailID],121)) = quotename(convert(varchar(36),deleted.[UserDetailID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserDetailID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[UserAccountDetail] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[UserDetailID],121)) = quotename(convert(varchar(36),deleted.[UserDetailID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountDetail] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserDetailID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[UserAccountDetail_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserAccountLoginSession">
      <TblOpts/>
      <Pk ClNs="UserAccountID, UserSessionID" nm="PK_UserAccountLoginSession_1"/>
      <Cl au="0" df="newid()" nm="UserAccountID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserSessionID" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserIPAddress" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserHostAddress" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserLocation" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserLoginDate" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserLogoutDate" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserHasLoggedOut" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserAccountOrganisationUnit">
      <TblOpts/>
      <Pk ClNs="UserID, OrganisationUnitID" nm="pkUserAccountOrganisationUnit"/>
      <Cl au="0" df="newid()" nm="UserID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="1" df="" nm="OrganisationUnitID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="OrganisationID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="JobTitle" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="InternalEmailAddress" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="NickName" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="UserDetailID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="UserAccountOrganisationUnit_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountOrganisationUnit_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountOrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserAccountOrganisationUnit]', 'd', NULL, &#13;
  convert(varchar(36),src.[UserID],121), convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[UserID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountOrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),deleted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),deleted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),deleted.[JobTitle],121) as [JobTitle]&#13;
	,convert(varchar(50),deleted.[InternalEmailAddress],121) as [InternalEmailAddress]&#13;
	,convert(varchar(50),deleted.[NickName],121) as [NickName]&#13;
	,convert(varchar(50),deleted.[UserDetailID],121) as [UserDetailID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[UserID]&#13;
,[OrganisationUnitID]&#13;
,[OrganisationID]&#13;
,[JobTitle]&#13;
,[InternalEmailAddress]&#13;
,[NickName]&#13;
,[UserDetailID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[UserAccountOrganisationUnit_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="UserAccountOrganisationUnit_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountOrganisationUnit_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountOrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserAccountOrganisationUnit]', 'i', NULL, &#13;
		convert(varchar(36),src.[UserID],121), convert(varchar(36),src.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[UserID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountOrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountOrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),inserted.[OrganisationUnitID],121) as [OrganisationUnitID]&#13;
	,convert(varchar(50),inserted.[OrganisationID],121) as [OrganisationID]&#13;
	,convert(varchar(50),inserted.[JobTitle],121) as [JobTitle]&#13;
	,convert(varchar(50),inserted.[InternalEmailAddress],121) as [InternalEmailAddress]&#13;
	,convert(varchar(50),inserted.[NickName],121) as [NickName]&#13;
	,convert(varchar(50),inserted.[UserDetailID],121) as [UserDetailID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[UserID]&#13;
,[OrganisationUnitID]&#13;
,[OrganisationID]&#13;
,[JobTitle]&#13;
,[InternalEmailAddress]&#13;
,[NickName]&#13;
,[UserDetailID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[UserAccountOrganisationUnit_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="UserAccountOrganisationUnit_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserAccountOrganisationUnit_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserAccountOrganisationUnit' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([UserID]) or update ([OrganisationUnitID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[JobTitle],121),'&lt;-null-&gt;') as [dJobTitle]&#13;
	,isnull(convert(varchar(50),inserted.[JobTitle],121),'&lt;-null-&gt;') as [iJobTitle]&#13;
	,isnull(convert(varchar(50),deleted.[InternalEmailAddress],121),'&lt;-null-&gt;') as [dInternalEmailAddress]&#13;
	,isnull(convert(varchar(50),inserted.[InternalEmailAddress],121),'&lt;-null-&gt;') as [iInternalEmailAddress]&#13;
	,isnull(convert(varchar(50),deleted.[NickName],121),'&lt;-null-&gt;') as [dNickName]&#13;
	,isnull(convert(varchar(50),inserted.[NickName],121),'&lt;-null-&gt;') as [iNickName]&#13;
	,isnull(convert(varchar(50),deleted.[UserDetailID],121),'&lt;-null-&gt;') as [dUserDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[UserDetailID],121),'&lt;-null-&gt;') as [iUserDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserID]&#13;
,[dOrganisationUnitID]&#13;
,[dOrganisationID]&#13;
,[dJobTitle]&#13;
,[dInternalEmailAddress]&#13;
,[dNickName]&#13;
,[dUserDetailID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserID]&#13;
,[iOrganisationUnitID]&#13;
,[iOrganisationID]&#13;
,[iJobTitle]&#13;
,[iInternalEmailAddress]&#13;
,[iNickName]&#13;
,[iUserDetailID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserAccountOrganisationUnit]', 'u', NULL, 		convert(varchar(36),inserted.[UserID],121), convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserAccountOrganisationUnit]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountOrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [dOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationUnitID],121),'&lt;-null-&gt;') as [iOrganisationUnitID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationID],121),'&lt;-null-&gt;') as [dOrganisationID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationID],121),'&lt;-null-&gt;') as [iOrganisationID]&#13;
	,isnull(convert(varchar(50),deleted.[JobTitle],121),'&lt;-null-&gt;') as [dJobTitle]&#13;
	,isnull(convert(varchar(50),inserted.[JobTitle],121),'&lt;-null-&gt;') as [iJobTitle]&#13;
	,isnull(convert(varchar(50),deleted.[InternalEmailAddress],121),'&lt;-null-&gt;') as [dInternalEmailAddress]&#13;
	,isnull(convert(varchar(50),inserted.[InternalEmailAddress],121),'&lt;-null-&gt;') as [iInternalEmailAddress]&#13;
	,isnull(convert(varchar(50),deleted.[NickName],121),'&lt;-null-&gt;') as [dNickName]&#13;
	,isnull(convert(varchar(50),inserted.[NickName],121),'&lt;-null-&gt;') as [iNickName]&#13;
	,isnull(convert(varchar(50),deleted.[UserDetailID],121),'&lt;-null-&gt;') as [dUserDetailID]&#13;
	,isnull(convert(varchar(50),inserted.[UserDetailID],121),'&lt;-null-&gt;') as [iUserDetailID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserID]&#13;
,[dOrganisationUnitID]&#13;
,[dOrganisationID]&#13;
,[dJobTitle]&#13;
,[dInternalEmailAddress]&#13;
,[dNickName]&#13;
,[dUserDetailID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserID]&#13;
,[iOrganisationUnitID]&#13;
,[iOrganisationID]&#13;
,[iJobTitle]&#13;
,[iInternalEmailAddress]&#13;
,[iNickName]&#13;
,[iUserDetailID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserAccountOrganisationUnit]', 'u', NULL,   convert(varchar(36),inserted.[UserID],121), convert(varchar(36),inserted.[OrganisationUnitID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationUnitID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[UserAccountOrganisationUnit] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationUnitID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserAccountOrganisationUnit] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationUnitID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[UserAccountOrganisationUnit_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserAccounts">
      <TblOpts/>
      <Pk ClNs="ID" nm="PK_dbo.UserAccounts"/>
      <Cl au="0" df="newid()" nm="ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Tenant" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="50" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Username" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Email" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Created" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastUpdated" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="PasswordChanged" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="RequiresPasswordReset" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileCode" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobileCodeSent" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobilePhoneNumber" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="20" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountTwoFactorAuthMode" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="CurrentTwoFactorAuthStatus" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsAccountVerified" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsLoginAllowed" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsAccountClosed" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="AccountClosed" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastLogin" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastFailedLogin" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FailedLoginCount" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VerificationKey" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VerificationPurpose" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VerificationKeySent" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="HashedPassword" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="LastFailedPasswordReset" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="FailedPasswordResetCount" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="MobilePhoneNumberChanged" nu="1">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VerificationStorage" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="100" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserCertificates">
      <TblOpts/>
      <Pk ClNs="Thumbprint" nm="PK_dbo.UserCertificates"/>
      <Cl au="0" df="" nm="UserAccount_ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Thumbprint" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Subject" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="250" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.UserCertificates_dbo.UserAccounts_UserAccount_ID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="UserCertificates" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserAccount_ID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserAccount_ID" unq="0">
        <ClNs>UserAccount_ID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserClaims">
      <TblOpts/>
      <Pk ClNs="Type, Value" nm="PK_dbo.UserClaims"/>
      <Cl au="0" df="" nm="UserAccount_ID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Type" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Value" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="150" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="0" nm="FK_dbo.UserClaims_dbo.UserAccounts_UserAccount_ID" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="UserClaims" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserAccount_ID" prCl="ID"/>
      </Fk>
      <Idx clu="0" nm="IX_UserAccount_ID" unq="0">
        <ClNs>UserAccount_ID</ClNs>
      </Idx>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="UserOrganizationRole">
      <TblOpts/>
      <Pk ClNs="UserID, OrganisationRoleID" nm="PK_UserOrganizationRole"/>
      <Cl au="0" df="newid()" nm="UserID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="OrganisationRoleID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_CreatedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_CreatedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="getdate()" nm="AutoAudit_ModifiedDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="suser_sname()" nm="AutoAudit_ModifiedBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="128" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Cl au="0" df="1" nm="AutoAudit_RowVersion" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
        <Cm>Column added by AutoAudit</Cm>
      </Cl>
      <Fk deAc="3" nm="FK_UserOrganizationRole_OrganisationRole" prLkCl="OrganisationRoleID" upAc="3">
        <PrTb mn="0" nm="OrganisationRole" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="UserOrganizationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="OrganisationRoleID" prCl="OrganisationRoleID"/>
      </Fk>
      <Fk deAc="3" nm="FK_UserOrganizationRole_UserAccounts" prLkCl="ID" upAc="3">
        <PrTb mn="0" nm="UserAccounts" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="UserOrganizationRole" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="UserID" prCl="ID"/>
      </Fk>
      <Trg del="1" eaRow="0" exBe="0" ins="0" nm="UserOrganizationRole_Audit_Delete" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserOrganizationRole_Audit_Delete]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserOrganizationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID,  quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'') into @Keys (AuditHeaderID,PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserOrganizationRole]', 'd', NULL, &#13;
  convert(varchar(36),src.[UserID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
0          FROM  deleted as src&#13;
          WHERE  src.[UserID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserOrganizationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_OldValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),deleted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),deleted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),deleted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),deleted.[IsDeleted],121) as [IsDeleted]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedDate],121) as [AutoAudit_CreatedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_CreatedBy],121) as [AutoAudit_CreatedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedDate],121) as [AutoAudit_ModifiedDate]&#13;
	,convert(varchar(50),deleted.[AutoAudit_ModifiedBy],121) as [AutoAudit_ModifiedBy]&#13;
	,convert(varchar(50),deleted.[AutoAudit_RowVersion],121) as [AutoAudit_RowVersion]&#13;
	  FROM  deleted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_ColumnName IN (&#13;
[UserID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
,[AutoAudit_CreatedDate]&#13;
,[AutoAudit_CreatedBy]&#13;
,[AutoAudit_ModifiedDate]&#13;
,[AutoAudit_ModifiedBy]&#13;
,[AutoAudit_RowVersion]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_OldValue is not null&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Delete trigger normally: [dbo].[UserOrganizationRole_Audit_Delete], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="1" nm="UserOrganizationRole_Audit_Insert" upd="0">
        <Sql>varchar)&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserOrganizationRole_Audit_Insert]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
--get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserOrganizationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
SET @AuditTime = GetDate()&#13;
&#13;
SET @IsDirty = 0&#13;
&#13;
 set context_info 0x1;&#13;
 Begin Try &#13;
Declare @Keys Table (AuditHeaderID BIGINT, &#13;
		PrimaryKey VARCHAR(250), &#13;
		NextRowVersion int default(1))&#13;
&#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement,&#13;
			PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion])&#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),'')&#13;
	into @Keys (AuditHeaderID, PrimaryKey) &#13;
   SELECT  @AuditTime, Suser_SName(), APP_NAME(), Host_Name(), '[dbo].[UserOrganizationRole]', 'i', NULL, &#13;
		convert(varchar(36),src.[UserID],121), convert(varchar(36),src.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
        1&#13;
          FROM  inserted as src&#13;
          WHERE  src.[UserID] is not null&#13;
&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserOrganizationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = @AuditTime, &#13;
         AutoAudit_CreatedBy  = Suser_SName(), &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
      AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserOrganizationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, NewValue)&#13;
   	SELECT AuditHeaderID, '[' + AA_ColumnName + ']', AA_NewValue&#13;
   FROM &#13;
      (SELECT Keys.AuditHeaderID as AuditHeaderID&#13;
	,convert(varchar(50),inserted.[UserID],121) as [UserID]&#13;
	,convert(varchar(50),inserted.[OrganisationRoleID],121) as [OrganisationRoleID]&#13;
	,convert(varchar(50),inserted.[IsActive],121) as [IsActive]&#13;
	,convert(varchar(50),inserted.[IsDeleted],121) as [IsDeleted]&#13;
	  FROM  inserted&#13;
	  JOIN	 @Keys as Keys&#13;
		ON	 quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = Keys.PrimaryKey&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_ColumnName IN (&#13;
[UserID]&#13;
,[OrganisationRoleID]&#13;
,[IsActive]&#13;
,[IsDeleted]&#13;
      )&#13;
)AS UNPVT&#13;
	  WHERE  AA_NewValue is not null;&#13;
&#13;
  set context_info 0x0;&#13;
IF @DebugFlag = 1 PRINT 'Ending Insert trigger normally: [dbo].[UserOrganizationRole_Audit_Insert], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
	 SET context_info 0x0;&#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <Trg del="0" eaRow="0" exBe="0" ins="0" nm="UserOrganizationRole_Audit_Update" upd="1">
        <Sql>varchar)&#13;
&#13;
declare @ContextInfo varbinary(128)&#13;
select @ContextInfo = context_info from master.dbo.sysprocesses where spid=@@SPID;&#13;
&#13;
--prevent update trigger from firing when insert trigger is updating DDL columns&#13;
IF @ContextInfo = 0x1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   Update trigger initiated by the Insert trigger. Exiting Update trigger immediately...'&#13;
 	   return&#13;
   END&#13;
&#13;
 -- prevent recursive runs of this trigger&#13;
 IF TRIGGER_NESTLEVEL(OBJECT_ID('[dbo].[UserOrganizationRole_Audit_Update]'), 'AFTER', 'DML') &gt; 1&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT '   TRIGGER_NESTLEVEL &gt; 1. Exiting trigger...'&#13;
 	   return&#13;
   END&#13;
&#13;
  --get the EnabledFlag setting from the AuditBaseTables table&#13;
IF NOT EXISTS (SELECT 1 FROM [Audit].[AuditBaseTables]  WHERE [SchemaName] = 'dbo' AND [TableName] = 'UserOrganizationRole' AND [EnabledFlag] = 1)&#13;
   BEGIN&#13;
     IF @DebugFlag = 1 PRINT 'AutoAudit EnabledFlag set to "false" for this table in the AuditBaseTables table. Exiting trigger...'&#13;
 	return&#13;
   END&#13;
&#13;
DECLARE &#13;
  @AuditTime DATETIME&#13;
SET @AuditTime = GetDate()&#13;
&#13;
  Begin Try&#13;
Declare @Keys Table (AuditHeaderID BIGINT, PrimaryKey VARCHAR(250), NextRowVersion int default(0))&#13;
Declare @AuditDetailUpdate Table (PrimaryKey VARCHAR(250), ColumnName sysname, OldValue varchar(50), NewValue varchar(50))&#13;
Declare @CleanRows Table (AuditHeaderID bigint)&#13;
Declare @PrimaryKeys Table (PrimaryKey VARCHAR(250))&#13;
&#13;
--BAIL OUT NOW IF NO ROWS HAVE BEEN UPDATED&#13;
If (Select count(*) from deleted) = 0 &#13;
   Begin&#13;
     IF @DebugFlag = 1 PRINT '   No rows affected by update statement. Exiting trigger...'&#13;
     return --nothing has changed - bail out of trigger&#13;
   End&#13;
&#13;
	--****************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
if update ([UserID]) or update ([OrganisationRoleID])  --check if the PK column has been updated&#13;
		begin	--the primary key has been changed&#13;
		If (Select count(*) from deleted) = 1 --check if more than one PK value has been updated&#13;
			begin	--the primary key has been changed on a single row&#13;
&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
	  FROM  inserted&#13;
             CROSS JOIN deleted&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, &#13;
   PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserOrganizationRole]', 'u', NULL, 		convert(varchar(36),inserted.[UserID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
1&#13;
          FROM  inserted&#13;
             CROSS JOIN deleted&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
	--calculate next row version&#13;
	;With NextRowVersions&#13;
	as&#13;
	(Select Keys.PrimaryKey, max(AH.[RowVersion]) + 1 as NextRowVersion&#13;
	From	[Audit].AuditHeader AH&#13;
	inner join @Keys as Keys&#13;
		on		quotename(AH.PrimaryKey) + isnull(quotename(AH.PrimaryKey2),'') + isnull(quotename(AH.PrimaryKey3),'') + isnull(quotename(AH.PrimaryKey4),'') + isnull(quotename(AH.PrimaryKey5),'') = Keys.PrimaryKey&#13;
		and		AH.TableName = '[dbo].[UserOrganizationRole]'&#13;
	group by Keys.PrimaryKey&#13;
	having count(*) &gt; 1&#13;
	)&#13;
   UPDATE Keys&#13;
     SET  Keys.[NextRowVersion] = NRV.NextRowVersion&#13;
     FROM @Keys as Keys&#13;
     INNER JOIN	NextRowVersions NRV&#13;
		ON		Keys.PrimaryKey = NRV.PrimaryKey;&#13;
-----&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock) &#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
     WHERE Keys.[NextRowVersion] &lt;&gt; 1&#13;
-----&#13;
&#13;
 -- Update the Created and Modified columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy, &#13;
         AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserOrganizationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]     CROSS JOIN  deleted&#13;
-----&#13;
&#13;
		end	  --the primary key has been changed on a single row&#13;
		end	--the primary key has been changed&#13;
	--****************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS CHANGED &#13;
	--****************************************************** &#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***START - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
else&#13;
		begin	--the primary key has NOT been changed&#13;
   INSERT @AuditDetailUpdate (PrimaryKey, ColumnName, OldValue, NewValue)&#13;
   	SELECT PrimaryKey, '[' + substring(AA_dColumnName ,2,128) + ']', AA_OldValue, AA_NewValue&#13;
   FROM &#13;
      (SELECT quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) as PrimaryKey&#13;
	,isnull(convert(varchar(50),deleted.[UserID],121),'&lt;-null-&gt;') as [dUserID]&#13;
	,isnull(convert(varchar(50),inserted.[UserID],121),'&lt;-null-&gt;') as [iUserID]&#13;
	,isnull(convert(varchar(50),deleted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [dOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),inserted.[OrganisationRoleID],121),'&lt;-null-&gt;') as [iOrganisationRoleID]&#13;
	,isnull(convert(varchar(50),deleted.[IsActive],121),'&lt;-null-&gt;') as [dIsActive]&#13;
	,isnull(convert(varchar(50),inserted.[IsActive],121),'&lt;-null-&gt;') as [iIsActive]&#13;
	,isnull(convert(varchar(50),deleted.[IsDeleted],121),'&lt;-null-&gt;') as [dIsDeleted]&#13;
	,isnull(convert(varchar(50),inserted.[IsDeleted],121),'&lt;-null-&gt;') as [iIsDeleted]&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON  quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
) as SourceData&#13;
UNPIVOT&#13;
   (AA_OldValue FOR AA_dColumnName IN (&#13;
[dUserID]&#13;
,[dOrganisationRoleID]&#13;
,[dIsActive]&#13;
,[dIsDeleted]&#13;
      ))AS dUNPVT&#13;
UNPIVOT&#13;
   (AA_NewValue FOR AA_iColumnName IN (&#13;
[iUserID]&#13;
,[iOrganisationRoleID]&#13;
,[iIsActive]&#13;
,[iIsDeleted]&#13;
      ))AS iUNPVT&#13;
	  WHERE  substring(AA_dColumnName ,2,128) = substring(AA_iColumnName ,2,128)&#13;
	  AND ISNULL(AA_OldValue,'&lt;-null-&gt;') &lt;&gt; ISNULL(AA_NewValue,'&lt;-null-&gt;')&#13;
&#13;
-----&#13;
&#13;
   INSERT @PrimaryKeys select distinct PrimaryKey from @AuditDetailUpdate &#13;
   INSERT [Audit].AuditHeader (AuditDate, SysUser, Application, HostName, TableName, Operation, SQLStatement, PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, RowDescription, SecondaryRow, [RowVersion]) &#13;
   OUTPUT  inserted.AuditHeaderID, quotename(inserted.PrimaryKey) + isnull(quotename(inserted.PrimaryKey2),'') + isnull(quotename(inserted.PrimaryKey3),'') + isnull(quotename(inserted.PrimaryKey4),'') + isnull(quotename(inserted.PrimaryKey5),''), inserted.[RowVersion] into @Keys (AuditHeaderID, PrimaryKey, NextRowVersion)&#13;
     SELECT  @AuditTime, SUSER_SNAME(), APP_NAME(), Host_Name(), '[dbo].[UserOrganizationRole]', 'u', NULL,   convert(varchar(36),inserted.[UserID],121), convert(varchar(36),inserted.[OrganisationRoleID],121),null,null,null,&#13;
        NULL,     -- Row Description (e.g. Order Number)&#13;
        NULL,     -- Secondary Row Value (e.g. Order Number for an Order Detail Line)&#13;
 deleted.AutoAudit_RowVersion + 1&#13;
          FROM  inserted&#13;
             JOIN deleted&#13;
               ON quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
          WHERE quotename(convert(varchar(36),inserted.[UserID],121)) + quotename(convert(varchar(36),inserted.[OrganisationRoleID],121)) in (Select PrimaryKey from @PrimaryKeys)&#13;
-----&#13;
&#13;
&#13;
 -- fix the RowVersion in the Audit table&#13;
   UPDATE AH&#13;
     SET AH.[RowVersion] = Keys.[NextRowVersion]&#13;
     FROM [Audit].AuditHeader AH with (nolock)&#13;
     INNER JOIN	@Keys as Keys&#13;
     ON AH.AuditHeaderID =  Keys.AuditHeaderID&#13;
-----&#13;
&#13;
 -- Update the Created columns&#13;
   UPDATE src &#13;
     SET AutoAudit_CreatedDate  = deleted.AutoAudit_CreatedDate, &#13;
         AutoAudit_CreatedBy  = deleted.AutoAudit_CreatedBy &#13;
     FROM [dbo].[UserOrganizationRole] as src with (nolock) &#13;
       JOIN deleted&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) = quotename(convert(varchar(36),deleted.[UserID],121)) + quotename(convert(varchar(36),deleted.[OrganisationRoleID],121))&#13;
     where	isnull(src.AutoAudit_CreatedDate,'1/1/1')  &lt;&gt; isnull(deleted.AutoAudit_CreatedDate,'1/1/1')&#13;
	     or		isnull(src.AutoAudit_CreatedBy,'wasnull!')  &lt;&gt; isnull(deleted.AutoAudit_CreatedBy,'wasnull!')&#13;
-----&#13;
&#13;
 -- Update the Modified and RowVersion columns&#13;
   UPDATE src &#13;
     SET AutoAudit_ModifiedDate = @AuditTime, &#13;
         AutoAudit_ModifiedBy  = Suser_SName(), &#13;
         AutoAudit_RowVersion = Keys.[NextRowVersion]&#13;
     FROM [dbo].[UserOrganizationRole] as src with (nolock) &#13;
       JOIN  @Keys as Keys&#13;
         ON quotename(convert(varchar(36),src.[UserID],121)) + quotename(convert(varchar(36),src.[OrganisationRoleID],121)) =  Keys.[PrimaryKey]-----&#13;
&#13;
		end	--the primary key has NOT been changed&#13;
&#13;
&#13;
	--********************************************************** &#13;
	--***END - THIS SECTION IS USED WHEN THE PK IS NOT CHANGED &#13;
	--********************************************************** &#13;
-----&#13;
&#13;
   INSERT [Audit].AuditDetail (AuditHeaderID, ColumnName, OldValue, NewValue)&#13;
   Select	Keys.AuditHeaderID, ADU.ColumnName, ADU.OldValue, ADU.NewValue &#13;
   from @AuditDetailUpdate ADU&#13;
   INNER JOIN @Keys as Keys&#13;
		ON	ADU.PrimaryKey = Keys.PrimaryKey;&#13;
&#13;
IF @DebugFlag = 1 PRINT 'Ending Update trigger normally: [dbo].[UserOrganizationRole_Audit_Update], nest level = ' + cast(@NestLevel as varchar)&#13;
&#13;
-----&#13;
&#13;
 End Try &#13;
 Begin Catch &#13;
   DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT, @ErrorLine INT;&#13;
   SET @ErrorMessage = ERROR_MESSAGE();  &#13;
   SET @ErrorSeverity = ERROR_SEVERITY(); &#13;
   SET @ErrorState = ERROR_STATE();  &#13;
   SET @ErrorLine = ERROR_LINE();  &#13;
   RAISERROR(@ErrorMessage,@ErrorSeverity,@ErrorState);&#13;
   PRINT 'Error Line: ' + cast(@ErrorLine as varchar);&#13;
 End Catch </Sql>
      </Trg>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Variant">
      <TblOpts/>
      <Pk ClNs="VariantID" nm="pkVariant"/>
      <Cl au="0" df="newid()" nm="VariantID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="IsActive" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsDeleted" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="Workflow">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber" nm="PK_Workflow"/>
      <Cl au="0" df="newid()" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowAction">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber" nm="pkWorkflowAction"/>
      <Cl au="0" df="newid()" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionTypeID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManual" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowAction_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowAction_WorkflowObjectType" prLkCl="WorkflowObjectTypeID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeID" prCl="WorkflowObjectTypeID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionCompleteCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowActionCompleteCondition"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionCompleteCondition_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionCompleteCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionCompleteConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowConditionTemplateID" nm="pkWorkflowActionCompleteConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionCompleteConditionTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionCompleteConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionExecuteCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber, WorkflowCommandID" nm="pkWorkflowActionExecuteCommand"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionExecuteCommand_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionExecuteCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionExecuteCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowActionExecuteCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowParameterID, VersionNumber, WorkflowID, WorkflowActionID" nm="pkWorkflowActionParameter"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionParameter_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowActionParamterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionParamter_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionParamter_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionPostCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber, WorkflowCommandID" nm="pkWorkflowActionPostCommand"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionPostCommand_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPostCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionPostCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPostCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionPostCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandTemplateID, WorkflowActionTemplateID" nm="pkWorkflowActionPostCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPostCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPostCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionPreCommand">
      <TblOpts/>
      <Pk ClNs="VersionNumber, WorkflowCommandID, WorkflowID, WorkflowActionID" nm="pkWorkflowActionPreCommand"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionPreCommand_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPreCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionPreCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPreCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionPreCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowActionPreCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPreCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionPreCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionRestriction">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber, WorkflowRestrictionID" nm="pkWorkflowActionRestriction"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowRestrictionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionRestriction_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionRestriction_WorkflowRestriction" prLkCl="WorkflowRestrictionID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestriction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionID" prCl="WorkflowRestrictionID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionRestrictionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowRestrictionTemplateID" nm="pkWorkflowActionRestrictionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionRestrictionTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionRestrictionTemplate_WorkflowRestrictionTemplate" prLkCl="WorkflowRestrictionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestrictionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionTemplateID" prCl="WorkflowRestrictionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionStartCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowActionID, WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowActionStartCondition"/>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionStartCondition_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionStartCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionStartConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID, WorkflowConditionTemplateID" nm="pkWorkflowActionStartConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowActionStartConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowActionStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowActionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowActionTemplateID" nm="PK_WorkflowActionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsManual" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate" prLkCl="WorkflowObjectTypeTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectTypeTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="WorkflowActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeTemplateID" prCl="WorkflowObjectTypeTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandID, WorkflowID, VersionNumber" nm="pkWorkflowCommand"/>
      <Cl au="0" df="newid()" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommand_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommand_WorkflowObjectType" prLkCl="WorkflowObjectTypeID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeID" prCl="WorkflowObjectTypeID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommandCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandID, WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowCommandCondition"/>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommandCondition_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommandCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommandConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowCommandConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommandParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandID, WorkflowID, VersionNumber, WorkflowParameterID" nm="pkWorkflowCommandParameter"/>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommandParameter_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommandParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommandParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowCommandParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandTemplateID" nm="pkWorkflowCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate" prLkCl="WorkflowObjectTypeTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectTypeTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="WorkflowCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeTemplateID" prCl="WorkflowObjectTypeTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCommandTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionID, WorkflowID, VersionNumber" nm="pkWorkflowCondition"/>
      <Cl au="0" df="newid()" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowCondition_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowCondition_WorkflowObjectType" prLkCl="WorkflowObjectTypeID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeID" prCl="WorkflowObjectTypeID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowConditionParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionID, WorkflowID, VersionNumber, WorkflowParameterID" nm="pkWorkflowConditionParameter"/>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowConditionParameter_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowConditionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowConditionParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowConditionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowConditionParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowConditionParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowConditionParameter_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowConditionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowConditionParameter_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowConditionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionTemplateID" nm="pkWorkflowConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate" prLkCl="WorkflowObjectTypeTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectTypeTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="WorkflowConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeTemplateID" prCl="WorkflowObjectTypeTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowConditionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecision">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionID, WorkflowID, VersionNumber" nm="pkWorkflowDecision"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowDecisionTypeID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecision_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecision" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecision_WorkflowObjectType" prLkCl="WorkflowObjectTypeID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecision" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeID" prCl="WorkflowObjectTypeID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionExecuteCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionID, WorkflowID, VersionNumber, WorkflowCommandID" nm="pkWorkflowDecisionExecuteCommand"/>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionExecuteCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionExecuteCommand_WorkflowDecision" prLkCl="WorkflowDecisionID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecision" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionID" prCl="WorkflowDecisionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionExecuteCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowDecisionExecuteCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionExecuteCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowDecisionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecisionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionTemplateID" prCl="WorkflowDecisionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionFailureAction">
      <TblOpts/>
      <Pk ClNs="WorkflowID, WorkflowDecisionID, VersionNumber, WorkflowActionID" nm="pkWorkflowDecisionFailureAction"/>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionFailureAction_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionFailureAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionFailureAction_WorkflowDecision" prLkCl="WorkflowDecisionID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecision" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionFailureAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionID" prCl="WorkflowDecisionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionFailureActionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionTemplateID, WorkflowActionTemplateID" nm="PK_WorkflowDecisionFailureExecutionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionFailureActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="FK_WorkflowDecisionFailureActionTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowDecisionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecisionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionFailureActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionTemplateID" prCl="WorkflowDecisionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionID, WorkflowID, VersionNumber, WorkflowParameterID" nm="pkWorkflowDecisionParameter"/>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionParameter_WorkflowDecision" prLkCl="WorkflowDecisionID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecision" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionID" prCl="WorkflowDecisionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowDecisionParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionParameterTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowDecisionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecisionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionTemplateID" prCl="WorkflowDecisionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionSuccessAction">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionID, WorkflowID, VersionNumber, WorkflowActionID" nm="pkWorkflowDecisionSuccessAction"/>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionSuccessAction_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionSuccessAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowDecisionSuccessAction_WorkflowDecision" prLkCl="WorkflowDecisionID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecision" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionSuccessAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionID" prCl="WorkflowDecisionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionSuccessActionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionTemplateID, WorkflowActionTemplateID" nm="PK_WorkflowDecisionSuccessExecutionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionSuccessActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="FK_WorkflowDecisionSuccessActionTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowDecisionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecisionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowDecisionSuccessActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionTemplateID" prCl="WorkflowDecisionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowDecisionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowDecisionTemplateID" nm="PK_WorkflowDecisionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsTransistionEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowDecisionTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowObjectTypeTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate" prLkCl="WorkflowObjectTypeTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowObjectTypeTemplate" oe="1" sch="dbo" zr="1"/>
        <CdTb mn="1" nm="WorkflowDecisionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowObjectTypeTemplateID" prCl="WorkflowObjectTypeTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowExecution">
      <TblOpts/>
      <Pk ClNs="WorkflowExecutionID, VersionNumber" nm="PK_WorkflowExecution"/>
      <Cl au="0" df="newid()" nm="WorkflowExecutionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowExecutionStatus">
      <TblOpts/>
      <Pk ClNs="WorkflowExecutionStatusID" nm="pkWorkflowExecutionStatus"/>
      <Cl au="1" df="" nm="WorkflowExecutionStatusID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="500" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowExecutionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowExecutionTemplateID" nm="PK_WorkflowExecutionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowExecutionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowHierarchy">
      <TblOpts/>
      <Pk ClNs="WorkflowHierarchyID" nm="pkWorkflowHierarchy"/>
      <Cl au="0" df="newid()" nm="WorkflowHierarchyID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ChildComponentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentComponentID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsTransistionStart" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsTranistionEnd" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowHierarchy_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowHierarchy" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowHierarchy_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowHierarchy" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowHierarchyTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowHierarchyTemplateID, WorkflowTransistionTemplateID" nm="PK_WorkflowHierarchyTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowHierarchyTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ChildComponentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentComponentID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsTransistionStart" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsTranistionEnd" nu="1">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_WorkflowHierarchyTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowHierarchyTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowHierarchyTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowInstance">
      <TblOpts/>
      <Pk ClNs="WorkflowInstanceID" nm="pkWorkflowInstance"/>
      <Cl au="0" df="" nm="WorkflowInstanceID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowInstance_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstance" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowInstanceExecution">
      <TblOpts/>
      <Pk ClNs="WorkflowInstanceExecutionID, WorkflowInstanceSessionID" nm="pkWorkflowInstanceExecution"/>
      <Cl au="1" df="" nm="WorkflowInstanceExecutionID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceSessionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowInstanceExecution_WorkflowInstanceSession" prLkCl="WorkflowInstanceSessionID" upAc="3">
        <PrTb mn="0" nm="WorkflowInstanceSession" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceExecution" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowInstanceSessionID" prCl="WorkflowInstanceSessionID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowInstanceExecutionHistory_WorkflowInstance" prLkCl="WorkflowInstanceID" upAc="3">
        <PrTb mn="0" nm="WorkflowInstance" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceExecution" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowInstanceID" prCl="WorkflowInstanceID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowInstanceExecutionDataItem">
      <TblOpts/>
      <Pk ClNs="WorkflowInstanceExecutionDataItemID" nm="pkWorkflowInstanceExecutionDataItem"/>
      <Cl au="1" df="" nm="WorkflowInstanceExecutionDataItemID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceExecutionID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FieldName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="300" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="FieldTypeID" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DataContent" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="DataStr" nu="1">
        <DT arr="0" ds="NVarChar(MAX)" en="" id="729" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="DataNotJsonSerialized" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventOrder" nu="1">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceExecutionStatusEventID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowInstanceExecutionDataItem_WorkflowInstanceExecutionStatusEvent" prLkCl="WorkflowInstanceExecutionStatusEventID" upAc="3">
        <PrTb mn="0" nm="WorkflowInstanceExecutionStatusEvent" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceExecutionDataItem" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowInstanceExecutionStatusEventID" prCl="WorkflowInstanceExecutionStatusEventID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowInstanceExecutionStatusEvent">
      <TblOpts/>
      <Pk ClNs="WorkflowInstanceExecutionStatusEventID" nm="pkWorkflowInstanceExecutionStatusEvent"/>
      <Cl au="1" df="" nm="WorkflowInstanceExecutionStatusEventID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventDate" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventBy" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowExecutionStatusID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="EventOrder" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceExecutionID" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceSessionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus" prLkCl="WorkflowExecutionStatusID" upAc="3">
        <PrTb mn="0" nm="WorkflowExecutionStatus" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceExecutionStatusEvent" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowExecutionStatusID" prCl="WorkflowExecutionStatusID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowInstanceExecutionStatusEvent_WorkflowInstanceExecution" prLkCl="WorkflowInstanceExecutionID" upAc="3">
        <PrTb mn="0" nm="WorkflowInstanceExecution" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceExecutionStatusEvent" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowInstanceExecutionID" prCl="WorkflowInstanceExecutionID"/>
        <ClPr cdCl="WorkflowInstanceSessionID" prCl="WorkflowInstanceSessionID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowInstanceSession">
      <TblOpts/>
      <Pk ClNs="WorkflowInstanceSessionID" nm="pkWorkflowInstanceSession"/>
      <Cl au="1" df="" nm="WorkflowInstanceSessionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowInstanceID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SessionStartedOn" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="SessionEndedOn" nu="0">
        <DT arr="0" ds="DateTime" en="" id="700" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowInstanceSession_WorkflowInstance" prLkCl="WorkflowInstanceID" upAc="3">
        <PrTb mn="0" nm="WorkflowInstance" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowInstanceSession" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowInstanceID" prCl="WorkflowInstanceID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis>
        <StPr stA="Audit" stB="WorkflowInstanceSession"/>
      </SchTrHis>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainCompleteCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowMainCompleteCondition"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainCompleteCondition_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainCompleteCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainCompleteConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowConditionTemplateID" nm="pkWorkflowMainCompleteConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainCompleteConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainExecuteCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowCommandID, VersionNumber, WorkflowID" nm="pkWorkflowMainExecuteCommand"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainExecuteCommand_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainExecuteCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainExecuteCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainExecuteCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowMainExecuteCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainExecuteCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowParameterID" nm="pkWorkflowMainParameter"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainParameter_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowMainParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainParameterTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainPostCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowCommandID" nm="pkWorkflowMainPostCommand"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainPostCommand_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPostCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainPostCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPostCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainPostCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowMainPostCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPostCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainPostCommandTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPostCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainPreCommand">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowCommandID" nm="pkWorkflowMainPreCommand"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowCommandID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainPreCommand_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPreCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainPreCommand_WorkflowCommand" prLkCl="WorkflowCommandID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommand" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPreCommand" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandID" prCl="WorkflowCommandID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainPreCommandTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowCommandTemplateID" nm="pkWorkflowMainPreCommandTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowCommandTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate" prLkCl="WorkflowCommandTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowCommandTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPreCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowCommandTemplateID" prCl="WorkflowCommandTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainPreCommandTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainPreCommandTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainRestriction">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowRestrictionID" nm="pkWorkflowMainRestriction"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowRestrictionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainRestriction_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainRestriction_WorkflowRestriction" prLkCl="WorkflowRestrictionID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestriction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionID" prCl="WorkflowRestrictionID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainRestrictionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowRestrictionTemplateID" nm="pkWorkflowMainRestrictionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainRestrictionTemplate_WorkflowRestrictionTemplate" prLkCl="WorkflowRestrictionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestrictionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionTemplateID" prCl="WorkflowRestrictionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainRestrictionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainStartCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowMainStartCondition"/>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainStartCondition_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainStartCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowMainStartConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID, WorkflowConditionTemplateID" nm="pkWorkflowMainStartConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowMainStartConditionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowMainStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowObjectType">
      <TblOpts/>
      <Pk ClNs="WorkflowObjectTypeID, WorkflowID, VersionNumber" nm="pkWorkflowObjectType"/>
      <Cl au="0" df="newid()" nm="WorkflowObjectTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeNameSpace" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeAssembly" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowObjectType_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowObjectType" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowObjectTypeTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowObjectTypeTemplateID" nm="pkWorkflowObjectTypeTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowObjectTypeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeName" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeNameSpace" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectTypeAssembly" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowObjectTypeTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowObjectTypeTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowParameterID, WorkflowID, VersionNumber" nm="pkWorkflowParameter"/>
      <Cl au="0" df="newid()" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectType" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectValue" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowParameter_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowParameterTemplateID" nm="pkWorkflowParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectType" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ObjectValue" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowParameterTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowRestriction">
      <TblOpts/>
      <Pk ClNs="WorkflowRestrictionID, VersionNumber, WorkflowID" nm="pkWorkflowRestriction"/>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowRestrictionTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowRestriction_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowRestriction_WorkflowRestrictionType" prLkCl="WorkflowRestrictionTypeID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestrictionType" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowRestriction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionTypeID" prCl="WorkflowRestrictionTypeID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowRestrictionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowRestrictionTemplateID" nm="pkWorkflowRestrictionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowRestrictionTypeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowRestrictionTemplate_WorkflowRestrictionTypeTemplate" prLkCl="WorkflowRestrictionTypeTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowRestrictionTypeTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowRestrictionTypeTemplateID" prCl="WorkflowRestrictionTypeTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowRestrictionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowRestrictionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowRestrictionType">
      <TblOpts/>
      <Pk ClNs="WorkflowRestrictionTypeID" nm="pkWorkflowRestrictionType"/>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionTypeID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowRestrictionTypeTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowRestrictionTypeTemplateID" nm="pkWorkflowRestrictionTypeTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowRestrictionTypeTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="1000" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTemplateID" nm="PK_WorkflowTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistion">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, VersionNumber" nm="pkWorkflowTransistion"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistion_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistion" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionCompleteCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, WorkflowConditionID, VersionNumber" nm="pkWorkflowTransistionCompleteCondition"/>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionCompleteCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionCompleteCondition_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionCompleteCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionCompleteConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionTemplateID, WorkflowTransistionTemplateID" nm="pkWorkflowTransistionCompleteConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionCompleteConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTransistionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionCompleteConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionHierarchy">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionHierarchyID" nm="pkWorkflowTransistionHierarchy"/>
      <Cl au="0" df="" nm="WorkflowTransistionHierarchyID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ChildComponentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentComponentID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="IsWorkflowEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchy_Workflow" prLkCl="WorkflowID" upAc="3">
        <PrTb mn="0" nm="Workflow" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchy" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchy_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchy" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ChildComponentID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate1" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchy" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ParentComponentID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis>
        <StPr stA="Audit" stB="WorkflowTransistionHierarchy"/>
      </SchTrHis>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionHierarchyTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionHierarchyTemplateID" nm="pkWorkflowTransistionHierarchyTemplate"/>
      <Cl au="0" df="" nm="WorkflowTransistionHierarchyTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ChildComponentID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="ParentComponentID" nu="1">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchyTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchyTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ChildComponentID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate11" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionHierarchyTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="ParentComponentID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis>
        <StPr stA="Audit" stB="WorkflowTransistionHierarchyTemplate"/>
      </SchTrHis>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionParameter">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, VersionNumber, WorkflowParameterID" nm="pkWorkflowTransistionParameter"/>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowParameterID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionParameter_WorkflowParameter" prLkCl="WorkflowParameterID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameter" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterID" prCl="WorkflowParameterID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionParameter_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionParameter" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionParameterTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionTemplateID, WorkflowParameterTemplateID" nm="pkWorkflowTransistionParameterTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowParameterTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionParameterTemplate_WorkflowParameterTemplate" prLkCl="WorkflowParameterTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowParameterTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowParameterTemplateID" prCl="WorkflowParameterTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionParameterTemplate_WorkflowTransistionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionParameterTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionStartCondition">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, VersionNumber, WorkflowConditionID" nm="pkWorkflowTransistionStartCondition"/>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowConditionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionStartCondition_WorkflowCondition" prLkCl="WorkflowConditionID" upAc="3">
        <PrTb mn="0" nm="WorkflowCondition" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionID" prCl="WorkflowConditionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionStartCondition_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionStartCondition" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionStartConditionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowConditionTemplateID, WorkflowTransistionTemplateID" nm="pkWorkflowTransistionStartConditionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowConditionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionStartConditionTemplate_WorkflowConditionTemplate" prLkCl="WorkflowConditionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowConditionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowConditionTemplateID" prCl="WorkflowConditionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionStartConditionTemplate_WorkflowTransistionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionStartConditionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionTemplateID" nm="PK_WorkflowTransistionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Name" nu="0">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="200" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="Description" nu="1">
        <DT arr="0" ds="NVarChar" en="" id="724" ln="2000" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowStart" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="0" nm="IsWorkflowEnd" nu="0">
        <DT arr="0" ds="Bit" en="" id="-7" ln="1" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_WorkflowTransistionTemplate_WorkflowTemplate" prLkCl="WorkflowTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTemplateID" prCl="WorkflowTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionWorkflowAction">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, VersionNumber, WorkflowActionID" nm="pkWorkflowTransistionWorkflowAction"/>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowActionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionWorkflowAction_WorkflowAction" prLkCl="WorkflowActionID" upAc="3">
        <PrTb mn="0" nm="WorkflowAction" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionID" prCl="WorkflowActionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionWorkflowAction_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowAction" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionWorkflowActionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionTemplateID, WorkflowActionTemplateID" nm="PK_WorkflowTransistionWorkflowDecisionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowActionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowActionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowActionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowActionTemplateID" prCl="WorkflowActionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTransistionWorkflowDecisionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowActionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionWorkflowDecision">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionID, WorkflowID, VersionNumber, WorkflowDecisionID" nm="pkWorkflowTransistionWorkflowDecision"/>
      <Cl au="0" df="" nm="WorkflowTransistionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowDecisionID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="" nm="WorkflowID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="fk_WorkflowTransistionWorkflowDecision_WorkflowDecision" prLkCl="WorkflowDecisionID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecision" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowDecision" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionID" prCl="WorkflowDecisionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <Fk deAc="3" nm="fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion" prLkCl="WorkflowTransistionID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistion" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowDecision" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionID" prCl="WorkflowTransistionID"/>
        <ClPr cdCl="WorkflowID" prCl="WorkflowID"/>
        <ClPr cdCl="VersionNumber" prCl="VersionNumber"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Tbl UsSo="1" nm="WorkflowTransistionWorkflowDecisionTemplate">
      <TblOpts/>
      <Pk ClNs="WorkflowTransistionTemplateID, WorkflowDecisionTemplateID" nm="PK_WorkflowTransistionWorkflowActionTemplate"/>
      <Cl au="0" df="newid()" nm="WorkflowTransistionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="newid()" nm="WorkflowDecisionTemplateID" nu="0">
        <DT arr="0" ds="UniqueID" en="" id="704" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Cl au="0" df="1" nm="VersionNumber" nu="0">
        <DT arr="0" ds="Integer" en="" id="4" ln="null" sc="null" sg="1" un="0"/>
      </Cl>
      <Fk deAc="3" nm="FK_WorkflowTransistionWorkflowActionTemplate_WorkflowDecisionTemplate" prLkCl="WorkflowDecisionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowDecisionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowDecisionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowDecisionTemplateID" prCl="WorkflowDecisionTemplateID"/>
      </Fk>
      <Fk deAc="3" nm="FK_WorkflowTransistionWorkflowActionTemplate_WorkflowTransistionWorkflowActionTemplate" prLkCl="WorkflowTransistionTemplateID" upAc="3">
        <PrTb mn="0" nm="WorkflowTransistionTemplate" oe="1" sch="dbo" zr="0"/>
        <CdTb mn="1" nm="WorkflowTransistionWorkflowDecisionTemplate" oe="0" sch="dbo" zr="1"/>
        <ClPr cdCl="WorkflowTransistionTemplateID" prCl="WorkflowTransistionTemplateID"/>
      </Fk>
      <UniqueConstraints/>
      <SchTrHis/>
    </Tbl>
    <Proc nm="[dbo].[Account_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Account_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AccountID]uniqueidentifier&#13;
,[AccountName]nvarchar (200)&#13;
,[CountryTypeID]int&#13;
,[AccountClassificationTypeID]int&#13;
,[CustomerTypeID]int&#13;
,[BusinessTypeID]int&#13;
,[PreferredContactMethodID]int&#13;
,[IndustryTypeID]int&#13;
,[AccountTypeID]int&#13;
,[AccountSubTypeID]int&#13;
,[Description]nvarchar (max)&#13;
,[EmailAddress1]nvarchar (max)&#13;
,[EmailAddress2]nvarchar (max)&#13;
,[EmailAddress3]nvarchar (max)&#13;
,[DoNotPhone]bit&#13;
,[DoNotEmail]bit&#13;
,[Fax]nvarchar (200)&#13;
,[IsPrivate]bit&#13;
,[Telephone1]nvarchar (200)&#13;
,[Telephone2]nvarchar (200)&#13;
,[Telephone3]nvarchar (200)&#13;
,[StateTypeID]int&#13;
,[OwnerID]uniqueidentifier&#13;
,[OrganisationUnitID]int&#13;
,[PrimaryContactID]uniqueidentifier&#13;
,[ParentAccountID]uniqueidentifier&#13;
,[MasterID]uniqueidentifier&#13;
,[DoNotTelephone]bit&#13;
,[MobileNumber1]nvarchar (200)&#13;
,[MobileNumber2]nvarchar (200)&#13;
,[MobileNumber3]nvarchar (200)&#13;
,[ParentID]uniqueidentifier&#13;
,[AccountCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vAccount_RowHistory]&#13;
	WHERE		[AccountID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AccountID]&#13;
			,cast([AccountName] as varchar(50)) as [AccountName]&#13;
			,cast([CountryTypeID] as varchar(50)) as [CountryTypeID]&#13;
			,cast([AccountClassificationTypeID] as varchar(50)) as [AccountClassificationTypeID]&#13;
			,cast([CustomerTypeID] as varchar(50)) as [CustomerTypeID]&#13;
			,cast([BusinessTypeID] as varchar(50)) as [BusinessTypeID]&#13;
			,cast([PreferredContactMethodID] as varchar(50)) as [PreferredContactMethodID]&#13;
			,cast([IndustryTypeID] as varchar(50)) as [IndustryTypeID]&#13;
			,cast([AccountTypeID] as varchar(50)) as [AccountTypeID]&#13;
			,cast([AccountSubTypeID] as varchar(50)) as [AccountSubTypeID]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([EmailAddress1] as varchar(50)) as [EmailAddress1]&#13;
			,cast([EmailAddress2] as varchar(50)) as [EmailAddress2]&#13;
			,cast([EmailAddress3] as varchar(50)) as [EmailAddress3]&#13;
			,cast([DoNotPhone] as varchar(50)) as [DoNotPhone]&#13;
			,cast([DoNotEmail] as varchar(50)) as [DoNotEmail]&#13;
			,cast([Fax] as varchar(50)) as [Fax]&#13;
			,cast([IsPrivate] as varchar(50)) as [IsPrivate]&#13;
			,cast([Telephone1] as varchar(50)) as [Telephone1]&#13;
			,cast([Telephone2] as varchar(50)) as [Telephone2]&#13;
			,cast([Telephone3] as varchar(50)) as [Telephone3]&#13;
			,cast([StateTypeID] as varchar(50)) as [StateTypeID]&#13;
			,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
			,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
			,cast([PrimaryContactID] as varchar(50)) as [PrimaryContactID]&#13;
			,cast([ParentAccountID] as varchar(50)) as [ParentAccountID]&#13;
			,cast([MasterID] as varchar(50)) as [MasterID]&#13;
			,cast([DoNotTelephone] as varchar(50)) as [DoNotTelephone]&#13;
			,cast([MobileNumber1] as varchar(50)) as [MobileNumber1]&#13;
			,cast([MobileNumber2] as varchar(50)) as [MobileNumber2]&#13;
			,cast([MobileNumber3] as varchar(50)) as [MobileNumber3]&#13;
			,cast([ParentID] as varchar(50)) as [ParentID]&#13;
			,cast([AccountCategoryID] as varchar(50)) as [AccountCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Account]&#13;
	WHERE		[AccountID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AccountID] , PreviousVersion.[AccountID])&#13;
						,isnull(NextVersion.[AccountName] , PreviousVersion.[AccountName])&#13;
						,isnull(NextVersion.[CountryTypeID] , PreviousVersion.[CountryTypeID])&#13;
						,isnull(NextVersion.[AccountClassificationTypeID] , PreviousVersion.[AccountClassificationTypeID])&#13;
						,isnull(NextVersion.[CustomerTypeID] , PreviousVersion.[CustomerTypeID])&#13;
						,isnull(NextVersion.[BusinessTypeID] , PreviousVersion.[BusinessTypeID])&#13;
						,isnull(NextVersion.[PreferredContactMethodID] , PreviousVersion.[PreferredContactMethodID])&#13;
						,isnull(NextVersion.[IndustryTypeID] , PreviousVersion.[IndustryTypeID])&#13;
						,isnull(NextVersion.[AccountTypeID] , PreviousVersion.[AccountTypeID])&#13;
						,isnull(NextVersion.[AccountSubTypeID] , PreviousVersion.[AccountSubTypeID])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[EmailAddress1] , PreviousVersion.[EmailAddress1])&#13;
						,isnull(NextVersion.[EmailAddress2] , PreviousVersion.[EmailAddress2])&#13;
						,isnull(NextVersion.[EmailAddress3] , PreviousVersion.[EmailAddress3])&#13;
						,isnull(NextVersion.[DoNotPhone] , PreviousVersion.[DoNotPhone])&#13;
						,isnull(NextVersion.[DoNotEmail] , PreviousVersion.[DoNotEmail])&#13;
						,isnull(NextVersion.[Fax] , PreviousVersion.[Fax])&#13;
						,isnull(NextVersion.[IsPrivate] , PreviousVersion.[IsPrivate])&#13;
						,isnull(NextVersion.[Telephone1] , PreviousVersion.[Telephone1])&#13;
						,isnull(NextVersion.[Telephone2] , PreviousVersion.[Telephone2])&#13;
						,isnull(NextVersion.[Telephone3] , PreviousVersion.[Telephone3])&#13;
						,isnull(NextVersion.[StateTypeID] , PreviousVersion.[StateTypeID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[PrimaryContactID] , PreviousVersion.[PrimaryContactID])&#13;
						,isnull(NextVersion.[ParentAccountID] , PreviousVersion.[ParentAccountID])&#13;
						,isnull(NextVersion.[MasterID] , PreviousVersion.[MasterID])&#13;
						,isnull(NextVersion.[DoNotTelephone] , PreviousVersion.[DoNotTelephone])&#13;
						,isnull(NextVersion.[MobileNumber1] , PreviousVersion.[MobileNumber1])&#13;
						,isnull(NextVersion.[MobileNumber2] , PreviousVersion.[MobileNumber2])&#13;
						,isnull(NextVersion.[MobileNumber3] , PreviousVersion.[MobileNumber3])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[AccountCategoryID] , PreviousVersion.[AccountCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AccountID] = NextVersion.[AccountID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AccountID]&#13;
			, nullif([AccountName],'&lt;-null-&gt;')&#13;
			, nullif([CountryTypeID],'&lt;-null-&gt;')&#13;
			, nullif([AccountClassificationTypeID],'&lt;-null-&gt;')&#13;
			, nullif([CustomerTypeID],'&lt;-null-&gt;')&#13;
			, nullif([BusinessTypeID],'&lt;-null-&gt;')&#13;
			, nullif([PreferredContactMethodID],'&lt;-null-&gt;')&#13;
			, nullif([IndustryTypeID],'&lt;-null-&gt;')&#13;
			, nullif([AccountTypeID],'&lt;-null-&gt;')&#13;
			, nullif([AccountSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress1],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress2],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress3],'&lt;-null-&gt;')&#13;
			, nullif([DoNotPhone],'&lt;-null-&gt;')&#13;
			, nullif([DoNotEmail],'&lt;-null-&gt;')&#13;
			, nullif([Fax],'&lt;-null-&gt;')&#13;
			, nullif([IsPrivate],'&lt;-null-&gt;')&#13;
			, nullif([Telephone1],'&lt;-null-&gt;')&#13;
			, nullif([Telephone2],'&lt;-null-&gt;')&#13;
			, nullif([Telephone3],'&lt;-null-&gt;')&#13;
			, nullif([StateTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OwnerID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationUnitID],'&lt;-null-&gt;')&#13;
			, nullif([PrimaryContactID],'&lt;-null-&gt;')&#13;
			, nullif([ParentAccountID],'&lt;-null-&gt;')&#13;
			, nullif([MasterID],'&lt;-null-&gt;')&#13;
			, nullif([DoNotTelephone],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber1],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber2],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber3],'&lt;-null-&gt;')&#13;
			, nullif([ParentID],'&lt;-null-&gt;')&#13;
			, nullif([AccountCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Account_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Account_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AccountID]uniqueidentifier&#13;
,[AccountName]nvarchar (200)&#13;
,[CountryTypeID]int&#13;
,[AccountClassificationTypeID]int&#13;
,[CustomerTypeID]int&#13;
,[BusinessTypeID]int&#13;
,[PreferredContactMethodID]int&#13;
,[IndustryTypeID]int&#13;
,[AccountTypeID]int&#13;
,[AccountSubTypeID]int&#13;
,[Description]nvarchar (max)&#13;
,[EmailAddress1]nvarchar (max)&#13;
,[EmailAddress2]nvarchar (max)&#13;
,[EmailAddress3]nvarchar (max)&#13;
,[DoNotPhone]bit&#13;
,[DoNotEmail]bit&#13;
,[Fax]nvarchar (200)&#13;
,[IsPrivate]bit&#13;
,[Telephone1]nvarchar (200)&#13;
,[Telephone2]nvarchar (200)&#13;
,[Telephone3]nvarchar (200)&#13;
,[StateTypeID]int&#13;
,[OwnerID]uniqueidentifier&#13;
,[OrganisationUnitID]int&#13;
,[PrimaryContactID]uniqueidentifier&#13;
,[ParentAccountID]uniqueidentifier&#13;
,[MasterID]uniqueidentifier&#13;
,[DoNotTelephone]bit&#13;
,[MobileNumber1]nvarchar (200)&#13;
,[MobileNumber2]nvarchar (200)&#13;
,[MobileNumber3]nvarchar (200)&#13;
,[ParentID]uniqueidentifier&#13;
,[AccountCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AccountID] varchar(50)&#13;
	,[AccountName] varchar(50)&#13;
	,[CountryTypeID] varchar(50)&#13;
	,[AccountClassificationTypeID] varchar(50)&#13;
	,[CustomerTypeID] varchar(50)&#13;
	,[BusinessTypeID] varchar(50)&#13;
	,[PreferredContactMethodID] varchar(50)&#13;
	,[IndustryTypeID] varchar(50)&#13;
	,[AccountTypeID] varchar(50)&#13;
	,[AccountSubTypeID] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[EmailAddress1] varchar(50)&#13;
	,[EmailAddress2] varchar(50)&#13;
	,[EmailAddress3] varchar(50)&#13;
	,[DoNotPhone] varchar(50)&#13;
	,[DoNotEmail] varchar(50)&#13;
	,[Fax] varchar(50)&#13;
	,[IsPrivate] varchar(50)&#13;
	,[Telephone1] varchar(50)&#13;
	,[Telephone2] varchar(50)&#13;
	,[Telephone3] varchar(50)&#13;
	,[StateTypeID] varchar(50)&#13;
	,[OwnerID] varchar(50)&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[PrimaryContactID] varchar(50)&#13;
	,[ParentAccountID] varchar(50)&#13;
	,[MasterID] varchar(50)&#13;
	,[DoNotTelephone] varchar(50)&#13;
	,[MobileNumber1] varchar(50)&#13;
	,[MobileNumber2] varchar(50)&#13;
	,[MobileNumber3] varchar(50)&#13;
	,[ParentID] varchar(50)&#13;
	,[AccountCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AccountID]&#13;
			,[AccountName]&#13;
			,[CountryTypeID]&#13;
			,[AccountClassificationTypeID]&#13;
			,[CustomerTypeID]&#13;
			,[BusinessTypeID]&#13;
			,[PreferredContactMethodID]&#13;
			,[IndustryTypeID]&#13;
			,[AccountTypeID]&#13;
			,[AccountSubTypeID]&#13;
			,[Description]&#13;
			,[EmailAddress1]&#13;
			,[EmailAddress2]&#13;
			,[EmailAddress3]&#13;
			,[DoNotPhone]&#13;
			,[DoNotEmail]&#13;
			,[Fax]&#13;
			,[IsPrivate]&#13;
			,[Telephone1]&#13;
			,[Telephone2]&#13;
			,[Telephone3]&#13;
			,[StateTypeID]&#13;
			,[OwnerID]&#13;
			,[OrganisationUnitID]&#13;
			,[PrimaryContactID]&#13;
			,[ParentAccountID]&#13;
			,[MasterID]&#13;
			,[DoNotTelephone]&#13;
			,[MobileNumber1]&#13;
			,[MobileNumber2]&#13;
			,[MobileNumber3]&#13;
			,[ParentID]&#13;
			,[AccountCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vAccount_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AccountID] = [dbo].[Account].[AccountID]&#13;
				) as [RowVersion]&#13;
				,[AccountID]&#13;
				,cast([AccountName] as varchar(50)) as [AccountName]&#13;
				,cast([CountryTypeID] as varchar(50)) as [CountryTypeID]&#13;
				,cast([AccountClassificationTypeID] as varchar(50)) as [AccountClassificationTypeID]&#13;
				,cast([CustomerTypeID] as varchar(50)) as [CustomerTypeID]&#13;
				,cast([BusinessTypeID] as varchar(50)) as [BusinessTypeID]&#13;
				,cast([PreferredContactMethodID] as varchar(50)) as [PreferredContactMethodID]&#13;
				,cast([IndustryTypeID] as varchar(50)) as [IndustryTypeID]&#13;
				,cast([AccountTypeID] as varchar(50)) as [AccountTypeID]&#13;
				,cast([AccountSubTypeID] as varchar(50)) as [AccountSubTypeID]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([EmailAddress1] as varchar(50)) as [EmailAddress1]&#13;
				,cast([EmailAddress2] as varchar(50)) as [EmailAddress2]&#13;
				,cast([EmailAddress3] as varchar(50)) as [EmailAddress3]&#13;
				,cast([DoNotPhone] as varchar(50)) as [DoNotPhone]&#13;
				,cast([DoNotEmail] as varchar(50)) as [DoNotEmail]&#13;
				,cast([Fax] as varchar(50)) as [Fax]&#13;
				,cast([IsPrivate] as varchar(50)) as [IsPrivate]&#13;
				,cast([Telephone1] as varchar(50)) as [Telephone1]&#13;
				,cast([Telephone2] as varchar(50)) as [Telephone2]&#13;
				,cast([Telephone3] as varchar(50)) as [Telephone3]&#13;
				,cast([StateTypeID] as varchar(50)) as [StateTypeID]&#13;
				,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
				,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
				,cast([PrimaryContactID] as varchar(50)) as [PrimaryContactID]&#13;
				,cast([ParentAccountID] as varchar(50)) as [ParentAccountID]&#13;
				,cast([MasterID] as varchar(50)) as [MasterID]&#13;
				,cast([DoNotTelephone] as varchar(50)) as [DoNotTelephone]&#13;
				,cast([MobileNumber1] as varchar(50)) as [MobileNumber1]&#13;
				,cast([MobileNumber2] as varchar(50)) as [MobileNumber2]&#13;
				,cast([MobileNumber3] as varchar(50)) as [MobileNumber3]&#13;
				,cast([ParentID] as varchar(50)) as [ParentID]&#13;
				,cast([AccountCategoryID] as varchar(50)) as [AccountCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Account]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AccountID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AccountID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AccountID]&#13;
			,RowHistoryExtract.[AccountName]&#13;
			,RowHistoryExtract.[CountryTypeID]&#13;
			,RowHistoryExtract.[AccountClassificationTypeID]&#13;
			,RowHistoryExtract.[CustomerTypeID]&#13;
			,RowHistoryExtract.[BusinessTypeID]&#13;
			,RowHistoryExtract.[PreferredContactMethodID]&#13;
			,RowHistoryExtract.[IndustryTypeID]&#13;
			,RowHistoryExtract.[AccountTypeID]&#13;
			,RowHistoryExtract.[AccountSubTypeID]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[EmailAddress1]&#13;
			,RowHistoryExtract.[EmailAddress2]&#13;
			,RowHistoryExtract.[EmailAddress3]&#13;
			,RowHistoryExtract.[DoNotPhone]&#13;
			,RowHistoryExtract.[DoNotEmail]&#13;
			,RowHistoryExtract.[Fax]&#13;
			,RowHistoryExtract.[IsPrivate]&#13;
			,RowHistoryExtract.[Telephone1]&#13;
			,RowHistoryExtract.[Telephone2]&#13;
			,RowHistoryExtract.[Telephone3]&#13;
			,RowHistoryExtract.[StateTypeID]&#13;
			,RowHistoryExtract.[OwnerID]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[PrimaryContactID]&#13;
			,RowHistoryExtract.[ParentAccountID]&#13;
			,RowHistoryExtract.[MasterID]&#13;
			,RowHistoryExtract.[DoNotTelephone]&#13;
			,RowHistoryExtract.[MobileNumber1]&#13;
			,RowHistoryExtract.[MobileNumber2]&#13;
			,RowHistoryExtract.[MobileNumber3]&#13;
			,RowHistoryExtract.[ParentID]&#13;
			,RowHistoryExtract.[AccountCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AccountID] = MostRecentRows.[AccountID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AccountID] , PreviousVersion.[AccountID])&#13;
						,isnull(NextVersion.[AccountName] , PreviousVersion.[AccountName])&#13;
						,isnull(NextVersion.[CountryTypeID] , PreviousVersion.[CountryTypeID])&#13;
						,isnull(NextVersion.[AccountClassificationTypeID] , PreviousVersion.[AccountClassificationTypeID])&#13;
						,isnull(NextVersion.[CustomerTypeID] , PreviousVersion.[CustomerTypeID])&#13;
						,isnull(NextVersion.[BusinessTypeID] , PreviousVersion.[BusinessTypeID])&#13;
						,isnull(NextVersion.[PreferredContactMethodID] , PreviousVersion.[PreferredContactMethodID])&#13;
						,isnull(NextVersion.[IndustryTypeID] , PreviousVersion.[IndustryTypeID])&#13;
						,isnull(NextVersion.[AccountTypeID] , PreviousVersion.[AccountTypeID])&#13;
						,isnull(NextVersion.[AccountSubTypeID] , PreviousVersion.[AccountSubTypeID])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[EmailAddress1] , PreviousVersion.[EmailAddress1])&#13;
						,isnull(NextVersion.[EmailAddress2] , PreviousVersion.[EmailAddress2])&#13;
						,isnull(NextVersion.[EmailAddress3] , PreviousVersion.[EmailAddress3])&#13;
						,isnull(NextVersion.[DoNotPhone] , PreviousVersion.[DoNotPhone])&#13;
						,isnull(NextVersion.[DoNotEmail] , PreviousVersion.[DoNotEmail])&#13;
						,isnull(NextVersion.[Fax] , PreviousVersion.[Fax])&#13;
						,isnull(NextVersion.[IsPrivate] , PreviousVersion.[IsPrivate])&#13;
						,isnull(NextVersion.[Telephone1] , PreviousVersion.[Telephone1])&#13;
						,isnull(NextVersion.[Telephone2] , PreviousVersion.[Telephone2])&#13;
						,isnull(NextVersion.[Telephone3] , PreviousVersion.[Telephone3])&#13;
						,isnull(NextVersion.[StateTypeID] , PreviousVersion.[StateTypeID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[PrimaryContactID] , PreviousVersion.[PrimaryContactID])&#13;
						,isnull(NextVersion.[ParentAccountID] , PreviousVersion.[ParentAccountID])&#13;
						,isnull(NextVersion.[MasterID] , PreviousVersion.[MasterID])&#13;
						,isnull(NextVersion.[DoNotTelephone] , PreviousVersion.[DoNotTelephone])&#13;
						,isnull(NextVersion.[MobileNumber1] , PreviousVersion.[MobileNumber1])&#13;
						,isnull(NextVersion.[MobileNumber2] , PreviousVersion.[MobileNumber2])&#13;
						,isnull(NextVersion.[MobileNumber3] , PreviousVersion.[MobileNumber3])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[AccountCategoryID] , PreviousVersion.[AccountCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AccountID] = NextVersion.[AccountID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AccountID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AccountID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[AccountID]&#13;
			,nullif(rh.[AccountName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[CountryTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AccountClassificationTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[CustomerTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[BusinessTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PreferredContactMethodID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IndustryTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AccountTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AccountSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotPhone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotEmail],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Fax],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsPrivate],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[StateTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OwnerID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationUnitID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PrimaryContactID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentAccountID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MasterID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotTelephone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AccountCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AccountID] = roi.[AccountID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AccountID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Attachment_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Attachment_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AttachmentID]uniqueidentifier&#13;
,[MimeType]nvarchar (512)&#13;
,[Body]nvarchar (max)&#13;
,[Subject]nvarchar (4000)&#13;
,[FileName]nvarchar (4000)&#13;
,[FileSize]int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vAttachment_RowHistory]&#13;
	WHERE		[AttachmentID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AttachmentID]&#13;
			,cast([MimeType] as varchar(50)) as [MimeType]&#13;
			,cast([Body] as varchar(50)) as [Body]&#13;
			,cast([Subject] as varchar(50)) as [Subject]&#13;
			,cast([FileName] as varchar(50)) as [FileName]&#13;
			,cast([FileSize] as varchar(50)) as [FileSize]&#13;
			,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Attachment]&#13;
	WHERE		[AttachmentID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentID] , PreviousVersion.[AttachmentID])&#13;
						,isnull(NextVersion.[MimeType] , PreviousVersion.[MimeType])&#13;
						,isnull(NextVersion.[Body] , PreviousVersion.[Body])&#13;
						,isnull(NextVersion.[Subject] , PreviousVersion.[Subject])&#13;
						,isnull(NextVersion.[FileName] , PreviousVersion.[FileName])&#13;
						,isnull(NextVersion.[FileSize] , PreviousVersion.[FileSize])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentID] = NextVersion.[AttachmentID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentID]&#13;
			, nullif([MimeType],'&lt;-null-&gt;')&#13;
			, nullif([Body],'&lt;-null-&gt;')&#13;
			, nullif([Subject],'&lt;-null-&gt;')&#13;
			, nullif([FileName],'&lt;-null-&gt;')&#13;
			, nullif([FileSize],'&lt;-null-&gt;')&#13;
			, nullif([AttachmentDetailID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Attachment_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Attachment_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AttachmentID]uniqueidentifier&#13;
,[MimeType]nvarchar (512)&#13;
,[Body]nvarchar (max)&#13;
,[Subject]nvarchar (4000)&#13;
,[FileName]nvarchar (4000)&#13;
,[FileSize]int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AttachmentID] varchar(50)&#13;
	,[MimeType] varchar(50)&#13;
	,[Body] varchar(50)&#13;
	,[Subject] varchar(50)&#13;
	,[FileName] varchar(50)&#13;
	,[FileSize] varchar(50)&#13;
	,[AttachmentDetailID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentID]&#13;
			,[MimeType]&#13;
			,[Body]&#13;
			,[Subject]&#13;
			,[FileName]&#13;
			,[FileSize]&#13;
			,[AttachmentDetailID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vAttachment_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AttachmentID] = [dbo].[Attachment].[AttachmentID]&#13;
				) as [RowVersion]&#13;
				,[AttachmentID]&#13;
				,cast([MimeType] as varchar(50)) as [MimeType]&#13;
				,cast([Body] as varchar(50)) as [Body]&#13;
				,cast([Subject] as varchar(50)) as [Subject]&#13;
				,cast([FileName] as varchar(50)) as [FileName]&#13;
				,cast([FileSize] as varchar(50)) as [FileSize]&#13;
				,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Attachment]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AttachmentID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AttachmentID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AttachmentID]&#13;
			,RowHistoryExtract.[MimeType]&#13;
			,RowHistoryExtract.[Body]&#13;
			,RowHistoryExtract.[Subject]&#13;
			,RowHistoryExtract.[FileName]&#13;
			,RowHistoryExtract.[FileSize]&#13;
			,RowHistoryExtract.[AttachmentDetailID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AttachmentID] = MostRecentRows.[AttachmentID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentID] , PreviousVersion.[AttachmentID])&#13;
						,isnull(NextVersion.[MimeType] , PreviousVersion.[MimeType])&#13;
						,isnull(NextVersion.[Body] , PreviousVersion.[Body])&#13;
						,isnull(NextVersion.[Subject] , PreviousVersion.[Subject])&#13;
						,isnull(NextVersion.[FileName] , PreviousVersion.[FileName])&#13;
						,isnull(NextVersion.[FileSize] , PreviousVersion.[FileSize])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentID] = NextVersion.[AttachmentID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AttachmentID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AttachmentID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[AttachmentID]&#13;
			,nullif(rh.[MimeType],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Body],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Subject],'&lt;-null-&gt;')&#13;
			,nullif(rh.[FileName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[FileSize],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AttachmentDetailID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AttachmentID] = roi.[AttachmentID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AttachmentID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetail_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[AttachmentDetail_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[AttachmentTypeID]int&#13;
,[AttachmentSubTypeID]int&#13;
,[AttachmentCategoryID]int&#13;
,[RepositoryMapID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vAttachmentDetail_RowHistory]&#13;
	WHERE		[AttachmentDetailID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AttachmentDetailID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([AttachmentTypeID] as varchar(50)) as [AttachmentTypeID]&#13;
			,cast([AttachmentSubTypeID] as varchar(50)) as [AttachmentSubTypeID]&#13;
			,cast([AttachmentCategoryID] as varchar(50)) as [AttachmentCategoryID]&#13;
			,cast([RepositoryMapID] as varchar(50)) as [RepositoryMapID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[AttachmentDetail]&#13;
	WHERE		[AttachmentDetailID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[AttachmentTypeID] , PreviousVersion.[AttachmentTypeID])&#13;
						,isnull(NextVersion.[AttachmentSubTypeID] , PreviousVersion.[AttachmentSubTypeID])&#13;
						,isnull(NextVersion.[AttachmentCategoryID] , PreviousVersion.[AttachmentCategoryID])&#13;
						,isnull(NextVersion.[RepositoryMapID] , PreviousVersion.[RepositoryMapID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailID] = NextVersion.[AttachmentDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentDetailID]&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([AttachmentTypeID],'&lt;-null-&gt;')&#13;
			, nullif([AttachmentSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([AttachmentCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([RepositoryMapID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetail_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[AttachmentDetail_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[AttachmentTypeID]int&#13;
,[AttachmentSubTypeID]int&#13;
,[AttachmentCategoryID]int&#13;
,[RepositoryMapID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AttachmentDetailID] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[AttachmentTypeID] varchar(50)&#13;
	,[AttachmentSubTypeID] varchar(50)&#13;
	,[AttachmentCategoryID] varchar(50)&#13;
	,[RepositoryMapID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentDetailID]&#13;
			,[OrganisationID]&#13;
			,[AttachmentTypeID]&#13;
			,[AttachmentSubTypeID]&#13;
			,[AttachmentCategoryID]&#13;
			,[RepositoryMapID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vAttachmentDetail_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AttachmentDetailID] = [dbo].[AttachmentDetail].[AttachmentDetailID]&#13;
				) as [RowVersion]&#13;
				,[AttachmentDetailID]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([AttachmentTypeID] as varchar(50)) as [AttachmentTypeID]&#13;
				,cast([AttachmentSubTypeID] as varchar(50)) as [AttachmentSubTypeID]&#13;
				,cast([AttachmentCategoryID] as varchar(50)) as [AttachmentCategoryID]&#13;
				,cast([RepositoryMapID] as varchar(50)) as [RepositoryMapID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[AttachmentDetail]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AttachmentDetailID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AttachmentDetailID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AttachmentDetailID]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[AttachmentTypeID]&#13;
			,RowHistoryExtract.[AttachmentSubTypeID]&#13;
			,RowHistoryExtract.[AttachmentCategoryID]&#13;
			,RowHistoryExtract.[RepositoryMapID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AttachmentDetailID] = MostRecentRows.[AttachmentDetailID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[AttachmentTypeID] , PreviousVersion.[AttachmentTypeID])&#13;
						,isnull(NextVersion.[AttachmentSubTypeID] , PreviousVersion.[AttachmentSubTypeID])&#13;
						,isnull(NextVersion.[AttachmentCategoryID] , PreviousVersion.[AttachmentCategoryID])&#13;
						,isnull(NextVersion.[RepositoryMapID] , PreviousVersion.[RepositoryMapID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailID] = NextVersion.[AttachmentDetailID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AttachmentDetailID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AttachmentDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[AttachmentDetailID]&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AttachmentTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AttachmentSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AttachmentCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[RepositoryMapID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AttachmentDetailID] = roi.[AttachmentDetailID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AttachmentDetailID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetailGroup_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[AttachmentDetailGroup_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AttachmentDetailGroupID]int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vAttachmentDetailGroup_RowHistory]&#13;
	WHERE		[AttachmentDetailGroupID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AttachmentDetailGroupID]&#13;
			,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
			,cast([OrganisationGroupID] as varchar(50)) as [OrganisationGroupID]&#13;
			,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[AttachmentDetailGroup]&#13;
	WHERE		[AttachmentDetailGroupID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailGroupID] , PreviousVersion.[AttachmentDetailGroupID])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailGroupID] = NextVersion.[AttachmentDetailGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentDetailGroupID]&#13;
			, nullif([AttachmentDetailID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationGroupID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetailGroup_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[AttachmentDetailGroup_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AttachmentDetailGroupID]int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AttachmentDetailGroupID] varchar(50)&#13;
	,[AttachmentDetailID] varchar(50)&#13;
	,[OrganisationGroupID] varchar(50)&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentDetailGroupID]&#13;
			,[AttachmentDetailID]&#13;
			,[OrganisationGroupID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vAttachmentDetailGroup_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AttachmentDetailGroupID] = [dbo].[AttachmentDetailGroup].[AttachmentDetailGroupID]&#13;
				) as [RowVersion]&#13;
				,[AttachmentDetailGroupID]&#13;
				,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
				,cast([OrganisationGroupID] as varchar(50)) as [OrganisationGroupID]&#13;
				,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[AttachmentDetailGroup]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AttachmentDetailGroupID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AttachmentDetailGroupID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AttachmentDetailGroupID]&#13;
			,RowHistoryExtract.[AttachmentDetailID]&#13;
			,RowHistoryExtract.[OrganisationGroupID]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AttachmentDetailGroupID] = MostRecentRows.[AttachmentDetailGroupID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailGroupID] , PreviousVersion.[AttachmentDetailGroupID])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailGroupID] = NextVersion.[AttachmentDetailGroupID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AttachmentDetailGroupID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AttachmentDetailGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[AttachmentDetailGroupID]&#13;
			,nullif(rh.[AttachmentDetailID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AttachmentDetailGroupID] = roi.[AttachmentDetailGroupID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AttachmentDetailGroupID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetailRole_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[AttachmentDetailRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[AttachmentDetailRoleID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vAttachmentDetailRole_RowHistory]&#13;
	WHERE		[AttachmentDetailRoleID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AttachmentDetailRoleID]&#13;
			,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
			,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
			,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[AttachmentDetailRole]&#13;
	WHERE		[AttachmentDetailRoleID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailRoleID] , PreviousVersion.[AttachmentDetailRoleID])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailRoleID] = NextVersion.[AttachmentDetailRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			, nullif([AttachmentDetailID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationRoleID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,[AttachmentDetailRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[AttachmentDetailRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[AttachmentDetailRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AttachmentDetailID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[AttachmentDetailRoleID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AttachmentDetailRoleID] varchar(50)&#13;
	,[AttachmentDetailID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AttachmentDetailRoleID]&#13;
			,[AttachmentDetailID]&#13;
			,[OrganisationRoleID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vAttachmentDetailRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AttachmentDetailRoleID] = [dbo].[AttachmentDetailRole].[AttachmentDetailRoleID]&#13;
				) as [RowVersion]&#13;
				,[AttachmentDetailRoleID]&#13;
				,cast([AttachmentDetailID] as varchar(50)) as [AttachmentDetailID]&#13;
				,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
				,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[AttachmentDetailRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AttachmentDetailRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AttachmentDetailRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AttachmentDetailRoleID]&#13;
			,RowHistoryExtract.[AttachmentDetailID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AttachmentDetailRoleID] = MostRecentRows.[AttachmentDetailRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AttachmentDetailRoleID] , PreviousVersion.[AttachmentDetailRoleID])&#13;
						,isnull(NextVersion.[AttachmentDetailID] , PreviousVersion.[AttachmentDetailID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AttachmentDetailRoleID] = NextVersion.[AttachmentDetailRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AttachmentDetailRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AttachmentDetailRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			nullif(rh.[AttachmentDetailID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,rh.[AttachmentDetailRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AttachmentDetailRoleID] = roi.[AttachmentDetailRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AttachmentDetailRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ClassificationType_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ClassificationType_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ClassificationTypeID]int&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (max)&#13;
,[ClassificationTypeCategoryID]int&#13;
,[ParentClassificationTypeCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vClassificationType_RowHistory]&#13;
	WHERE		[ClassificationTypeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ClassificationTypeID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([ClassificationTypeCategoryID] as varchar(50)) as [ClassificationTypeCategoryID]&#13;
			,cast([ParentClassificationTypeCategoryID] as varchar(50)) as [ParentClassificationTypeCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ClassificationType]&#13;
	WHERE		[ClassificationTypeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ClassificationTypeID] , PreviousVersion.[ClassificationTypeID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[ClassificationTypeCategoryID] , PreviousVersion.[ClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[ParentClassificationTypeCategoryID] , PreviousVersion.[ParentClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ClassificationTypeID] = NextVersion.[ClassificationTypeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ClassificationTypeID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([ClassificationTypeCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([ParentClassificationTypeCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ClassificationType_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ClassificationType_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ClassificationTypeID]int&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (max)&#13;
,[ClassificationTypeCategoryID]int&#13;
,[ParentClassificationTypeCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ClassificationTypeID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[ClassificationTypeCategoryID] varchar(50)&#13;
	,[ParentClassificationTypeCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ClassificationTypeID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[ClassificationTypeCategoryID]&#13;
			,[ParentClassificationTypeCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vClassificationType_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ClassificationTypeID] = [dbo].[ClassificationType].[ClassificationTypeID]&#13;
				) as [RowVersion]&#13;
				,[ClassificationTypeID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([ClassificationTypeCategoryID] as varchar(50)) as [ClassificationTypeCategoryID]&#13;
				,cast([ParentClassificationTypeCategoryID] as varchar(50)) as [ParentClassificationTypeCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ClassificationType]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ClassificationTypeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ClassificationTypeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ClassificationTypeID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[ClassificationTypeCategoryID]&#13;
			,RowHistoryExtract.[ParentClassificationTypeCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ClassificationTypeID] = MostRecentRows.[ClassificationTypeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ClassificationTypeID] , PreviousVersion.[ClassificationTypeID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[ClassificationTypeCategoryID] , PreviousVersion.[ClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[ParentClassificationTypeCategoryID] , PreviousVersion.[ParentClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ClassificationTypeID] = NextVersion.[ClassificationTypeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ClassificationTypeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ClassificationTypeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ClassificationTypeID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ClassificationTypeCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentClassificationTypeCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ClassificationTypeID] = roi.[ClassificationTypeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ClassificationTypeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ClassificationTypeCategory_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ClassificationTypeCategory_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ClassificationTypeCategoryID]int&#13;
,[Name]varchar (50)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vClassificationTypeCategory_RowHistory]&#13;
	WHERE		[ClassificationTypeCategoryID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ClassificationTypeCategoryID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ClassificationTypeCategory]&#13;
	WHERE		[ClassificationTypeCategoryID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ClassificationTypeCategoryID] , PreviousVersion.[ClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ClassificationTypeCategoryID] = NextVersion.[ClassificationTypeCategoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ClassificationTypeCategoryID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ClassificationTypeCategory_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ClassificationTypeCategory_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ClassificationTypeCategoryID]int&#13;
,[Name]varchar (50)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ClassificationTypeCategoryID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ClassificationTypeCategoryID]&#13;
			,[Name]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vClassificationTypeCategory_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ClassificationTypeCategoryID] = [dbo].[ClassificationTypeCategory].[ClassificationTypeCategoryID]&#13;
				) as [RowVersion]&#13;
				,[ClassificationTypeCategoryID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ClassificationTypeCategory]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ClassificationTypeCategoryID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ClassificationTypeCategoryID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ClassificationTypeCategoryID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ClassificationTypeCategoryID] = MostRecentRows.[ClassificationTypeCategoryID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ClassificationTypeCategoryID] , PreviousVersion.[ClassificationTypeCategoryID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ClassificationTypeCategoryID] = NextVersion.[ClassificationTypeCategoryID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ClassificationTypeCategoryID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ClassificationTypeCategoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ClassificationTypeCategoryID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ClassificationTypeCategoryID] = roi.[ClassificationTypeCategoryID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ClassificationTypeCategoryID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Contact_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Contact_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ContactID]uniqueidentifier&#13;
,[ContactName]nvarchar (200)&#13;
,[MasterContactID]uniqueidentifier&#13;
,[ParentID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[CustomerTypeID]nvarchar (max)&#13;
,[PreferredContactMethodID]int&#13;
,[IsBackOfficeCustomer]bit&#13;
,[Salutation]nvarchar (200)&#13;
,[JobTitle]nvarchar (200)&#13;
,[FirstName]nvarchar (200)&#13;
,[Department]nvarchar (200)&#13;
,[NickName]nvarchar (200)&#13;
,[MiddleName]nvarchar (200)&#13;
,[LastName]nvarchar (200)&#13;
,[BirthDate]datetime&#13;
,[Description]nvarchar (max)&#13;
,[GenderTypeID]int&#13;
,[HasChildren]bit&#13;
,[EducationTypeID]int&#13;
,[WebSiteURL]nvarchar (max)&#13;
,[EmailAddress1]nvarchar (400)&#13;
,[EmailAddress2]nvarchar (400)&#13;
,[EmailAddress3]nvarchar (400)&#13;
,[AssistantName]nvarchar (400)&#13;
,[AssistantPhone]nvarchar (400)&#13;
,[ManagerName]nvarchar (400)&#13;
,[ManagerPhone]nvarchar (400)&#13;
,[CountryTypeID]int&#13;
,[DoNotFax]bit&#13;
,[DoNotEmail]bit&#13;
,[DoNotTelephone]bit&#13;
,[IsPrivate]bit&#13;
,[Telephone1]nvarchar (100)&#13;
,[Telephone2]nvarchar (100)&#13;
,[Telephone3]nvarchar (100)&#13;
,[Fax]nvarchar (100)&#13;
,[MobileNumber1]nvarchar (100)&#13;
,[MobileNumber2]nvarchar (100)&#13;
,[MobileNumber3]nvarchar (100)&#13;
,[OrganisationUnitID]int&#13;
,[ParentContactID]uniqueidentifier&#13;
,[IsPrimaryContact]bit&#13;
,[ContactTypeID]int&#13;
,[ContactSubTypeID]int&#13;
,[ContactCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vContact_RowHistory]&#13;
	WHERE		[ContactID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ContactID]&#13;
			,cast([ContactName] as varchar(50)) as [ContactName]&#13;
			,cast([MasterContactID] as varchar(50)) as [MasterContactID]&#13;
			,cast([ParentID] as varchar(50)) as [ParentID]&#13;
			,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
			,cast([CustomerTypeID] as varchar(50)) as [CustomerTypeID]&#13;
			,cast([PreferredContactMethodID] as varchar(50)) as [PreferredContactMethodID]&#13;
			,cast([IsBackOfficeCustomer] as varchar(50)) as [IsBackOfficeCustomer]&#13;
			,cast([Salutation] as varchar(50)) as [Salutation]&#13;
			,cast([JobTitle] as varchar(50)) as [JobTitle]&#13;
			,cast([FirstName] as varchar(50)) as [FirstName]&#13;
			,cast([Department] as varchar(50)) as [Department]&#13;
			,cast([NickName] as varchar(50)) as [NickName]&#13;
			,cast([MiddleName] as varchar(50)) as [MiddleName]&#13;
			,cast([LastName] as varchar(50)) as [LastName]&#13;
			,cast([BirthDate] as varchar(50)) as [BirthDate]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([GenderTypeID] as varchar(50)) as [GenderTypeID]&#13;
			,cast([HasChildren] as varchar(50)) as [HasChildren]&#13;
			,cast([EducationTypeID] as varchar(50)) as [EducationTypeID]&#13;
			,cast([WebSiteURL] as varchar(50)) as [WebSiteURL]&#13;
			,cast([EmailAddress1] as varchar(50)) as [EmailAddress1]&#13;
			,cast([EmailAddress2] as varchar(50)) as [EmailAddress2]&#13;
			,cast([EmailAddress3] as varchar(50)) as [EmailAddress3]&#13;
			,cast([AssistantName] as varchar(50)) as [AssistantName]&#13;
			,cast([AssistantPhone] as varchar(50)) as [AssistantPhone]&#13;
			,cast([ManagerName] as varchar(50)) as [ManagerName]&#13;
			,cast([ManagerPhone] as varchar(50)) as [ManagerPhone]&#13;
			,cast([CountryTypeID] as varchar(50)) as [CountryTypeID]&#13;
			,cast([DoNotFax] as varchar(50)) as [DoNotFax]&#13;
			,cast([DoNotEmail] as varchar(50)) as [DoNotEmail]&#13;
			,cast([DoNotTelephone] as varchar(50)) as [DoNotTelephone]&#13;
			,cast([IsPrivate] as varchar(50)) as [IsPrivate]&#13;
			,cast([Telephone1] as varchar(50)) as [Telephone1]&#13;
			,cast([Telephone2] as varchar(50)) as [Telephone2]&#13;
			,cast([Telephone3] as varchar(50)) as [Telephone3]&#13;
			,cast([Fax] as varchar(50)) as [Fax]&#13;
			,cast([MobileNumber1] as varchar(50)) as [MobileNumber1]&#13;
			,cast([MobileNumber2] as varchar(50)) as [MobileNumber2]&#13;
			,cast([MobileNumber3] as varchar(50)) as [MobileNumber3]&#13;
			,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
			,cast([ParentContactID] as varchar(50)) as [ParentContactID]&#13;
			,cast([IsPrimaryContact] as varchar(50)) as [IsPrimaryContact]&#13;
			,cast([ContactTypeID] as varchar(50)) as [ContactTypeID]&#13;
			,cast([ContactSubTypeID] as varchar(50)) as [ContactSubTypeID]&#13;
			,cast([ContactCategoryID] as varchar(50)) as [ContactCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Contact]&#13;
	WHERE		[ContactID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ContactID] , PreviousVersion.[ContactID])&#13;
						,isnull(NextVersion.[ContactName] , PreviousVersion.[ContactName])&#13;
						,isnull(NextVersion.[MasterContactID] , PreviousVersion.[MasterContactID])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[CustomerTypeID] , PreviousVersion.[CustomerTypeID])&#13;
						,isnull(NextVersion.[PreferredContactMethodID] , PreviousVersion.[PreferredContactMethodID])&#13;
						,isnull(NextVersion.[IsBackOfficeCustomer] , PreviousVersion.[IsBackOfficeCustomer])&#13;
						,isnull(NextVersion.[Salutation] , PreviousVersion.[Salutation])&#13;
						,isnull(NextVersion.[JobTitle] , PreviousVersion.[JobTitle])&#13;
						,isnull(NextVersion.[FirstName] , PreviousVersion.[FirstName])&#13;
						,isnull(NextVersion.[Department] , PreviousVersion.[Department])&#13;
						,isnull(NextVersion.[NickName] , PreviousVersion.[NickName])&#13;
						,isnull(NextVersion.[MiddleName] , PreviousVersion.[MiddleName])&#13;
						,isnull(NextVersion.[LastName] , PreviousVersion.[LastName])&#13;
						,isnull(NextVersion.[BirthDate] , PreviousVersion.[BirthDate])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[GenderTypeID] , PreviousVersion.[GenderTypeID])&#13;
						,isnull(NextVersion.[HasChildren] , PreviousVersion.[HasChildren])&#13;
						,isnull(NextVersion.[EducationTypeID] , PreviousVersion.[EducationTypeID])&#13;
						,isnull(NextVersion.[WebSiteURL] , PreviousVersion.[WebSiteURL])&#13;
						,isnull(NextVersion.[EmailAddress1] , PreviousVersion.[EmailAddress1])&#13;
						,isnull(NextVersion.[EmailAddress2] , PreviousVersion.[EmailAddress2])&#13;
						,isnull(NextVersion.[EmailAddress3] , PreviousVersion.[EmailAddress3])&#13;
						,isnull(NextVersion.[AssistantName] , PreviousVersion.[AssistantName])&#13;
						,isnull(NextVersion.[AssistantPhone] , PreviousVersion.[AssistantPhone])&#13;
						,isnull(NextVersion.[ManagerName] , PreviousVersion.[ManagerName])&#13;
						,isnull(NextVersion.[ManagerPhone] , PreviousVersion.[ManagerPhone])&#13;
						,isnull(NextVersion.[CountryTypeID] , PreviousVersion.[CountryTypeID])&#13;
						,isnull(NextVersion.[DoNotFax] , PreviousVersion.[DoNotFax])&#13;
						,isnull(NextVersion.[DoNotEmail] , PreviousVersion.[DoNotEmail])&#13;
						,isnull(NextVersion.[DoNotTelephone] , PreviousVersion.[DoNotTelephone])&#13;
						,isnull(NextVersion.[IsPrivate] , PreviousVersion.[IsPrivate])&#13;
						,isnull(NextVersion.[Telephone1] , PreviousVersion.[Telephone1])&#13;
						,isnull(NextVersion.[Telephone2] , PreviousVersion.[Telephone2])&#13;
						,isnull(NextVersion.[Telephone3] , PreviousVersion.[Telephone3])&#13;
						,isnull(NextVersion.[Fax] , PreviousVersion.[Fax])&#13;
						,isnull(NextVersion.[MobileNumber1] , PreviousVersion.[MobileNumber1])&#13;
						,isnull(NextVersion.[MobileNumber2] , PreviousVersion.[MobileNumber2])&#13;
						,isnull(NextVersion.[MobileNumber3] , PreviousVersion.[MobileNumber3])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[ParentContactID] , PreviousVersion.[ParentContactID])&#13;
						,isnull(NextVersion.[IsPrimaryContact] , PreviousVersion.[IsPrimaryContact])&#13;
						,isnull(NextVersion.[ContactTypeID] , PreviousVersion.[ContactTypeID])&#13;
						,isnull(NextVersion.[ContactSubTypeID] , PreviousVersion.[ContactSubTypeID])&#13;
						,isnull(NextVersion.[ContactCategoryID] , PreviousVersion.[ContactCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ContactID] = NextVersion.[ContactID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ContactID]&#13;
			, nullif([ContactName],'&lt;-null-&gt;')&#13;
			, nullif([MasterContactID],'&lt;-null-&gt;')&#13;
			, nullif([ParentID],'&lt;-null-&gt;')&#13;
			, nullif([OwnerID],'&lt;-null-&gt;')&#13;
			, nullif([CustomerTypeID],'&lt;-null-&gt;')&#13;
			, nullif([PreferredContactMethodID],'&lt;-null-&gt;')&#13;
			, nullif([IsBackOfficeCustomer],'&lt;-null-&gt;')&#13;
			, nullif([Salutation],'&lt;-null-&gt;')&#13;
			, nullif([JobTitle],'&lt;-null-&gt;')&#13;
			, nullif([FirstName],'&lt;-null-&gt;')&#13;
			, nullif([Department],'&lt;-null-&gt;')&#13;
			, nullif([NickName],'&lt;-null-&gt;')&#13;
			, nullif([MiddleName],'&lt;-null-&gt;')&#13;
			, nullif([LastName],'&lt;-null-&gt;')&#13;
			, nullif([BirthDate],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([GenderTypeID],'&lt;-null-&gt;')&#13;
			, nullif([HasChildren],'&lt;-null-&gt;')&#13;
			, nullif([EducationTypeID],'&lt;-null-&gt;')&#13;
			, nullif([WebSiteURL],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress1],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress2],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress3],'&lt;-null-&gt;')&#13;
			, nullif([AssistantName],'&lt;-null-&gt;')&#13;
			, nullif([AssistantPhone],'&lt;-null-&gt;')&#13;
			, nullif([ManagerName],'&lt;-null-&gt;')&#13;
			, nullif([ManagerPhone],'&lt;-null-&gt;')&#13;
			, nullif([CountryTypeID],'&lt;-null-&gt;')&#13;
			, nullif([DoNotFax],'&lt;-null-&gt;')&#13;
			, nullif([DoNotEmail],'&lt;-null-&gt;')&#13;
			, nullif([DoNotTelephone],'&lt;-null-&gt;')&#13;
			, nullif([IsPrivate],'&lt;-null-&gt;')&#13;
			, nullif([Telephone1],'&lt;-null-&gt;')&#13;
			, nullif([Telephone2],'&lt;-null-&gt;')&#13;
			, nullif([Telephone3],'&lt;-null-&gt;')&#13;
			, nullif([Fax],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber1],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber2],'&lt;-null-&gt;')&#13;
			, nullif([MobileNumber3],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationUnitID],'&lt;-null-&gt;')&#13;
			, nullif([ParentContactID],'&lt;-null-&gt;')&#13;
			, nullif([IsPrimaryContact],'&lt;-null-&gt;')&#13;
			, nullif([ContactTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ContactSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ContactCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Contact_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Contact_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ContactID]uniqueidentifier&#13;
,[ContactName]nvarchar (200)&#13;
,[MasterContactID]uniqueidentifier&#13;
,[ParentID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[CustomerTypeID]nvarchar (max)&#13;
,[PreferredContactMethodID]int&#13;
,[IsBackOfficeCustomer]bit&#13;
,[Salutation]nvarchar (200)&#13;
,[JobTitle]nvarchar (200)&#13;
,[FirstName]nvarchar (200)&#13;
,[Department]nvarchar (200)&#13;
,[NickName]nvarchar (200)&#13;
,[MiddleName]nvarchar (200)&#13;
,[LastName]nvarchar (200)&#13;
,[BirthDate]datetime&#13;
,[Description]nvarchar (max)&#13;
,[GenderTypeID]int&#13;
,[HasChildren]bit&#13;
,[EducationTypeID]int&#13;
,[WebSiteURL]nvarchar (max)&#13;
,[EmailAddress1]nvarchar (400)&#13;
,[EmailAddress2]nvarchar (400)&#13;
,[EmailAddress3]nvarchar (400)&#13;
,[AssistantName]nvarchar (400)&#13;
,[AssistantPhone]nvarchar (400)&#13;
,[ManagerName]nvarchar (400)&#13;
,[ManagerPhone]nvarchar (400)&#13;
,[CountryTypeID]int&#13;
,[DoNotFax]bit&#13;
,[DoNotEmail]bit&#13;
,[DoNotTelephone]bit&#13;
,[IsPrivate]bit&#13;
,[Telephone1]nvarchar (100)&#13;
,[Telephone2]nvarchar (100)&#13;
,[Telephone3]nvarchar (100)&#13;
,[Fax]nvarchar (100)&#13;
,[MobileNumber1]nvarchar (100)&#13;
,[MobileNumber2]nvarchar (100)&#13;
,[MobileNumber3]nvarchar (100)&#13;
,[OrganisationUnitID]int&#13;
,[ParentContactID]uniqueidentifier&#13;
,[IsPrimaryContact]bit&#13;
,[ContactTypeID]int&#13;
,[ContactSubTypeID]int&#13;
,[ContactCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ContactID] varchar(50)&#13;
	,[ContactName] varchar(50)&#13;
	,[MasterContactID] varchar(50)&#13;
	,[ParentID] varchar(50)&#13;
	,[OwnerID] varchar(50)&#13;
	,[CustomerTypeID] varchar(50)&#13;
	,[PreferredContactMethodID] varchar(50)&#13;
	,[IsBackOfficeCustomer] varchar(50)&#13;
	,[Salutation] varchar(50)&#13;
	,[JobTitle] varchar(50)&#13;
	,[FirstName] varchar(50)&#13;
	,[Department] varchar(50)&#13;
	,[NickName] varchar(50)&#13;
	,[MiddleName] varchar(50)&#13;
	,[LastName] varchar(50)&#13;
	,[BirthDate] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[GenderTypeID] varchar(50)&#13;
	,[HasChildren] varchar(50)&#13;
	,[EducationTypeID] varchar(50)&#13;
	,[WebSiteURL] varchar(50)&#13;
	,[EmailAddress1] varchar(50)&#13;
	,[EmailAddress2] varchar(50)&#13;
	,[EmailAddress3] varchar(50)&#13;
	,[AssistantName] varchar(50)&#13;
	,[AssistantPhone] varchar(50)&#13;
	,[ManagerName] varchar(50)&#13;
	,[ManagerPhone] varchar(50)&#13;
	,[CountryTypeID] varchar(50)&#13;
	,[DoNotFax] varchar(50)&#13;
	,[DoNotEmail] varchar(50)&#13;
	,[DoNotTelephone] varchar(50)&#13;
	,[IsPrivate] varchar(50)&#13;
	,[Telephone1] varchar(50)&#13;
	,[Telephone2] varchar(50)&#13;
	,[Telephone3] varchar(50)&#13;
	,[Fax] varchar(50)&#13;
	,[MobileNumber1] varchar(50)&#13;
	,[MobileNumber2] varchar(50)&#13;
	,[MobileNumber3] varchar(50)&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[ParentContactID] varchar(50)&#13;
	,[IsPrimaryContact] varchar(50)&#13;
	,[ContactTypeID] varchar(50)&#13;
	,[ContactSubTypeID] varchar(50)&#13;
	,[ContactCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ContactID]&#13;
			,[ContactName]&#13;
			,[MasterContactID]&#13;
			,[ParentID]&#13;
			,[OwnerID]&#13;
			,[CustomerTypeID]&#13;
			,[PreferredContactMethodID]&#13;
			,[IsBackOfficeCustomer]&#13;
			,[Salutation]&#13;
			,[JobTitle]&#13;
			,[FirstName]&#13;
			,[Department]&#13;
			,[NickName]&#13;
			,[MiddleName]&#13;
			,[LastName]&#13;
			,[BirthDate]&#13;
			,[Description]&#13;
			,[GenderTypeID]&#13;
			,[HasChildren]&#13;
			,[EducationTypeID]&#13;
			,[WebSiteURL]&#13;
			,[EmailAddress1]&#13;
			,[EmailAddress2]&#13;
			,[EmailAddress3]&#13;
			,[AssistantName]&#13;
			,[AssistantPhone]&#13;
			,[ManagerName]&#13;
			,[ManagerPhone]&#13;
			,[CountryTypeID]&#13;
			,[DoNotFax]&#13;
			,[DoNotEmail]&#13;
			,[DoNotTelephone]&#13;
			,[IsPrivate]&#13;
			,[Telephone1]&#13;
			,[Telephone2]&#13;
			,[Telephone3]&#13;
			,[Fax]&#13;
			,[MobileNumber1]&#13;
			,[MobileNumber2]&#13;
			,[MobileNumber3]&#13;
			,[OrganisationUnitID]&#13;
			,[ParentContactID]&#13;
			,[IsPrimaryContact]&#13;
			,[ContactTypeID]&#13;
			,[ContactSubTypeID]&#13;
			,[ContactCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vContact_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ContactID] = [dbo].[Contact].[ContactID]&#13;
				) as [RowVersion]&#13;
				,[ContactID]&#13;
				,cast([ContactName] as varchar(50)) as [ContactName]&#13;
				,cast([MasterContactID] as varchar(50)) as [MasterContactID]&#13;
				,cast([ParentID] as varchar(50)) as [ParentID]&#13;
				,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
				,cast([CustomerTypeID] as varchar(50)) as [CustomerTypeID]&#13;
				,cast([PreferredContactMethodID] as varchar(50)) as [PreferredContactMethodID]&#13;
				,cast([IsBackOfficeCustomer] as varchar(50)) as [IsBackOfficeCustomer]&#13;
				,cast([Salutation] as varchar(50)) as [Salutation]&#13;
				,cast([JobTitle] as varchar(50)) as [JobTitle]&#13;
				,cast([FirstName] as varchar(50)) as [FirstName]&#13;
				,cast([Department] as varchar(50)) as [Department]&#13;
				,cast([NickName] as varchar(50)) as [NickName]&#13;
				,cast([MiddleName] as varchar(50)) as [MiddleName]&#13;
				,cast([LastName] as varchar(50)) as [LastName]&#13;
				,cast([BirthDate] as varchar(50)) as [BirthDate]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([GenderTypeID] as varchar(50)) as [GenderTypeID]&#13;
				,cast([HasChildren] as varchar(50)) as [HasChildren]&#13;
				,cast([EducationTypeID] as varchar(50)) as [EducationTypeID]&#13;
				,cast([WebSiteURL] as varchar(50)) as [WebSiteURL]&#13;
				,cast([EmailAddress1] as varchar(50)) as [EmailAddress1]&#13;
				,cast([EmailAddress2] as varchar(50)) as [EmailAddress2]&#13;
				,cast([EmailAddress3] as varchar(50)) as [EmailAddress3]&#13;
				,cast([AssistantName] as varchar(50)) as [AssistantName]&#13;
				,cast([AssistantPhone] as varchar(50)) as [AssistantPhone]&#13;
				,cast([ManagerName] as varchar(50)) as [ManagerName]&#13;
				,cast([ManagerPhone] as varchar(50)) as [ManagerPhone]&#13;
				,cast([CountryTypeID] as varchar(50)) as [CountryTypeID]&#13;
				,cast([DoNotFax] as varchar(50)) as [DoNotFax]&#13;
				,cast([DoNotEmail] as varchar(50)) as [DoNotEmail]&#13;
				,cast([DoNotTelephone] as varchar(50)) as [DoNotTelephone]&#13;
				,cast([IsPrivate] as varchar(50)) as [IsPrivate]&#13;
				,cast([Telephone1] as varchar(50)) as [Telephone1]&#13;
				,cast([Telephone2] as varchar(50)) as [Telephone2]&#13;
				,cast([Telephone3] as varchar(50)) as [Telephone3]&#13;
				,cast([Fax] as varchar(50)) as [Fax]&#13;
				,cast([MobileNumber1] as varchar(50)) as [MobileNumber1]&#13;
				,cast([MobileNumber2] as varchar(50)) as [MobileNumber2]&#13;
				,cast([MobileNumber3] as varchar(50)) as [MobileNumber3]&#13;
				,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
				,cast([ParentContactID] as varchar(50)) as [ParentContactID]&#13;
				,cast([IsPrimaryContact] as varchar(50)) as [IsPrimaryContact]&#13;
				,cast([ContactTypeID] as varchar(50)) as [ContactTypeID]&#13;
				,cast([ContactSubTypeID] as varchar(50)) as [ContactSubTypeID]&#13;
				,cast([ContactCategoryID] as varchar(50)) as [ContactCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Contact]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ContactID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ContactID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ContactID]&#13;
			,RowHistoryExtract.[ContactName]&#13;
			,RowHistoryExtract.[MasterContactID]&#13;
			,RowHistoryExtract.[ParentID]&#13;
			,RowHistoryExtract.[OwnerID]&#13;
			,RowHistoryExtract.[CustomerTypeID]&#13;
			,RowHistoryExtract.[PreferredContactMethodID]&#13;
			,RowHistoryExtract.[IsBackOfficeCustomer]&#13;
			,RowHistoryExtract.[Salutation]&#13;
			,RowHistoryExtract.[JobTitle]&#13;
			,RowHistoryExtract.[FirstName]&#13;
			,RowHistoryExtract.[Department]&#13;
			,RowHistoryExtract.[NickName]&#13;
			,RowHistoryExtract.[MiddleName]&#13;
			,RowHistoryExtract.[LastName]&#13;
			,RowHistoryExtract.[BirthDate]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[GenderTypeID]&#13;
			,RowHistoryExtract.[HasChildren]&#13;
			,RowHistoryExtract.[EducationTypeID]&#13;
			,RowHistoryExtract.[WebSiteURL]&#13;
			,RowHistoryExtract.[EmailAddress1]&#13;
			,RowHistoryExtract.[EmailAddress2]&#13;
			,RowHistoryExtract.[EmailAddress3]&#13;
			,RowHistoryExtract.[AssistantName]&#13;
			,RowHistoryExtract.[AssistantPhone]&#13;
			,RowHistoryExtract.[ManagerName]&#13;
			,RowHistoryExtract.[ManagerPhone]&#13;
			,RowHistoryExtract.[CountryTypeID]&#13;
			,RowHistoryExtract.[DoNotFax]&#13;
			,RowHistoryExtract.[DoNotEmail]&#13;
			,RowHistoryExtract.[DoNotTelephone]&#13;
			,RowHistoryExtract.[IsPrivate]&#13;
			,RowHistoryExtract.[Telephone1]&#13;
			,RowHistoryExtract.[Telephone2]&#13;
			,RowHistoryExtract.[Telephone3]&#13;
			,RowHistoryExtract.[Fax]&#13;
			,RowHistoryExtract.[MobileNumber1]&#13;
			,RowHistoryExtract.[MobileNumber2]&#13;
			,RowHistoryExtract.[MobileNumber3]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[ParentContactID]&#13;
			,RowHistoryExtract.[IsPrimaryContact]&#13;
			,RowHistoryExtract.[ContactTypeID]&#13;
			,RowHistoryExtract.[ContactSubTypeID]&#13;
			,RowHistoryExtract.[ContactCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ContactID] = MostRecentRows.[ContactID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ContactID] , PreviousVersion.[ContactID])&#13;
						,isnull(NextVersion.[ContactName] , PreviousVersion.[ContactName])&#13;
						,isnull(NextVersion.[MasterContactID] , PreviousVersion.[MasterContactID])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[CustomerTypeID] , PreviousVersion.[CustomerTypeID])&#13;
						,isnull(NextVersion.[PreferredContactMethodID] , PreviousVersion.[PreferredContactMethodID])&#13;
						,isnull(NextVersion.[IsBackOfficeCustomer] , PreviousVersion.[IsBackOfficeCustomer])&#13;
						,isnull(NextVersion.[Salutation] , PreviousVersion.[Salutation])&#13;
						,isnull(NextVersion.[JobTitle] , PreviousVersion.[JobTitle])&#13;
						,isnull(NextVersion.[FirstName] , PreviousVersion.[FirstName])&#13;
						,isnull(NextVersion.[Department] , PreviousVersion.[Department])&#13;
						,isnull(NextVersion.[NickName] , PreviousVersion.[NickName])&#13;
						,isnull(NextVersion.[MiddleName] , PreviousVersion.[MiddleName])&#13;
						,isnull(NextVersion.[LastName] , PreviousVersion.[LastName])&#13;
						,isnull(NextVersion.[BirthDate] , PreviousVersion.[BirthDate])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[GenderTypeID] , PreviousVersion.[GenderTypeID])&#13;
						,isnull(NextVersion.[HasChildren] , PreviousVersion.[HasChildren])&#13;
						,isnull(NextVersion.[EducationTypeID] , PreviousVersion.[EducationTypeID])&#13;
						,isnull(NextVersion.[WebSiteURL] , PreviousVersion.[WebSiteURL])&#13;
						,isnull(NextVersion.[EmailAddress1] , PreviousVersion.[EmailAddress1])&#13;
						,isnull(NextVersion.[EmailAddress2] , PreviousVersion.[EmailAddress2])&#13;
						,isnull(NextVersion.[EmailAddress3] , PreviousVersion.[EmailAddress3])&#13;
						,isnull(NextVersion.[AssistantName] , PreviousVersion.[AssistantName])&#13;
						,isnull(NextVersion.[AssistantPhone] , PreviousVersion.[AssistantPhone])&#13;
						,isnull(NextVersion.[ManagerName] , PreviousVersion.[ManagerName])&#13;
						,isnull(NextVersion.[ManagerPhone] , PreviousVersion.[ManagerPhone])&#13;
						,isnull(NextVersion.[CountryTypeID] , PreviousVersion.[CountryTypeID])&#13;
						,isnull(NextVersion.[DoNotFax] , PreviousVersion.[DoNotFax])&#13;
						,isnull(NextVersion.[DoNotEmail] , PreviousVersion.[DoNotEmail])&#13;
						,isnull(NextVersion.[DoNotTelephone] , PreviousVersion.[DoNotTelephone])&#13;
						,isnull(NextVersion.[IsPrivate] , PreviousVersion.[IsPrivate])&#13;
						,isnull(NextVersion.[Telephone1] , PreviousVersion.[Telephone1])&#13;
						,isnull(NextVersion.[Telephone2] , PreviousVersion.[Telephone2])&#13;
						,isnull(NextVersion.[Telephone3] , PreviousVersion.[Telephone3])&#13;
						,isnull(NextVersion.[Fax] , PreviousVersion.[Fax])&#13;
						,isnull(NextVersion.[MobileNumber1] , PreviousVersion.[MobileNumber1])&#13;
						,isnull(NextVersion.[MobileNumber2] , PreviousVersion.[MobileNumber2])&#13;
						,isnull(NextVersion.[MobileNumber3] , PreviousVersion.[MobileNumber3])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[ParentContactID] , PreviousVersion.[ParentContactID])&#13;
						,isnull(NextVersion.[IsPrimaryContact] , PreviousVersion.[IsPrimaryContact])&#13;
						,isnull(NextVersion.[ContactTypeID] , PreviousVersion.[ContactTypeID])&#13;
						,isnull(NextVersion.[ContactSubTypeID] , PreviousVersion.[ContactSubTypeID])&#13;
						,isnull(NextVersion.[ContactCategoryID] , PreviousVersion.[ContactCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ContactID] = NextVersion.[ContactID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ContactID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ContactID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ContactID]&#13;
			,nullif(rh.[ContactName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MasterContactID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OwnerID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[CustomerTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PreferredContactMethodID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsBackOfficeCustomer],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Salutation],'&lt;-null-&gt;')&#13;
			,nullif(rh.[JobTitle],'&lt;-null-&gt;')&#13;
			,nullif(rh.[FirstName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Department],'&lt;-null-&gt;')&#13;
			,nullif(rh.[NickName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MiddleName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[LastName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[BirthDate],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[GenderTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[HasChildren],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EducationTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WebSiteURL],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AssistantName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[AssistantPhone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ManagerName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ManagerPhone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[CountryTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotFax],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotEmail],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DoNotTelephone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsPrivate],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Telephone3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Fax],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber1],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber2],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MobileNumber3],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationUnitID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentContactID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsPrimaryContact],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ContactTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ContactSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ContactCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ContactID] = roi.[ContactID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ContactID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ELMAH_GetErrorsXml]&#13;">
      <src>&#13;
CREATE PROCEDURE [dbo].[ELMAH_GetErrorsXml]&#13;
(&#13;
    @Application NVARCHAR(60),&#13;
    @PageIndex INT = 0,&#13;
    @PageSize INT = 15,&#13;
    @TotalCount INT OUTPUT&#13;
)&#13;
AS &#13;
&#13;
    SET NOCOUNT ON&#13;
&#13;
    DECLARE @FirstTimeUTC DATETIME&#13;
    DECLARE @FirstSequence INT&#13;
    DECLARE @StartRow INT&#13;
    DECLARE @StartRowIndex INT&#13;
&#13;
    SELECT &#13;
        @TotalCount = COUNT(1) &#13;
    FROM &#13;
        [ELMAH_Error]&#13;
    WHERE &#13;
        [Application] = @Application&#13;
&#13;
    -- Get the ID of the first error for the requested page&#13;
&#13;
    SET @StartRowIndex = @PageIndex * @PageSize + 1&#13;
&#13;
    IF @StartRowIndex &lt;= @TotalCount&#13;
    BEGIN&#13;
&#13;
        SET ROWCOUNT @StartRowIndex&#13;
&#13;
        SELECT  &#13;
            @FirstTimeUTC = [TimeUtc],&#13;
            @FirstSequence = [Sequence]&#13;
        FROM &#13;
            [ELMAH_Error]&#13;
        WHERE   &#13;
            [Application] = @Application&#13;
        ORDER BY &#13;
            [TimeUtc] DESC, &#13;
            [Sequence] DESC&#13;
&#13;
    END&#13;
    ELSE&#13;
    BEGIN&#13;
&#13;
        SET @PageSize = 0&#13;
&#13;
    END&#13;
&#13;
    -- Now set the row count to the requested page size and get&#13;
    -- all records below it for the pertaining application.&#13;
&#13;
    SET ROWCOUNT @PageSize&#13;
&#13;
    SELECT &#13;
        errorId     = [ErrorId], &#13;
        application = [Application],&#13;
        host        = [Host], &#13;
        type        = [Type],&#13;
        source      = [Source],&#13;
        message     = [Message],&#13;
        [user]      = [User],&#13;
        statusCode  = [StatusCode], &#13;
        time        = CONVERT(VARCHAR(50), [TimeUtc], 126) + 'Z'&#13;
    FROM &#13;
        [ELMAH_Error] error&#13;
    WHERE&#13;
        [Application] = @Application&#13;
    AND&#13;
        [TimeUtc] &lt;= @FirstTimeUTC&#13;
    AND &#13;
        [Sequence] &lt;= @FirstSequence&#13;
    ORDER BY&#13;
        [TimeUtc] DESC, &#13;
        [Sequence] DESC&#13;
    FOR&#13;
        XML AUTO&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ELMAH_GetErrorXml]&#13;">
      <src>&#13;
CREATE PROCEDURE [dbo].[ELMAH_GetErrorXml]&#13;
(&#13;
    @Application NVARCHAR(60),&#13;
    @ErrorId UNIQUEIDENTIFIER&#13;
)&#13;
AS&#13;
&#13;
    SET NOCOUNT ON&#13;
&#13;
    SELECT &#13;
        [AllXml]&#13;
    FROM &#13;
        [ELMAH_Error]&#13;
    WHERE&#13;
        [ErrorId] = @ErrorId&#13;
    AND&#13;
        [Application] = @Application&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ELMAH_LogError]&#13;">
      <src>&#13;
CREATE PROCEDURE [dbo].[ELMAH_LogError]&#13;
(&#13;
    @ErrorId UNIQUEIDENTIFIER,&#13;
    @Application NVARCHAR(60),&#13;
    @Host NVARCHAR(30),&#13;
    @Type NVARCHAR(100),&#13;
    @Source NVARCHAR(60),&#13;
    @Message NVARCHAR(500),&#13;
    @User NVARCHAR(50),&#13;
    @AllXml NTEXT,&#13;
    @StatusCode INT,&#13;
    @TimeUtc DATETIME&#13;
)&#13;
AS&#13;
&#13;
    SET NOCOUNT ON&#13;
&#13;
    INSERT&#13;
    INTO&#13;
        [ELMAH_Error]&#13;
        (&#13;
            [ErrorId],&#13;
            [Application],&#13;
            [Host],&#13;
            [Type],&#13;
            [Source],&#13;
            [Message],&#13;
            [User],&#13;
            [AllXml],&#13;
            [StatusCode],&#13;
            [TimeUtc]&#13;
        )&#13;
    VALUES&#13;
        (&#13;
            @ErrorId,&#13;
            @Application,&#13;
            @Host,&#13;
            @Type,&#13;
            @Source,&#13;
            @Message,&#13;
            @User,&#13;
            @AllXml,&#13;
            @StatusCode,&#13;
            @TimeUtc&#13;
        )&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[IdentityCheckProvider_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[IdentityCheckProvider_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[ServiceProviderID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vIdentityCheckProvider_RowHistory]&#13;
	WHERE		[IdentityCheckProviderID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[IdentityCheckProviderID]&#13;
			,cast([ServiceProviderID] as varchar(50)) as [ServiceProviderID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[IdentityCheckProvider]&#13;
	WHERE		[IdentityCheckProviderID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[ServiceProviderID] , PreviousVersion.[ServiceProviderID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[IdentityCheckProviderID] = NextVersion.[IdentityCheckProviderID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[IdentityCheckProviderID]&#13;
			, nullif([ServiceProviderID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[IdentityCheckProvider_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[IdentityCheckProvider_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[IdentityCheckProviderID]uniqueidentifier&#13;
,[ServiceProviderID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[IdentityCheckProviderID] varchar(50)&#13;
	,[ServiceProviderID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[IdentityCheckProviderID]&#13;
			,[ServiceProviderID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vIdentityCheckProvider_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[IdentityCheckProviderID] = [dbo].[IdentityCheckProvider].[IdentityCheckProviderID]&#13;
				) as [RowVersion]&#13;
				,[IdentityCheckProviderID]&#13;
				,cast([ServiceProviderID] as varchar(50)) as [ServiceProviderID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[IdentityCheckProvider]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[IdentityCheckProviderID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[IdentityCheckProviderID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[IdentityCheckProviderID]&#13;
			,RowHistoryExtract.[ServiceProviderID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[IdentityCheckProviderID] = MostRecentRows.[IdentityCheckProviderID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[ServiceProviderID] , PreviousVersion.[ServiceProviderID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[IdentityCheckProviderID] = NextVersion.[IdentityCheckProviderID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[IdentityCheckProviderID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[IdentityCheckProviderID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[IdentityCheckProviderID]&#13;
			,nullif(rh.[ServiceProviderID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[IdentityCheckProviderID] = roi.[IdentityCheckProviderID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[IdentityCheckProviderID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Organisation_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Organisation_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[OrganisationTypeID]int&#13;
,[OrganisationSubTypeID]int&#13;
,[OrganisationCategoryID]int&#13;
,[IsBranch]bit&#13;
,[IsHeadOffice]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisation_RowHistory]&#13;
	WHERE		[OrganisationID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationID]&#13;
			,cast([OrganisationTypeID] as varchar(50)) as [OrganisationTypeID]&#13;
			,cast([OrganisationSubTypeID] as varchar(50)) as [OrganisationSubTypeID]&#13;
			,cast([OrganisationCategoryID] as varchar(50)) as [OrganisationCategoryID]&#13;
			,cast([IsBranch] as varchar(50)) as [IsBranch]&#13;
			,cast([IsHeadOffice] as varchar(50)) as [IsHeadOffice]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Organisation]&#13;
	WHERE		[OrganisationID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationTypeID] , PreviousVersion.[OrganisationTypeID])&#13;
						,isnull(NextVersion.[OrganisationSubTypeID] , PreviousVersion.[OrganisationSubTypeID])&#13;
						,isnull(NextVersion.[OrganisationCategoryID] , PreviousVersion.[OrganisationCategoryID])&#13;
						,isnull(NextVersion.[IsBranch] , PreviousVersion.[IsBranch])&#13;
						,isnull(NextVersion.[IsHeadOffice] , PreviousVersion.[IsHeadOffice])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationID] = NextVersion.[OrganisationID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationID]&#13;
			, nullif([OrganisationTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsBranch],'&lt;-null-&gt;')&#13;
			, nullif([IsHeadOffice],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Organisation_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Organisation_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationID]uniqueidentifier&#13;
,[OrganisationTypeID]int&#13;
,[OrganisationSubTypeID]int&#13;
,[OrganisationCategoryID]int&#13;
,[IsBranch]bit&#13;
,[IsHeadOffice]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationID] varchar(50)&#13;
	,[OrganisationTypeID] varchar(50)&#13;
	,[OrganisationSubTypeID] varchar(50)&#13;
	,[OrganisationCategoryID] varchar(50)&#13;
	,[IsBranch] varchar(50)&#13;
	,[IsHeadOffice] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationID]&#13;
			,[OrganisationTypeID]&#13;
			,[OrganisationSubTypeID]&#13;
			,[OrganisationCategoryID]&#13;
			,[IsBranch]&#13;
			,[IsHeadOffice]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisation_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationID] = [dbo].[Organisation].[OrganisationID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationID]&#13;
				,cast([OrganisationTypeID] as varchar(50)) as [OrganisationTypeID]&#13;
				,cast([OrganisationSubTypeID] as varchar(50)) as [OrganisationSubTypeID]&#13;
				,cast([OrganisationCategoryID] as varchar(50)) as [OrganisationCategoryID]&#13;
				,cast([IsBranch] as varchar(50)) as [IsBranch]&#13;
				,cast([IsHeadOffice] as varchar(50)) as [IsHeadOffice]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Organisation]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[OrganisationTypeID]&#13;
			,RowHistoryExtract.[OrganisationSubTypeID]&#13;
			,RowHistoryExtract.[OrganisationCategoryID]&#13;
			,RowHistoryExtract.[IsBranch]&#13;
			,RowHistoryExtract.[IsHeadOffice]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationID] = MostRecentRows.[OrganisationID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationTypeID] , PreviousVersion.[OrganisationTypeID])&#13;
						,isnull(NextVersion.[OrganisationSubTypeID] , PreviousVersion.[OrganisationSubTypeID])&#13;
						,isnull(NextVersion.[OrganisationCategoryID] , PreviousVersion.[OrganisationCategoryID])&#13;
						,isnull(NextVersion.[IsBranch] , PreviousVersion.[IsBranch])&#13;
						,isnull(NextVersion.[IsHeadOffice] , PreviousVersion.[IsHeadOffice])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationID] = NextVersion.[OrganisationID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationID]&#13;
			,nullif(rh.[OrganisationTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsBranch],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsHeadOffice],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationID] = roi.[OrganisationID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationCategory_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationCategory_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationCategoryID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationCategory_RowHistory]&#13;
	WHERE		[OrganisationCategoryID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationCategory]&#13;
	WHERE		[OrganisationCategoryID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationCategoryID] , PreviousVersion.[OrganisationCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationCategoryID] = NextVersion.[OrganisationCategoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationCategoryID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationCategory_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationCategory_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationCategoryID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationCategory_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationCategoryID] = [dbo].[OrganisationCategory].[OrganisationCategoryID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationCategory]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationCategoryID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationCategoryID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationCategoryID] = MostRecentRows.[OrganisationCategoryID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationCategoryID] , PreviousVersion.[OrganisationCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationCategoryID] = NextVersion.[OrganisationCategoryID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationCategoryID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationCategoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationCategoryID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationCategoryID] = roi.[OrganisationCategoryID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationCategoryID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationDetail_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationDetail_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationDetailID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[Name]nvarchar (4000)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationDetail_RowHistory]&#13;
	WHERE		[OrganisationDetailID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationDetailID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationDetail]&#13;
	WHERE		[OrganisationDetailID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationDetailID] , PreviousVersion.[OrganisationDetailID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationDetailID] = NextVersion.[OrganisationDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationDetailID]&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationDetail_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationDetail_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationDetailID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[Name]nvarchar (4000)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationDetailID] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationDetailID]&#13;
			,[OrganisationID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationDetail_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationDetailID] = [dbo].[OrganisationDetail].[OrganisationDetailID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationDetailID]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationDetail]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationDetailID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationDetailID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationDetailID]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationDetailID] = MostRecentRows.[OrganisationDetailID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationDetailID] , PreviousVersion.[OrganisationDetailID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationDetailID] = NextVersion.[OrganisationDetailID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationDetailID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationDetailID]&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationDetailID] = roi.[OrganisationDetailID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationDetailID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalGroup_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalGroup_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ExternalGroupTemplateID]uniqueidentifier&#13;
,[ParentOrganisationExternalGroupID]uniqueidentifier&#13;
,[ParentRootExternalGroupID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[ExternalGroupTypeID]int&#13;
,[ExternalGroupSubTypeID]int&#13;
,[ExternalGroupCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationExternalGroup_RowHistory]&#13;
	WHERE		[OrganisationExternalGroupID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([ExternalGroupTemplateID] as varchar(50)) as [ExternalGroupTemplateID]&#13;
			,cast([ParentOrganisationExternalGroupID] as varchar(50)) as [ParentOrganisationExternalGroupID]&#13;
			,cast([ParentRootExternalGroupID] as varchar(50)) as [ParentRootExternalGroupID]&#13;
			,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
			,cast([ExternalGroupTypeID] as varchar(50)) as [ExternalGroupTypeID]&#13;
			,cast([ExternalGroupSubTypeID] as varchar(50)) as [ExternalGroupSubTypeID]&#13;
			,cast([ExternalGroupCategoryID] as varchar(50)) as [ExternalGroupCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationExternalGroup]&#13;
	WHERE		[OrganisationExternalGroupID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ExternalGroupTemplateID] , PreviousVersion.[ExternalGroupTemplateID])&#13;
						,isnull(NextVersion.[ParentOrganisationExternalGroupID] , PreviousVersion.[ParentOrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[ParentRootExternalGroupID] , PreviousVersion.[ParentRootExternalGroupID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[ExternalGroupTypeID] , PreviousVersion.[ExternalGroupTypeID])&#13;
						,isnull(NextVersion.[ExternalGroupSubTypeID] , PreviousVersion.[ExternalGroupSubTypeID])&#13;
						,isnull(NextVersion.[ExternalGroupCategoryID] , PreviousVersion.[ExternalGroupCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([ExternalGroupTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			, nullif([ParentRootExternalGroupID],'&lt;-null-&gt;')&#13;
			, nullif([IsManaged],'&lt;-null-&gt;')&#13;
			, nullif([ExternalGroupTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ExternalGroupSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ExternalGroupCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalGroup_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalGroup_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationExternalGroupID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ExternalGroupTemplateID]uniqueidentifier&#13;
,[ParentOrganisationExternalGroupID]uniqueidentifier&#13;
,[ParentRootExternalGroupID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[ExternalGroupTypeID]int&#13;
,[ExternalGroupSubTypeID]int&#13;
,[ExternalGroupCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[ExternalGroupTemplateID] varchar(50)&#13;
	,[ParentOrganisationExternalGroupID] varchar(50)&#13;
	,[ParentRootExternalGroupID] varchar(50)&#13;
	,[IsManaged] varchar(50)&#13;
	,[ExternalGroupTypeID] varchar(50)&#13;
	,[ExternalGroupSubTypeID] varchar(50)&#13;
	,[ExternalGroupCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[Name]&#13;
			,[OrganisationID]&#13;
			,[ExternalGroupTemplateID]&#13;
			,[ParentOrganisationExternalGroupID]&#13;
			,[ParentRootExternalGroupID]&#13;
			,[IsManaged]&#13;
			,[ExternalGroupTypeID]&#13;
			,[ExternalGroupSubTypeID]&#13;
			,[ExternalGroupCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationExternalGroup_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationExternalGroupID] = [dbo].[OrganisationExternalGroup].[OrganisationExternalGroupID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationExternalGroupID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([ExternalGroupTemplateID] as varchar(50)) as [ExternalGroupTemplateID]&#13;
				,cast([ParentOrganisationExternalGroupID] as varchar(50)) as [ParentOrganisationExternalGroupID]&#13;
				,cast([ParentRootExternalGroupID] as varchar(50)) as [ParentRootExternalGroupID]&#13;
				,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
				,cast([ExternalGroupTypeID] as varchar(50)) as [ExternalGroupTypeID]&#13;
				,cast([ExternalGroupSubTypeID] as varchar(50)) as [ExternalGroupSubTypeID]&#13;
				,cast([ExternalGroupCategoryID] as varchar(50)) as [ExternalGroupCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationExternalGroup]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationExternalGroupID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationExternalGroupID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[ExternalGroupTemplateID]&#13;
			,RowHistoryExtract.[ParentOrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[ParentRootExternalGroupID]&#13;
			,RowHistoryExtract.[IsManaged]&#13;
			,RowHistoryExtract.[ExternalGroupTypeID]&#13;
			,RowHistoryExtract.[ExternalGroupSubTypeID]&#13;
			,RowHistoryExtract.[ExternalGroupCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationExternalGroupID] = MostRecentRows.[OrganisationExternalGroupID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ExternalGroupTemplateID] , PreviousVersion.[ExternalGroupTemplateID])&#13;
						,isnull(NextVersion.[ParentOrganisationExternalGroupID] , PreviousVersion.[ParentOrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[ParentRootExternalGroupID] , PreviousVersion.[ParentRootExternalGroupID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[ExternalGroupTypeID] , PreviousVersion.[ExternalGroupTypeID])&#13;
						,isnull(NextVersion.[ExternalGroupSubTypeID] , PreviousVersion.[ExternalGroupSubTypeID])&#13;
						,isnull(NextVersion.[ExternalGroupCategoryID] , PreviousVersion.[ExternalGroupCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationExternalGroupID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationExternalGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationExternalGroupID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ExternalGroupTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentOrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentRootExternalGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsManaged],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ExternalGroupTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ExternalGroupSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ExternalGroupCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationExternalGroupID] = roi.[OrganisationExternalGroupID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationExternalGroupID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalGroupOrganisationExternalRole_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalGroupOrganisationExternalRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationExternalGroupOrganisationExternalRole_RowHistory]&#13;
	WHERE		[OrganisationExternalGroupID] = @PK AND [OrganisationExternalRoleID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationExternalGroupOrganisationExternalRole]&#13;
	WHERE		[OrganisationExternalGroupID] = @PK AND [OrganisationExternalRoleID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
				and		PreviousVersion.[OrganisationExternalRoleID] = NextVersion.[OrganisationExternalRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalGroupOrganisationExternalRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalGroupOrganisationExternalRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationExternalGroupID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationExternalGroupOrganisationExternalRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationExternalGroupID] = [dbo].[OrganisationExternalGroupOrganisationExternalRole].[OrganisationExternalGroupID]&#13;
					and	AuditDataExtract.[OrganisationExternalRoleID] = [dbo].[OrganisationExternalGroupOrganisationExternalRole].[OrganisationExternalRoleID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationExternalGroupID]&#13;
				,[OrganisationExternalRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationExternalGroupOrganisationExternalRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationExternalGroupID] = MostRecentRows.[OrganisationExternalGroupID]&#13;
				and		RowHistoryExtract.[OrganisationExternalRoleID] = MostRecentRows.[OrganisationExternalRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
				and		PreviousVersion.[OrganisationExternalRoleID] = NextVersion.[OrganisationExternalRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationExternalGroupID]&#13;
			,rh.[OrganisationExternalRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationExternalGroupID] = roi.[OrganisationExternalGroupID]&#13;
	and		rh.[OrganisationExternalRoleID] = roi.[OrganisationExternalRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationExternalGroupID],&#13;
			rh.[OrganisationExternalRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalRole_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 11:59AM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[ExternalRoleTemplateID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ParentOrganisationExternalRoleID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[ParentRootExternalRoleID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[ExternalRoleTypeID]int&#13;
,[ExternalRoleSubTypeID]int&#13;
,[ExternalRoleCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationExternalRole_RowHistory]&#13;
	WHERE		[OrganisationExternalRoleID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationExternalRoleID]&#13;
			,cast([ExternalRoleTemplateID] as varchar(50)) as [ExternalRoleTemplateID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([ParentOrganisationExternalRoleID] as varchar(50)) as [ParentOrganisationExternalRoleID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([ParentRootExternalRoleID] as varchar(50)) as [ParentRootExternalRoleID]&#13;
			,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
			,cast([ExternalRoleTypeID] as varchar(50)) as [ExternalRoleTypeID]&#13;
			,cast([ExternalRoleSubTypeID] as varchar(50)) as [ExternalRoleSubTypeID]&#13;
			,cast([ExternalRoleCategoryID] as varchar(50)) as [ExternalRoleCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationExternalRole]&#13;
	WHERE		[OrganisationExternalRoleID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[ExternalRoleTemplateID] , PreviousVersion.[ExternalRoleTemplateID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ParentOrganisationExternalRoleID] , PreviousVersion.[ParentOrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[ParentRootExternalRoleID] , PreviousVersion.[ParentRootExternalRoleID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[ExternalRoleTypeID] , PreviousVersion.[ExternalRoleTypeID])&#13;
						,isnull(NextVersion.[ExternalRoleSubTypeID] , PreviousVersion.[ExternalRoleSubTypeID])&#13;
						,isnull(NextVersion.[ExternalRoleCategoryID] , PreviousVersion.[ExternalRoleCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalRoleID] = NextVersion.[OrganisationExternalRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalRoleID]&#13;
			, nullif([ExternalRoleTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([ParentRootExternalRoleID],'&lt;-null-&gt;')&#13;
			, nullif([IsManaged],'&lt;-null-&gt;')&#13;
			, nullif([ExternalRoleTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ExternalRoleSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([ExternalRoleCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalRoleClaim_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalRoleClaim_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationExternalRoleClaimID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[ResourceID]uniqueidentifier&#13;
,[OperationID]uniqueidentifier&#13;
,[StateID]uniqueidentifier&#13;
,[StateItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationExternalRoleClaim_RowHistory]&#13;
	WHERE		[OrganisationExternalRoleClaimID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationExternalRoleClaimID]&#13;
			,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
			,cast([ResourceID] as varchar(50)) as [ResourceID]&#13;
			,cast([OperationID] as varchar(50)) as [OperationID]&#13;
			,cast([StateID] as varchar(50)) as [StateID]&#13;
			,cast([StateItemID] as varchar(50)) as [StateItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationExternalRoleClaim]&#13;
	WHERE		[OrganisationExternalRoleClaimID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalRoleClaimID] , PreviousVersion.[OrganisationExternalRoleClaimID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[ResourceID] , PreviousVersion.[ResourceID])&#13;
						,isnull(NextVersion.[OperationID] , PreviousVersion.[OperationID])&#13;
						,isnull(NextVersion.[StateID] , PreviousVersion.[StateID])&#13;
						,isnull(NextVersion.[StateItemID] , PreviousVersion.[StateItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalRoleClaimID] = NextVersion.[OrganisationExternalRoleClaimID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalRoleClaimID]&#13;
			, nullif([OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			, nullif([ResourceID],'&lt;-null-&gt;')&#13;
			, nullif([OperationID],'&lt;-null-&gt;')&#13;
			, nullif([StateID],'&lt;-null-&gt;')&#13;
			, nullif([StateItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationExternalRoleClaim_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationExternalRoleClaim_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationExternalRoleClaimID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[ResourceID]uniqueidentifier&#13;
,[OperationID]uniqueidentifier&#13;
,[StateID]uniqueidentifier&#13;
,[StateItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationExternalRoleClaimID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[ResourceID] varchar(50)&#13;
	,[OperationID] varchar(50)&#13;
	,[StateID] varchar(50)&#13;
	,[StateItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationExternalRoleClaimID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[ResourceID]&#13;
			,[OperationID]&#13;
			,[StateID]&#13;
			,[StateItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationExternalRoleClaim_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationExternalRoleClaimID] = [dbo].[OrganisationExternalRoleClaim].[OrganisationExternalRoleClaimID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationExternalRoleClaimID]&#13;
				,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
				,cast([ResourceID] as varchar(50)) as [ResourceID]&#13;
				,cast([OperationID] as varchar(50)) as [OperationID]&#13;
				,cast([StateID] as varchar(50)) as [StateID]&#13;
				,cast([StateItemID] as varchar(50)) as [StateItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationExternalRoleClaim]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationExternalRoleClaimID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationExternalRoleClaimID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleClaimID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[ResourceID]&#13;
			,RowHistoryExtract.[OperationID]&#13;
			,RowHistoryExtract.[StateID]&#13;
			,RowHistoryExtract.[StateItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationExternalRoleClaimID] = MostRecentRows.[OrganisationExternalRoleClaimID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationExternalRoleClaimID] , PreviousVersion.[OrganisationExternalRoleClaimID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[ResourceID] , PreviousVersion.[ResourceID])&#13;
						,isnull(NextVersion.[OperationID] , PreviousVersion.[OperationID])&#13;
						,isnull(NextVersion.[StateID] , PreviousVersion.[StateID])&#13;
						,isnull(NextVersion.[StateItemID] , PreviousVersion.[StateItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationExternalRoleClaimID] = NextVersion.[OrganisationExternalRoleClaimID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationExternalRoleClaimID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationExternalRoleClaimID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationExternalRoleClaimID]&#13;
			,nullif(rh.[OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ResourceID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OperationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[StateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[StateItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationExternalRoleClaimID] = roi.[OrganisationExternalRoleClaimID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationExternalRoleClaimID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationGroup_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationGroup_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[GroupTemplateID]uniqueidentifier&#13;
,[ParentOrganisationGroupID]uniqueidentifier&#13;
,[ParentRootGroupID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[GroupTypeID]int&#13;
,[GroupSubTypeID]int&#13;
,[GroupCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationGroup_RowHistory]&#13;
	WHERE		[OrganisationGroupID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([GroupTemplateID] as varchar(50)) as [GroupTemplateID]&#13;
			,cast([ParentOrganisationGroupID] as varchar(50)) as [ParentOrganisationGroupID]&#13;
			,cast([ParentRootGroupID] as varchar(50)) as [ParentRootGroupID]&#13;
			,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
			,cast([GroupTypeID] as varchar(50)) as [GroupTypeID]&#13;
			,cast([GroupSubTypeID] as varchar(50)) as [GroupSubTypeID]&#13;
			,cast([GroupCategoryID] as varchar(50)) as [GroupCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationGroup]&#13;
	WHERE		[OrganisationGroupID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[GroupTemplateID] , PreviousVersion.[GroupTemplateID])&#13;
						,isnull(NextVersion.[ParentOrganisationGroupID] , PreviousVersion.[ParentOrganisationGroupID])&#13;
						,isnull(NextVersion.[ParentRootGroupID] , PreviousVersion.[ParentRootGroupID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[GroupTypeID] , PreviousVersion.[GroupTypeID])&#13;
						,isnull(NextVersion.[GroupSubTypeID] , PreviousVersion.[GroupSubTypeID])&#13;
						,isnull(NextVersion.[GroupCategoryID] , PreviousVersion.[GroupCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([GroupTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganisationGroupID],'&lt;-null-&gt;')&#13;
			, nullif([ParentRootGroupID],'&lt;-null-&gt;')&#13;
			, nullif([IsManaged],'&lt;-null-&gt;')&#13;
			, nullif([GroupTypeID],'&lt;-null-&gt;')&#13;
			, nullif([GroupSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([GroupCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationGroup_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationGroup_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationGroupID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[GroupTemplateID]uniqueidentifier&#13;
,[ParentOrganisationGroupID]uniqueidentifier&#13;
,[ParentRootGroupID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[GroupTypeID]int&#13;
,[GroupSubTypeID]int&#13;
,[GroupCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationGroupID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[GroupTemplateID] varchar(50)&#13;
	,[ParentOrganisationGroupID] varchar(50)&#13;
	,[ParentRootGroupID] varchar(50)&#13;
	,[IsManaged] varchar(50)&#13;
	,[GroupTypeID] varchar(50)&#13;
	,[GroupSubTypeID] varchar(50)&#13;
	,[GroupCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			,[Name]&#13;
			,[OrganisationID]&#13;
			,[GroupTemplateID]&#13;
			,[ParentOrganisationGroupID]&#13;
			,[ParentRootGroupID]&#13;
			,[IsManaged]&#13;
			,[GroupTypeID]&#13;
			,[GroupSubTypeID]&#13;
			,[GroupCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationGroup_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationGroupID] = [dbo].[OrganisationGroup].[OrganisationGroupID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationGroupID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([GroupTemplateID] as varchar(50)) as [GroupTemplateID]&#13;
				,cast([ParentOrganisationGroupID] as varchar(50)) as [ParentOrganisationGroupID]&#13;
				,cast([ParentRootGroupID] as varchar(50)) as [ParentRootGroupID]&#13;
				,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
				,cast([GroupTypeID] as varchar(50)) as [GroupTypeID]&#13;
				,cast([GroupSubTypeID] as varchar(50)) as [GroupSubTypeID]&#13;
				,cast([GroupCategoryID] as varchar(50)) as [GroupCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationGroup]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationGroupID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationGroupID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationGroupID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[GroupTemplateID]&#13;
			,RowHistoryExtract.[ParentOrganisationGroupID]&#13;
			,RowHistoryExtract.[ParentRootGroupID]&#13;
			,RowHistoryExtract.[IsManaged]&#13;
			,RowHistoryExtract.[GroupTypeID]&#13;
			,RowHistoryExtract.[GroupSubTypeID]&#13;
			,RowHistoryExtract.[GroupCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationGroupID] = MostRecentRows.[OrganisationGroupID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[GroupTemplateID] , PreviousVersion.[GroupTemplateID])&#13;
						,isnull(NextVersion.[ParentOrganisationGroupID] , PreviousVersion.[ParentOrganisationGroupID])&#13;
						,isnull(NextVersion.[ParentRootGroupID] , PreviousVersion.[ParentRootGroupID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[GroupTypeID] , PreviousVersion.[GroupTypeID])&#13;
						,isnull(NextVersion.[GroupSubTypeID] , PreviousVersion.[GroupSubTypeID])&#13;
						,isnull(NextVersion.[GroupCategoryID] , PreviousVersion.[GroupCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationGroupID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationGroupID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[GroupTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentOrganisationGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentRootGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsManaged],'&lt;-null-&gt;')&#13;
			,nullif(rh.[GroupTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[GroupSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[GroupCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationGroupID] = roi.[OrganisationGroupID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationGroupID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationGroupOrganisationRole_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationGroupOrganisationRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationGroupOrganisationRole_RowHistory]&#13;
	WHERE		[OrganisationGroupID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			,[OrganisationRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationGroupOrganisationRole]&#13;
	WHERE		[OrganisationGroupID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			,[OrganisationRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationGroupOrganisationRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationGroupOrganisationRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationGroupID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationGroupID]&#13;
			,[OrganisationRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationGroupOrganisationRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationGroupID] = [dbo].[OrganisationGroupOrganisationRole].[OrganisationGroupID]&#13;
					and	AuditDataExtract.[OrganisationRoleID] = [dbo].[OrganisationGroupOrganisationRole].[OrganisationRoleID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationGroupID]&#13;
				,[OrganisationRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationGroupOrganisationRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationGroupID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationGroupID]&#13;
						,[OrganisationRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationGroupID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationGroupID] = MostRecentRows.[OrganisationGroupID]&#13;
				and		RowHistoryExtract.[OrganisationRoleID] = MostRecentRows.[OrganisationRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationGroupID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationGroupID]&#13;
						,[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationGroupID]&#13;
			,rh.[OrganisationRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationGroupID] = roi.[OrganisationGroupID]&#13;
	and		rh.[OrganisationRoleID] = roi.[OrganisationRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationGroupID],&#13;
			rh.[OrganisationRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationIdentityCheckProvider_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationIdentityCheckProvider_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[OrganisationIdentityCheckProviderID]int&#13;
,[IsDefault]bit&#13;
,[UserTypeID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationIdentityCheckProvider_RowHistory]&#13;
	WHERE		[OrganisationIdentityCheckProviderID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationIdentityCheckProviderID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
			,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
			,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationIdentityCheckProvider]&#13;
	WHERE		[OrganisationIdentityCheckProviderID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationIdentityCheckProviderID] , PreviousVersion.[OrganisationIdentityCheckProviderID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationIdentityCheckProviderID] = NextVersion.[OrganisationIdentityCheckProviderID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,[OrganisationIdentityCheckProviderID]&#13;
			, nullif([IsDefault],'&lt;-null-&gt;')&#13;
			, nullif([UserTypeID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationIdentityCheckProvider_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationIdentityCheckProvider_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[OrganisationIdentityCheckProviderID]int&#13;
,[IsDefault]bit&#13;
,[UserTypeID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationIdentityCheckProviderID] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[IdentityCheckProviderID] varchar(50)&#13;
	,[IsDefault] varchar(50)&#13;
	,[UserTypeID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationIdentityCheckProviderID]&#13;
			,[OrganisationID]&#13;
			,[IdentityCheckProviderID]&#13;
			,[IsDefault]&#13;
			,[UserTypeID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationIdentityCheckProvider_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationIdentityCheckProviderID] = [dbo].[OrganisationIdentityCheckProvider].[OrganisationIdentityCheckProviderID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationIdentityCheckProviderID]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
				,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
				,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationIdentityCheckProvider]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationIdentityCheckProviderID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationIdentityCheckProviderID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationIdentityCheckProviderID]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[IdentityCheckProviderID]&#13;
			,RowHistoryExtract.[IsDefault]&#13;
			,RowHistoryExtract.[UserTypeID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationIdentityCheckProviderID] = MostRecentRows.[OrganisationIdentityCheckProviderID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationIdentityCheckProviderID] , PreviousVersion.[OrganisationIdentityCheckProviderID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationIdentityCheckProviderID] = NextVersion.[OrganisationIdentityCheckProviderID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationIdentityCheckProviderID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationIdentityCheckProviderID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,rh.[OrganisationIdentityCheckProviderID]&#13;
			,nullif(rh.[IsDefault],'&lt;-null-&gt;')&#13;
			,nullif(rh.[UserTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationIdentityCheckProviderID] = roi.[OrganisationIdentityCheckProviderID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationIdentityCheckProviderID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationProductTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationProductTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationProductTemplateID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationProductTemplate_RowHistory]&#13;
	WHERE		[OrganisationProductTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationProductTemplateID]&#13;
			,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationProductTemplate]&#13;
	WHERE		[OrganisationProductTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationProductTemplateID] , PreviousVersion.[OrganisationProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationProductTemplateID] = NextVersion.[OrganisationProductTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationProductTemplateID]&#13;
			, nullif([ProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationProductTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationProductTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationProductTemplateID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationProductTemplateID] varchar(50)&#13;
	,[ProductTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationProductTemplateID]&#13;
			,[ProductTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationProductTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationProductTemplateID] = [dbo].[OrganisationProductTemplate].[OrganisationProductTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationProductTemplateID]&#13;
				,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationProductTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationProductTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationProductTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationProductTemplateID]&#13;
			,RowHistoryExtract.[ProductTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationProductTemplateID] = MostRecentRows.[OrganisationProductTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationProductTemplateID] , PreviousVersion.[OrganisationProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationProductTemplateID] = NextVersion.[OrganisationProductTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationProductTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationProductTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationProductTemplateID]&#13;
			,nullif(rh.[ProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationProductTemplateID] = roi.[OrganisationProductTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationProductTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationship_RowHistory](@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationship_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[AccountID]uniqueidentifier&#13;
,[ContactID]uniqueidentifier&#13;
,[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationRelationship_RowHistory]&#13;
	WHERE		[AccountID] = @PK AND [ContactID] = @PK2 AND [OrganisationRelationshipRoleID] = @PK3 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[AccountID]&#13;
			,[ContactID]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationRelationship]&#13;
	WHERE		[AccountID] = @PK AND [ContactID] = @PK2 AND [OrganisationRelationshipRoleID] = @PK3 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AccountID] , PreviousVersion.[AccountID])&#13;
						,isnull(NextVersion.[ContactID] , PreviousVersion.[ContactID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AccountID] = NextVersion.[AccountID]&#13;
				and		PreviousVersion.[ContactID] = NextVersion.[ContactID]&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AccountID]&#13;
			,[ContactID]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationship_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationship_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[AccountID]uniqueidentifier&#13;
,[ContactID]uniqueidentifier&#13;
,[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[AccountID] varchar(50)&#13;
	,[ContactID] varchar(50)&#13;
	,[OrganisationRelationshipRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[AccountID]&#13;
			,[ContactID]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationRelationship_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[AccountID] = [dbo].[OrganisationRelationship].[AccountID]&#13;
					and	AuditDataExtract.[ContactID] = [dbo].[OrganisationRelationship].[ContactID]&#13;
					and	AuditDataExtract.[OrganisationRelationshipRoleID] = [dbo].[OrganisationRelationship].[OrganisationRelationshipRoleID]&#13;
				) as [RowVersion]&#13;
				,[AccountID]&#13;
				,[ContactID]&#13;
				,[OrganisationRelationshipRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationRelationship]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[AccountID]&#13;
						,[ContactID]&#13;
						,[OrganisationRelationshipRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[AccountID]&#13;
						,[ContactID]&#13;
						,[OrganisationRelationshipRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[AccountID]&#13;
			,RowHistoryExtract.[ContactID]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[AccountID] = MostRecentRows.[AccountID]&#13;
				and		RowHistoryExtract.[ContactID] = MostRecentRows.[ContactID]&#13;
				and		RowHistoryExtract.[OrganisationRelationshipRoleID] = MostRecentRows.[OrganisationRelationshipRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[AccountID] , PreviousVersion.[AccountID])&#13;
						,isnull(NextVersion.[ContactID] , PreviousVersion.[ContactID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[AccountID] = NextVersion.[AccountID]&#13;
				and		PreviousVersion.[ContactID] = NextVersion.[ContactID]&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[AccountID]&#13;
						,[ContactID]&#13;
						,[OrganisationRelationshipRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[AccountID]&#13;
						,[ContactID]&#13;
						,[OrganisationRelationshipRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[AccountID]&#13;
			,rh.[ContactID]&#13;
			,rh.[OrganisationRelationshipRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[AccountID] = roi.[AccountID]&#13;
	and		rh.[ContactID] = roi.[ContactID]&#13;
	and		rh.[OrganisationRelationshipRoleID] = roi.[OrganisationRelationshipRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[AccountID],&#13;
			rh.[ContactID],&#13;
			rh.[OrganisationRelationshipRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationshipRole_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationshipRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (max)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[OrganisationRelationshipRoleStatusID]int&#13;
,[OrganisationRelationshipRoleStateID]int&#13;
,[OrganisationRelationshipRoleTypeID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationRelationshipRole_RowHistory]&#13;
	WHERE		[OrganisationRelationshipRoleID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([OrganisationRelationshipRoleStatusID] as varchar(50)) as [OrganisationRelationshipRoleStatusID]&#13;
			,cast([OrganisationRelationshipRoleStateID] as varchar(50)) as [OrganisationRelationshipRoleStateID]&#13;
			,cast([OrganisationRelationshipRoleTypeID] as varchar(50)) as [OrganisationRelationshipRoleTypeID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationRelationshipRole]&#13;
	WHERE		[OrganisationRelationshipRoleID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleStatusID] , PreviousVersion.[OrganisationRelationshipRoleStatusID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleStateID] , PreviousVersion.[OrganisationRelationshipRoleStateID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleTypeID] , PreviousVersion.[OrganisationRelationshipRoleTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationRelationshipRoleStatusID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationRelationshipRoleStateID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationRelationshipRoleTypeID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationshipRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationshipRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (max)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[OrganisationRelationshipRoleStatusID]int&#13;
,[OrganisationRelationshipRoleStateID]int&#13;
,[OrganisationRelationshipRoleTypeID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationRelationshipRoleID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[OrganisationRelationshipRoleStatusID] varchar(50)&#13;
	,[OrganisationRelationshipRoleStateID] varchar(50)&#13;
	,[OrganisationRelationshipRoleTypeID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[OrganisationID]&#13;
			,[OrganisationRelationshipRoleStatusID]&#13;
			,[OrganisationRelationshipRoleStateID]&#13;
			,[OrganisationRelationshipRoleTypeID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationRelationshipRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationRelationshipRoleID] = [dbo].[OrganisationRelationshipRole].[OrganisationRelationshipRoleID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationRelationshipRoleID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([OrganisationRelationshipRoleStatusID] as varchar(50)) as [OrganisationRelationshipRoleStatusID]&#13;
				,cast([OrganisationRelationshipRoleStateID] as varchar(50)) as [OrganisationRelationshipRoleStateID]&#13;
				,cast([OrganisationRelationshipRoleTypeID] as varchar(50)) as [OrganisationRelationshipRoleTypeID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationRelationshipRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationRelationshipRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationRelationshipRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleStatusID]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleStateID]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleTypeID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationRelationshipRoleID] = MostRecentRows.[OrganisationRelationshipRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleStatusID] , PreviousVersion.[OrganisationRelationshipRoleStatusID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleStateID] , PreviousVersion.[OrganisationRelationshipRoleStateID])&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleTypeID] , PreviousVersion.[OrganisationRelationshipRoleTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationRelationshipRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationRelationshipRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationRelationshipRoleID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationRelationshipRoleStatusID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationRelationshipRoleStateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationRelationshipRoleTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationRelationshipRoleID] = roi.[OrganisationRelationshipRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationRelationshipRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationshipRoleExternal_RowHistory](@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationshipRoleExternal_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationRelationshipRoleExternal_RowHistory]&#13;
	WHERE		[OrganisationRelationshipRoleID] = @PK AND [OrganisationExternalGroupID] = @PK2 AND [OrganisationExternalRoleID] = @PK3 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationRelationshipRoleExternal]&#13;
	WHERE		[OrganisationRelationshipRoleID] = @PK AND [OrganisationExternalGroupID] = @PK2 AND [OrganisationExternalRoleID] = @PK3 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
				and		PreviousVersion.[OrganisationExternalRoleID] = NextVersion.[OrganisationExternalRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRelationshipRoleExternal_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationRelationshipRoleExternal_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationRelationshipRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationRelationshipRoleID] varchar(50)&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRelationshipRoleID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationRelationshipRoleExternal_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationRelationshipRoleID] = [dbo].[OrganisationRelationshipRoleExternal].[OrganisationRelationshipRoleID]&#13;
					and	AuditDataExtract.[OrganisationExternalGroupID] = [dbo].[OrganisationRelationshipRoleExternal].[OrganisationExternalGroupID]&#13;
					and	AuditDataExtract.[OrganisationExternalRoleID] = [dbo].[OrganisationRelationshipRoleExternal].[OrganisationExternalRoleID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationRelationshipRoleID]&#13;
				,[OrganisationExternalGroupID]&#13;
				,[OrganisationExternalRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationRelationshipRoleExternal]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationRelationshipRoleID]&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationRelationshipRoleID]&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationRelationshipRoleID]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationRelationshipRoleID] = MostRecentRows.[OrganisationRelationshipRoleID]&#13;
				and		RowHistoryExtract.[OrganisationExternalGroupID] = MostRecentRows.[OrganisationExternalGroupID]&#13;
				and		RowHistoryExtract.[OrganisationExternalRoleID] = MostRecentRows.[OrganisationExternalRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRelationshipRoleID] , PreviousVersion.[OrganisationRelationshipRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRelationshipRoleID] = NextVersion.[OrganisationRelationshipRoleID]&#13;
				and		PreviousVersion.[OrganisationExternalGroupID] = NextVersion.[OrganisationExternalGroupID]&#13;
				and		PreviousVersion.[OrganisationExternalRoleID] = NextVersion.[OrganisationExternalRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationRelationshipRoleID]&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationRelationshipRoleID]&#13;
						,[OrganisationExternalGroupID]&#13;
						,[OrganisationExternalRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationRelationshipRoleID]&#13;
			,rh.[OrganisationExternalGroupID]&#13;
			,rh.[OrganisationExternalRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationRelationshipRoleID] = roi.[OrganisationRelationshipRoleID]&#13;
	and		rh.[OrganisationExternalGroupID] = roi.[OrganisationExternalGroupID]&#13;
	and		rh.[OrganisationExternalRoleID] = roi.[OrganisationExternalRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationRelationshipRoleID],&#13;
			rh.[OrganisationExternalGroupID],&#13;
			rh.[OrganisationExternalRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRole_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[RoleTemplateID]uniqueidentifier&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ParentOrganisationRoleID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[ParentRootRoleID]uniqueidentifier&#13;
,[IsManaged]bit&#13;
,[RoleTypeID]int&#13;
,[RoleSubTypeID]int&#13;
,[RoleCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationRole_RowHistory]&#13;
	WHERE		[OrganisationRoleID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationRoleID]&#13;
			,cast([RoleTemplateID] as varchar(50)) as [RoleTemplateID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([ParentOrganisationRoleID] as varchar(50)) as [ParentOrganisationRoleID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([ParentRootRoleID] as varchar(50)) as [ParentRootRoleID]&#13;
			,cast([IsManaged] as varchar(50)) as [IsManaged]&#13;
			,cast([RoleTypeID] as varchar(50)) as [RoleTypeID]&#13;
			,cast([RoleSubTypeID] as varchar(50)) as [RoleSubTypeID]&#13;
			,cast([RoleCategoryID] as varchar(50)) as [RoleCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationRole]&#13;
	WHERE		[OrganisationRoleID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[RoleTemplateID] , PreviousVersion.[RoleTemplateID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ParentOrganisationRoleID] , PreviousVersion.[ParentOrganisationRoleID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[ParentRootRoleID] , PreviousVersion.[ParentRootRoleID])&#13;
						,isnull(NextVersion.[IsManaged] , PreviousVersion.[IsManaged])&#13;
						,isnull(NextVersion.[RoleTypeID] , PreviousVersion.[RoleTypeID])&#13;
						,isnull(NextVersion.[RoleSubTypeID] , PreviousVersion.[RoleSubTypeID])&#13;
						,isnull(NextVersion.[RoleCategoryID] , PreviousVersion.[RoleCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRoleID]&#13;
			, nullif([RoleTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganisationRoleID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([ParentRootRoleID],'&lt;-null-&gt;')&#13;
			, nullif([IsManaged],'&lt;-null-&gt;')&#13;
			, nullif([RoleTypeID],'&lt;-null-&gt;')&#13;
			, nullif([RoleSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([RoleCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRoleClaim_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationRoleClaim_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationRoleClaimID]int&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[ResourceID]uniqueidentifier&#13;
,[OperationID]uniqueidentifier&#13;
,[StateID]uniqueidentifier&#13;
,[StateItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationRoleClaim_RowHistory]&#13;
	WHERE		[OrganisationRoleClaimID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationRoleClaimID]&#13;
			,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
			,cast([ResourceID] as varchar(50)) as [ResourceID]&#13;
			,cast([OperationID] as varchar(50)) as [OperationID]&#13;
			,cast([StateID] as varchar(50)) as [StateID]&#13;
			,cast([StateItemID] as varchar(50)) as [StateItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationRoleClaim]&#13;
	WHERE		[OrganisationRoleClaimID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRoleClaimID] , PreviousVersion.[OrganisationRoleClaimID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[ResourceID] , PreviousVersion.[ResourceID])&#13;
						,isnull(NextVersion.[OperationID] , PreviousVersion.[OperationID])&#13;
						,isnull(NextVersion.[StateID] , PreviousVersion.[StateID])&#13;
						,isnull(NextVersion.[StateItemID] , PreviousVersion.[StateItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRoleClaimID] = NextVersion.[OrganisationRoleClaimID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRoleClaimID]&#13;
			, nullif([OrganisationRoleID],'&lt;-null-&gt;')&#13;
			, nullif([ResourceID],'&lt;-null-&gt;')&#13;
			, nullif([OperationID],'&lt;-null-&gt;')&#13;
			, nullif([StateID],'&lt;-null-&gt;')&#13;
			, nullif([StateItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationRoleClaim_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationRoleClaim_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationRoleClaimID]int&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[ResourceID]uniqueidentifier&#13;
,[OperationID]uniqueidentifier&#13;
,[StateID]uniqueidentifier&#13;
,[StateItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationRoleClaimID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[ResourceID] varchar(50)&#13;
	,[OperationID] varchar(50)&#13;
	,[StateID] varchar(50)&#13;
	,[StateItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationRoleClaimID]&#13;
			,[OrganisationRoleID]&#13;
			,[ResourceID]&#13;
			,[OperationID]&#13;
			,[StateID]&#13;
			,[StateItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationRoleClaim_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationRoleClaimID] = [dbo].[OrganisationRoleClaim].[OrganisationRoleClaimID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationRoleClaimID]&#13;
				,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
				,cast([ResourceID] as varchar(50)) as [ResourceID]&#13;
				,cast([OperationID] as varchar(50)) as [OperationID]&#13;
				,cast([StateID] as varchar(50)) as [StateID]&#13;
				,cast([StateItemID] as varchar(50)) as [StateItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationRoleClaim]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationRoleClaimID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationRoleClaimID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationRoleClaimID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[ResourceID]&#13;
			,RowHistoryExtract.[OperationID]&#13;
			,RowHistoryExtract.[StateID]&#13;
			,RowHistoryExtract.[StateItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationRoleClaimID] = MostRecentRows.[OrganisationRoleClaimID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationRoleClaimID] , PreviousVersion.[OrganisationRoleClaimID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[ResourceID] , PreviousVersion.[ResourceID])&#13;
						,isnull(NextVersion.[OperationID] , PreviousVersion.[OperationID])&#13;
						,isnull(NextVersion.[StateID] , PreviousVersion.[StateID])&#13;
						,isnull(NextVersion.[StateItemID] , PreviousVersion.[StateItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationRoleClaimID] = NextVersion.[OrganisationRoleClaimID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationRoleClaimID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationRoleClaimID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationRoleClaimID]&#13;
			,nullif(rh.[OrganisationRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ResourceID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OperationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[StateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[StateItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationRoleClaimID] = roi.[OrganisationRoleClaimID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationRoleClaimID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationStructure_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationStructure_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationStructureID]uniqueidentifier&#13;
,[ParentOrganisationStructureID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[IsLeafNode]bit&#13;
,[OrganisationID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationStructure_RowHistory]&#13;
	WHERE		[OrganisationStructureID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationStructureID]&#13;
			,cast([ParentOrganisationStructureID] as varchar(50)) as [ParentOrganisationStructureID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationStructure]&#13;
	WHERE		[OrganisationStructureID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationStructureID] , PreviousVersion.[OrganisationStructureID])&#13;
						,isnull(NextVersion.[ParentOrganisationStructureID] , PreviousVersion.[ParentOrganisationStructureID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationStructureID] = NextVersion.[OrganisationStructureID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationStructureID]&#13;
			, nullif([ParentOrganisationStructureID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([IsLeafNode],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationStructure_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationStructure_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationStructureID]uniqueidentifier&#13;
,[ParentOrganisationStructureID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[IsLeafNode]bit&#13;
,[OrganisationID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationStructureID] varchar(50)&#13;
	,[ParentOrganisationStructureID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[IsLeafNode] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationStructureID]&#13;
			,[ParentOrganisationStructureID]&#13;
			,[Name]&#13;
			,[IsLeafNode]&#13;
			,[OrganisationID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationStructure_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationStructureID] = [dbo].[OrganisationStructure].[OrganisationStructureID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationStructureID]&#13;
				,cast([ParentOrganisationStructureID] as varchar(50)) as [ParentOrganisationStructureID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationStructure]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationStructureID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationStructureID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationStructureID]&#13;
			,RowHistoryExtract.[ParentOrganisationStructureID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[IsLeafNode]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationStructureID] = MostRecentRows.[OrganisationStructureID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationStructureID] , PreviousVersion.[OrganisationStructureID])&#13;
						,isnull(NextVersion.[ParentOrganisationStructureID] , PreviousVersion.[ParentOrganisationStructureID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationStructureID] = NextVersion.[OrganisationStructureID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationStructureID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationStructureID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationStructureID]&#13;
			,nullif(rh.[ParentOrganisationStructureID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsLeafNode],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationStructureID] = roi.[OrganisationStructureID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationStructureID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationTeam_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationTeam_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationTeamID]int&#13;
,[Name]nvarchar (100)&#13;
,[Description]nvarchar (max)&#13;
,[EmailAddress]nvarchar (max)&#13;
,[IsDefault]bit&#13;
,[TeamTypeID]int&#13;
,[OrganisationUnitID]int&#13;
,[TeamSubTypeID]int&#13;
,[TeamCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationTeam_RowHistory]&#13;
	WHERE		[OrganisationTeamID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationTeamID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([EmailAddress] as varchar(50)) as [EmailAddress]&#13;
			,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
			,cast([TeamTypeID] as varchar(50)) as [TeamTypeID]&#13;
			,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
			,cast([TeamSubTypeID] as varchar(50)) as [TeamSubTypeID]&#13;
			,cast([TeamCategoryID] as varchar(50)) as [TeamCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationTeam]&#13;
	WHERE		[OrganisationTeamID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationTeamID] , PreviousVersion.[OrganisationTeamID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[EmailAddress] , PreviousVersion.[EmailAddress])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[TeamTypeID] , PreviousVersion.[TeamTypeID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[TeamSubTypeID] , PreviousVersion.[TeamSubTypeID])&#13;
						,isnull(NextVersion.[TeamCategoryID] , PreviousVersion.[TeamCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationTeamID] = NextVersion.[OrganisationTeamID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationTeamID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([EmailAddress],'&lt;-null-&gt;')&#13;
			, nullif([IsDefault],'&lt;-null-&gt;')&#13;
			, nullif([TeamTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationUnitID],'&lt;-null-&gt;')&#13;
			, nullif([TeamSubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([TeamCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationTeam_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationTeam_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationTeamID]int&#13;
,[Name]nvarchar (100)&#13;
,[Description]nvarchar (max)&#13;
,[EmailAddress]nvarchar (max)&#13;
,[IsDefault]bit&#13;
,[TeamTypeID]int&#13;
,[OrganisationUnitID]int&#13;
,[TeamSubTypeID]int&#13;
,[TeamCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationTeamID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[EmailAddress] varchar(50)&#13;
	,[IsDefault] varchar(50)&#13;
	,[TeamTypeID] varchar(50)&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[TeamSubTypeID] varchar(50)&#13;
	,[TeamCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationTeamID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[EmailAddress]&#13;
			,[IsDefault]&#13;
			,[TeamTypeID]&#13;
			,[OrganisationUnitID]&#13;
			,[TeamSubTypeID]&#13;
			,[TeamCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationTeam_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationTeamID] = [dbo].[OrganisationTeam].[OrganisationTeamID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationTeamID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([EmailAddress] as varchar(50)) as [EmailAddress]&#13;
				,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
				,cast([TeamTypeID] as varchar(50)) as [TeamTypeID]&#13;
				,cast([OrganisationUnitID] as varchar(50)) as [OrganisationUnitID]&#13;
				,cast([TeamSubTypeID] as varchar(50)) as [TeamSubTypeID]&#13;
				,cast([TeamCategoryID] as varchar(50)) as [TeamCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationTeam]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationTeamID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationTeamID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationTeamID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[EmailAddress]&#13;
			,RowHistoryExtract.[IsDefault]&#13;
			,RowHistoryExtract.[TeamTypeID]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[TeamSubTypeID]&#13;
			,RowHistoryExtract.[TeamCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationTeamID] = MostRecentRows.[OrganisationTeamID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationTeamID] , PreviousVersion.[OrganisationTeamID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[EmailAddress] , PreviousVersion.[EmailAddress])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[TeamTypeID] , PreviousVersion.[TeamTypeID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[TeamSubTypeID] , PreviousVersion.[TeamSubTypeID])&#13;
						,isnull(NextVersion.[TeamCategoryID] , PreviousVersion.[TeamCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationTeamID] = NextVersion.[OrganisationTeamID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationTeamID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationTeamID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationTeamID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[EmailAddress],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDefault],'&lt;-null-&gt;')&#13;
			,nullif(rh.[TeamTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationUnitID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[TeamSubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[TeamCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationTeamID] = roi.[OrganisationTeamID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationTeamID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationTypeID]int&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[OrganisationTypeIdentityCheckTemplateID]int&#13;
,[UserTypeID]int&#13;
,[IsDefault]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationTypeUserTypeIdentityCheckTemplate_RowHistory]&#13;
	WHERE		[OrganisationTypeIdentityCheckTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationTypeIdentityCheckTemplateID]&#13;
			,cast([OrganisationTypeID] as varchar(50)) as [OrganisationTypeID]&#13;
			,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
			,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
			,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]&#13;
	WHERE		[OrganisationTypeIdentityCheckTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationTypeIdentityCheckTemplateID] , PreviousVersion.[OrganisationTypeIdentityCheckTemplateID])&#13;
						,isnull(NextVersion.[OrganisationTypeID] , PreviousVersion.[OrganisationTypeID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationTypeIdentityCheckTemplateID] = NextVersion.[OrganisationTypeIdentityCheckTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			, nullif([OrganisationTypeID],'&lt;-null-&gt;')&#13;
			, nullif([IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,[OrganisationTypeIdentityCheckTemplateID]&#13;
			, nullif([UserTypeID],'&lt;-null-&gt;')&#13;
			, nullif([IsDefault],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationTypeID]int&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[OrganisationTypeIdentityCheckTemplateID]int&#13;
,[UserTypeID]int&#13;
,[IsDefault]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationTypeIdentityCheckTemplateID] varchar(50)&#13;
	,[OrganisationTypeID] varchar(50)&#13;
	,[IdentityCheckProviderID] varchar(50)&#13;
	,[UserTypeID] varchar(50)&#13;
	,[IsDefault] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationTypeIdentityCheckTemplateID]&#13;
			,[OrganisationTypeID]&#13;
			,[IdentityCheckProviderID]&#13;
			,[UserTypeID]&#13;
			,[IsDefault]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationTypeUserTypeIdentityCheckTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationTypeIdentityCheckTemplateID] = [dbo].[OrganisationTypeUserTypeIdentityCheckTemplate].[OrganisationTypeIdentityCheckTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationTypeIdentityCheckTemplateID]&#13;
				,cast([OrganisationTypeID] as varchar(50)) as [OrganisationTypeID]&#13;
				,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
				,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
				,cast([IsDefault] as varchar(50)) as [IsDefault]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationTypeIdentityCheckTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationTypeIdentityCheckTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationTypeIdentityCheckTemplateID]&#13;
			,RowHistoryExtract.[OrganisationTypeID]&#13;
			,RowHistoryExtract.[IdentityCheckProviderID]&#13;
			,RowHistoryExtract.[UserTypeID]&#13;
			,RowHistoryExtract.[IsDefault]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationTypeIdentityCheckTemplateID] = MostRecentRows.[OrganisationTypeIdentityCheckTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationTypeIdentityCheckTemplateID] , PreviousVersion.[OrganisationTypeIdentityCheckTemplateID])&#13;
						,isnull(NextVersion.[OrganisationTypeID] , PreviousVersion.[OrganisationTypeID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[IsDefault] , PreviousVersion.[IsDefault])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationTypeIdentityCheckTemplateID] = NextVersion.[OrganisationTypeIdentityCheckTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationTypeIdentityCheckTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationTypeIdentityCheckTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			nullif(rh.[OrganisationTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,rh.[OrganisationTypeIdentityCheckTemplateID]&#13;
			,nullif(rh.[UserTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDefault],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationTypeIdentityCheckTemplateID] = roi.[OrganisationTypeIdentityCheckTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationTypeIdentityCheckTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnit_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationUnit_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationUnitID]int&#13;
,[Name]nvarchar (100)&#13;
,[Description]nvarchar (1000)&#13;
,[DivisionName]nvarchar (1000)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[OrganisationUnitTypeID]int&#13;
,[OrganisationUnitCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationUnit_RowHistory]&#13;
	WHERE		[OrganisationUnitID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([DivisionName] as varchar(50)) as [DivisionName]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([OrganisationUnitTypeID] as varchar(50)) as [OrganisationUnitTypeID]&#13;
			,cast([OrganisationUnitCategoryID] as varchar(50)) as [OrganisationUnitCategoryID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationUnit]&#13;
	WHERE		[OrganisationUnitID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[DivisionName] , PreviousVersion.[DivisionName])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationUnitTypeID] , PreviousVersion.[OrganisationUnitTypeID])&#13;
						,isnull(NextVersion.[OrganisationUnitCategoryID] , PreviousVersion.[OrganisationUnitCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([DivisionName],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationUnitTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationUnitCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnit_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationUnit_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationUnitID]int&#13;
,[Name]nvarchar (100)&#13;
,[Description]nvarchar (1000)&#13;
,[DivisionName]nvarchar (1000)&#13;
,[OrganisationID]uniqueidentifier&#13;
,[OrganisationUnitTypeID]int&#13;
,[OrganisationUnitCategoryID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[DivisionName] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[OrganisationUnitTypeID] varchar(50)&#13;
	,[OrganisationUnitCategoryID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[DivisionName]&#13;
			,[OrganisationID]&#13;
			,[OrganisationUnitTypeID]&#13;
			,[OrganisationUnitCategoryID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationUnit_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationUnitID] = [dbo].[OrganisationUnit].[OrganisationUnitID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationUnitID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([DivisionName] as varchar(50)) as [DivisionName]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([OrganisationUnitTypeID] as varchar(50)) as [OrganisationUnitTypeID]&#13;
				,cast([OrganisationUnitCategoryID] as varchar(50)) as [OrganisationUnitCategoryID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationUnit]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationUnitID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[DivisionName]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[OrganisationUnitTypeID]&#13;
			,RowHistoryExtract.[OrganisationUnitCategoryID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationUnitID] = MostRecentRows.[OrganisationUnitID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[DivisionName] , PreviousVersion.[DivisionName])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[OrganisationUnitTypeID] , PreviousVersion.[OrganisationUnitTypeID])&#13;
						,isnull(NextVersion.[OrganisationUnitCategoryID] , PreviousVersion.[OrganisationUnitCategoryID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationUnitID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DivisionName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationUnitTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationUnitCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationUnitID] = roi.[OrganisationUnitID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationUnitID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitOrganisationGroup_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitOrganisationGroup_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationUnitOrganisationGroup_RowHistory]&#13;
	WHERE		[OrganisationUnitID] = @PK AND [OrganisationGroupID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationGroupID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationUnitOrganisationGroup]&#13;
	WHERE		[OrganisationUnitID] = @PK AND [OrganisationGroupID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationGroupID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitOrganisationGroup_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitOrganisationGroup_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationUnitID]int&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[OrganisationGroupID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationGroupID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationUnitOrganisationGroup_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationUnitID] = [dbo].[OrganisationUnitOrganisationGroup].[OrganisationUnitID]&#13;
					and	AuditDataExtract.[OrganisationGroupID] = [dbo].[OrganisationUnitOrganisationGroup].[OrganisationGroupID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationUnitID]&#13;
				,[OrganisationGroupID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationUnitOrganisationGroup]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationUnitID]&#13;
						,[OrganisationGroupID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationUnitID]&#13;
						,[OrganisationGroupID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[OrganisationGroupID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationUnitID] = MostRecentRows.[OrganisationUnitID]&#13;
				and		RowHistoryExtract.[OrganisationGroupID] = MostRecentRows.[OrganisationGroupID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
				and		PreviousVersion.[OrganisationGroupID] = NextVersion.[OrganisationGroupID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationUnitID]&#13;
						,[OrganisationGroupID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationUnitID]&#13;
						,[OrganisationGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationUnitID]&#13;
			,rh.[OrganisationGroupID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationUnitID] = roi.[OrganisationUnitID]&#13;
	and		rh.[OrganisationGroupID] = roi.[OrganisationGroupID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationUnitID],&#13;
			rh.[OrganisationGroupID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitOrganisationRole_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitOrganisationRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationUnitOrganisationRole_RowHistory]&#13;
	WHERE		[OrganisationUnitID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationUnitOrganisationRole]&#13;
	WHERE		[OrganisationUnitID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitOrganisationRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitOrganisationRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationUnitID]int&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationUnitOrganisationRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationUnitID] = [dbo].[OrganisationUnitOrganisationRole].[OrganisationUnitID]&#13;
					and	AuditDataExtract.[OrganisationRoleID] = [dbo].[OrganisationUnitOrganisationRole].[OrganisationRoleID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationUnitID]&#13;
				,[OrganisationRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationUnitOrganisationRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationUnitID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationUnitID]&#13;
						,[OrganisationRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationUnitID] = MostRecentRows.[OrganisationUnitID]&#13;
				and		RowHistoryExtract.[OrganisationRoleID] = MostRecentRows.[OrganisationRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationUnitID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationUnitID]&#13;
						,[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationUnitID]&#13;
			,rh.[OrganisationRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationUnitID] = roi.[OrganisationUnitID]&#13;
	and		rh.[OrganisationRoleID] = roi.[OrganisationRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationUnitID],&#13;
			rh.[OrganisationRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitStructure_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitStructure_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganisationUnitStructureID]int&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ParentOrganisationUnitStructureID]int&#13;
,[IsLeafNode]bit&#13;
,[Name]nvarchar (200)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganisationUnitStructure_RowHistory]&#13;
	WHERE		[OrganisationUnitStructureID] = @PK AND [OrganisationUnitID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganisationUnitStructureID]&#13;
			,[OrganisationUnitID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([ParentOrganisationUnitStructureID] as varchar(50)) as [ParentOrganisationUnitStructureID]&#13;
			,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganisationUnitStructure]&#13;
	WHERE		[OrganisationUnitStructureID] = @PK AND [OrganisationUnitID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitStructureID] , PreviousVersion.[OrganisationUnitStructureID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ParentOrganisationUnitStructureID] , PreviousVersion.[ParentOrganisationUnitStructureID])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitStructureID] = NextVersion.[OrganisationUnitStructureID]&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitStructureID]&#13;
			,[OrganisationUnitID]&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganisationUnitStructureID],'&lt;-null-&gt;')&#13;
			, nullif([IsLeafNode],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganisationUnitStructure_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganisationUnitStructure_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganisationUnitStructureID]int&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[ParentOrganisationUnitStructureID]int&#13;
,[IsLeafNode]bit&#13;
,[Name]nvarchar (200)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganisationUnitStructureID] varchar(50)&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[ParentOrganisationUnitStructureID] varchar(50)&#13;
	,[IsLeafNode] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganisationUnitStructureID]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationID]&#13;
			,[ParentOrganisationUnitStructureID]&#13;
			,[IsLeafNode]&#13;
			,[Name]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganisationUnitStructure_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganisationUnitStructureID] = [dbo].[OrganisationUnitStructure].[OrganisationUnitStructureID]&#13;
					and	AuditDataExtract.[OrganisationUnitID] = [dbo].[OrganisationUnitStructure].[OrganisationUnitID]&#13;
				) as [RowVersion]&#13;
				,[OrganisationUnitStructureID]&#13;
				,[OrganisationUnitID]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([ParentOrganisationUnitStructureID] as varchar(50)) as [ParentOrganisationUnitStructureID]&#13;
				,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganisationUnitStructure]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganisationUnitStructureID]&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganisationUnitStructureID]&#13;
						,[OrganisationUnitID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganisationUnitStructureID]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[ParentOrganisationUnitStructureID]&#13;
			,RowHistoryExtract.[IsLeafNode]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganisationUnitStructureID] = MostRecentRows.[OrganisationUnitStructureID]&#13;
				and		RowHistoryExtract.[OrganisationUnitID] = MostRecentRows.[OrganisationUnitID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganisationUnitStructureID] , PreviousVersion.[OrganisationUnitStructureID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[ParentOrganisationUnitStructureID] , PreviousVersion.[ParentOrganisationUnitStructureID])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganisationUnitStructureID] = NextVersion.[OrganisationUnitStructureID]&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganisationUnitStructureID]&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganisationUnitStructureID]&#13;
						,[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganisationUnitStructureID]&#13;
			,rh.[OrganisationUnitID]&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentOrganisationUnitStructureID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsLeafNode],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganisationUnitStructureID] = roi.[OrganisationUnitStructureID]&#13;
	and		rh.[OrganisationUnitID] = roi.[OrganisationUnitID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganisationUnitStructureID],&#13;
			rh.[OrganisationUnitID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganPricingItemAttributeTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganPricingItemAttributeTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganPricingItemAttributeID]uniqueidentifier&#13;
,[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganPricingItemAttributeTemplate_RowHistory]&#13;
	WHERE		[OrganPricingItemAttributeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganPricingItemAttributeID]&#13;
			,cast([OrganPricingItemTemplateID] as varchar(50)) as [OrganPricingItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganPricingItemAttributeTemplate]&#13;
	WHERE		[OrganPricingItemAttributeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganPricingItemAttributeID] , PreviousVersion.[OrganPricingItemAttributeID])&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganPricingItemAttributeID] = NextVersion.[OrganPricingItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganPricingItemAttributeID]&#13;
			, nullif([OrganPricingItemTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganPricingItemAttributeTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganPricingItemAttributeTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganPricingItemAttributeID]uniqueidentifier&#13;
,[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganPricingItemAttributeID] varchar(50)&#13;
	,[OrganPricingItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganPricingItemAttributeID]&#13;
			,[OrganPricingItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganPricingItemAttributeTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganPricingItemAttributeID] = [dbo].[OrganPricingItemAttributeTemplate].[OrganPricingItemAttributeID]&#13;
				) as [RowVersion]&#13;
				,[OrganPricingItemAttributeID]&#13;
				,cast([OrganPricingItemTemplateID] as varchar(50)) as [OrganPricingItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganPricingItemAttributeTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganPricingItemAttributeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganPricingItemAttributeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganPricingItemAttributeID]&#13;
			,RowHistoryExtract.[OrganPricingItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganPricingItemAttributeID] = MostRecentRows.[OrganPricingItemAttributeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganPricingItemAttributeID] , PreviousVersion.[OrganPricingItemAttributeID])&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganPricingItemAttributeID] = NextVersion.[OrganPricingItemAttributeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganPricingItemAttributeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganPricingItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganPricingItemAttributeID]&#13;
			,nullif(rh.[OrganPricingItemTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganPricingItemAttributeID] = roi.[OrganPricingItemAttributeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganPricingItemAttributeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganPricingItemTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganPricingItemTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganPricingItemTemplate_RowHistory]&#13;
	WHERE		[OrganPricingItemTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganPricingItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganPricingItemTemplate]&#13;
	WHERE		[OrganPricingItemTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganPricingItemTemplateID] = NextVersion.[OrganPricingItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganPricingItemTemplateID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganPricingItemTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganPricingItemTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganPricingItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganPricingItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganPricingItemTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganPricingItemTemplateID] = [dbo].[OrganPricingItemTemplate].[OrganPricingItemTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganPricingItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganPricingItemTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganPricingItemTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganPricingItemTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganPricingItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganPricingItemTemplateID] = MostRecentRows.[OrganPricingItemTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganPricingItemTemplateID] = NextVersion.[OrganPricingItemTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganPricingItemTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganPricingItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganPricingItemTemplateID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganPricingItemTemplateID] = roi.[OrganPricingItemTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganPricingItemTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductItemTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductItemTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductItemTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductItemTemplate_RowHistory]&#13;
	WHERE		[OrganProductItemTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductItemTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([OrganPricingItemTemplateID] as varchar(50)) as [OrganPricingItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductItemTemplate]&#13;
	WHERE		[OrganProductItemTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductItemTemplateID] , PreviousVersion.[OrganProductItemTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductItemTemplateID] = NextVersion.[OrganProductItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductItemTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([OrganPricingItemTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductItemTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductItemTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductItemTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[OrganPricingItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductItemTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[OrganPricingItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductItemTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[OrganPricingItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductItemTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductItemTemplateID] = [dbo].[OrganProductItemTemplate].[OrganProductItemTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductItemTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([OrganPricingItemTemplateID] as varchar(50)) as [OrganPricingItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductItemTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductItemTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductItemTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductItemTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[OrganPricingItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductItemTemplateID] = MostRecentRows.[OrganProductItemTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductItemTemplateID] , PreviousVersion.[OrganProductItemTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[OrganPricingItemTemplateID] , PreviousVersion.[OrganPricingItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductItemTemplateID] = NextVersion.[OrganProductItemTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductItemTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductItemTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganPricingItemTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductItemTemplateID] = roi.[OrganProductItemTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductItemTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductProductActionTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductProductActionTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductProductActiongTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionTemplateID]uniqueidentifier&#13;
,[WorkflowActionProductPlaceholderID]uniqueidentifier&#13;
,[ParentOrganProductTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductProductActionTemplate_RowHistory]&#13;
	WHERE		[OrganProductProductActiongTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductProductActiongTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowActionTemplateID] as varchar(50)) as [WorkflowActionTemplateID]&#13;
			,cast([WorkflowActionProductPlaceholderID] as varchar(50)) as [WorkflowActionProductPlaceholderID]&#13;
			,cast([ParentOrganProductTemplateID] as varchar(50)) as [ParentOrganProductTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductProductActionTemplate]&#13;
	WHERE		[OrganProductProductActiongTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductProductActiongTemplateID] , PreviousVersion.[OrganProductProductActiongTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionTemplateID] , PreviousVersion.[WorkflowActionTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionProductPlaceholderID] , PreviousVersion.[WorkflowActionProductPlaceholderID])&#13;
						,isnull(NextVersion.[ParentOrganProductTemplateID] , PreviousVersion.[ParentOrganProductTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductProductActiongTemplateID] = NextVersion.[OrganProductProductActiongTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductProductActiongTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowActionTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowActionProductPlaceholderID],'&lt;-null-&gt;')&#13;
			, nullif([ParentOrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductProductActionTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductProductActionTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:00PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductProductActiongTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionTemplateID]uniqueidentifier&#13;
,[WorkflowActionProductPlaceholderID]uniqueidentifier&#13;
,[ParentOrganProductTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductProductActiongTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowActionTemplateID] varchar(50)&#13;
	,[WorkflowActionProductPlaceholderID] varchar(50)&#13;
	,[ParentOrganProductTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductProductActiongTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowActionTemplateID]&#13;
			,[WorkflowActionProductPlaceholderID]&#13;
			,[ParentOrganProductTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductProductActionTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductProductActiongTemplateID] = [dbo].[OrganProductProductActionTemplate].[OrganProductProductActiongTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductProductActiongTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowActionTemplateID] as varchar(50)) as [WorkflowActionTemplateID]&#13;
				,cast([WorkflowActionProductPlaceholderID] as varchar(50)) as [WorkflowActionProductPlaceholderID]&#13;
				,cast([ParentOrganProductTemplateID] as varchar(50)) as [ParentOrganProductTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductProductActionTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductProductActiongTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductProductActiongTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductProductActiongTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowActionTemplateID]&#13;
			,RowHistoryExtract.[WorkflowActionProductPlaceholderID]&#13;
			,RowHistoryExtract.[ParentOrganProductTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductProductActiongTemplateID] = MostRecentRows.[OrganProductProductActiongTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductProductActiongTemplateID] , PreviousVersion.[OrganProductProductActiongTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionTemplateID] , PreviousVersion.[WorkflowActionTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionProductPlaceholderID] , PreviousVersion.[WorkflowActionProductPlaceholderID])&#13;
						,isnull(NextVersion.[ParentOrganProductTemplateID] , PreviousVersion.[ParentOrganProductTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductProductActiongTemplateID] = NextVersion.[OrganProductProductActiongTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductProductActiongTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductProductActiongTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductProductActiongTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowActionTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowActionProductPlaceholderID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentOrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductProductActiongTemplateID] = roi.[OrganProductProductActiongTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductProductActiongTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductTargetTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductTargetTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductTargetTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductTargetTemplate_RowHistory]&#13;
	WHERE		[OrganProductTargetTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductTargetTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([OrganTargetItemTemplateID] as varchar(50)) as [OrganTargetItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductTargetTemplate]&#13;
	WHERE		[OrganProductTargetTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductTargetTemplateID] , PreviousVersion.[OrganProductTargetTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductTargetTemplateID] = NextVersion.[OrganProductTargetTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductTargetTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([OrganTargetItemTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductTargetTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductTargetTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductTargetTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductTargetTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[OrganTargetItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductTargetTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[OrganTargetItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductTargetTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductTargetTemplateID] = [dbo].[OrganProductTargetTemplate].[OrganProductTargetTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductTargetTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([OrganTargetItemTemplateID] as varchar(50)) as [OrganTargetItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductTargetTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductTargetTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductTargetTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductTargetTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[OrganTargetItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductTargetTemplateID] = MostRecentRows.[OrganProductTargetTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductTargetTemplateID] , PreviousVersion.[OrganProductTargetTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductTargetTemplateID] = NextVersion.[OrganProductTargetTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductTargetTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductTargetTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductTargetTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganTargetItemTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductTargetTemplateID] = roi.[OrganProductTargetTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductTargetTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[ParentID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductTemplate_RowHistory]&#13;
	WHERE		[OrganProductTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductTemplateID]&#13;
			,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
			,cast([ParentID] as varchar(50)) as [ParentID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductTemplate]&#13;
	WHERE		[OrganProductTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductTemplateID] = NextVersion.[OrganProductTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductTemplateID]&#13;
			, nullif([ProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([ParentID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductTemplateID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[ParentID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[ProductTemplateID] varchar(50)&#13;
	,[ParentID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductTemplateID]&#13;
			,[ProductTemplateID]&#13;
			,[ParentID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductTemplateID] = [dbo].[OrganProductTemplate].[OrganProductTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductTemplateID]&#13;
				,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
				,cast([ParentID] as varchar(50)) as [ParentID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[ProductTemplateID]&#13;
			,RowHistoryExtract.[ParentID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductTemplateID] = MostRecentRows.[OrganProductTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[ParentID] , PreviousVersion.[ParentID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductTemplateID] = NextVersion.[OrganProductTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductTemplateID]&#13;
			,nullif(rh.[ProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductTemplateID] = roi.[OrganProductTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductUserTypeIdentityCheckID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[UserTypeID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductUserTypeExternalIdentityCheckTemplate_RowHistory]&#13;
	WHERE		[OrganProductUserTypeIdentityCheckID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductUserTypeIdentityCheckID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
			,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
			,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
			,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]&#13;
	WHERE		[OrganProductUserTypeIdentityCheckID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductUserTypeIdentityCheckID] , PreviousVersion.[OrganProductUserTypeIdentityCheckID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductUserTypeIdentityCheckID] = NextVersion.[OrganProductUserTypeIdentityCheckID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductUserTypeIdentityCheckID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			, nullif([UserTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductUserTypeIdentityCheckID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[UserTypeID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductUserTypeIdentityCheckID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[IdentityCheckProviderID] varchar(50)&#13;
	,[UserTypeID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductUserTypeIdentityCheckID]&#13;
			,[OrganProductTemplateID]&#13;
			,[IdentityCheckProviderID]&#13;
			,[UserTypeID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductUserTypeExternalIdentityCheckTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductUserTypeIdentityCheckID] = [dbo].[OrganProductUserTypeExternalIdentityCheckTemplate].[OrganProductUserTypeIdentityCheckID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductUserTypeIdentityCheckID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
				,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
				,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
				,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductUserTypeIdentityCheckID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductUserTypeIdentityCheckID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductUserTypeIdentityCheckID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[IdentityCheckProviderID]&#13;
			,RowHistoryExtract.[UserTypeID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductUserTypeIdentityCheckID] = MostRecentRows.[OrganProductUserTypeIdentityCheckID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductUserTypeIdentityCheckID] , PreviousVersion.[OrganProductUserTypeIdentityCheckID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductUserTypeIdentityCheckID] = NextVersion.[OrganProductUserTypeIdentityCheckID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductUserTypeIdentityCheckID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductUserTypeIdentityCheckID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductUserTypeIdentityCheckID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[UserTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductUserTypeIdentityCheckID] = roi.[OrganProductUserTypeIdentityCheckID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductUserTypeIdentityCheckID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionClaimTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionClaimTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowActionClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionClaimTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowActionClaimTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowActionClaimTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowActionClaimTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowActionClaimTemplateID] as varchar(50)) as [WorkflowActionClaimTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowActionClaimTemplate]&#13;
	WHERE		[OrganProductWorkflowActionClaimTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionClaimTemplateID] , PreviousVersion.[OrganProductWorkflowActionClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionClaimTemplateID] , PreviousVersion.[WorkflowActionClaimTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionClaimTemplateID] = NextVersion.[OrganProductWorkflowActionClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionClaimTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowActionClaimTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionClaimTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionClaimTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowActionClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionClaimTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowActionClaimTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowActionClaimTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionClaimTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowActionClaimTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowActionClaimTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowActionClaimTemplateID] = [dbo].[OrganProductWorkflowActionClaimTemplate].[OrganProductWorkflowActionClaimTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowActionClaimTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowActionClaimTemplateID] as varchar(50)) as [WorkflowActionClaimTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowActionClaimTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowActionClaimTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowActionClaimTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowActionClaimTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowActionClaimTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowActionClaimTemplateID] = MostRecentRows.[OrganProductWorkflowActionClaimTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionClaimTemplateID] , PreviousVersion.[OrganProductWorkflowActionClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionClaimTemplateID] , PreviousVersion.[WorkflowActionClaimTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionClaimTemplateID] = NextVersion.[OrganProductWorkflowActionClaimTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowActionClaimTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowActionClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowActionClaimTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowActionClaimTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowActionClaimTemplateID] = roi.[OrganProductWorkflowActionClaimTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowActionClaimTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionNotificationTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionNotificationTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowActionNotificationTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionNotificationTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowActionNotificationTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowActionNotificationTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowActionNotificationTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowActionNotificationTemplateID] as varchar(50)) as [WorkflowActionNotificationTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowActionNotificationTemplate]&#13;
	WHERE		[OrganProductWorkflowActionNotificationTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionNotificationTemplateID] , PreviousVersion.[OrganProductWorkflowActionNotificationTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionNotificationTemplateID] , PreviousVersion.[WorkflowActionNotificationTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionNotificationTemplateID] = NextVersion.[OrganProductWorkflowActionNotificationTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionNotificationTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowActionNotificationTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionNotificationTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionNotificationTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowActionNotificationTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionNotificationTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowActionNotificationTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowActionNotificationTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionNotificationTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowActionNotificationTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowActionNotificationTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowActionNotificationTemplateID] = [dbo].[OrganProductWorkflowActionNotificationTemplate].[OrganProductWorkflowActionNotificationTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowActionNotificationTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowActionNotificationTemplateID] as varchar(50)) as [WorkflowActionNotificationTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowActionNotificationTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowActionNotificationTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowActionNotificationTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowActionNotificationTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowActionNotificationTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowActionNotificationTemplateID] = MostRecentRows.[OrganProductWorkflowActionNotificationTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionNotificationTemplateID] , PreviousVersion.[OrganProductWorkflowActionNotificationTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionNotificationTemplateID] , PreviousVersion.[WorkflowActionNotificationTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionNotificationTemplateID] = NextVersion.[OrganProductWorkflowActionNotificationTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowActionNotificationTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowActionNotificationTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowActionNotificationTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowActionNotificationTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowActionNotificationTemplateID] = roi.[OrganProductWorkflowActionNotificationTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowActionNotificationTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionParameterTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionParameterTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowActionParameterTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionParameterTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowActionParameterTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowActionParameterTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowActionParameterTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowActionParameterTemplateID] as varchar(50)) as [WorkflowActionParameterTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowActionParameterTemplate]&#13;
	WHERE		[OrganProductWorkflowActionParameterTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionParameterTemplateID] , PreviousVersion.[OrganProductWorkflowActionParameterTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionParameterTemplateID] , PreviousVersion.[WorkflowActionParameterTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionParameterTemplateID] = NextVersion.[OrganProductWorkflowActionParameterTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionParameterTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowActionParameterTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowActionParameterTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowActionParameterTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowActionParameterTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowActionParameterTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowActionParameterTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowActionParameterTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowActionParameterTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowActionParameterTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowActionParameterTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowActionParameterTemplateID] = [dbo].[OrganProductWorkflowActionParameterTemplate].[OrganProductWorkflowActionParameterTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowActionParameterTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowActionParameterTemplateID] as varchar(50)) as [WorkflowActionParameterTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowActionParameterTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowActionParameterTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowActionParameterTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowActionParameterTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowActionParameterTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowActionParameterTemplateID] = MostRecentRows.[OrganProductWorkflowActionParameterTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowActionParameterTemplateID] , PreviousVersion.[OrganProductWorkflowActionParameterTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowActionParameterTemplateID] , PreviousVersion.[WorkflowActionParameterTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowActionParameterTemplateID] = NextVersion.[OrganProductWorkflowActionParameterTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowActionParameterTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowActionParameterTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowActionParameterTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowActionParameterTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowActionParameterTemplateID] = roi.[OrganProductWorkflowActionParameterTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowActionParameterTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowClaimTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowClaimTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowClaimID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowClaimTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowClaimTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowClaimTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowClaimID] as varchar(50)) as [WorkflowClaimID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowClaimTemplate]&#13;
	WHERE		[OrganProductWorkflowClaimTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowClaimTemplateID] , PreviousVersion.[OrganProductWorkflowClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowClaimID] , PreviousVersion.[WorkflowClaimID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowClaimTemplateID] = NextVersion.[OrganProductWorkflowClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowClaimTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowClaimID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowClaimTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowClaimTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowClaimID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowClaimTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowClaimID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowClaimTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowClaimID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowClaimTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowClaimTemplateID] = [dbo].[OrganProductWorkflowClaimTemplate].[OrganProductWorkflowClaimTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowClaimTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowClaimID] as varchar(50)) as [WorkflowClaimID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowClaimTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowClaimTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowClaimTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowClaimTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowClaimID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowClaimTemplateID] = MostRecentRows.[OrganProductWorkflowClaimTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowClaimTemplateID] , PreviousVersion.[OrganProductWorkflowClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowClaimID] , PreviousVersion.[WorkflowClaimID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowClaimTemplateID] = NextVersion.[OrganProductWorkflowClaimTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowClaimTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowClaimTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowClaimID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowClaimTemplateID] = roi.[OrganProductWorkflowClaimTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowClaimTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowParameterTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowParameterTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowParameterTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorflowParameterTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowParameterTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowParameterTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowParameterTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorflowParameterTemplateID] as varchar(50)) as [WorflowParameterTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowParameterTemplate]&#13;
	WHERE		[OrganProductWorkflowParameterTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowParameterTemplateID] , PreviousVersion.[OrganProductWorkflowParameterTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorflowParameterTemplateID] , PreviousVersion.[WorflowParameterTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowParameterTemplateID] = NextVersion.[OrganProductWorkflowParameterTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowParameterTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorflowParameterTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowParameterTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowParameterTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowParameterTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorflowParameterTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowParameterTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorflowParameterTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowParameterTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorflowParameterTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowParameterTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowParameterTemplateID] = [dbo].[OrganProductWorkflowParameterTemplate].[OrganProductWorkflowParameterTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowParameterTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorflowParameterTemplateID] as varchar(50)) as [WorflowParameterTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowParameterTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowParameterTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowParameterTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowParameterTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorflowParameterTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowParameterTemplateID] = MostRecentRows.[OrganProductWorkflowParameterTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowParameterTemplateID] , PreviousVersion.[OrganProductWorkflowParameterTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorflowParameterTemplateID] , PreviousVersion.[WorflowParameterTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowParameterTemplateID] = NextVersion.[OrganProductWorkflowParameterTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowParameterTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowParameterTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowParameterTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorflowParameterTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowParameterTemplateID] = roi.[OrganProductWorkflowParameterTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowParameterTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowStateActivityActionHierarchyTemplateID]uniqueidentifier&#13;
,[IsVisible]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowStateActivityActionHierarchyTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowStateActivityActionHierarchyTemplateID] as varchar(50)) as [WorkflowStateActivityActionHierarchyTemplateID]&#13;
			,cast([IsVisible] as varchar(50)) as [IsVisible]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate]&#13;
	WHERE		[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] , PreviousVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowStateActivityActionHierarchyTemplateID] , PreviousVersion.[WorkflowStateActivityActionHierarchyTemplateID])&#13;
						,isnull(NextVersion.[IsVisible] , PreviousVersion.[IsVisible])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = NextVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowStateActivityActionHierarchyTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsVisible],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowStateActivityActionHierarchyTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowStateActivityActionHierarchyTemplateID]uniqueidentifier&#13;
,[IsVisible]bit&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowStateActivityActionHierarchyTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowStateActivityActionHierarchyTemplateID] varchar(50)&#13;
	,[IsVisible] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowStateActivityActionHierarchyTemplateID]&#13;
			,[IsVisible]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowStateActivityActionHierarchyTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = [dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate].[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowStateActivityActionHierarchyTemplateID] as varchar(50)) as [WorkflowStateActivityActionHierarchyTemplateID]&#13;
				,cast([IsVisible] as varchar(50)) as [IsVisible]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowStateActivityActionHierarchyTemplateID]&#13;
			,RowHistoryExtract.[IsVisible]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = MostRecentRows.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] , PreviousVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowStateActivityActionHierarchyTemplateID] , PreviousVersion.[WorkflowStateActivityActionHierarchyTemplateID])&#13;
						,isnull(NextVersion.[IsVisible] , PreviousVersion.[IsVisible])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = NextVersion.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowStateActivityActionHierarchyTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsVisible],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowStateActivityActionHierarchyTemplateID] = roi.[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowStateActivityActionHierarchyTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowStateClaimTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowStateClaimTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganProductWorkflowStateClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowStateClaimID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganProductWorkflowStateClaimTemplate_RowHistory]&#13;
	WHERE		[OrganProductWorkflowStateClaimTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganProductWorkflowStateClaimTemplateID]&#13;
			,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
			,cast([WorkflowStateClaimID] as varchar(50)) as [WorkflowStateClaimID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganProductWorkflowStateClaimTemplate]&#13;
	WHERE		[OrganProductWorkflowStateClaimTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowStateClaimTemplateID] , PreviousVersion.[OrganProductWorkflowStateClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowStateClaimID] , PreviousVersion.[WorkflowStateClaimID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowStateClaimTemplateID] = NextVersion.[OrganProductWorkflowStateClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowStateClaimTemplateID]&#13;
			, nullif([OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([WorkflowStateClaimID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganProductWorkflowStateClaimTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganProductWorkflowStateClaimTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganProductWorkflowStateClaimTemplateID]uniqueidentifier&#13;
,[OrganProductTemplateID]uniqueidentifier&#13;
,[WorkflowStateClaimID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganProductWorkflowStateClaimTemplateID] varchar(50)&#13;
	,[OrganProductTemplateID] varchar(50)&#13;
	,[WorkflowStateClaimID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganProductWorkflowStateClaimTemplateID]&#13;
			,[OrganProductTemplateID]&#13;
			,[WorkflowStateClaimID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganProductWorkflowStateClaimTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganProductWorkflowStateClaimTemplateID] = [dbo].[OrganProductWorkflowStateClaimTemplate].[OrganProductWorkflowStateClaimTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganProductWorkflowStateClaimTemplateID]&#13;
				,cast([OrganProductTemplateID] as varchar(50)) as [OrganProductTemplateID]&#13;
				,cast([WorkflowStateClaimID] as varchar(50)) as [WorkflowStateClaimID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganProductWorkflowStateClaimTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganProductWorkflowStateClaimTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganProductWorkflowStateClaimTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganProductWorkflowStateClaimTemplateID]&#13;
			,RowHistoryExtract.[OrganProductTemplateID]&#13;
			,RowHistoryExtract.[WorkflowStateClaimID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganProductWorkflowStateClaimTemplateID] = MostRecentRows.[OrganProductWorkflowStateClaimTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganProductWorkflowStateClaimTemplateID] , PreviousVersion.[OrganProductWorkflowStateClaimTemplateID])&#13;
						,isnull(NextVersion.[OrganProductTemplateID] , PreviousVersion.[OrganProductTemplateID])&#13;
						,isnull(NextVersion.[WorkflowStateClaimID] , PreviousVersion.[WorkflowStateClaimID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganProductWorkflowStateClaimTemplateID] = NextVersion.[OrganProductWorkflowStateClaimTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganProductWorkflowStateClaimTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganProductWorkflowStateClaimTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganProductWorkflowStateClaimTemplateID]&#13;
			,nullif(rh.[OrganProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[WorkflowStateClaimID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganProductWorkflowStateClaimTemplateID] = roi.[OrganProductWorkflowStateClaimTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganProductWorkflowStateClaimTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganTargetItemAttributeTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganTargetItemAttributeTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganTargetItemAttributeID]uniqueidentifier&#13;
,[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganTargetItemAttributeTemplate_RowHistory]&#13;
	WHERE		[OrganTargetItemAttributeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganTargetItemAttributeID]&#13;
			,cast([OrganTargetItemTemplateID] as varchar(50)) as [OrganTargetItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganTargetItemAttributeTemplate]&#13;
	WHERE		[OrganTargetItemAttributeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganTargetItemAttributeID] , PreviousVersion.[OrganTargetItemAttributeID])&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganTargetItemAttributeID] = NextVersion.[OrganTargetItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganTargetItemAttributeID]&#13;
			, nullif([OrganTargetItemTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganTargetItemAttributeTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganTargetItemAttributeTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganTargetItemAttributeID]uniqueidentifier&#13;
,[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganTargetItemAttributeID] varchar(50)&#13;
	,[OrganTargetItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganTargetItemAttributeID]&#13;
			,[OrganTargetItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganTargetItemAttributeTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganTargetItemAttributeID] = [dbo].[OrganTargetItemAttributeTemplate].[OrganTargetItemAttributeID]&#13;
				) as [RowVersion]&#13;
				,[OrganTargetItemAttributeID]&#13;
				,cast([OrganTargetItemTemplateID] as varchar(50)) as [OrganTargetItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganTargetItemAttributeTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganTargetItemAttributeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganTargetItemAttributeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganTargetItemAttributeID]&#13;
			,RowHistoryExtract.[OrganTargetItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganTargetItemAttributeID] = MostRecentRows.[OrganTargetItemAttributeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganTargetItemAttributeID] , PreviousVersion.[OrganTargetItemAttributeID])&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganTargetItemAttributeID] = NextVersion.[OrganTargetItemAttributeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganTargetItemAttributeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganTargetItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganTargetItemAttributeID]&#13;
			,nullif(rh.[OrganTargetItemTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganTargetItemAttributeID] = roi.[OrganTargetItemAttributeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganTargetItemAttributeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganTargetItemTemplate_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[OrganTargetItemTemplate_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vOrganTargetItemTemplate_RowHistory]&#13;
	WHERE		[OrganTargetItemTemplateID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[OrganTargetItemTemplateID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[OrganTargetItemTemplate]&#13;
	WHERE		[OrganTargetItemTemplateID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganTargetItemTemplateID] = NextVersion.[OrganTargetItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganTargetItemTemplateID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[OrganTargetItemTemplate_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[OrganTargetItemTemplate_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[OrganTargetItemTemplateID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[OrganTargetItemTemplateID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[OrganTargetItemTemplateID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vOrganTargetItemTemplate_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[OrganTargetItemTemplateID] = [dbo].[OrganTargetItemTemplate].[OrganTargetItemTemplateID]&#13;
				) as [RowVersion]&#13;
				,[OrganTargetItemTemplateID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[OrganTargetItemTemplate]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[OrganTargetItemTemplateID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[OrganTargetItemTemplateID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[OrganTargetItemTemplateID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[OrganTargetItemTemplateID] = MostRecentRows.[OrganTargetItemTemplateID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[OrganTargetItemTemplateID] , PreviousVersion.[OrganTargetItemTemplateID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[OrganTargetItemTemplateID] = NextVersion.[OrganTargetItemTemplateID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[OrganTargetItemTemplateID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[OrganTargetItemTemplateID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[OrganTargetItemTemplateID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[OrganTargetItemTemplateID] = roi.[OrganTargetItemTemplateID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[OrganTargetItemTemplateID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_DeleteByPK]&#13;
&#13;
		@WorkflowID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[Workflow]&#13;
WHERE [dbo].[Workflow].[WorkflowID] = @WorkflowID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_Insert]&#13;
&#13;
		@WorkflowID    		uniqueidentifier OUTPUT,&#13;
		@Name          		nvarchar (200),&#13;
		@Description   		nvarchar (2000),&#13;
		@VersionNumber 		int = 0&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[Workflow]&#13;
(&#13;
		[WorkflowID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[Workflow].[WorkflowID],&#13;
		[dbo].[Workflow].[Name],&#13;
		[dbo].[Workflow].[Description],&#13;
		[dbo].[Workflow].[VersionNumber]&#13;
FROM  [dbo].[Workflow]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_SelectByPK]&#13;
&#13;
		@WorkflowID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[Workflow].[WorkflowID],&#13;
		[dbo].[Workflow].[Name],&#13;
		[dbo].[Workflow].[Description],&#13;
		[dbo].[Workflow].[VersionNumber]&#13;
FROM  [dbo].[Workflow]&#13;
&#13;
WHERE [dbo].[Workflow].[WorkflowID] = @WorkflowID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_SelectViewByPK]&#13;
&#13;
		@WorkflowID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[Workflow].[WorkflowID],&#13;
		[dbo].[Workflow].[Name],&#13;
		[dbo].[Workflow].[Description],&#13;
		[dbo].[Workflow].[VersionNumber]&#13;
FROM  [dbo].[Workflow]&#13;
&#13;
WHERE [dbo].[Workflow].[WorkflowID] = @WorkflowID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_Workflow_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_Workflow_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_Workflow_UpdateByPK]&#13;
&#13;
		@WorkflowID    		uniqueidentifier,&#13;
		@Name          		nvarchar (200),&#13;
		@Description   		nvarchar (2000),&#13;
		@VersionNumber 		int = 0&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[Workflow]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[Workflow].[WorkflowID] = @WorkflowID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_DeleteByPK]&#13;
&#13;
		@WorkflowActionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowAction]&#13;
WHERE [dbo].[WorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsTransistionStart = 1, @IsTransistionEnd = 1, @WorkflowActionTypeID = '00000000-0000-0000-0000-000000000000', @IsManual = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_Insert]&#13;
&#13;
		@WorkflowActionID     		uniqueidentifier OUTPUT,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (2000),&#13;
		@VersionNumber        		int = 0,&#13;
		@IsTransistionStart   		bit = 0,&#13;
		@IsTransistionEnd     		bit = 0,&#13;
		@WorkflowActionTypeID 		uniqueidentifier,&#13;
		@IsManual             		bit = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowActionID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowAction]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[IsTransistionStart],&#13;
		[IsTransistionEnd],&#13;
		[WorkflowActionTypeID],&#13;
		[IsManual],&#13;
		[WorkflowObjectTypeID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@IsTransistionStart,&#13;
		@IsTransistionEnd,&#13;
		@WorkflowActionTypeID,&#13;
		@IsManual,&#13;
		@WorkflowObjectTypeID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowAction].[Name],&#13;
		[dbo].[WorkflowAction].[Description],&#13;
		[dbo].[WorkflowAction].[VersionNumber],&#13;
		[dbo].[WorkflowAction].[IsTransistionStart],&#13;
		[dbo].[WorkflowAction].[IsTransistionEnd],&#13;
		[dbo].[WorkflowAction].[WorkflowActionTypeID],&#13;
		[dbo].[WorkflowAction].[IsManual],&#13;
		[dbo].[WorkflowAction].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowAction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_SelectByPK]&#13;
&#13;
		@WorkflowActionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowAction].[Name],&#13;
		[dbo].[WorkflowAction].[Description],&#13;
		[dbo].[WorkflowAction].[VersionNumber],&#13;
		[dbo].[WorkflowAction].[IsTransistionStart],&#13;
		[dbo].[WorkflowAction].[IsTransistionEnd],&#13;
		[dbo].[WorkflowAction].[WorkflowActionTypeID],&#13;
		[dbo].[WorkflowAction].[IsManual],&#13;
		[dbo].[WorkflowAction].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowAction]&#13;
&#13;
WHERE [dbo].[WorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowAction].[Name],&#13;
		[dbo].[WorkflowAction].[Description],&#13;
		[dbo].[WorkflowAction].[VersionNumber],&#13;
		[dbo].[WorkflowAction].[IsTransistionStart],&#13;
		[dbo].[WorkflowAction].[IsTransistionEnd],&#13;
		[dbo].[WorkflowAction].[WorkflowActionTypeID],&#13;
		[dbo].[WorkflowAction].[IsManual],&#13;
		[dbo].[WorkflowAction].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowAction]&#13;
&#13;
WHERE [dbo].[WorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowAction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowAction_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsTransistionStart = 1, @IsTransistionEnd = 1, @WorkflowActionTypeID = '00000000-0000-0000-0000-000000000000', @IsManual = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowAction_UpdateByPK]&#13;
&#13;
		@WorkflowActionID     		uniqueidentifier,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (2000),&#13;
		@VersionNumber        		int = 0,&#13;
		@IsTransistionStart   		bit = 0,&#13;
		@IsTransistionEnd     		bit = 0,&#13;
		@WorkflowActionTypeID 		uniqueidentifier,&#13;
		@IsManual             		bit = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowAction]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[IsTransistionStart] = @IsTransistionStart,&#13;
		[IsTransistionEnd] = @IsTransistionEnd,&#13;
		[WorkflowActionTypeID] = @WorkflowActionTypeID,&#13;
		[IsManual] = @IsManual,&#13;
		[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
WHERE [dbo].[WorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_DeleteByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionCompleteCondition]&#13;
WHERE [dbo].[WorkflowActionCompleteCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_Insert]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionCompleteCondition]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionCompleteCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_SelectByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowActionCompleteCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowActionCompleteCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionCompleteCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionCompleteCondition_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionCompleteCondition_UpdateByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionCompleteCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionCompleteCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_DeleteByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionExecuteCommand]&#13;
WHERE [dbo].[WorkflowActionExecuteCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_Insert]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionExecuteCommand]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionExecuteCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_SelectByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionExecuteCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionExecuteCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionExecuteCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionExecuteCommand_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionExecuteCommand_UpdateByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionExecuteCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionExecuteCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_DeleteByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionParamter]&#13;
WHERE [dbo].[WorkflowActionParamter].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionParamter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_Insert]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionParamter]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionParamter].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionParamter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowActionParamter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionParamter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_SelectByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionParamter].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionParamter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowActionParamter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionParamter]&#13;
&#13;
WHERE [dbo].[WorkflowActionParamter].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionParamter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionParamter].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionParamter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowActionParamter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionParamter]&#13;
&#13;
WHERE [dbo].[WorkflowActionParamter].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionParamter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionParamter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionParamter_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionParamter_UpdateByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionParamter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionParamter].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionParamter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_DeleteByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionPostCommand]&#13;
WHERE [dbo].[WorkflowActionPostCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_Insert]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionPostCommand]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPostCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_SelectByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPostCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionPostCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPostCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionPostCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPostCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPostCommand_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPostCommand_UpdateByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionPostCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionPostCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_DeleteByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionPreCommand]&#13;
WHERE [dbo].[WorkflowActionPreCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_Insert]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionPreCommand]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPreCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_SelectByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPreCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionPreCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowActionPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionPreCommand]&#13;
&#13;
WHERE [dbo].[WorkflowActionPreCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionPreCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionPreCommand_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionPreCommand_UpdateByPK]&#13;
&#13;
		@WorkflowActionID  		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionPreCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionPreCommand].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_DeleteByPK]&#13;
&#13;
		@WorkflowActionID      		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionRestriction]&#13;
WHERE [dbo].[WorkflowActionRestriction].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_Insert]&#13;
&#13;
		@WorkflowActionID      		uniqueidentifier OUTPUT,&#13;
		@WorkflowRestrictionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionRestriction]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowRestrictionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowRestrictionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionRestriction].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowActionRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionRestriction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_SelectByPK]&#13;
&#13;
		@WorkflowActionID      		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionRestriction].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowActionRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowActionRestriction].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID      		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionRestriction].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowActionRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowActionRestriction].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionRestriction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionRestriction_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionRestriction_UpdateByPK]&#13;
&#13;
		@WorkflowActionID      		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionRestriction]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionRestriction].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_DeleteByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_DeleteByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowActionStartCondition]&#13;
WHERE [dbo].[WorkflowActionStartCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_Insert] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_Insert]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowActionStartCondition]&#13;
(&#13;
		[WorkflowActionID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionStartCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_SelectByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_SelectByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowActionStartCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_SelectViewByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowActionID],&#13;
		[dbo].[WorkflowActionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowActionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowActionStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowActionStartCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowActionStartCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowActionStartCondition_UpdateByPK] @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowActionStartCondition_UpdateByPK]&#13;
&#13;
		@WorkflowActionID    		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowActionStartCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowActionStartCondition].[WorkflowActionID] = @WorkflowActionID&#13;
AND [dbo].[WorkflowActionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_DeleteByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_DeleteByPK]&#13;
&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowCommand]&#13;
WHERE [dbo].[WorkflowCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_Insert] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_Insert]&#13;
&#13;
		@WorkflowCommandID    		uniqueidentifier OUTPUT,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier,&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowCommandID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowCommand]&#13;
(&#13;
		[WorkflowCommandID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[WorkflowObjectTypeID],&#13;
		[WorkflowID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@WorkflowObjectTypeID,&#13;
		@WorkflowID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommand].[Name],&#13;
		[dbo].[WorkflowCommand].[Description],&#13;
		[dbo].[WorkflowCommand].[VersionNumber],&#13;
		[dbo].[WorkflowCommand].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCommand].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_SelectByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_SelectByPK]&#13;
&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommand].[Name],&#13;
		[dbo].[WorkflowCommand].[Description],&#13;
		[dbo].[WorkflowCommand].[VersionNumber],&#13;
		[dbo].[WorkflowCommand].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCommand].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCommand]&#13;
&#13;
WHERE [dbo].[WorkflowCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_SelectViewByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommand].[Name],&#13;
		[dbo].[WorkflowCommand].[Description],&#13;
		[dbo].[WorkflowCommand].[VersionNumber],&#13;
		[dbo].[WorkflowCommand].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCommand].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCommand]&#13;
&#13;
WHERE [dbo].[WorkflowCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommand_UpdateByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommand_UpdateByPK]&#13;
&#13;
		@WorkflowCommandID    		uniqueidentifier,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier,&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowCommand]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[WorkflowObjectTypeID] = @WorkflowObjectTypeID,&#13;
		[WorkflowID] = @WorkflowID&#13;
WHERE [dbo].[WorkflowCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandCondition_DeleteByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandCondition_DeleteByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowCommandCondition]&#13;
WHERE [dbo].[WorkflowCommandCondition].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandCondition_Insert] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandCondition_Insert]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowCommandCondition]&#13;
(&#13;
		[WorkflowCommandID],&#13;
		[WorkflowConditionID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid())&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandCondition].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandCondition].[WorkflowConditionID]&#13;
FROM  [dbo].[WorkflowCommandCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandCondition_SelectByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandCondition_SelectByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandCondition].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandCondition].[WorkflowConditionID]&#13;
FROM  [dbo].[WorkflowCommandCondition]&#13;
&#13;
WHERE [dbo].[WorkflowCommandCondition].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandCondition_SelectViewByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandCondition].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandCondition].[WorkflowConditionID]&#13;
FROM  [dbo].[WorkflowCommandCondition]&#13;
&#13;
WHERE [dbo].[WorkflowCommandCondition].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_DeleteByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_DeleteByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowCommandParameter]&#13;
WHERE [dbo].[WorkflowCommandParameter].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_Insert] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_Insert]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowCommandParameter]&#13;
(&#13;
		[WorkflowCommandID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandParameter].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowCommandParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowCommandParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_SelectByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_SelectByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandParameter].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowCommandParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowCommandParameter]&#13;
&#13;
WHERE [dbo].[WorkflowCommandParameter].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_SelectViewByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCommandParameter].[WorkflowCommandID],&#13;
		[dbo].[WorkflowCommandParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowCommandParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowCommandParameter]&#13;
&#13;
WHERE [dbo].[WorkflowCommandParameter].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCommandParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCommandParameter_UpdateByPK] @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCommandParameter_UpdateByPK]&#13;
&#13;
		@WorkflowCommandID   		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowCommandParameter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowCommandParameter].[WorkflowCommandID] = @WorkflowCommandID&#13;
AND [dbo].[WorkflowCommandParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_DeleteByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_DeleteByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowCondition]&#13;
WHERE [dbo].[WorkflowCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_Insert] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_Insert]&#13;
&#13;
		@WorkflowConditionID  		uniqueidentifier OUTPUT,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier,&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowConditionID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowCondition]&#13;
(&#13;
		[WorkflowConditionID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[WorkflowObjectTypeID],&#13;
		[WorkflowID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@WorkflowObjectTypeID,&#13;
		@WorkflowID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowCondition].[Name],&#13;
		[dbo].[WorkflowCondition].[Description],&#13;
		[dbo].[WorkflowCondition].[VersionNumber],&#13;
		[dbo].[WorkflowCondition].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCondition].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_SelectByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_SelectByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowCondition].[Name],&#13;
		[dbo].[WorkflowCondition].[Description],&#13;
		[dbo].[WorkflowCondition].[VersionNumber],&#13;
		[dbo].[WorkflowCondition].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCondition].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCondition]&#13;
&#13;
WHERE [dbo].[WorkflowCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_SelectViewByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowCondition].[Name],&#13;
		[dbo].[WorkflowCondition].[Description],&#13;
		[dbo].[WorkflowCondition].[VersionNumber],&#13;
		[dbo].[WorkflowCondition].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowCondition].[WorkflowID]&#13;
FROM  [dbo].[WorkflowCondition]&#13;
&#13;
WHERE [dbo].[WorkflowCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowCondition_UpdateByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowCondition_UpdateByPK]&#13;
&#13;
		@WorkflowConditionID  		uniqueidentifier,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@WorkflowObjectTypeID 		uniqueidentifier,&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowCondition]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[WorkflowObjectTypeID] = @WorkflowObjectTypeID,&#13;
		[WorkflowID] = @WorkflowID&#13;
WHERE [dbo].[WorkflowCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_DeleteByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_DeleteByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowConditionParameter]&#13;
WHERE [dbo].[WorkflowConditionParameter].[WorkflowConditionID] = @WorkflowConditionID&#13;
AND [dbo].[WorkflowConditionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_Insert] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_Insert]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowConditionParameter]&#13;
(&#13;
		[WorkflowConditionID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowConditionParameter].[WorkflowConditionID],&#13;
		[dbo].[WorkflowConditionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowConditionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowConditionParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_SelectByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_SelectByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowConditionParameter].[WorkflowConditionID],&#13;
		[dbo].[WorkflowConditionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowConditionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowConditionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowConditionParameter].[WorkflowConditionID] = @WorkflowConditionID&#13;
AND [dbo].[WorkflowConditionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_SelectViewByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowConditionParameter].[WorkflowConditionID],&#13;
		[dbo].[WorkflowConditionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowConditionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowConditionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowConditionParameter].[WorkflowConditionID] = @WorkflowConditionID&#13;
AND [dbo].[WorkflowConditionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowConditionParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowConditionParameter_UpdateByPK] @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowConditionParameter_UpdateByPK]&#13;
&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowConditionParameter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowConditionParameter].[WorkflowConditionID] = @WorkflowConditionID&#13;
AND [dbo].[WorkflowConditionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_DeleteByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_DeleteByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowDecision]&#13;
WHERE [dbo].[WorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_Insert] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsTransistionStart = 1, @IsTransistionEnd = 1, @WorkflowDecisionTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_Insert]&#13;
&#13;
		@WorkflowDecisionID     		uniqueidentifier OUTPUT,&#13;
		@Name                   		nvarchar (200),&#13;
		@Description            		nvarchar (2000),&#13;
		@VersionNumber          		int = 0,&#13;
		@IsTransistionStart     		bit = 0,&#13;
		@IsTransistionEnd       		bit = 0,&#13;
		@WorkflowDecisionTypeID 		uniqueidentifier,&#13;
		@WorkflowObjectTypeID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowDecisionID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowDecision]&#13;
(&#13;
		[WorkflowDecisionID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[IsTransistionStart],&#13;
		[IsTransistionEnd],&#13;
		[WorkflowDecisionTypeID],&#13;
		[WorkflowObjectTypeID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@IsTransistionStart,&#13;
		@IsTransistionEnd,&#13;
		@WorkflowDecisionTypeID,&#13;
		@WorkflowObjectTypeID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecision].[Name],&#13;
		[dbo].[WorkflowDecision].[Description],&#13;
		[dbo].[WorkflowDecision].[VersionNumber],&#13;
		[dbo].[WorkflowDecision].[IsTransistionStart],&#13;
		[dbo].[WorkflowDecision].[IsTransistionEnd],&#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionTypeID],&#13;
		[dbo].[WorkflowDecision].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowDecision]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_SelectByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_SelectByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecision].[Name],&#13;
		[dbo].[WorkflowDecision].[Description],&#13;
		[dbo].[WorkflowDecision].[VersionNumber],&#13;
		[dbo].[WorkflowDecision].[IsTransistionStart],&#13;
		[dbo].[WorkflowDecision].[IsTransistionEnd],&#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionTypeID],&#13;
		[dbo].[WorkflowDecision].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowDecision]&#13;
&#13;
WHERE [dbo].[WorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_SelectViewByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_SelectViewByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecision].[Name],&#13;
		[dbo].[WorkflowDecision].[Description],&#13;
		[dbo].[WorkflowDecision].[VersionNumber],&#13;
		[dbo].[WorkflowDecision].[IsTransistionStart],&#13;
		[dbo].[WorkflowDecision].[IsTransistionEnd],&#13;
		[dbo].[WorkflowDecision].[WorkflowDecisionTypeID],&#13;
		[dbo].[WorkflowDecision].[WorkflowObjectTypeID]&#13;
FROM  [dbo].[WorkflowDecision]&#13;
&#13;
WHERE [dbo].[WorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecision_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecision_UpdateByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsTransistionStart = 1, @IsTransistionEnd = 1, @WorkflowDecisionTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecision_UpdateByPK]&#13;
&#13;
		@WorkflowDecisionID     		uniqueidentifier,&#13;
		@Name                   		nvarchar (200),&#13;
		@Description            		nvarchar (2000),&#13;
		@VersionNumber          		int = 0,&#13;
		@IsTransistionStart     		bit = 0,&#13;
		@IsTransistionEnd       		bit = 0,&#13;
		@WorkflowDecisionTypeID 		uniqueidentifier,&#13;
		@WorkflowObjectTypeID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowDecision]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[IsTransistionStart] = @IsTransistionStart,&#13;
		[IsTransistionEnd] = @IsTransistionEnd,&#13;
		[WorkflowDecisionTypeID] = @WorkflowDecisionTypeID,&#13;
		[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
WHERE [dbo].[WorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_DeleteByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_DeleteByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowCommandID  		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowDecisionExecuteCommand]&#13;
WHERE [dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_Insert] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_Insert]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID  		uniqueidentifier OUTPUT,&#13;
		@VersionNumber      		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowDecisionExecuteCommand]&#13;
(&#13;
		[WorkflowDecisionID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionExecuteCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_SelectByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_SelectByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowCommandID  		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_SelectViewByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowCommandID  		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowDecisionExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionExecuteCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionExecuteCommand_UpdateByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionExecuteCommand_UpdateByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowCommandID  		uniqueidentifier,&#13;
		@VersionNumber      		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowDecisionExecuteCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowDecisionExecuteCommand].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_DeleteByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_DeleteByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowDecisionFailureAction]&#13;
WHERE [dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionFailureAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_Insert] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_Insert]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowActionID   		uniqueidentifier OUTPUT,&#13;
		@VersionNumber      		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowDecisionFailureAction]&#13;
(&#13;
		[WorkflowDecisionID],&#13;
		[WorkflowActionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionFailureAction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_SelectByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_SelectByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionFailureAction]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionFailureAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_SelectViewByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_SelectViewByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionFailureAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionFailureAction]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionFailureAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionFailureAction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionFailureAction_UpdateByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionFailureAction_UpdateByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier,&#13;
		@VersionNumber      		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowDecisionFailureAction]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowDecisionFailureAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionFailureAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_DeleteByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_DeleteByPK]&#13;
&#13;
		@WorkflowDecisionID  		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowDecisionParameter]&#13;
WHERE [dbo].[WorkflowDecisionParameter].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_Insert] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_Insert]&#13;
&#13;
		@WorkflowDecisionID  		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowDecisionParameter]&#13;
(&#13;
		[WorkflowDecisionID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowDecisionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_SelectByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_SelectByPK]&#13;
&#13;
		@WorkflowDecisionID  		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowDecisionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionParameter].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_SelectViewByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowDecisionID  		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowDecisionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionParameter].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionParameter_UpdateByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionParameter_UpdateByPK]&#13;
&#13;
		@WorkflowDecisionID  		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowDecisionParameter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowDecisionParameter].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_DeleteByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_DeleteByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowDecisionSuccessAction]&#13;
WHERE [dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_Insert] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_Insert]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowActionID   		uniqueidentifier OUTPUT,&#13;
		@VersionNumber      		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowDecisionSuccessAction]&#13;
(&#13;
		[WorkflowDecisionID],&#13;
		[WorkflowActionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionSuccessAction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_SelectByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_SelectByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionSuccessAction]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_SelectViewByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_SelectViewByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowDecisionSuccessAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowDecisionSuccessAction]&#13;
&#13;
WHERE [dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowDecisionSuccessAction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowDecisionSuccessAction_UpdateByPK] @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowDecisionSuccessAction_UpdateByPK]&#13;
&#13;
		@WorkflowDecisionID 		uniqueidentifier,&#13;
		@WorkflowActionID   		uniqueidentifier,&#13;
		@VersionNumber      		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowDecisionSuccessAction]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowDecisionSuccessAction].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
AND [dbo].[WorkflowDecisionSuccessAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_DeleteByPK] @WorkflowHierarchyID = '00000000-0000-0000-0000-000000000000', @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_DeleteByPK]&#13;
&#13;
		@WorkflowHierarchyID   		uniqueidentifier,&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowHierarchy]&#13;
WHERE [dbo].[WorkflowHierarchy].[WorkflowHierarchyID] = @WorkflowHierarchyID&#13;
AND [dbo].[WorkflowHierarchy].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_Insert] @WorkflowHierarchyID = '00000000-0000-0000-0000-000000000000', @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @ChildComponentID = '00000000-0000-0000-0000-000000000000', @ParentComponentID = '00000000-0000-0000-0000-000000000000', @IsTransistionStart = 1, @IsTranistionEnd = 1, @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_Insert]&#13;
&#13;
		@WorkflowHierarchyID   		uniqueidentifier OUTPUT,&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@ChildComponentID      		uniqueidentifier,&#13;
		@ParentComponentID     		uniqueidentifier,&#13;
		@IsTransistionStart    		bit,&#13;
		@IsTranistionEnd       		bit,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowHierarchy]&#13;
(&#13;
		[WorkflowHierarchyID],&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowID],&#13;
		[ChildComponentID],&#13;
		[ParentComponentID],&#13;
		[IsTransistionStart],&#13;
		[IsTranistionEnd],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowHierarchyID,newid()),&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		@WorkflowID,&#13;
		@ChildComponentID,&#13;
		@ParentComponentID,&#13;
		@IsTransistionStart,&#13;
		@IsTranistionEnd,&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowHierarchy].[WorkflowHierarchyID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowID],&#13;
		[dbo].[WorkflowHierarchy].[ChildComponentID],&#13;
		[dbo].[WorkflowHierarchy].[ParentComponentID],&#13;
		[dbo].[WorkflowHierarchy].[IsTransistionStart],&#13;
		[dbo].[WorkflowHierarchy].[IsTranistionEnd],&#13;
		[dbo].[WorkflowHierarchy].[VersionNumber]&#13;
FROM  [dbo].[WorkflowHierarchy]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_SelectByPK] @WorkflowHierarchyID = '00000000-0000-0000-0000-000000000000', @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_SelectByPK]&#13;
&#13;
		@WorkflowHierarchyID   		uniqueidentifier,&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowHierarchy].[WorkflowHierarchyID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowID],&#13;
		[dbo].[WorkflowHierarchy].[ChildComponentID],&#13;
		[dbo].[WorkflowHierarchy].[ParentComponentID],&#13;
		[dbo].[WorkflowHierarchy].[IsTransistionStart],&#13;
		[dbo].[WorkflowHierarchy].[IsTranistionEnd],&#13;
		[dbo].[WorkflowHierarchy].[VersionNumber]&#13;
FROM  [dbo].[WorkflowHierarchy]&#13;
&#13;
WHERE [dbo].[WorkflowHierarchy].[WorkflowHierarchyID] = @WorkflowHierarchyID&#13;
AND [dbo].[WorkflowHierarchy].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_SelectViewByPK] @WorkflowHierarchyID = '00000000-0000-0000-0000-000000000000', @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_SelectViewByPK]&#13;
&#13;
		@WorkflowHierarchyID   		uniqueidentifier,&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowHierarchy].[WorkflowHierarchyID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowHierarchy].[WorkflowID],&#13;
		[dbo].[WorkflowHierarchy].[ChildComponentID],&#13;
		[dbo].[WorkflowHierarchy].[ParentComponentID],&#13;
		[dbo].[WorkflowHierarchy].[IsTransistionStart],&#13;
		[dbo].[WorkflowHierarchy].[IsTranistionEnd],&#13;
		[dbo].[WorkflowHierarchy].[VersionNumber]&#13;
FROM  [dbo].[WorkflowHierarchy]&#13;
&#13;
WHERE [dbo].[WorkflowHierarchy].[WorkflowHierarchyID] = @WorkflowHierarchyID&#13;
AND [dbo].[WorkflowHierarchy].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowHierarchy_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowHierarchy_UpdateByPK] @WorkflowHierarchyID = '00000000-0000-0000-0000-000000000000', @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @ChildComponentID = '00000000-0000-0000-0000-000000000000', @ParentComponentID = '00000000-0000-0000-0000-000000000000', @IsTransistionStart = 1, @IsTranistionEnd = 1, @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowHierarchy_UpdateByPK]&#13;
&#13;
		@WorkflowHierarchyID   		uniqueidentifier,&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@ChildComponentID      		uniqueidentifier,&#13;
		@ParentComponentID     		uniqueidentifier,&#13;
		@IsTransistionStart    		bit,&#13;
		@IsTranistionEnd       		bit,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowHierarchy]&#13;
SET&#13;
		[WorkflowID] = @WorkflowID,&#13;
		[ChildComponentID] = @ChildComponentID,&#13;
		[ParentComponentID] = @ParentComponentID,&#13;
		[IsTransistionStart] = @IsTransistionStart,&#13;
		[IsTranistionEnd] = @IsTranistionEnd,&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowHierarchy].[WorkflowHierarchyID] = @WorkflowHierarchyID&#13;
AND [dbo].[WorkflowHierarchy].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_DeleteByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainCompleteCondition]&#13;
WHERE [dbo].[WorkflowMainCompleteCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_Insert]&#13;
&#13;
		@WorkflowID          		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainCompleteCondition]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainCompleteCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_SelectByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowMainCompleteCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowMainCompleteCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainCompleteCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainCompleteCondition_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainCompleteCondition_UpdateByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainCompleteCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainCompleteCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_DeleteByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainExecuteCommand]&#13;
WHERE [dbo].[WorkflowMainExecuteCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_Insert]&#13;
&#13;
		@WorkflowID        		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainExecuteCommand]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainExecuteCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_SelectByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainExecuteCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainExecuteCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainExecuteCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainExecuteCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainExecuteCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainExecuteCommand_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainExecuteCommand_UpdateByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainExecuteCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainExecuteCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainExecuteCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_DeleteByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainParameter]&#13;
WHERE [dbo].[WorkflowMainParameter].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_Insert]&#13;
&#13;
		@WorkflowID          		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainParameter]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainParameter].[WorkflowID],&#13;
		[dbo].[WorkflowMainParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowMainParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_SelectByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainParameter].[WorkflowID],&#13;
		[dbo].[WorkflowMainParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowMainParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainParameter]&#13;
&#13;
WHERE [dbo].[WorkflowMainParameter].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainParameter].[WorkflowID],&#13;
		[dbo].[WorkflowMainParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowMainParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainParameter]&#13;
&#13;
WHERE [dbo].[WorkflowMainParameter].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainParameter_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainParameter_UpdateByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainParameter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainParameter].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_DeleteByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainPostCommand]&#13;
WHERE [dbo].[WorkflowMainPostCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_Insert]&#13;
&#13;
		@WorkflowID        		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainPostCommand]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPostCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_SelectByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPostCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainPostCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPostCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPostCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPostCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainPostCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPostCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPostCommand_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPostCommand_UpdateByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainPostCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainPostCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPostCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_DeleteByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainPreCommand]&#13;
WHERE [dbo].[WorkflowMainPreCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_Insert]&#13;
&#13;
		@WorkflowID        		uniqueidentifier OUTPUT,&#13;
		@WorkflowCommandID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainPreCommand]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowCommandID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowCommandID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPreCommand]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_SelectByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPreCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainPreCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_SelectViewByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowID],&#13;
		[dbo].[WorkflowMainPreCommand].[WorkflowCommandID],&#13;
		[dbo].[WorkflowMainPreCommand].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainPreCommand]&#13;
&#13;
WHERE [dbo].[WorkflowMainPreCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainPreCommand_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainPreCommand_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowCommandID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainPreCommand_UpdateByPK]&#13;
&#13;
		@WorkflowID        		uniqueidentifier,&#13;
		@WorkflowCommandID 		uniqueidentifier,&#13;
		@VersionNumber     		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainPreCommand]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainPreCommand].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainPreCommand].[WorkflowCommandID] = @WorkflowCommandID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_DeleteByPK]&#13;
&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainRestriction]&#13;
WHERE [dbo].[WorkflowMainRestriction].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_Insert]&#13;
&#13;
		@WorkflowID            		uniqueidentifier OUTPUT,&#13;
		@WorkflowRestrictionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainRestriction]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowRestrictionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowRestrictionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowMainRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowMainRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainRestriction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_SelectByPK]&#13;
&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowMainRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowMainRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowMainRestriction].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_SelectViewByPK]&#13;
&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowMainRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowMainRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowMainRestriction].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainRestriction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainRestriction_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainRestriction_UpdateByPK]&#13;
&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@WorkflowRestrictionID 		uniqueidentifier,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainRestriction]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainRestriction].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_DeleteByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_DeleteByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowMainStartCondition]&#13;
WHERE [dbo].[WorkflowMainStartCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_Insert] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_Insert]&#13;
&#13;
		@WorkflowID          		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID 		uniqueidentifier OUTPUT,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowMainStartCondition]&#13;
(&#13;
		[WorkflowID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainStartCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_SelectByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_SelectByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowMainStartCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_SelectViewByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowID],&#13;
		[dbo].[WorkflowMainStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowMainStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowMainStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowMainStartCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowMainStartCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowMainStartCondition_UpdateByPK] @WorkflowID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowMainStartCondition_UpdateByPK]&#13;
&#13;
		@WorkflowID          		uniqueidentifier,&#13;
		@WorkflowConditionID 		uniqueidentifier,&#13;
		@VersionNumber       		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowMainStartCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowMainStartCondition].[WorkflowID] = @WorkflowID&#13;
AND [dbo].[WorkflowMainStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_DeleteByPK] @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_DeleteByPK]&#13;
&#13;
		@WorkflowObjectTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowObjectType]&#13;
WHERE [dbo].[WorkflowObjectType].[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_Insert] @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @ObjectTypeName = 'ObjectTypeName', @ObjectTypeNameSpace = 'ObjectTypeNameSpace', @ObjectTypeAssembly = 'ObjectTypeAssembly', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_Insert]&#13;
&#13;
		@WorkflowObjectTypeID 		uniqueidentifier OUTPUT,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@ObjectTypeName       		nvarchar (1000),&#13;
		@ObjectTypeNameSpace  		nvarchar (1000),&#13;
		@ObjectTypeAssembly   		nvarchar (1000),&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowObjectTypeID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowObjectType]&#13;
(&#13;
		[WorkflowObjectTypeID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[ObjectTypeName],&#13;
		[ObjectTypeNameSpace],&#13;
		[ObjectTypeAssembly],&#13;
		[WorkflowID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowObjectTypeID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@ObjectTypeName,&#13;
		@ObjectTypeNameSpace,&#13;
		@ObjectTypeAssembly,&#13;
		@WorkflowID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowObjectType].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowObjectType].[Name],&#13;
		[dbo].[WorkflowObjectType].[Description],&#13;
		[dbo].[WorkflowObjectType].[VersionNumber],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeName],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeNameSpace],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeAssembly],&#13;
		[dbo].[WorkflowObjectType].[WorkflowID]&#13;
FROM  [dbo].[WorkflowObjectType]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_SelectByPK] @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_SelectByPK]&#13;
&#13;
		@WorkflowObjectTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowObjectType].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowObjectType].[Name],&#13;
		[dbo].[WorkflowObjectType].[Description],&#13;
		[dbo].[WorkflowObjectType].[VersionNumber],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeName],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeNameSpace],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeAssembly],&#13;
		[dbo].[WorkflowObjectType].[WorkflowID]&#13;
FROM  [dbo].[WorkflowObjectType]&#13;
&#13;
WHERE [dbo].[WorkflowObjectType].[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_SelectViewByPK] @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_SelectViewByPK]&#13;
&#13;
		@WorkflowObjectTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowObjectType].[WorkflowObjectTypeID],&#13;
		[dbo].[WorkflowObjectType].[Name],&#13;
		[dbo].[WorkflowObjectType].[Description],&#13;
		[dbo].[WorkflowObjectType].[VersionNumber],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeName],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeNameSpace],&#13;
		[dbo].[WorkflowObjectType].[ObjectTypeAssembly],&#13;
		[dbo].[WorkflowObjectType].[WorkflowID]&#13;
FROM  [dbo].[WorkflowObjectType]&#13;
&#13;
WHERE [dbo].[WorkflowObjectType].[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowObjectType_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowObjectType_UpdateByPK] @WorkflowObjectTypeID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @ObjectTypeName = 'ObjectTypeName', @ObjectTypeNameSpace = 'ObjectTypeNameSpace', @ObjectTypeAssembly = 'ObjectTypeAssembly', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowObjectType_UpdateByPK]&#13;
&#13;
		@WorkflowObjectTypeID 		uniqueidentifier,&#13;
		@Name                 		nvarchar (200),&#13;
		@Description          		nvarchar (1000),&#13;
		@VersionNumber        		int = 0,&#13;
		@ObjectTypeName       		nvarchar (1000),&#13;
		@ObjectTypeNameSpace  		nvarchar (1000),&#13;
		@ObjectTypeAssembly   		nvarchar (1000),&#13;
		@WorkflowID           		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowObjectType]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[ObjectTypeName] = @ObjectTypeName,&#13;
		[ObjectTypeNameSpace] = @ObjectTypeNameSpace,&#13;
		[ObjectTypeAssembly] = @ObjectTypeAssembly,&#13;
		[WorkflowID] = @WorkflowID&#13;
WHERE [dbo].[WorkflowObjectType].[WorkflowObjectTypeID] = @WorkflowObjectTypeID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_DeleteByPK] @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_DeleteByPK]&#13;
&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowParameter]&#13;
WHERE [dbo].[WorkflowParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_Insert] @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @ObjectType = 'ObjectType', @ObjectValue = 'ObjectValue', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_Insert]&#13;
&#13;
		@WorkflowParameterID 		uniqueidentifier OUTPUT,&#13;
		@Name                		nvarchar (200),&#13;
		@Description         		nvarchar (1000),&#13;
		@VersionNumber       		int,&#13;
		@ObjectType          		nvarchar (1000),&#13;
		@ObjectValue         		nvarchar (2000),&#13;
		@WorkflowID          		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowParameterID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowParameter]&#13;
(&#13;
		[WorkflowParameterID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[ObjectType],&#13;
		[ObjectValue],&#13;
		[WorkflowID]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@ObjectType,&#13;
		@ObjectValue,&#13;
		@WorkflowID&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowParameter].[Name],&#13;
		[dbo].[WorkflowParameter].[Description],&#13;
		[dbo].[WorkflowParameter].[VersionNumber],&#13;
		[dbo].[WorkflowParameter].[ObjectType],&#13;
		[dbo].[WorkflowParameter].[ObjectValue],&#13;
		[dbo].[WorkflowParameter].[WorkflowID]&#13;
FROM  [dbo].[WorkflowParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_SelectByPK] @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_SelectByPK]&#13;
&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowParameter].[Name],&#13;
		[dbo].[WorkflowParameter].[Description],&#13;
		[dbo].[WorkflowParameter].[VersionNumber],&#13;
		[dbo].[WorkflowParameter].[ObjectType],&#13;
		[dbo].[WorkflowParameter].[ObjectValue],&#13;
		[dbo].[WorkflowParameter].[WorkflowID]&#13;
FROM  [dbo].[WorkflowParameter]&#13;
&#13;
WHERE [dbo].[WorkflowParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_SelectViewByPK] @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowParameterID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowParameter].[Name],&#13;
		[dbo].[WorkflowParameter].[Description],&#13;
		[dbo].[WorkflowParameter].[VersionNumber],&#13;
		[dbo].[WorkflowParameter].[ObjectType],&#13;
		[dbo].[WorkflowParameter].[ObjectValue],&#13;
		[dbo].[WorkflowParameter].[WorkflowID]&#13;
FROM  [dbo].[WorkflowParameter]&#13;
&#13;
WHERE [dbo].[WorkflowParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowParameter_UpdateByPK] @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @ObjectType = 'ObjectType', @ObjectValue = 'ObjectValue', @WorkflowID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowParameter_UpdateByPK]&#13;
&#13;
		@WorkflowParameterID 		uniqueidentifier,&#13;
		@Name                		nvarchar (200),&#13;
		@Description         		nvarchar (1000),&#13;
		@VersionNumber       		int,&#13;
		@ObjectType          		nvarchar (1000),&#13;
		@ObjectValue         		nvarchar (2000),&#13;
		@WorkflowID          		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowParameter]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[ObjectType] = @ObjectType,&#13;
		[ObjectValue] = @ObjectValue,&#13;
		[WorkflowID] = @WorkflowID&#13;
WHERE [dbo].[WorkflowParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_DeleteByPK] @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_DeleteByPK]&#13;
&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowRestriction]&#13;
WHERE [dbo].[WorkflowRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_Insert] @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_Insert]&#13;
&#13;
		@WorkflowRestrictionID     		uniqueidentifier OUTPUT,&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier,&#13;
		@WorkflowID                		uniqueidentifier,&#13;
		@VersionNumber             		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowRestrictionID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowRestriction]&#13;
(&#13;
		[WorkflowRestrictionID],&#13;
		[WorkflowRestrictionTypeID],&#13;
		[WorkflowID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowRestrictionID,newid()),&#13;
		@WorkflowRestrictionTypeID,&#13;
		@WorkflowID,&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowRestriction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_SelectByPK] @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_SelectByPK]&#13;
&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_SelectViewByPK] @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_SelectViewByPK]&#13;
&#13;
		@WorkflowRestrictionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestriction].[WorkflowID],&#13;
		[dbo].[WorkflowRestriction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowRestriction]&#13;
&#13;
WHERE [dbo].[WorkflowRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestriction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestriction_UpdateByPK] @WorkflowRestrictionID = '00000000-0000-0000-0000-000000000000', @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestriction_UpdateByPK]&#13;
&#13;
		@WorkflowRestrictionID     		uniqueidentifier,&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier,&#13;
		@WorkflowID                		uniqueidentifier,&#13;
		@VersionNumber             		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowRestriction]&#13;
SET&#13;
		[WorkflowRestrictionTypeID] = @WorkflowRestrictionTypeID,&#13;
		[WorkflowID] = @WorkflowID,&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowRestriction].[WorkflowRestrictionID] = @WorkflowRestrictionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_DeleteByPK] @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_DeleteByPK]&#13;
&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowRestrictionType]&#13;
WHERE [dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID] = @WorkflowRestrictionTypeID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_Insert] @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_Insert]&#13;
&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier OUTPUT,&#13;
		@Name                      		nvarchar (200),&#13;
		@Description               		nvarchar (1000)&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowRestrictionTypeID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowRestrictionType]&#13;
(&#13;
		[WorkflowRestrictionTypeID],&#13;
		[Name],&#13;
		[Description]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowRestrictionTypeID,newid()),&#13;
		@Name,&#13;
		@Description&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestrictionType].[Name],&#13;
		[dbo].[WorkflowRestrictionType].[Description]&#13;
FROM  [dbo].[WorkflowRestrictionType]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_SelectByPK] @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_SelectByPK]&#13;
&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestrictionType].[Name],&#13;
		[dbo].[WorkflowRestrictionType].[Description]&#13;
FROM  [dbo].[WorkflowRestrictionType]&#13;
&#13;
WHERE [dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID] = @WorkflowRestrictionTypeID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_SelectViewByPK] @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_SelectViewByPK]&#13;
&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID],&#13;
		[dbo].[WorkflowRestrictionType].[Name],&#13;
		[dbo].[WorkflowRestrictionType].[Description]&#13;
FROM  [dbo].[WorkflowRestrictionType]&#13;
&#13;
WHERE [dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID] = @WorkflowRestrictionTypeID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowRestrictionType_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowRestrictionType_UpdateByPK] @WorkflowRestrictionTypeID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowRestrictionType_UpdateByPK]&#13;
&#13;
		@WorkflowRestrictionTypeID 		uniqueidentifier,&#13;
		@Name                      		nvarchar (200),&#13;
		@Description               		nvarchar (1000)&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowRestrictionType]&#13;
SET&#13;
		[Name] = @Name,&#13;
		[Description] = @Description&#13;
WHERE [dbo].[WorkflowRestrictionType].[WorkflowRestrictionTypeID] = @WorkflowRestrictionTypeID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistion]&#13;
WHERE [dbo].[WorkflowTransistion].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsWorkflowStart = 1, @IsWorkflowEnd = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@Name                  		nvarchar (200),&#13;
		@Description           		nvarchar (2000),&#13;
		@VersionNumber         		int = 0,&#13;
		@IsWorkflowStart       		bit = 0,&#13;
		@IsWorkflowEnd         		bit = 0&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
SET @WorkflowTransistionID = NEWID()&#13;
&#13;
&#13;
INSERT [dbo].[WorkflowTransistion]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowID],&#13;
		[Name],&#13;
		[Description],&#13;
		[VersionNumber],&#13;
		[IsWorkflowStart],&#13;
		[IsWorkflowEnd]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		@WorkflowID,&#13;
		@Name,&#13;
		@Description,&#13;
		@VersionNumber,&#13;
		@IsWorkflowStart,&#13;
		@IsWorkflowEnd&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistion].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistion].[WorkflowID],&#13;
		[dbo].[WorkflowTransistion].[Name],&#13;
		[dbo].[WorkflowTransistion].[Description],&#13;
		[dbo].[WorkflowTransistion].[VersionNumber],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowStart],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowEnd]&#13;
FROM  [dbo].[WorkflowTransistion]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistion].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistion].[WorkflowID],&#13;
		[dbo].[WorkflowTransistion].[Name],&#13;
		[dbo].[WorkflowTransistion].[Description],&#13;
		[dbo].[WorkflowTransistion].[VersionNumber],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowStart],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowEnd]&#13;
FROM  [dbo].[WorkflowTransistion]&#13;
&#13;
WHERE [dbo].[WorkflowTransistion].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistion].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistion].[WorkflowID],&#13;
		[dbo].[WorkflowTransistion].[Name],&#13;
		[dbo].[WorkflowTransistion].[Description],&#13;
		[dbo].[WorkflowTransistion].[VersionNumber],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowStart],&#13;
		[dbo].[WorkflowTransistion].[IsWorkflowEnd]&#13;
FROM  [dbo].[WorkflowTransistion]&#13;
&#13;
WHERE [dbo].[WorkflowTransistion].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistion_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistion_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowID = '00000000-0000-0000-0000-000000000000', @Name = 'Name', @Description = 'Description', @VersionNumber = 1, @IsWorkflowStart = 1, @IsWorkflowEnd = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistion_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowID            		uniqueidentifier,&#13;
		@Name                  		nvarchar (200),&#13;
		@Description           		nvarchar (2000),&#13;
		@VersionNumber         		int = 0,&#13;
		@IsWorkflowStart       		bit = 0,&#13;
		@IsWorkflowEnd         		bit = 0&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistion]&#13;
SET&#13;
		[WorkflowID] = @WorkflowID,&#13;
		[Name] = @Name,&#13;
		[Description] = @Description,&#13;
		[VersionNumber] = @VersionNumber,&#13;
		[IsWorkflowStart] = @IsWorkflowStart,&#13;
		[IsWorkflowEnd] = @IsWorkflowEnd&#13;
WHERE [dbo].[WorkflowTransistion].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistionCompleteCondition]&#13;
WHERE [dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID   		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowTransistionCompleteCondition]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionCompleteCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionCompleteCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionCompleteCondition]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionCompleteCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionCompleteCondition_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionCompleteCondition_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistionCompleteCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowTransistionCompleteCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionCompleteCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowParameterID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistionParameter]&#13;
WHERE [dbo].[WorkflowTransistionParameter].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowParameterID   		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowTransistionParameter]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowParameterID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		ISNULL(@WorkflowParameterID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowTransistionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionParameter]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowParameterID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowTransistionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionParameter].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowParameterID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionParameter].[WorkflowParameterID],&#13;
		[dbo].[WorkflowTransistionParameter].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionParameter]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionParameter].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionParameter_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionParameter_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowParameterID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionParameter_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowParameterID   		uniqueidentifier,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistionParameter]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowTransistionParameter].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionParameter].[WorkflowParameterID] = @WorkflowParameterID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistionStartCondition]&#13;
WHERE [dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowConditionID   		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowTransistionStartCondition]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowConditionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		ISNULL(@WorkflowConditionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionStartCondition]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID],&#13;
		[dbo].[WorkflowTransistionStartCondition].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionStartCondition]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionStartCondition_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionStartCondition_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowConditionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionStartCondition_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowConditionID   		uniqueidentifier,&#13;
		@VersionNumber         		int&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistionStartCondition]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowTransistionStartCondition].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionStartCondition].[WorkflowConditionID] = @WorkflowConditionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowActionID      		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistionWorkflowAction]&#13;
WHERE [dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowActionID      		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowTransistionWorkflowAction]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowActionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		ISNULL(@WorkflowActionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowAction]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowActionID      		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowAction]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowActionID      		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID],&#13;
		[dbo].[WorkflowTransistionWorkflowAction].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowAction]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowAction_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowAction_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowActionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowAction_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowActionID      		uniqueidentifier,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistionWorkflowAction]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowTransistionWorkflowAction].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowAction].[WorkflowActionID] = @WorkflowActionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_DeleteByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_DeleteByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_DeleteByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowDecisionID    		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
DELETE FROM [dbo].[WorkflowTransistionWorkflowDecision]&#13;
WHERE [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_Insert]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_Insert] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_Insert]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier OUTPUT,&#13;
		@WorkflowDecisionID    		uniqueidentifier OUTPUT,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
INSERT [dbo].[WorkflowTransistionWorkflowDecision]&#13;
(&#13;
		[WorkflowTransistionID],&#13;
		[WorkflowDecisionID],&#13;
		[VersionNumber]&#13;
)&#13;
VALUES&#13;
(&#13;
		ISNULL(@WorkflowTransistionID,newid()),&#13;
		ISNULL(@WorkflowDecisionID,newid()),&#13;
		@VersionNumber&#13;
)&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_SelectAll]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectAll]&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectAll]&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowDecision]&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_SelectByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowDecisionID    		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowDecision]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_SelectViewByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectViewByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000'&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_SelectViewByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowDecisionID    		uniqueidentifier&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
SELECT  &#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID],&#13;
		[dbo].[WorkflowTransistionWorkflowDecision].[VersionNumber]&#13;
FROM  [dbo].[WorkflowTransistionWorkflowDecision]&#13;
&#13;
WHERE [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PR_WorkflowTransistionWorkflowDecision_UpdateByPK]&#13;">
      <src>&#13;
/*&#13;
==================================&#13;
Author      : Chris Misson&#13;
Create date : 24/01/2014&#13;
Description : Workflow Table SPs&#13;
==================================&#13;
*/&#13;
&#13;
--   [dbo].[PR_WorkflowTransistionWorkflowDecision_UpdateByPK] @WorkflowTransistionID = '00000000-0000-0000-0000-000000000000', @WorkflowDecisionID = '00000000-0000-0000-0000-000000000000', @VersionNumber = 1&#13;
&#13;
CREATE PROCEDURE [dbo].[PR_WorkflowTransistionWorkflowDecision_UpdateByPK]&#13;
&#13;
		@WorkflowTransistionID 		uniqueidentifier,&#13;
		@WorkflowDecisionID    		uniqueidentifier,&#13;
		@VersionNumber         		int = 1&#13;
&#13;
AS&#13;
&#13;
SET NOCOUNT ON;&#13;
&#13;
BEGIN TRY&#13;
BEGIN TRAN&#13;
&#13;
UPDATE [dbo].[WorkflowTransistionWorkflowDecision]&#13;
SET&#13;
		[VersionNumber] = @VersionNumber&#13;
WHERE [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowTransistionID] = @WorkflowTransistionID&#13;
AND [dbo].[WorkflowTransistionWorkflowDecision].[WorkflowDecisionID] = @WorkflowDecisionID&#13;
&#13;
COMMIT TRAN&#13;
END TRY&#13;
&#13;
BEGIN CATCH&#13;
ROLLBACK TRAN&#13;
&#13;
DECLARE @ErrorNumber_INT INT;&#13;
DECLARE @ErrorSeverity_INT INT;&#13;
DECLARE @ErrorProcedure_VC VARCHAR(200);&#13;
DECLARE @ErrorLine_INT INT;&#13;
DECLARE @ErrorMessage_NVC NVARCHAR(4000);&#13;
&#13;
SELECT&#13;
		@ErrorMessage_NVC = ERROR_MESSAGE(),&#13;
		@ErrorSeverity_INT = ERROR_SEVERITY(),&#13;
		@ErrorNumber_INT = ERROR_NUMBER(),&#13;
		@ErrorProcedure_VC = ERROR_PROCEDURE(),&#13;
		@ErrorLine_INT = ERROR_LINE()&#13;
&#13;
RAISERROR(@ErrorMessage_NVC,@ErrorSeverity_INT,1);&#13;
&#13;
END CATCH&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PricingItem_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[PricingItem_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vPricingItem_RowHistory]&#13;
	WHERE		[PricingItemID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[PricingItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[PricingItem]&#13;
	WHERE		[PricingItemID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PricingItemID] = NextVersion.[PricingItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PricingItemID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PricingItem_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[PricingItem_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[PricingItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PricingItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vPricingItem_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[PricingItemID] = [dbo].[PricingItem].[PricingItemID]&#13;
				) as [RowVersion]&#13;
				,[PricingItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[PricingItem]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[PricingItemID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[PricingItemID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[PricingItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[PricingItemID] = MostRecentRows.[PricingItemID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PricingItemID] = NextVersion.[PricingItemID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[PricingItemID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[PricingItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[PricingItemID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[PricingItemID] = roi.[PricingItemID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[PricingItemID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PricingItemAttribute_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[PricingItemAttribute_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[PricingItemAttributeID]uniqueidentifier&#13;
,[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vPricingItemAttribute_RowHistory]&#13;
	WHERE		[PricingItemAttributeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[PricingItemAttributeID]&#13;
			,cast([PricingItemID] as varchar(50)) as [PricingItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[PricingItemAttribute]&#13;
	WHERE		[PricingItemAttributeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PricingItemAttributeID] , PreviousVersion.[PricingItemAttributeID])&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PricingItemAttributeID] = NextVersion.[PricingItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PricingItemAttributeID]&#13;
			, nullif([PricingItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PricingItemAttribute_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[PricingItemAttribute_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[PricingItemAttributeID]uniqueidentifier&#13;
,[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[PricingItemAttributeID] varchar(50)&#13;
	,[PricingItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PricingItemAttributeID]&#13;
			,[PricingItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vPricingItemAttribute_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[PricingItemAttributeID] = [dbo].[PricingItemAttribute].[PricingItemAttributeID]&#13;
				) as [RowVersion]&#13;
				,[PricingItemAttributeID]&#13;
				,cast([PricingItemID] as varchar(50)) as [PricingItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[PricingItemAttribute]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[PricingItemAttributeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[PricingItemAttributeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[PricingItemAttributeID]&#13;
			,RowHistoryExtract.[PricingItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[PricingItemAttributeID] = MostRecentRows.[PricingItemAttributeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PricingItemAttributeID] , PreviousVersion.[PricingItemAttributeID])&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PricingItemAttributeID] = NextVersion.[PricingItemAttributeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[PricingItemAttributeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[PricingItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[PricingItemAttributeID]&#13;
			,nullif(rh.[PricingItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[PricingItemAttributeID] = roi.[PricingItemAttributeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[PricingItemAttributeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Product_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Product_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[ProductTypeID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProduct_RowHistory]&#13;
	WHERE		[ProductID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductID]&#13;
			,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
			,cast([ProductTypeID] as varchar(50)) as [ProductTypeID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Product]&#13;
	WHERE		[ProductID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTypeID] , PreviousVersion.[ProductTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductID] = NextVersion.[ProductID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductID]&#13;
			, nullif([ProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([ProductTypeID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Product_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Product_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[ProductTypeID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductID] varchar(50)&#13;
	,[ProductTemplateID] varchar(50)&#13;
	,[ProductTypeID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductID]&#13;
			,[ProductTemplateID]&#13;
			,[ProductTypeID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProduct_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductID] = [dbo].[Product].[ProductID]&#13;
				) as [RowVersion]&#13;
				,[ProductID]&#13;
				,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
				,cast([ProductTypeID] as varchar(50)) as [ProductTypeID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Product]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductID]&#13;
			,RowHistoryExtract.[ProductTemplateID]&#13;
			,RowHistoryExtract.[ProductTypeID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductID] = MostRecentRows.[ProductID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[ProductTypeID] , PreviousVersion.[ProductTypeID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductID] = NextVersion.[ProductID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductID]&#13;
			,nullif(rh.[ProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ProductTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductID] = roi.[ProductID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductDetail_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductDetail_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductDetailID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[Name]nvarchar (400)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductDetail_RowHistory]&#13;
	WHERE		[ProductDetailID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductDetailID]&#13;
			,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductDetail]&#13;
	WHERE		[ProductDetailID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductDetailID] , PreviousVersion.[ProductDetailID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductDetailID] = NextVersion.[ProductDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductDetailID]&#13;
			, nullif([ProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductDetail_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductDetail_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductDetailID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[Name]nvarchar (400)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductDetailID] varchar(50)&#13;
	,[ProductTemplateID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductDetailID]&#13;
			,[ProductTemplateID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductDetail_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductDetailID] = [dbo].[ProductDetail].[ProductDetailID]&#13;
				) as [RowVersion]&#13;
				,[ProductDetailID]&#13;
				,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductDetail]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductDetailID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductDetailID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductDetailID]&#13;
			,RowHistoryExtract.[ProductTemplateID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductDetailID] = MostRecentRows.[ProductDetailID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductDetailID] , PreviousVersion.[ProductDetailID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductDetailID] = NextVersion.[ProductDetailID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductDetailID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductDetailID]&#13;
			,nullif(rh.[ProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductDetailID] = roi.[ProductDetailID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductDetailID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductItem_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductItem_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductItemID]uniqueidentifier&#13;
,[ProductID]uniqueidentifier&#13;
,[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductItem_RowHistory]&#13;
	WHERE		[ProductItemID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductItemID]&#13;
			,cast([ProductID] as varchar(50)) as [ProductID]&#13;
			,cast([PricingItemID] as varchar(50)) as [PricingItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductItem]&#13;
	WHERE		[ProductItemID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductItemID] , PreviousVersion.[ProductItemID])&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductItemID] = NextVersion.[ProductItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductItemID]&#13;
			, nullif([ProductID],'&lt;-null-&gt;')&#13;
			, nullif([PricingItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductItem_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductItem_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductItemID]uniqueidentifier&#13;
,[ProductID]uniqueidentifier&#13;
,[PricingItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductItemID] varchar(50)&#13;
	,[ProductID] varchar(50)&#13;
	,[PricingItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductItemID]&#13;
			,[ProductID]&#13;
			,[PricingItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductItem_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductItemID] = [dbo].[ProductItem].[ProductItemID]&#13;
				) as [RowVersion]&#13;
				,[ProductItemID]&#13;
				,cast([ProductID] as varchar(50)) as [ProductID]&#13;
				,cast([PricingItemID] as varchar(50)) as [PricingItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductItem]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductItemID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductItemID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductItemID]&#13;
			,RowHistoryExtract.[ProductID]&#13;
			,RowHistoryExtract.[PricingItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductItemID] = MostRecentRows.[ProductItemID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductItemID] , PreviousVersion.[ProductItemID])&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[PricingItemID] , PreviousVersion.[PricingItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductItemID] = NextVersion.[ProductItemID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductItemID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductItemID]&#13;
			,nullif(rh.[ProductID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PricingItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductItemID] = roi.[ProductItemID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductItemID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductPricingItemAttributeVariant_RowHistory](@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductPricingItemAttributeVariant_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductItemID]uniqueidentifier&#13;
,[PricingItemAttributeID]uniqueidentifier&#13;
,[VariantID]uniqueidentifier&#13;
,[BandFrom]decimal (30,8)&#13;
,[BandTo]decimal (30,8)&#13;
,[VariantValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductPricingItemAttributeVariant_RowHistory]&#13;
	WHERE		[ProductItemID] = @PK AND [PricingItemAttributeID] = @PK2 AND [VariantID] = @PK3 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductItemID]&#13;
			,[PricingItemAttributeID]&#13;
			,[VariantID]&#13;
			,cast([BandFrom] as varchar(50)) as [BandFrom]&#13;
			,cast([BandTo] as varchar(50)) as [BandTo]&#13;
			,cast([VariantValue] as varchar(50)) as [VariantValue]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductPricingItemAttributeVariant]&#13;
	WHERE		[ProductItemID] = @PK AND [PricingItemAttributeID] = @PK2 AND [VariantID] = @PK3 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductItemID] , PreviousVersion.[ProductItemID])&#13;
						,isnull(NextVersion.[PricingItemAttributeID] , PreviousVersion.[PricingItemAttributeID])&#13;
						,isnull(NextVersion.[VariantID] , PreviousVersion.[VariantID])&#13;
						,isnull(NextVersion.[BandFrom] , PreviousVersion.[BandFrom])&#13;
						,isnull(NextVersion.[BandTo] , PreviousVersion.[BandTo])&#13;
						,isnull(NextVersion.[VariantValue] , PreviousVersion.[VariantValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductItemID] = NextVersion.[ProductItemID]&#13;
				and		PreviousVersion.[PricingItemAttributeID] = NextVersion.[PricingItemAttributeID]&#13;
				and		PreviousVersion.[VariantID] = NextVersion.[VariantID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductItemID]&#13;
			,[PricingItemAttributeID]&#13;
			,[VariantID]&#13;
			, nullif([BandFrom],'&lt;-null-&gt;')&#13;
			, nullif([BandTo],'&lt;-null-&gt;')&#13;
			, nullif([VariantValue],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductPricingItemAttributeVariant_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductPricingItemAttributeVariant_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductItemID]uniqueidentifier&#13;
,[PricingItemAttributeID]uniqueidentifier&#13;
,[VariantID]uniqueidentifier&#13;
,[BandFrom]decimal (30,8)&#13;
,[BandTo]decimal (30,8)&#13;
,[VariantValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductItemID] varchar(50)&#13;
	,[PricingItemAttributeID] varchar(50)&#13;
	,[VariantID] varchar(50)&#13;
	,[BandFrom] varchar(50)&#13;
	,[BandTo] varchar(50)&#13;
	,[VariantValue] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductItemID]&#13;
			,[PricingItemAttributeID]&#13;
			,[VariantID]&#13;
			,[BandFrom]&#13;
			,[BandTo]&#13;
			,[VariantValue]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductPricingItemAttributeVariant_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductItemID] = [dbo].[ProductPricingItemAttributeVariant].[ProductItemID]&#13;
					and	AuditDataExtract.[PricingItemAttributeID] = [dbo].[ProductPricingItemAttributeVariant].[PricingItemAttributeID]&#13;
					and	AuditDataExtract.[VariantID] = [dbo].[ProductPricingItemAttributeVariant].[VariantID]&#13;
				) as [RowVersion]&#13;
				,[ProductItemID]&#13;
				,[PricingItemAttributeID]&#13;
				,[VariantID]&#13;
				,cast([BandFrom] as varchar(50)) as [BandFrom]&#13;
				,cast([BandTo] as varchar(50)) as [BandTo]&#13;
				,cast([VariantValue] as varchar(50)) as [VariantValue]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductPricingItemAttributeVariant]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductItemID]&#13;
						,[PricingItemAttributeID]&#13;
						,[VariantID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductItemID]&#13;
						,[PricingItemAttributeID]&#13;
						,[VariantID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductItemID]&#13;
			,RowHistoryExtract.[PricingItemAttributeID]&#13;
			,RowHistoryExtract.[VariantID]&#13;
			,RowHistoryExtract.[BandFrom]&#13;
			,RowHistoryExtract.[BandTo]&#13;
			,RowHistoryExtract.[VariantValue]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductItemID] = MostRecentRows.[ProductItemID]&#13;
				and		RowHistoryExtract.[PricingItemAttributeID] = MostRecentRows.[PricingItemAttributeID]&#13;
				and		RowHistoryExtract.[VariantID] = MostRecentRows.[VariantID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductItemID] , PreviousVersion.[ProductItemID])&#13;
						,isnull(NextVersion.[PricingItemAttributeID] , PreviousVersion.[PricingItemAttributeID])&#13;
						,isnull(NextVersion.[VariantID] , PreviousVersion.[VariantID])&#13;
						,isnull(NextVersion.[BandFrom] , PreviousVersion.[BandFrom])&#13;
						,isnull(NextVersion.[BandTo] , PreviousVersion.[BandTo])&#13;
						,isnull(NextVersion.[VariantValue] , PreviousVersion.[VariantValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductItemID] = NextVersion.[ProductItemID]&#13;
				and		PreviousVersion.[PricingItemAttributeID] = NextVersion.[PricingItemAttributeID]&#13;
				and		PreviousVersion.[VariantID] = NextVersion.[VariantID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductItemID]&#13;
						,[PricingItemAttributeID]&#13;
						,[VariantID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductItemID]&#13;
						,[PricingItemAttributeID]&#13;
						,[VariantID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductItemID]&#13;
			,rh.[PricingItemAttributeID]&#13;
			,rh.[VariantID]&#13;
			,nullif(rh.[BandFrom],'&lt;-null-&gt;')&#13;
			,nullif(rh.[BandTo],'&lt;-null-&gt;')&#13;
			,nullif(rh.[VariantValue],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductItemID] = roi.[ProductItemID]&#13;
	and		rh.[PricingItemAttributeID] = roi.[PricingItemAttributeID]&#13;
	and		rh.[VariantID] = roi.[VariantID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductItemID],&#13;
			rh.[PricingItemAttributeID],&#13;
			rh.[VariantID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductTarget_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductTarget_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductTargetID]uniqueidentifier&#13;
,[ProductID]uniqueidentifier&#13;
,[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductTarget_RowHistory]&#13;
	WHERE		[ProductTargetID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductTargetID]&#13;
			,cast([ProductID] as varchar(50)) as [ProductID]&#13;
			,cast([TargetItemID] as varchar(50)) as [TargetItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductTarget]&#13;
	WHERE		[ProductTargetID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTargetID] , PreviousVersion.[ProductTargetID])&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTargetID] = NextVersion.[ProductTargetID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTargetID]&#13;
			, nullif([ProductID],'&lt;-null-&gt;')&#13;
			, nullif([TargetItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductTarget_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductTarget_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductTargetID]uniqueidentifier&#13;
,[ProductID]uniqueidentifier&#13;
,[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductTargetID] varchar(50)&#13;
	,[ProductID] varchar(50)&#13;
	,[TargetItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTargetID]&#13;
			,[ProductID]&#13;
			,[TargetItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductTarget_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductTargetID] = [dbo].[ProductTarget].[ProductTargetID]&#13;
				) as [RowVersion]&#13;
				,[ProductTargetID]&#13;
				,cast([ProductID] as varchar(50)) as [ProductID]&#13;
				,cast([TargetItemID] as varchar(50)) as [TargetItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductTarget]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductTargetID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductTargetID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductTargetID]&#13;
			,RowHistoryExtract.[ProductID]&#13;
			,RowHistoryExtract.[TargetItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductTargetID] = MostRecentRows.[ProductTargetID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTargetID] , PreviousVersion.[ProductTargetID])&#13;
						,isnull(NextVersion.[ProductID] , PreviousVersion.[ProductID])&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTargetID] = NextVersion.[ProductTargetID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductTargetID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductTargetID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductTargetID]&#13;
			,nullif(rh.[ProductID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[TargetItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductTargetID] = roi.[ProductTargetID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductTargetID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductTargetItemAttributeVariant_RowHistory](@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductTargetItemAttributeVariant_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36),@PK3 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductTargetID]uniqueidentifier&#13;
,[TargetItemAttributeID]uniqueidentifier&#13;
,[VariantID]uniqueidentifier&#13;
,[BandFrom]decimal (30,8)&#13;
,[BandTo]decimal (30,8)&#13;
,[DateFrom]datetime&#13;
,[DateTo]datetime&#13;
,[VariantValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductTargetItemAttributeVariant_RowHistory]&#13;
	WHERE		[ProductTargetID] = @PK AND [TargetItemAttributeID] = @PK2 AND [VariantID] = @PK3 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductTargetID]&#13;
			,[TargetItemAttributeID]&#13;
			,[VariantID]&#13;
			,cast([BandFrom] as varchar(50)) as [BandFrom]&#13;
			,cast([BandTo] as varchar(50)) as [BandTo]&#13;
			,cast([DateFrom] as varchar(50)) as [DateFrom]&#13;
			,cast([DateTo] as varchar(50)) as [DateTo]&#13;
			,cast([VariantValue] as varchar(50)) as [VariantValue]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductTargetItemAttributeVariant]&#13;
	WHERE		[ProductTargetID] = @PK AND [TargetItemAttributeID] = @PK2 AND [VariantID] = @PK3 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTargetID] , PreviousVersion.[ProductTargetID])&#13;
						,isnull(NextVersion.[TargetItemAttributeID] , PreviousVersion.[TargetItemAttributeID])&#13;
						,isnull(NextVersion.[VariantID] , PreviousVersion.[VariantID])&#13;
						,isnull(NextVersion.[BandFrom] , PreviousVersion.[BandFrom])&#13;
						,isnull(NextVersion.[BandTo] , PreviousVersion.[BandTo])&#13;
						,isnull(NextVersion.[DateFrom] , PreviousVersion.[DateFrom])&#13;
						,isnull(NextVersion.[DateTo] , PreviousVersion.[DateTo])&#13;
						,isnull(NextVersion.[VariantValue] , PreviousVersion.[VariantValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTargetID] = NextVersion.[ProductTargetID]&#13;
				and		PreviousVersion.[TargetItemAttributeID] = NextVersion.[TargetItemAttributeID]&#13;
				and		PreviousVersion.[VariantID] = NextVersion.[VariantID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTargetID]&#13;
			,[TargetItemAttributeID]&#13;
			,[VariantID]&#13;
			, nullif([BandFrom],'&lt;-null-&gt;')&#13;
			, nullif([BandTo],'&lt;-null-&gt;')&#13;
			, nullif([DateFrom],'&lt;-null-&gt;')&#13;
			, nullif([DateTo],'&lt;-null-&gt;')&#13;
			, nullif([VariantValue],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductTargetItemAttributeVariant_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductTargetItemAttributeVariant_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductTargetID]uniqueidentifier&#13;
,[TargetItemAttributeID]uniqueidentifier&#13;
,[VariantID]uniqueidentifier&#13;
,[BandFrom]decimal (30,8)&#13;
,[BandTo]decimal (30,8)&#13;
,[DateFrom]datetime&#13;
,[DateTo]datetime&#13;
,[VariantValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductTargetID] varchar(50)&#13;
	,[TargetItemAttributeID] varchar(50)&#13;
	,[VariantID] varchar(50)&#13;
	,[BandFrom] varchar(50)&#13;
	,[BandTo] varchar(50)&#13;
	,[DateFrom] varchar(50)&#13;
	,[DateTo] varchar(50)&#13;
	,[VariantValue] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTargetID]&#13;
			,[TargetItemAttributeID]&#13;
			,[VariantID]&#13;
			,[BandFrom]&#13;
			,[BandTo]&#13;
			,[DateFrom]&#13;
			,[DateTo]&#13;
			,[VariantValue]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductTargetItemAttributeVariant_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductTargetID] = [dbo].[ProductTargetItemAttributeVariant].[ProductTargetID]&#13;
					and	AuditDataExtract.[TargetItemAttributeID] = [dbo].[ProductTargetItemAttributeVariant].[TargetItemAttributeID]&#13;
					and	AuditDataExtract.[VariantID] = [dbo].[ProductTargetItemAttributeVariant].[VariantID]&#13;
				) as [RowVersion]&#13;
				,[ProductTargetID]&#13;
				,[TargetItemAttributeID]&#13;
				,[VariantID]&#13;
				,cast([BandFrom] as varchar(50)) as [BandFrom]&#13;
				,cast([BandTo] as varchar(50)) as [BandTo]&#13;
				,cast([DateFrom] as varchar(50)) as [DateFrom]&#13;
				,cast([DateTo] as varchar(50)) as [DateTo]&#13;
				,cast([VariantValue] as varchar(50)) as [VariantValue]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductTargetItemAttributeVariant]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductTargetID]&#13;
						,[TargetItemAttributeID]&#13;
						,[VariantID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductTargetID]&#13;
						,[TargetItemAttributeID]&#13;
						,[VariantID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductTargetID]&#13;
			,RowHistoryExtract.[TargetItemAttributeID]&#13;
			,RowHistoryExtract.[VariantID]&#13;
			,RowHistoryExtract.[BandFrom]&#13;
			,RowHistoryExtract.[BandTo]&#13;
			,RowHistoryExtract.[DateFrom]&#13;
			,RowHistoryExtract.[DateTo]&#13;
			,RowHistoryExtract.[VariantValue]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductTargetID] = MostRecentRows.[ProductTargetID]&#13;
				and		RowHistoryExtract.[TargetItemAttributeID] = MostRecentRows.[TargetItemAttributeID]&#13;
				and		RowHistoryExtract.[VariantID] = MostRecentRows.[VariantID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTargetID] , PreviousVersion.[ProductTargetID])&#13;
						,isnull(NextVersion.[TargetItemAttributeID] , PreviousVersion.[TargetItemAttributeID])&#13;
						,isnull(NextVersion.[VariantID] , PreviousVersion.[VariantID])&#13;
						,isnull(NextVersion.[BandFrom] , PreviousVersion.[BandFrom])&#13;
						,isnull(NextVersion.[BandTo] , PreviousVersion.[BandTo])&#13;
						,isnull(NextVersion.[DateFrom] , PreviousVersion.[DateFrom])&#13;
						,isnull(NextVersion.[DateTo] , PreviousVersion.[DateTo])&#13;
						,isnull(NextVersion.[VariantValue] , PreviousVersion.[VariantValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTargetID] = NextVersion.[ProductTargetID]&#13;
				and		PreviousVersion.[TargetItemAttributeID] = NextVersion.[TargetItemAttributeID]&#13;
				and		PreviousVersion.[VariantID] = NextVersion.[VariantID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductTargetID]&#13;
						,[TargetItemAttributeID]&#13;
						,[VariantID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductTargetID]&#13;
						,[TargetItemAttributeID]&#13;
						,[VariantID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductTargetID]&#13;
			,rh.[TargetItemAttributeID]&#13;
			,rh.[VariantID]&#13;
			,nullif(rh.[BandFrom],'&lt;-null-&gt;')&#13;
			,nullif(rh.[BandTo],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DateFrom],'&lt;-null-&gt;')&#13;
			,nullif(rh.[DateTo],'&lt;-null-&gt;')&#13;
			,nullif(rh.[VariantValue],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductTargetID] = roi.[ProductTargetID]&#13;
	and		rh.[TargetItemAttributeID] = roi.[TargetItemAttributeID]&#13;
	and		rh.[VariantID] = roi.[VariantID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductTargetID],&#13;
			rh.[TargetItemAttributeID],&#13;
			rh.[VariantID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductType_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductType_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductTypeID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (2000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductType_RowHistory]&#13;
	WHERE		[ProductTypeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductTypeID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductType]&#13;
	WHERE		[ProductTypeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTypeID] , PreviousVersion.[ProductTypeID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTypeID] = NextVersion.[ProductTypeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTypeID]&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductType_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductType_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductTypeID]uniqueidentifier&#13;
,[Name]nvarchar (200)&#13;
,[Description]nvarchar (2000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductTypeID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductTypeID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductType_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductTypeID] = [dbo].[ProductType].[ProductTypeID]&#13;
				) as [RowVersion]&#13;
				,[ProductTypeID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductType]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductTypeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductTypeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductTypeID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductTypeID] = MostRecentRows.[ProductTypeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductTypeID] , PreviousVersion.[ProductTypeID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductTypeID] = NextVersion.[ProductTypeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductTypeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductTypeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductTypeID]&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductTypeID] = roi.[ProductTypeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductTypeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductUserTypeExternalIdentityCheck_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[ProductUserTypeExternalIdentityCheck_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[ProductUserTypeIdentityCheckID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[UserTypeID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vProductUserTypeExternalIdentityCheck_RowHistory]&#13;
	WHERE		[ProductUserTypeIdentityCheckID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[ProductUserTypeIdentityCheckID]&#13;
			,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
			,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
			,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
			,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
			,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[ProductUserTypeExternalIdentityCheck]&#13;
	WHERE		[ProductUserTypeIdentityCheckID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductUserTypeIdentityCheckID] , PreviousVersion.[ProductUserTypeIdentityCheckID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductUserTypeIdentityCheckID] = NextVersion.[ProductUserTypeIdentityCheckID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductUserTypeIdentityCheckID]&#13;
			, nullif([ProductTemplateID],'&lt;-null-&gt;')&#13;
			, nullif([IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			, nullif([UserTypeID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[ProductUserTypeExternalIdentityCheck_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[ProductUserTypeExternalIdentityCheck_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[ProductUserTypeIdentityCheckID]uniqueidentifier&#13;
,[ProductTemplateID]uniqueidentifier&#13;
,[IdentityCheckProviderID]uniqueidentifier&#13;
,[UserTypeID]int&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[ProductUserTypeIdentityCheckID] varchar(50)&#13;
	,[ProductTemplateID] varchar(50)&#13;
	,[IdentityCheckProviderID] varchar(50)&#13;
	,[UserTypeID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[ProductUserTypeIdentityCheckID]&#13;
			,[ProductTemplateID]&#13;
			,[IdentityCheckProviderID]&#13;
			,[UserTypeID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vProductUserTypeExternalIdentityCheck_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[ProductUserTypeIdentityCheckID] = [dbo].[ProductUserTypeExternalIdentityCheck].[ProductUserTypeIdentityCheckID]&#13;
				) as [RowVersion]&#13;
				,[ProductUserTypeIdentityCheckID]&#13;
				,cast([ProductTemplateID] as varchar(50)) as [ProductTemplateID]&#13;
				,cast([IdentityCheckProviderID] as varchar(50)) as [IdentityCheckProviderID]&#13;
				,cast([UserTypeID] as varchar(50)) as [UserTypeID]&#13;
				,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
				,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[ProductUserTypeExternalIdentityCheck]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[ProductUserTypeIdentityCheckID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[ProductUserTypeIdentityCheckID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[ProductUserTypeIdentityCheckID]&#13;
			,RowHistoryExtract.[ProductTemplateID]&#13;
			,RowHistoryExtract.[IdentityCheckProviderID]&#13;
			,RowHistoryExtract.[UserTypeID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[ProductUserTypeIdentityCheckID] = MostRecentRows.[ProductUserTypeIdentityCheckID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[ProductUserTypeIdentityCheckID] , PreviousVersion.[ProductUserTypeIdentityCheckID])&#13;
						,isnull(NextVersion.[ProductTemplateID] , PreviousVersion.[ProductTemplateID])&#13;
						,isnull(NextVersion.[IdentityCheckProviderID] , PreviousVersion.[IdentityCheckProviderID])&#13;
						,isnull(NextVersion.[UserTypeID] , PreviousVersion.[UserTypeID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[ProductUserTypeIdentityCheckID] = NextVersion.[ProductUserTypeIdentityCheckID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[ProductUserTypeIdentityCheckID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[ProductUserTypeIdentityCheckID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[ProductUserTypeIdentityCheckID]&#13;
			,nullif(rh.[ProductTemplateID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IdentityCheckProviderID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[UserTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[ProductUserTypeIdentityCheckID] = roi.[ProductUserTypeIdentityCheckID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[ProductUserTypeIdentityCheckID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PropertyDetail_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[PropertyDetail_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[PropertyDetailID]uniqueidentifier&#13;
,[PropertyTypeID]int&#13;
,[PropertySubTypeID]int&#13;
,[PropertyCategoryID]int&#13;
,[PropertyValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vPropertyDetail_RowHistory]&#13;
	WHERE		[PropertyDetailID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[PropertyDetailID]&#13;
			,cast([PropertyTypeID] as varchar(50)) as [PropertyTypeID]&#13;
			,cast([PropertySubTypeID] as varchar(50)) as [PropertySubTypeID]&#13;
			,cast([PropertyCategoryID] as varchar(50)) as [PropertyCategoryID]&#13;
			,cast([PropertyValue] as varchar(50)) as [PropertyValue]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[PropertyDetail]&#13;
	WHERE		[PropertyDetailID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PropertyDetailID] , PreviousVersion.[PropertyDetailID])&#13;
						,isnull(NextVersion.[PropertyTypeID] , PreviousVersion.[PropertyTypeID])&#13;
						,isnull(NextVersion.[PropertySubTypeID] , PreviousVersion.[PropertySubTypeID])&#13;
						,isnull(NextVersion.[PropertyCategoryID] , PreviousVersion.[PropertyCategoryID])&#13;
						,isnull(NextVersion.[PropertyValue] , PreviousVersion.[PropertyValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PropertyDetailID] = NextVersion.[PropertyDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PropertyDetailID]&#13;
			, nullif([PropertyTypeID],'&lt;-null-&gt;')&#13;
			, nullif([PropertySubTypeID],'&lt;-null-&gt;')&#13;
			, nullif([PropertyCategoryID],'&lt;-null-&gt;')&#13;
			, nullif([PropertyValue],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[PropertyDetail_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[PropertyDetail_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:01PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[PropertyDetailID]uniqueidentifier&#13;
,[PropertyTypeID]int&#13;
,[PropertySubTypeID]int&#13;
,[PropertyCategoryID]int&#13;
,[PropertyValue]decimal (30,8)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[PropertyDetailID] varchar(50)&#13;
	,[PropertyTypeID] varchar(50)&#13;
	,[PropertySubTypeID] varchar(50)&#13;
	,[PropertyCategoryID] varchar(50)&#13;
	,[PropertyValue] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[PropertyDetailID]&#13;
			,[PropertyTypeID]&#13;
			,[PropertySubTypeID]&#13;
			,[PropertyCategoryID]&#13;
			,[PropertyValue]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vPropertyDetail_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[PropertyDetailID] = [dbo].[PropertyDetail].[PropertyDetailID]&#13;
				) as [RowVersion]&#13;
				,[PropertyDetailID]&#13;
				,cast([PropertyTypeID] as varchar(50)) as [PropertyTypeID]&#13;
				,cast([PropertySubTypeID] as varchar(50)) as [PropertySubTypeID]&#13;
				,cast([PropertyCategoryID] as varchar(50)) as [PropertyCategoryID]&#13;
				,cast([PropertyValue] as varchar(50)) as [PropertyValue]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[PropertyDetail]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[PropertyDetailID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[PropertyDetailID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[PropertyDetailID]&#13;
			,RowHistoryExtract.[PropertyTypeID]&#13;
			,RowHistoryExtract.[PropertySubTypeID]&#13;
			,RowHistoryExtract.[PropertyCategoryID]&#13;
			,RowHistoryExtract.[PropertyValue]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[PropertyDetailID] = MostRecentRows.[PropertyDetailID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[PropertyDetailID] , PreviousVersion.[PropertyDetailID])&#13;
						,isnull(NextVersion.[PropertyTypeID] , PreviousVersion.[PropertyTypeID])&#13;
						,isnull(NextVersion.[PropertySubTypeID] , PreviousVersion.[PropertySubTypeID])&#13;
						,isnull(NextVersion.[PropertyCategoryID] , PreviousVersion.[PropertyCategoryID])&#13;
						,isnull(NextVersion.[PropertyValue] , PreviousVersion.[PropertyValue])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[PropertyDetailID] = NextVersion.[PropertyDetailID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[PropertyDetailID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[PropertyDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[PropertyDetailID]&#13;
			,nullif(rh.[PropertyTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PropertySubTypeID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PropertyCategoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[PropertyValue],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[PropertyDetailID] = roi.[PropertyDetailID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[PropertyDetailID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Repository_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[Repository_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[RepositoryID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[Name]nvarchar (512)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vRepository_RowHistory]&#13;
	WHERE		[RepositoryID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[RepositoryID]&#13;
			,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([Description] as varchar(50)) as [Description]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[Repository]&#13;
	WHERE		[RepositoryID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryID] , PreviousVersion.[RepositoryID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryID] = NextVersion.[RepositoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryID]&#13;
			, nullif([OwnerID],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([Description],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[Repository_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[Repository_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[RepositoryID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[Name]nvarchar (512)&#13;
,[Description]nvarchar (4000)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[RepositoryID] varchar(50)&#13;
	,[OwnerID] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[Description] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryID]&#13;
			,[OwnerID]&#13;
			,[Name]&#13;
			,[Description]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vRepository_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[RepositoryID] = [dbo].[Repository].[RepositoryID]&#13;
				) as [RowVersion]&#13;
				,[RepositoryID]&#13;
				,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([Description] as varchar(50)) as [Description]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[Repository]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[RepositoryID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[RepositoryID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[RepositoryID]&#13;
			,RowHistoryExtract.[OwnerID]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[Description]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[RepositoryID] = MostRecentRows.[RepositoryID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryID] , PreviousVersion.[RepositoryID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[Description] , PreviousVersion.[Description])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryID] = NextVersion.[RepositoryID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[RepositoryID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[RepositoryID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[RepositoryID]&#13;
			,nullif(rh.[OwnerID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Description],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[RepositoryID] = roi.[RepositoryID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[RepositoryID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructure_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[RepositoryStructure_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[RepositoryStructureID]uniqueidentifier&#13;
,[RepositoryID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[ParentRepositoryStructureID]uniqueidentifier&#13;
,[IsLeafNode]bit&#13;
,[Name]nvarchar (512)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vRepositoryStructure_RowHistory]&#13;
	WHERE		[RepositoryStructureID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[RepositoryStructureID]&#13;
			,cast([RepositoryID] as varchar(50)) as [RepositoryID]&#13;
			,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
			,cast([ParentRepositoryStructureID] as varchar(50)) as [ParentRepositoryStructureID]&#13;
			,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
			,cast([Name] as varchar(50)) as [Name]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[RepositoryStructure]&#13;
	WHERE		[RepositoryStructureID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[RepositoryID] , PreviousVersion.[RepositoryID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[ParentRepositoryStructureID] , PreviousVersion.[ParentRepositoryStructureID])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureID] = NextVersion.[RepositoryStructureID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryStructureID]&#13;
			, nullif([RepositoryID],'&lt;-null-&gt;')&#13;
			, nullif([OwnerID],'&lt;-null-&gt;')&#13;
			, nullif([ParentRepositoryStructureID],'&lt;-null-&gt;')&#13;
			, nullif([IsLeafNode],'&lt;-null-&gt;')&#13;
			, nullif([Name],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructure_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[RepositoryStructure_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[RepositoryStructureID]uniqueidentifier&#13;
,[RepositoryID]uniqueidentifier&#13;
,[OwnerID]uniqueidentifier&#13;
,[ParentRepositoryStructureID]uniqueidentifier&#13;
,[IsLeafNode]bit&#13;
,[Name]nvarchar (512)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[RepositoryStructureID] varchar(50)&#13;
	,[RepositoryID] varchar(50)&#13;
	,[OwnerID] varchar(50)&#13;
	,[ParentRepositoryStructureID] varchar(50)&#13;
	,[IsLeafNode] varchar(50)&#13;
	,[Name] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryStructureID]&#13;
			,[RepositoryID]&#13;
			,[OwnerID]&#13;
			,[ParentRepositoryStructureID]&#13;
			,[IsLeafNode]&#13;
			,[Name]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vRepositoryStructure_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[RepositoryStructureID] = [dbo].[RepositoryStructure].[RepositoryStructureID]&#13;
				) as [RowVersion]&#13;
				,[RepositoryStructureID]&#13;
				,cast([RepositoryID] as varchar(50)) as [RepositoryID]&#13;
				,cast([OwnerID] as varchar(50)) as [OwnerID]&#13;
				,cast([ParentRepositoryStructureID] as varchar(50)) as [ParentRepositoryStructureID]&#13;
				,cast([IsLeafNode] as varchar(50)) as [IsLeafNode]&#13;
				,cast([Name] as varchar(50)) as [Name]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[RepositoryStructure]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[RepositoryStructureID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[RepositoryStructureID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[RepositoryStructureID]&#13;
			,RowHistoryExtract.[RepositoryID]&#13;
			,RowHistoryExtract.[OwnerID]&#13;
			,RowHistoryExtract.[ParentRepositoryStructureID]&#13;
			,RowHistoryExtract.[IsLeafNode]&#13;
			,RowHistoryExtract.[Name]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[RepositoryStructureID] = MostRecentRows.[RepositoryStructureID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[RepositoryID] , PreviousVersion.[RepositoryID])&#13;
						,isnull(NextVersion.[OwnerID] , PreviousVersion.[OwnerID])&#13;
						,isnull(NextVersion.[ParentRepositoryStructureID] , PreviousVersion.[ParentRepositoryStructureID])&#13;
						,isnull(NextVersion.[IsLeafNode] , PreviousVersion.[IsLeafNode])&#13;
						,isnull(NextVersion.[Name] , PreviousVersion.[Name])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureID] = NextVersion.[RepositoryStructureID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[RepositoryStructureID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[RepositoryStructureID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[RepositoryStructureID]&#13;
			,nullif(rh.[RepositoryID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OwnerID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[ParentRepositoryStructureID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsLeafNode],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Name],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[RepositoryStructureID] = roi.[RepositoryStructureID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[RepositoryStructureID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructureGroup_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[RepositoryStructureGroup_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[RepositoryStructureID]uniqueidentifier&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[RepositoryStructureGroupID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vRepositoryStructureGroup_RowHistory]&#13;
	WHERE		[RepositoryStructureGroupID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[RepositoryStructureGroupID]&#13;
			,cast([RepositoryStructureID] as varchar(50)) as [RepositoryStructureID]&#13;
			,cast([OrganisationGroupID] as varchar(50)) as [OrganisationGroupID]&#13;
			,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[RepositoryStructureGroup]&#13;
	WHERE		[RepositoryStructureGroupID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureGroupID] , PreviousVersion.[RepositoryStructureGroupID])&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureGroupID] = NextVersion.[RepositoryStructureGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			, nullif([RepositoryStructureID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationGroupID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,[RepositoryStructureGroupID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructureGroup_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[RepositoryStructureGroup_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[RepositoryStructureID]uniqueidentifier&#13;
,[OrganisationGroupID]uniqueidentifier&#13;
,[OrganisationExternalGroupID]uniqueidentifier&#13;
,[RepositoryStructureGroupID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[RepositoryStructureGroupID] varchar(50)&#13;
	,[RepositoryStructureID] varchar(50)&#13;
	,[OrganisationGroupID] varchar(50)&#13;
	,[OrganisationExternalGroupID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryStructureGroupID]&#13;
			,[RepositoryStructureID]&#13;
			,[OrganisationGroupID]&#13;
			,[OrganisationExternalGroupID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vRepositoryStructureGroup_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[RepositoryStructureGroupID] = [dbo].[RepositoryStructureGroup].[RepositoryStructureGroupID]&#13;
				) as [RowVersion]&#13;
				,[RepositoryStructureGroupID]&#13;
				,cast([RepositoryStructureID] as varchar(50)) as [RepositoryStructureID]&#13;
				,cast([OrganisationGroupID] as varchar(50)) as [OrganisationGroupID]&#13;
				,cast([OrganisationExternalGroupID] as varchar(50)) as [OrganisationExternalGroupID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[RepositoryStructureGroup]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[RepositoryStructureGroupID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[RepositoryStructureGroupID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[RepositoryStructureGroupID]&#13;
			,RowHistoryExtract.[RepositoryStructureID]&#13;
			,RowHistoryExtract.[OrganisationGroupID]&#13;
			,RowHistoryExtract.[OrganisationExternalGroupID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[RepositoryStructureGroupID] = MostRecentRows.[RepositoryStructureGroupID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureGroupID] , PreviousVersion.[RepositoryStructureGroupID])&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[OrganisationGroupID] , PreviousVersion.[OrganisationGroupID])&#13;
						,isnull(NextVersion.[OrganisationExternalGroupID] , PreviousVersion.[OrganisationExternalGroupID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureGroupID] = NextVersion.[RepositoryStructureGroupID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[RepositoryStructureGroupID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[RepositoryStructureGroupID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			nullif(rh.[RepositoryStructureID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationGroupID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalGroupID],'&lt;-null-&gt;')&#13;
			,rh.[RepositoryStructureGroupID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[RepositoryStructureGroupID] = roi.[RepositoryStructureGroupID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[RepositoryStructureGroupID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructureRole_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[RepositoryStructureRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[RepositoryStructureID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[RepositoryStructureRoleID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vRepositoryStructureRole_RowHistory]&#13;
	WHERE		[RepositoryStructureRoleID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[RepositoryStructureRoleID]&#13;
			,cast([RepositoryStructureID] as varchar(50)) as [RepositoryStructureID]&#13;
			,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
			,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[RepositoryStructureRole]&#13;
	WHERE		[RepositoryStructureRoleID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureRoleID] , PreviousVersion.[RepositoryStructureRoleID])&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureRoleID] = NextVersion.[RepositoryStructureRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			, nullif([RepositoryStructureID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationRoleID],'&lt;-null-&gt;')&#13;
			, nullif([OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,[RepositoryStructureRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[RepositoryStructureRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[RepositoryStructureRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[RepositoryStructureID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[OrganisationExternalRoleID]uniqueidentifier&#13;
,[RepositoryStructureRoleID]int&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[RepositoryStructureRoleID] varchar(50)&#13;
	,[RepositoryStructureID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[OrganisationExternalRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[RepositoryStructureRoleID]&#13;
			,[RepositoryStructureID]&#13;
			,[OrganisationRoleID]&#13;
			,[OrganisationExternalRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vRepositoryStructureRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[RepositoryStructureRoleID] = [dbo].[RepositoryStructureRole].[RepositoryStructureRoleID]&#13;
				) as [RowVersion]&#13;
				,[RepositoryStructureRoleID]&#13;
				,cast([RepositoryStructureID] as varchar(50)) as [RepositoryStructureID]&#13;
				,cast([OrganisationRoleID] as varchar(50)) as [OrganisationRoleID]&#13;
				,cast([OrganisationExternalRoleID] as varchar(50)) as [OrganisationExternalRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[RepositoryStructureRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[RepositoryStructureRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[RepositoryStructureRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[RepositoryStructureRoleID]&#13;
			,RowHistoryExtract.[RepositoryStructureID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[OrganisationExternalRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[RepositoryStructureRoleID] = MostRecentRows.[RepositoryStructureRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[RepositoryStructureRoleID] , PreviousVersion.[RepositoryStructureRoleID])&#13;
						,isnull(NextVersion.[RepositoryStructureID] , PreviousVersion.[RepositoryStructureID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[OrganisationExternalRoleID] , PreviousVersion.[OrganisationExternalRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[RepositoryStructureRoleID] = NextVersion.[RepositoryStructureRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[RepositoryStructureRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[RepositoryStructureRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			nullif(rh.[RepositoryStructureID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationRoleID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[OrganisationExternalRoleID],'&lt;-null-&gt;')&#13;
			,rh.[RepositoryStructureRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[RepositoryStructureRoleID] = roi.[RepositoryStructureRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[RepositoryStructureRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[TargetItem_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[TargetItem_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vTargetItem_RowHistory]&#13;
	WHERE		[TargetItemID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[TargetItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[TargetItem]&#13;
	WHERE		[TargetItemID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[TargetItemID] = NextVersion.[TargetItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[TargetItemID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[TargetItem_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[TargetItem_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[TargetItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[TargetItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vTargetItem_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[TargetItemID] = [dbo].[TargetItem].[TargetItemID]&#13;
				) as [RowVersion]&#13;
				,[TargetItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[TargetItem]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[TargetItemID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[TargetItemID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[TargetItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[TargetItemID] = MostRecentRows.[TargetItemID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[TargetItemID] = NextVersion.[TargetItemID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[TargetItemID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[TargetItemID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[TargetItemID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[TargetItemID] = roi.[TargetItemID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[TargetItemID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[TargetItemAttribute_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[TargetItemAttribute_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[TargetItemAttributeID]uniqueidentifier&#13;
,[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vTargetItemAttribute_RowHistory]&#13;
	WHERE		[TargetItemAttributeID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[TargetItemAttributeID]&#13;
			,cast([TargetItemID] as varchar(50)) as [TargetItemID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[TargetItemAttribute]&#13;
	WHERE		[TargetItemAttributeID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[TargetItemAttributeID] , PreviousVersion.[TargetItemAttributeID])&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[TargetItemAttributeID] = NextVersion.[TargetItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[TargetItemAttributeID]&#13;
			, nullif([TargetItemID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[TargetItemAttribute_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[TargetItemAttribute_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[TargetItemAttributeID]uniqueidentifier&#13;
,[TargetItemID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[TargetItemAttributeID] varchar(50)&#13;
	,[TargetItemID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[TargetItemAttributeID]&#13;
			,[TargetItemID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vTargetItemAttribute_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[TargetItemAttributeID] = [dbo].[TargetItemAttribute].[TargetItemAttributeID]&#13;
				) as [RowVersion]&#13;
				,[TargetItemAttributeID]&#13;
				,cast([TargetItemID] as varchar(50)) as [TargetItemID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[TargetItemAttribute]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[TargetItemAttributeID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[TargetItemAttributeID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[TargetItemAttributeID]&#13;
			,RowHistoryExtract.[TargetItemID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[TargetItemAttributeID] = MostRecentRows.[TargetItemAttributeID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[TargetItemAttributeID] , PreviousVersion.[TargetItemAttributeID])&#13;
						,isnull(NextVersion.[TargetItemID] , PreviousVersion.[TargetItemID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[TargetItemAttributeID] = NextVersion.[TargetItemAttributeID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[TargetItemAttributeID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[TargetItemAttributeID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[TargetItemAttributeID]&#13;
			,nullif(rh.[TargetItemID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[TargetItemAttributeID] = roi.[TargetItemAttributeID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[TargetItemAttributeID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[up_Admin_CreateAuditTables]&#13;">
      <src>&#13;
CREATE procedure [dbo].[up_Admin_CreateAuditTables]&#13;
&#13;
as&#13;
&#13;
select * from sys.tables t where&#13;
&#13;
(t.Name not like '%Audit%' ) &#13;
&#13;
order by t.Name&#13;
&#13;
--- tables to drop audit for&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Account',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','[Address]',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Attachment',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','AttachmentDetail',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','AttachmentDetailGroup',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','AttachmentDetailRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ClassificationType',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ClassificationTypeCategory',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Contact',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','IdentityCheckProvider',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Organisation',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationCategory',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationDetail',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationExternalGroup',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationExternalGroupOrganisationExternalRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationExternalRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationExternalRoleClaim',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationGroup',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationGroupOrganisationRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationIdentityCheckProvider',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationProductTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationRelationship',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationRelationshipRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationRelationshipRoleExternal',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationRoleClaim',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationService',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationStructure',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationTeam',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationTypeUserTypeIdentityCheckTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationUnit',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationUnitOrganisationGroup',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationUnitOrganisationRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganisationUnitStructure',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganPricingItemAttributeTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganPricingItemTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductItemTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductPricingItemAttributeVariantTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductProductActionTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductTargetItemAttributeVariantTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductTargetTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductUserTypeExternalIdentityCheckTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowActionClaimTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowActionNotificationTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowActionParameterTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowClaimTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowParameterTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowStateActivityActionHierarchyTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganProductWorkflowStateClaimTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganTargetItemAttributeTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','OrganTargetItemTemplate',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','PricingItem',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','PricingItemAttribute',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Product',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductDetail',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductItem',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductPricingItemAttributeVariant',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductTarget',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductTargetItemAttributeVariant',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductType',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','ProductUserTypeExternalIdentityCheck',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','PropertyDetail',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','Repository',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','RepositoryStructure',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','RepositoryStructureGroup',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','RepositoryStructureRole',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','TargetItem',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','TargetItemAttribute',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','UserAccountDetail',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','UserAccountOrganisationUnit',1,1,1&#13;
exec [Audit].[pAutoAuditDrop] 'dbo','UserOrganizationRole'&#13;
&#13;
-- add audit items&#13;
&#13;
exec [Audit].[pAutoAudit] 'dbo','Account','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','[Address]','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','Attachment','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','AttachmentDetail','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','AttachmentDetailGroup','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','AttachmentDetailRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ClassificationType','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ClassificationTypeCategory','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','Contact','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','IdentityCheckProvider','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','Organisation','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationCategory','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationDetail','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationExternalGroup','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationExternalGroupOrganisationExternalRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationExternalRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationExternalRoleClaim','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationGroup','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationGroupOrganisationRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationIdentityCheckProvider','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationProductTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationRelationship','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationRelationshipRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationRelationshipRoleExternal','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationRoleClaim','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationService','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationStructure','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationTeam','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationTypeUserTypeIdentityCheckTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationUnit','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationUnitOrganisationGroup','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationUnitOrganisationRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganisationUnitStructure','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganPricingItemAttributeTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganPricingItemTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductItemTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductPricingItemAttributeVariantTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductProductActionTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductTargetItemAttributeVariantTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductTargetTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductUserTypeExternalIdentityCheckTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowActionClaimTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowActionNotificationTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowActionParameterTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowClaimTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowParameterTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowStateActivityActionHierarchyTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganProductWorkflowStateClaimTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganTargetItemAttributeTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','OrganTargetItemTemplate','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','PricingItem','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','PricingItemAttribute','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','Product','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductDetail','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductItem','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductPricingItemAttributeVariant','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductTarget','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductTargetItemAttributeVariant','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductType','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','ProductUserTypeExternalIdentityCheck','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','PropertyDetail','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','Repository','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','RepositoryStructure','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','RepositoryStructureGroup','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','RepositoryStructureRole','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','TargetItem','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','TargetItemAttribute','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','UserAccountDetail','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','UserAccountOrganisationUnit','&lt;All&gt;',1,0,1,2,2,2&#13;
exec [Audit].[pAutoAudit] 'dbo','UserOrganizationRole','&lt;All&gt;',1,0,1,2,2,2&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[up_GetUserClaims]">
      <src>&#13;
&#13;
&#13;
-- =============================================&#13;
-- Author:		Chris Misson&#13;
-- Create date: 06/01/2014&#13;
-- Description:	Get a users claims&#13;
-- =============================================&#13;
CREATE PROCEDURE [dbo].[up_GetUserClaims] &#13;
	-- Add the parameters for the stored procedure here&#13;
	@UserId uniqueidentifier&#13;
AS&#13;
BEGIN&#13;
	-- SET NOCOUNT ON added to prevent extra result sets from&#13;
	-- interfering with SELECT statements.&#13;
	SET NOCOUNT ON;&#13;
&#13;
    -- Insert statements for procedure here&#13;
	create table #claims &#13;
	(&#13;
		[type] nvarchar(50),&#13;
		value nvarchar(50)&#13;
	)&#13;
&#13;
	-- deal with all resource / operation pairs prefix R_&#13;
	insert into #claims&#13;
	select &#13;
	&#13;
	'R_' + r.ResourceName,&#13;
	o.OperationName&#13;
&#13;
	from OrganisationRoleClaim orc&#13;
&#13;
	left outer join Operation o on o.OperationID = orc.OperationID&#13;
	left outer join [Resource] r on r.ResourceID = orc.ResourceID&#13;
&#13;
	where&#13;
&#13;
	orc.OperationID is not null and orc.ResourceID is not null&#13;
&#13;
	and orc.OrganisationRoleID in (select u.[OrganisationRoleID] from  [UserOrganizationRole] u where u.UserID = @UserId)&#13;
&#13;
&#13;
	-- deal with state / stateItems, prefix S_&#13;
	insert into #claims&#13;
	select &#13;
	&#13;
	'S_' + s.StateName,&#13;
	si.StateItemName&#13;
&#13;
	from OrganisationRoleClaim orc&#13;
&#13;
	left outer join [State] s on s.StateID = orc.StateID&#13;
	left outer join [StateItem] si on si.StateItemID = orc.StateItemID&#13;
&#13;
	where&#13;
&#13;
	orc.OperationID is not null and orc.ResourceID is not null&#13;
&#13;
	and orc.OrganisationRoleID in (select u.[OrganisationRoleID] from [UserOrganizationRole] u where u.UserID = @UserId)&#13;
&#13;
	--select @UserId as 'UserAccount_ID',[type],value from #claims&#13;
&#13;
	select top 1 * from UserClaims&#13;
END&#13;
&#13;
&#13;
&#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserAccountDetail_RowHistory](@PK varchar(36))">
      <src>CREATE FUNCTION [dbo].[UserAccountDetail_RowHistory]&#13;
			(&#13;
			@PK varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[UserDetailID]uniqueidentifier&#13;
,[UserID]uniqueidentifier&#13;
,[Salutation]nvarchar (200)&#13;
,[FirstName]nvarchar (400)&#13;
,[MiddleName]nvarchar (400)&#13;
,[LastName]nvarchar (400)&#13;
,[Title]nvarchar (200)&#13;
,[HomePhone]nvarchar (200)&#13;
,[HomeMobile]nvarchar (200)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vUserAccountDetail_RowHistory]&#13;
	WHERE		[UserDetailID] = @PK &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[UserDetailID]&#13;
			,cast([UserID] as varchar(50)) as [UserID]&#13;
			,cast([Salutation] as varchar(50)) as [Salutation]&#13;
			,cast([FirstName] as varchar(50)) as [FirstName]&#13;
			,cast([MiddleName] as varchar(50)) as [MiddleName]&#13;
			,cast([LastName] as varchar(50)) as [LastName]&#13;
			,cast([Title] as varchar(50)) as [Title]&#13;
			,cast([HomePhone] as varchar(50)) as [HomePhone]&#13;
			,cast([HomeMobile] as varchar(50)) as [HomeMobile]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[UserAccountDetail]&#13;
	WHERE		[UserDetailID] = @PK &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserDetailID] , PreviousVersion.[UserDetailID])&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[Salutation] , PreviousVersion.[Salutation])&#13;
						,isnull(NextVersion.[FirstName] , PreviousVersion.[FirstName])&#13;
						,isnull(NextVersion.[MiddleName] , PreviousVersion.[MiddleName])&#13;
						,isnull(NextVersion.[LastName] , PreviousVersion.[LastName])&#13;
						,isnull(NextVersion.[Title] , PreviousVersion.[Title])&#13;
						,isnull(NextVersion.[HomePhone] , PreviousVersion.[HomePhone])&#13;
						,isnull(NextVersion.[HomeMobile] , PreviousVersion.[HomeMobile])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserDetailID] = NextVersion.[UserDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserDetailID]&#13;
			, nullif([UserID],'&lt;-null-&gt;')&#13;
			, nullif([Salutation],'&lt;-null-&gt;')&#13;
			, nullif([FirstName],'&lt;-null-&gt;')&#13;
			, nullif([MiddleName],'&lt;-null-&gt;')&#13;
			, nullif([LastName],'&lt;-null-&gt;')&#13;
			, nullif([Title],'&lt;-null-&gt;')&#13;
			, nullif([HomePhone],'&lt;-null-&gt;')&#13;
			, nullif([HomeMobile],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserAccountDetail_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[UserAccountDetail_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[UserDetailID]uniqueidentifier&#13;
,[UserID]uniqueidentifier&#13;
,[Salutation]nvarchar (200)&#13;
,[FirstName]nvarchar (400)&#13;
,[MiddleName]nvarchar (400)&#13;
,[LastName]nvarchar (400)&#13;
,[Title]nvarchar (200)&#13;
,[HomePhone]nvarchar (200)&#13;
,[HomeMobile]nvarchar (200)&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[UserDetailID] varchar(50)&#13;
	,[UserID] varchar(50)&#13;
	,[Salutation] varchar(50)&#13;
	,[FirstName] varchar(50)&#13;
	,[MiddleName] varchar(50)&#13;
	,[LastName] varchar(50)&#13;
	,[Title] varchar(50)&#13;
	,[HomePhone] varchar(50)&#13;
	,[HomeMobile] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserDetailID]&#13;
			,[UserID]&#13;
			,[Salutation]&#13;
			,[FirstName]&#13;
			,[MiddleName]&#13;
			,[LastName]&#13;
			,[Title]&#13;
			,[HomePhone]&#13;
			,[HomeMobile]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vUserAccountDetail_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[UserDetailID] = [dbo].[UserAccountDetail].[UserDetailID]&#13;
				) as [RowVersion]&#13;
				,[UserDetailID]&#13;
				,cast([UserID] as varchar(50)) as [UserID]&#13;
				,cast([Salutation] as varchar(50)) as [Salutation]&#13;
				,cast([FirstName] as varchar(50)) as [FirstName]&#13;
				,cast([MiddleName] as varchar(50)) as [MiddleName]&#13;
				,cast([LastName] as varchar(50)) as [LastName]&#13;
				,cast([Title] as varchar(50)) as [Title]&#13;
				,cast([HomePhone] as varchar(50)) as [HomePhone]&#13;
				,cast([HomeMobile] as varchar(50)) as [HomeMobile]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[UserAccountDetail]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[UserDetailID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[UserDetailID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[UserDetailID]&#13;
			,RowHistoryExtract.[UserID]&#13;
			,RowHistoryExtract.[Salutation]&#13;
			,RowHistoryExtract.[FirstName]&#13;
			,RowHistoryExtract.[MiddleName]&#13;
			,RowHistoryExtract.[LastName]&#13;
			,RowHistoryExtract.[Title]&#13;
			,RowHistoryExtract.[HomePhone]&#13;
			,RowHistoryExtract.[HomeMobile]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[UserDetailID] = MostRecentRows.[UserDetailID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserDetailID] , PreviousVersion.[UserDetailID])&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[Salutation] , PreviousVersion.[Salutation])&#13;
						,isnull(NextVersion.[FirstName] , PreviousVersion.[FirstName])&#13;
						,isnull(NextVersion.[MiddleName] , PreviousVersion.[MiddleName])&#13;
						,isnull(NextVersion.[LastName] , PreviousVersion.[LastName])&#13;
						,isnull(NextVersion.[Title] , PreviousVersion.[Title])&#13;
						,isnull(NextVersion.[HomePhone] , PreviousVersion.[HomePhone])&#13;
						,isnull(NextVersion.[HomeMobile] , PreviousVersion.[HomeMobile])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserDetailID] = NextVersion.[UserDetailID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[UserDetailID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[UserDetailID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[UserDetailID]&#13;
			,nullif(rh.[UserID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Salutation],'&lt;-null-&gt;')&#13;
			,nullif(rh.[FirstName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[MiddleName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[LastName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[Title],'&lt;-null-&gt;')&#13;
			,nullif(rh.[HomePhone],'&lt;-null-&gt;')&#13;
			,nullif(rh.[HomeMobile],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[UserDetailID] = roi.[UserDetailID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[UserDetailID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserAccountOrganisationUnit_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[UserAccountOrganisationUnit_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[UserID]uniqueidentifier&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[JobTitle]nvarchar (200)&#13;
,[InternalEmailAddress]nvarchar (200)&#13;
,[NickName]nvarchar (200)&#13;
,[UserDetailID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vUserAccountOrganisationUnit_RowHistory]&#13;
	WHERE		[UserID] = @PK AND [OrganisationUnitID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationUnitID]&#13;
			,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
			,cast([JobTitle] as varchar(50)) as [JobTitle]&#13;
			,cast([InternalEmailAddress] as varchar(50)) as [InternalEmailAddress]&#13;
			,cast([NickName] as varchar(50)) as [NickName]&#13;
			,cast([UserDetailID] as varchar(50)) as [UserDetailID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[UserAccountOrganisationUnit]&#13;
	WHERE		[UserID] = @PK AND [OrganisationUnitID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[JobTitle] , PreviousVersion.[JobTitle])&#13;
						,isnull(NextVersion.[InternalEmailAddress] , PreviousVersion.[InternalEmailAddress])&#13;
						,isnull(NextVersion.[NickName] , PreviousVersion.[NickName])&#13;
						,isnull(NextVersion.[UserDetailID] , PreviousVersion.[UserDetailID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserID] = NextVersion.[UserID]&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationUnitID]&#13;
			, nullif([OrganisationID],'&lt;-null-&gt;')&#13;
			, nullif([JobTitle],'&lt;-null-&gt;')&#13;
			, nullif([InternalEmailAddress],'&lt;-null-&gt;')&#13;
			, nullif([NickName],'&lt;-null-&gt;')&#13;
			, nullif([UserDetailID],'&lt;-null-&gt;')&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserAccountOrganisationUnit_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[UserAccountOrganisationUnit_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[UserID]uniqueidentifier&#13;
,[OrganisationUnitID]int&#13;
,[OrganisationID]uniqueidentifier&#13;
,[JobTitle]nvarchar (200)&#13;
,[InternalEmailAddress]nvarchar (200)&#13;
,[NickName]nvarchar (200)&#13;
,[UserDetailID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[UserID] varchar(50)&#13;
	,[OrganisationUnitID] varchar(50)&#13;
	,[OrganisationID] varchar(50)&#13;
	,[JobTitle] varchar(50)&#13;
	,[InternalEmailAddress] varchar(50)&#13;
	,[NickName] varchar(50)&#13;
	,[UserDetailID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationUnitID]&#13;
			,[OrganisationID]&#13;
			,[JobTitle]&#13;
			,[InternalEmailAddress]&#13;
			,[NickName]&#13;
			,[UserDetailID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vUserAccountOrganisationUnit_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[UserID] = [dbo].[UserAccountOrganisationUnit].[UserID]&#13;
					and	AuditDataExtract.[OrganisationUnitID] = [dbo].[UserAccountOrganisationUnit].[OrganisationUnitID]&#13;
				) as [RowVersion]&#13;
				,[UserID]&#13;
				,[OrganisationUnitID]&#13;
				,cast([OrganisationID] as varchar(50)) as [OrganisationID]&#13;
				,cast([JobTitle] as varchar(50)) as [JobTitle]&#13;
				,cast([InternalEmailAddress] as varchar(50)) as [InternalEmailAddress]&#13;
				,cast([NickName] as varchar(50)) as [NickName]&#13;
				,cast([UserDetailID] as varchar(50)) as [UserDetailID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[UserAccountOrganisationUnit]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[UserID]&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[UserID]&#13;
						,[OrganisationUnitID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[UserID]&#13;
			,RowHistoryExtract.[OrganisationUnitID]&#13;
			,RowHistoryExtract.[OrganisationID]&#13;
			,RowHistoryExtract.[JobTitle]&#13;
			,RowHistoryExtract.[InternalEmailAddress]&#13;
			,RowHistoryExtract.[NickName]&#13;
			,RowHistoryExtract.[UserDetailID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[UserID] = MostRecentRows.[UserID]&#13;
				and		RowHistoryExtract.[OrganisationUnitID] = MostRecentRows.[OrganisationUnitID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[OrganisationUnitID] , PreviousVersion.[OrganisationUnitID])&#13;
						,isnull(NextVersion.[OrganisationID] , PreviousVersion.[OrganisationID])&#13;
						,isnull(NextVersion.[JobTitle] , PreviousVersion.[JobTitle])&#13;
						,isnull(NextVersion.[InternalEmailAddress] , PreviousVersion.[InternalEmailAddress])&#13;
						,isnull(NextVersion.[NickName] , PreviousVersion.[NickName])&#13;
						,isnull(NextVersion.[UserDetailID] , PreviousVersion.[UserDetailID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserID] = NextVersion.[UserID]&#13;
				and		PreviousVersion.[OrganisationUnitID] = NextVersion.[OrganisationUnitID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[UserID]&#13;
						,[OrganisationUnitID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[UserID]&#13;
						,[OrganisationUnitID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[UserID]&#13;
			,rh.[OrganisationUnitID]&#13;
			,nullif(rh.[OrganisationID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[JobTitle],'&lt;-null-&gt;')&#13;
			,nullif(rh.[InternalEmailAddress],'&lt;-null-&gt;')&#13;
			,nullif(rh.[NickName],'&lt;-null-&gt;')&#13;
			,nullif(rh.[UserDetailID],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[UserID] = roi.[UserID]&#13;
	and		rh.[OrganisationUnitID] = roi.[OrganisationUnitID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[UserID],&#13;
			rh.[OrganisationUnitID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserOrganizationRole_RowHistory](@PK varchar(36),@PK2 varchar(36))">
      <src>CREATE FUNCTION [dbo].[UserOrganizationRole_RowHistory]&#13;
			(&#13;
			@PK varchar(36),@PK2 varchar(36)&#13;
			)&#13;
&#13;
 -- generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves data from the RowHistory view for the referenced table for the record identified by the PK parameters.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
AuditDate datetime&#13;
,Operation varchar(1)&#13;
,[RowVersion] int&#13;
,[UserID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
,ViewScope varchar(10)&#13;
,RowHistorySource varchar(10)&#13;
,SysUser sysname&#13;
,[Application] varchar(128)&#13;
,SQLStatement varchar(max)&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		[dbo].[vUserOrganizationRole_RowHistory]&#13;
	WHERE		[UserID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select	getdate() as AuditDate&#13;
			,'c' as Operation&#13;
			,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract) as [RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationRoleID]&#13;
			,cast([IsActive] as varchar(50)) as [IsActive]&#13;
			,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
			,null as ViewScope&#13;
			,null as RowHistorySource&#13;
			,null as SysUser&#13;
			,null as [Application]&#13;
			,null as SQLStatement&#13;
			from	[dbo].[UserOrganizationRole]&#13;
	WHERE		[UserID] = @PK AND [OrganisationRoleID] = @PK2 &#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		top 1 *&#13;
			From		RowHistoryExtract&#13;
			order by	[RowVersion] desc&#13;
&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
						,NextVersion.ViewScope&#13;
						,NextVersion.RowHistorySource&#13;
						,NextVersion.SysUser&#13;
						,NextVersion.[Application]&#13;
						,NextVersion.SQLStatement&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserID] = NextVersion.[UserID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
	--Returns the function table&#13;
	Select	AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationRoleID]&#13;
			, nullif([IsActive],'&lt;-null-&gt;')&#13;
			, nullif([IsDeleted],'&lt;-null-&gt;')&#13;
			,ViewScope&#13;
			,RowHistorySource&#13;
			,SysUser&#13;
			,[Application]&#13;
			,SQLStatement&#13;
FROM		RowHistory&#13;
where		Operation &lt;&gt; 'c'&#13;
order by	[RowVersion],AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="[dbo].[UserOrganizationRole_TableRecovery](@RecoveryTime datetime)">
      <src>CREATE FUNCTION [dbo].[UserOrganizationRole_TableRecovery]&#13;
			(&#13;
			@RecoveryTime datetime&#13;
			)&#13;
&#13;
 -- NEW generated by AutoAudit Version 3.30a on Jan 20 2014 12:02PM&#13;
 -- created by Paul Nielsen and John Sigouin &#13;
 -- www.SQLServerBible.com &#13;
 -- AutoAudit.codeplex.com &#13;
 -- This function retrieves an image of the table as it existed at the specified point in time.&#13;
&#13;
RETURNS @HistoryData Table&#13;
(&#13;
[UserID]uniqueidentifier&#13;
,[OrganisationRoleID]uniqueidentifier&#13;
,[IsActive]bit&#13;
,[IsDeleted]bit&#13;
) &#13;
AS &#13;
BEGIN &#13;
&#13;
-- Create table variable to hold history records.&#13;
Declare @AuditDataExtract table&#13;
	(&#13;
	AuditDate datetime&#13;
	,Operation varchar(1)&#13;
	,[RowVersion] int&#13;
	,[UserID] varchar(50)&#13;
	,[OrganisationRoleID] varchar(50)&#13;
	,[IsActive] varchar(50)&#13;
	,[IsDeleted] varchar(50)&#13;
	) &#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
--write the full history for the table into a temp table variable for performance.&#13;
Insert @AuditDataExtract &#13;
Select &#13;
			AuditDate&#13;
			,Operation&#13;
			,[RowVersion]&#13;
			,[UserID]&#13;
			,[OrganisationRoleID]&#13;
			,[IsActive]&#13;
			,[IsDeleted]&#13;
FROM		[dbo].[vUserOrganizationRole_RowHistory]&#13;
&#13;
-- Detailed data retrieval is enabled for this table.&#13;
;With	AuditDataExtract --Source data query&#13;
	AS&#13;
	(&#13;
	SELECT		*&#13;
	FROM		@AuditDataExtract&#13;
	),&#13;
	CurrentRowExtract &#13;
	AS&#13;
	(&#13;
	Select		getdate() as AuditDate&#13;
				,'c' as Operation&#13;
				,(Select isnull(max([RowVersion]),0) + 1 from AuditDataExtract &#13;
				Where	1=1 &#13;
					and	AuditDataExtract.[UserID] = [dbo].[UserOrganizationRole].[UserID]&#13;
					and	AuditDataExtract.[OrganisationRoleID] = [dbo].[UserOrganizationRole].[OrganisationRoleID]&#13;
				) as [RowVersion]&#13;
				,[UserID]&#13;
				,[OrganisationRoleID]&#13;
				,cast([IsActive] as varchar(50)) as [IsActive]&#13;
				,cast([IsDeleted] as varchar(50)) as [IsDeleted]&#13;
	from		[dbo].[UserOrganizationRole]&#13;
			),&#13;
			RowHistoryExtract&#13;
			AS&#13;
			(&#13;
			Select * from AuditDataExtract&#13;
			Union All&#13;
			Select * from CurrentRowExtract&#13;
			),&#13;
			MostRecentRows&#13;
			AS&#13;
			(&#13;
			--Get most recent rows&#13;
			Select &#13;
						max([RowVersion]) as MostRecentRow&#13;
						,[UserID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistoryExtract&#13;
			Group By	&#13;
						[UserID]&#13;
						,[OrganisationRoleID]&#13;
			),&#13;
			RowHistory&#13;
			AS&#13;
			(&#13;
			--Anchor query for RowHistory buildup. Get the most current rowversion&#13;
			Select		&#13;
			RowHistoryExtract.AuditDate&#13;
			,RowHistoryExtract.Operation&#13;
			,RowHistoryExtract.[RowVersion]&#13;
			,RowHistoryExtract.[UserID]&#13;
			,RowHistoryExtract.[OrganisationRoleID]&#13;
			,RowHistoryExtract.[IsActive]&#13;
			,RowHistoryExtract.[IsDeleted]&#13;
			From		RowHistoryExtract&#13;
			inner join	MostRecentRows&#13;
				on		RowHistoryExtract.[RowVersion] = MostRecentRows.MostRecentRow&#13;
				and		RowHistoryExtract.[UserID] = MostRecentRows.[UserID]&#13;
				and		RowHistoryExtract.[OrganisationRoleID] = MostRecentRows.[OrganisationRoleID]&#13;
			UNION All&#13;
			--Recursive query for RowHistory buildup&#13;
			Select		NextVersion.AuditDate&#13;
						,NextVersion.Operation&#13;
						,NextVersion.[RowVersion]&#13;
						,isnull(NextVersion.[UserID] , PreviousVersion.[UserID])&#13;
						,isnull(NextVersion.[OrganisationRoleID] , PreviousVersion.[OrganisationRoleID])&#13;
						,isnull(NextVersion.[IsActive] , PreviousVersion.[IsActive])&#13;
						,isnull(NextVersion.[IsDeleted] , PreviousVersion.[IsDeleted])&#13;
			from		RowHistoryExtract as NextVersion&#13;
			Inner join	RowHistory as PreviousVersion&#13;
				on		PreviousVersion.[RowVersion] = NextVersion.[RowVersion] + 1&#13;
				and		PreviousVersion.[UserID] = NextVersion.[UserID]&#13;
				and		PreviousVersion.[OrganisationRoleID] = NextVersion.[OrganisationRoleID]&#13;
			),&#13;
			RowsOfInterest&#13;
			AS&#13;
			(&#13;
			--Get Rows Of Interest&#13;
			Select		max([RowVersion]) as [RowVersion]&#13;
						,[UserID]&#13;
						,[OrganisationRoleID]&#13;
			from		RowHistory&#13;
			Where		[AuditDate] &lt;= @RecoveryTime&#13;
				And		Operation &lt;&gt; 'c'&#13;
			Group By		&#13;
						[UserID]&#13;
						,[OrganisationRoleID]&#13;
			)&#13;
-- Statement that executes the CTE&#13;
Insert into @HistoryData&#13;
--Returns the function table&#13;
Select &#13;
			rh.[UserID]&#13;
			,rh.[OrganisationRoleID]&#13;
			,nullif(rh.[IsActive],'&lt;-null-&gt;')&#13;
			,nullif(rh.[IsDeleted],'&lt;-null-&gt;')&#13;
FROM		RowHistory as rh&#13;
Inner join	RowsOfInterest as roi&#13;
	on		rh.[RowVersion] = roi.[RowVersion]&#13;
	and		rh.[UserID] = roi.[UserID]&#13;
	and		rh.[OrganisationRoleID] = roi.[OrganisationRoleID]&#13;
Where		Operation &lt;&gt; 'd'&#13;
order by &#13;
			rh.[UserID],&#13;
			rh.[OrganisationRoleID],&#13;
			rh.[RowVersion],&#13;
			rh.AuditDate&#13;
option		(MAXRECURSION 10000)&#13;
&#13;
Return &#13;
END &#13;
</src>
    </Proc>
    <Proc nm="up_DeleteStateItem">
      <src>-- =============================================&#13;
-- Author:		Chris Misson&#13;
-- Create date: 01/01/2014&#13;
-- Description:	Delete StateItem Item&#13;
-- =============================================&#13;
CREATE PROCEDURE up_DeleteStateItem &#13;
	-- Add the parameters for the stored procedure here&#13;
	@StateItemID uniqueidentifier&#13;
AS&#13;
BEGIN&#13;
	-- SET NOCOUNT ON added to prevent extra result sets from&#13;
	-- interfering with SELECT statements.&#13;
	SET NOCOUNT ON;&#13;
&#13;
    delete from RoleTemplateClaim where StateItemID = @StateItemID&#13;
	&#13;
	delete from StateItem where ParentStateItemID = @StateItemID&#13;
	&#13;
	delete from StateItem where StateITemID = @StateItemID &#13;
END&#13;
</src>
    </Proc>
    <View nm="vAccount_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Account]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AccountID]&#13;
		,PivotData.[AccountName]&#13;
		,PivotData.[CountryTypeID]&#13;
		,PivotData.[AccountClassificationTypeID]&#13;
		,PivotData.[CustomerTypeID]&#13;
		,PivotData.[BusinessTypeID]&#13;
		,PivotData.[PreferredContactMethodID]&#13;
		,PivotData.[IndustryTypeID]&#13;
		,PivotData.[AccountTypeID]&#13;
		,PivotData.[AccountSubTypeID]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[EmailAddress1]&#13;
		,PivotData.[EmailAddress2]&#13;
		,PivotData.[EmailAddress3]&#13;
		,PivotData.[DoNotPhone]&#13;
		,PivotData.[DoNotEmail]&#13;
		,PivotData.[Fax]&#13;
		,PivotData.[IsPrivate]&#13;
		,PivotData.[Telephone1]&#13;
		,PivotData.[Telephone2]&#13;
		,PivotData.[Telephone3]&#13;
		,PivotData.[StateTypeID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[PrimaryContactID]&#13;
		,PivotData.[ParentAccountID]&#13;
		,PivotData.[MasterID]&#13;
		,PivotData.[DoNotTelephone]&#13;
		,PivotData.[MobileNumber1]&#13;
		,PivotData.[MobileNumber2]&#13;
		,PivotData.[MobileNumber3]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[AccountCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Account]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AccountID]&#13;
					,[AccountName]&#13;
					,[CountryTypeID]&#13;
					,[AccountClassificationTypeID]&#13;
					,[CustomerTypeID]&#13;
					,[BusinessTypeID]&#13;
					,[PreferredContactMethodID]&#13;
					,[IndustryTypeID]&#13;
					,[AccountTypeID]&#13;
					,[AccountSubTypeID]&#13;
					,[Description]&#13;
					,[EmailAddress1]&#13;
					,[EmailAddress2]&#13;
					,[EmailAddress3]&#13;
					,[DoNotPhone]&#13;
					,[DoNotEmail]&#13;
					,[Fax]&#13;
					,[IsPrivate]&#13;
					,[Telephone1]&#13;
					,[Telephone2]&#13;
					,[Telephone3]&#13;
					,[StateTypeID]&#13;
					,[OwnerID]&#13;
					,[OrganisationUnitID]&#13;
					,[PrimaryContactID]&#13;
					,[ParentAccountID]&#13;
					,[MasterID]&#13;
					,[DoNotTelephone]&#13;
					,[MobileNumber1]&#13;
					,[MobileNumber2]&#13;
					,[MobileNumber3]&#13;
					,[ParentID]&#13;
					,[AccountCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	</Sql>
    </View>
    <View nm="vAccount_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AccountID] &#13;
&#13;
		,PivotData.[AccountName]&#13;
		,PivotData.[CountryTypeID]&#13;
		,PivotData.[AccountClassificationTypeID]&#13;
		,PivotData.[CustomerTypeID]&#13;
		,PivotData.[BusinessTypeID]&#13;
		,PivotData.[PreferredContactMethodID]&#13;
		,PivotData.[IndustryTypeID]&#13;
		,PivotData.[AccountTypeID]&#13;
		,PivotData.[AccountSubTypeID]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[EmailAddress1]&#13;
		,PivotData.[EmailAddress2]&#13;
		,PivotData.[EmailAddress3]&#13;
		,PivotData.[DoNotPhone]&#13;
		,PivotData.[DoNotEmail]&#13;
		,PivotData.[Fax]&#13;
		,PivotData.[IsPrivate]&#13;
		,PivotData.[Telephone1]&#13;
		,PivotData.[Telephone2]&#13;
		,PivotData.[Telephone3]&#13;
		,PivotData.[StateTypeID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[PrimaryContactID]&#13;
		,PivotData.[ParentAccountID]&#13;
		,PivotData.[MasterID]&#13;
		,PivotData.[DoNotTelephone]&#13;
		,PivotData.[MobileNumber1]&#13;
		,PivotData.[MobileNumber2]&#13;
		,PivotData.[MobileNumber3]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[AccountCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Account]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AccountID]&#13;
					,[AccountName]&#13;
					,[CountryTypeID]&#13;
					,[AccountClassificationTypeID]&#13;
					,[CustomerTypeID]&#13;
					,[BusinessTypeID]&#13;
					,[PreferredContactMethodID]&#13;
					,[IndustryTypeID]&#13;
					,[AccountTypeID]&#13;
					,[AccountSubTypeID]&#13;
					,[Description]&#13;
					,[EmailAddress1]&#13;
					,[EmailAddress2]&#13;
					,[EmailAddress3]&#13;
					,[DoNotPhone]&#13;
					,[DoNotEmail]&#13;
					,[Fax]&#13;
					,[IsPrivate]&#13;
					,[Telephone1]&#13;
					,[Telephone2]&#13;
					,[Telephone3]&#13;
					,[StateTypeID]&#13;
					,[OwnerID]&#13;
					,[OrganisationUnitID]&#13;
					,[PrimaryContactID]&#13;
					,[ParentAccountID]&#13;
					,[MasterID]&#13;
					,[DoNotTelephone]&#13;
					,[MobileNumber1]&#13;
					,[MobileNumber2]&#13;
					,[MobileNumber3]&#13;
					,[ParentID]&#13;
					,[AccountCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vAttachment_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Attachment]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AttachmentID]&#13;
		,PivotData.[MimeType]&#13;
		,PivotData.[Body]&#13;
		,PivotData.[Subject]&#13;
		,PivotData.[FileName]&#13;
		,PivotData.[FileSize]&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Attachment]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentID]&#13;
					,[MimeType]&#13;
					,[Body]&#13;
					,[Subject]&#13;
					,[FileName]&#13;
					,[FileSize]&#13;
					,[AttachmentDetailID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vAttachment_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AttachmentID] &#13;
&#13;
		,PivotData.[MimeType]&#13;
		,PivotData.[Body]&#13;
		,PivotData.[Subject]&#13;
		,PivotData.[FileName]&#13;
		,PivotData.[FileSize]&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Attachment]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentID]&#13;
					,[MimeType]&#13;
					,[Body]&#13;
					,[Subject]&#13;
					,[FileName]&#13;
					,[FileSize]&#13;
					,[AttachmentDetailID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetail_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[AttachmentDetail]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AttachmentDetailID]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[AttachmentTypeID]&#13;
		,PivotData.[AttachmentSubTypeID]&#13;
		,PivotData.[AttachmentCategoryID]&#13;
		,PivotData.[RepositoryMapID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetail]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailID]&#13;
					,[OrganisationID]&#13;
					,[AttachmentTypeID]&#13;
					,[AttachmentSubTypeID]&#13;
					,[AttachmentCategoryID]&#13;
					,[RepositoryMapID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetail_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AttachmentDetailID] &#13;
&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[AttachmentTypeID]&#13;
		,PivotData.[AttachmentSubTypeID]&#13;
		,PivotData.[AttachmentCategoryID]&#13;
		,PivotData.[RepositoryMapID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetail]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailID]&#13;
					,[OrganisationID]&#13;
					,[AttachmentTypeID]&#13;
					,[AttachmentSubTypeID]&#13;
					,[AttachmentCategoryID]&#13;
					,[RepositoryMapID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetailGroup_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[AttachmentDetailGroup]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AttachmentDetailGroupID]&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[OrganisationGroupID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetailGroup]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailGroupID]&#13;
					,[AttachmentDetailID]&#13;
					,[OrganisationGroupID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetailGroup_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AttachmentDetailGroupID] &#13;
&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[OrganisationGroupID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetailGroup]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailGroupID]&#13;
					,[AttachmentDetailID]&#13;
					,[OrganisationGroupID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetailRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[AttachmentDetailRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AttachmentDetailRoleID]&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetailRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailID]&#13;
					,[OrganisationRoleID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[AttachmentDetailRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vAttachmentDetailRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AttachmentDetailRoleID] &#13;
&#13;
		,PivotData.[AttachmentDetailID]&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[AttachmentDetailRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AttachmentDetailID]&#13;
					,[OrganisationRoleID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[AttachmentDetailRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vClaimSource">
      <Sql>select&#13;
&#13;
 &#13;
&#13;
newid() as 'ID',&#13;
&#13;
'Resource' as 'ClaimType',&#13;
&#13;
res.ResourceID as 'ClaimID',&#13;
&#13;
res.ResourceName as 'ClaimName',&#13;
&#13;
'Operation' as 'ClaimSubType',&#13;
&#13;
op.OperationID as 'ClaimSubID',&#13;
&#13;
op.OperationName as 'ClaimSubName'&#13;
&#13;
 &#13;
&#13;
from [Resource] res&#13;
&#13;
 &#13;
&#13;
inner join ResourceOperation ro on ro.ResourceID = res.ResourceID&#13;
&#13;
left outer join Operation op on op.OperationID = ro.OperationID&#13;
&#13;
 &#13;
&#13;
union&#13;
&#13;
 &#13;
&#13;
select&#13;
&#13;
 &#13;
&#13;
newid() as 'ID',&#13;
&#13;
'State' as 'ClaimType',&#13;
&#13;
sat.StateID as 'ClaimID',&#13;
&#13;
sat.StateName as 'ClaimName',&#13;
&#13;
'StateItem' as 'ClaimSubType',&#13;
&#13;
si.StateItemID as 'ClaimSubID',&#13;
&#13;
case when psi.StateItemName is null then si.StateItemName else (psi.StateItemName + '_' + si.StateItemName) end as 'ClaimSubName'&#13;
&#13;
 &#13;
&#13;
from [State] sat&#13;
&#13;
 &#13;
&#13;
inner join StateItem si on si.StateID = sat.StateID&#13;
&#13;
left outer join StateItem psi on psi.StateItemID = si.ParentStateItemID&#13;
&#13;
 &#13;
&#13;
 &#13;
&#13;
&#13;
</Sql>
    </View>
    <View nm="vClassificationType_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ClassificationType]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ClassificationTypeID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[ClassificationTypeCategoryID]&#13;
		,PivotData.[ParentClassificationTypeCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ClassificationType]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ClassificationTypeID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[ClassificationTypeCategoryID]&#13;
					,[ParentClassificationTypeCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vClassificationType_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ClassificationTypeID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[ClassificationTypeCategoryID]&#13;
		,PivotData.[ParentClassificationTypeCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ClassificationType]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ClassificationTypeID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[ClassificationTypeCategoryID]&#13;
					,[ParentClassificationTypeCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vClassificationTypeCategory_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ClassificationTypeCategory]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ClassificationTypeCategoryID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ClassificationTypeCategory]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ClassificationTypeCategoryID]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vClassificationTypeCategory_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ClassificationTypeCategoryID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ClassificationTypeCategory]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ClassificationTypeCategoryID]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vContact_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Contact]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ContactID]&#13;
		,PivotData.[ContactName]&#13;
		,PivotData.[MasterContactID]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[CustomerTypeID]&#13;
		,PivotData.[PreferredContactMethodID]&#13;
		,PivotData.[IsBackOfficeCustomer]&#13;
		,PivotData.[Salutation]&#13;
		,PivotData.[JobTitle]&#13;
		,PivotData.[FirstName]&#13;
		,PivotData.[Department]&#13;
		,PivotData.[NickName]&#13;
		,PivotData.[MiddleName]&#13;
		,PivotData.[LastName]&#13;
		,PivotData.[BirthDate]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[GenderTypeID]&#13;
		,PivotData.[HasChildren]&#13;
		,PivotData.[EducationTypeID]&#13;
		,PivotData.[WebSiteURL]&#13;
		,PivotData.[EmailAddress1]&#13;
		,PivotData.[EmailAddress2]&#13;
		,PivotData.[EmailAddress3]&#13;
		,PivotData.[AssistantName]&#13;
		,PivotData.[AssistantPhone]&#13;
		,PivotData.[ManagerName]&#13;
		,PivotData.[ManagerPhone]&#13;
		,PivotData.[CountryTypeID]&#13;
		,PivotData.[DoNotFax]&#13;
		,PivotData.[DoNotEmail]&#13;
		,PivotData.[DoNotTelephone]&#13;
		,PivotData.[IsPrivate]&#13;
		,PivotData.[Telephone1]&#13;
		,PivotData.[Telephone2]&#13;
		,PivotData.[Telephone3]&#13;
		,PivotData.[Fax]&#13;
		,PivotData.[MobileNumber1]&#13;
		,PivotData.[MobileNumber2]&#13;
		,PivotData.[MobileNumber3]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[ParentContactID]&#13;
		,PivotData.[IsPrimaryContact]&#13;
		,PivotData.[ContactTypeID]&#13;
		,PivotData.[ContactSubTypeID]&#13;
		,PivotData.[ContactCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Contact]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ContactID]&#13;
					,[ContactName]&#13;
					,[MasterContactID]&#13;
					,[ParentID]&#13;
					,[OwnerID]&#13;
					,[CustomerTypeID]&#13;
					,[PreferredContactMethodID]&#13;
					,[IsBackOfficeCustomer]&#13;
					,[Salutation]&#13;
					,[JobTitle]&#13;
					,[FirstName]&#13;
					,[Department]&#13;
					,[NickName]&#13;
					,[MiddleName]&#13;
					,[LastName]&#13;
					,[BirthDate]&#13;
					,[Description]&#13;
					,[GenderTypeID]&#13;
					,[HasChildren]&#13;
					,[EducationTypeID]&#13;
					,[WebSiteURL]&#13;
					,[EmailAddress1]&#13;
					,[EmailAddress2]&#13;
					,[EmailAddress3]&#13;
					,[AssistantName]&#13;
					,[AssistantPhone]&#13;
					,[ManagerName]&#13;
					,[ManagerPhone]&#13;
					,[CountryTypeID]&#13;
					,[DoNotFax]&#13;
					,[DoNotEmail]&#13;
					,[DoNotTelephone]&#13;
					,[IsPrivate]&#13;
					,[Telephone1]&#13;
					,[Telephone2]&#13;
					,[Telephone3]&#13;
					,[Fax]&#13;
					,[MobileNumber1]&#13;
					,[MobileNumber2]&#13;
					,[MobileNumber3]&#13;
					,[OrganisationUnitID]&#13;
					,[ParentContactID]&#13;
					,[IsPrimaryContact]&#13;
					,[ContactTypeID]&#13;
					,[ContactSubTypeID</Sql>
    </View>
    <View nm="vContact_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ContactID] &#13;
&#13;
		,PivotData.[ContactName]&#13;
		,PivotData.[MasterContactID]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[CustomerTypeID]&#13;
		,PivotData.[PreferredContactMethodID]&#13;
		,PivotData.[IsBackOfficeCustomer]&#13;
		,PivotData.[Salutation]&#13;
		,PivotData.[JobTitle]&#13;
		,PivotData.[FirstName]&#13;
		,PivotData.[Department]&#13;
		,PivotData.[NickName]&#13;
		,PivotData.[MiddleName]&#13;
		,PivotData.[LastName]&#13;
		,PivotData.[BirthDate]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[GenderTypeID]&#13;
		,PivotData.[HasChildren]&#13;
		,PivotData.[EducationTypeID]&#13;
		,PivotData.[WebSiteURL]&#13;
		,PivotData.[EmailAddress1]&#13;
		,PivotData.[EmailAddress2]&#13;
		,PivotData.[EmailAddress3]&#13;
		,PivotData.[AssistantName]&#13;
		,PivotData.[AssistantPhone]&#13;
		,PivotData.[ManagerName]&#13;
		,PivotData.[ManagerPhone]&#13;
		,PivotData.[CountryTypeID]&#13;
		,PivotData.[DoNotFax]&#13;
		,PivotData.[DoNotEmail]&#13;
		,PivotData.[DoNotTelephone]&#13;
		,PivotData.[IsPrivate]&#13;
		,PivotData.[Telephone1]&#13;
		,PivotData.[Telephone2]&#13;
		,PivotData.[Telephone3]&#13;
		,PivotData.[Fax]&#13;
		,PivotData.[MobileNumber1]&#13;
		,PivotData.[MobileNumber2]&#13;
		,PivotData.[MobileNumber3]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[ParentContactID]&#13;
		,PivotData.[IsPrimaryContact]&#13;
		,PivotData.[ContactTypeID]&#13;
		,PivotData.[ContactSubTypeID]&#13;
		,PivotData.[ContactCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Contact]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ContactID]&#13;
					,[ContactName]&#13;
					,[MasterContactID]&#13;
					,[ParentID]&#13;
					,[OwnerID]&#13;
					,[CustomerTypeID]&#13;
					,[PreferredContactMethodID]&#13;
					,[IsBackOfficeCustomer]&#13;
					,[Salutation]&#13;
					,[JobTitle]&#13;
					,[FirstName]&#13;
					,[Department]&#13;
					,[NickName]&#13;
					,[MiddleName]&#13;
					,[LastName]&#13;
					,[BirthDate]&#13;
					,[Description]&#13;
					,[GenderTypeID]&#13;
					,[HasChildren]&#13;
					,[EducationTypeID]&#13;
					,[WebSiteURL]&#13;
					,[EmailAddress1]&#13;
					,[EmailAddress2]&#13;
					,[EmailAddress3]&#13;
					,[AssistantName]&#13;
					,[AssistantPhone]&#13;
					,[ManagerName]&#13;
					,[ManagerPhone]&#13;
					,[CountryTypeID]&#13;
					,[DoNotFax]&#13;
					,[DoNotEmail]&#13;
					,[DoNotTelephone]&#13;
					,[IsPrivate]&#13;
					,[Telephone1]&#13;
					,[Telephone2]&#13;
					,[Telephone3]&#13;
					,[Fax]&#13;
					,[MobileNumber1]&#13;
					,[MobileNumber2]&#13;
					,[MobileNumber3]&#13;
					,[OrganisationUnitID]&#13;
					,[ParentContactID]&#13;
					,[IsPrimaryContact]&#13;
					,[ContactTypeID]&#13;
					,[ContactSubTypeID]&#13;
					,[ContactCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vIdentityCheckProvider_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[IdentityCheckProvider]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [IdentityCheckProviderID]&#13;
		,PivotData.[ServiceProviderID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[IdentityCheckProvider]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[IdentityCheckProviderID]&#13;
					,[ServiceProviderID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vIdentityCheckProvider_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [IdentityCheckProviderID] &#13;
&#13;
		,PivotData.[ServiceProviderID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[IdentityCheckProvider]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[IdentityCheckProviderID]&#13;
					,[ServiceProviderID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisation">
      <Sql>select&#13;
&#13;
od.OrganisationID,&#13;
otype.Name as 'OrganisationTypeName',&#13;
otype.ClassificationTypeID as 'OrganisationTypeID',&#13;
osubtype.Name as 'OrganisationSubTypeName',&#13;
osubtype.ClassificationTypeID as 'OrganisationSubTypeID',&#13;
ocategory.Name as 'OrganisationCategoryName',&#13;
ocategory.ClassificationTypeID as 'OrganisationCategoryID',&#13;
ten.TenantName as 'TenantName',&#13;
ten.TenantID as 'TenantID'&#13;
&#13;
from OrganisationDetail od&#13;
&#13;
left outer join Organisation o on o.organisationID = od.OrganisationID&#13;
left outer join Tenant ten on ten.tenantid = o.tenantid&#13;
left outer join ClassificationType otype on otype.classificationtypecategoryid = 1&#13;
left outer join ClassificationType osubtype on otype.classificationtypecategoryid = 2&#13;
left outer join ClassificationType ocategory on otype.classificationtypecategoryid = 3;</Sql>
    </View>
    <View nm="vOrganisation_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Organisation]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationID]&#13;
		,PivotData.[OrganisationTypeID]&#13;
		,PivotData.[OrganisationSubTypeID]&#13;
		,PivotData.[OrganisationCategoryID]&#13;
		,PivotData.[IsBranch]&#13;
		,PivotData.[IsHeadOffice]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Organisation]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationID]&#13;
					,[OrganisationTypeID]&#13;
					,[OrganisationSubTypeID]&#13;
					,[OrganisationCategoryID]&#13;
					,[IsBranch]&#13;
					,[IsHeadOffice]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisation_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationID] &#13;
&#13;
		,PivotData.[OrganisationTypeID]&#13;
		,PivotData.[OrganisationSubTypeID]&#13;
		,PivotData.[OrganisationCategoryID]&#13;
		,PivotData.[IsBranch]&#13;
		,PivotData.[IsHeadOffice]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Organisation]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationID]&#13;
					,[OrganisationTypeID]&#13;
					,[OrganisationSubTypeID]&#13;
					,[OrganisationCategoryID]&#13;
					,[IsBranch]&#13;
					,[IsHeadOffice]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationCategory_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationCategory]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationCategory]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationCategory_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationCategoryID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationCategory]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationDetail_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationDetail]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationDetailID]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationDetail]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationDetailID]&#13;
					,[OrganisationID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationDetail_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationDetailID] &#13;
&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationDetail]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationDetailID]&#13;
					,[OrganisationID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalGroup_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationExternalGroup]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationExternalGroupID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[ExternalGroupTemplateID]&#13;
		,PivotData.[ParentOrganisationExternalGroupID]&#13;
		,PivotData.[ParentRootExternalGroupID]&#13;
		,PivotData.[IsManaged]&#13;
		,PivotData.[ExternalGroupTypeID]&#13;
		,PivotData.[ExternalGroupSubTypeID]&#13;
		,PivotData.[ExternalGroupCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalGroup]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalGroupID]&#13;
					,[Name]&#13;
					,[OrganisationID]&#13;
					,[ExternalGroupTemplateID]&#13;
					,[ParentOrganisationExternalGroupID]&#13;
					,[ParentRootExternalGroupID]&#13;
					,[IsManaged]&#13;
					,[ExternalGroupTypeID]&#13;
					,[ExternalGroupSubTypeID]&#13;
					,[ExternalGroupCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalGroup_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationExternalGroupID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[ExternalGroupTemplateID]&#13;
		,PivotData.[ParentOrganisationExternalGroupID]&#13;
		,PivotData.[ParentRootExternalGroupID]&#13;
		,PivotData.[IsManaged]&#13;
		,PivotData.[ExternalGroupTypeID]&#13;
		,PivotData.[ExternalGroupSubTypeID]&#13;
		,PivotData.[ExternalGroupCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalGroup]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalGroupID]&#13;
					,[Name]&#13;
					,[OrganisationID]&#13;
					,[ExternalGroupTemplateID]&#13;
					,[ParentOrganisationExternalGroupID]&#13;
					,[ParentRootExternalGroupID]&#13;
					,[IsManaged]&#13;
					,[ExternalGroupTypeID]&#13;
					,[ExternalGroupSubTypeID]&#13;
					,[ExternalGroupCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalGroupOrganisationExternalRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationExternalGroupOrganisationExternalRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationExternalGroupID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalGroupOrganisationExternalRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalGroupID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalGroupOrganisationExternalRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationExternalGroupID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationExternalRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalGroupOrganisationExternalRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalGroupID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalRoleClaim_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationExternalRoleClaim]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationExternalRoleClaimID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[ResourceID]&#13;
		,PivotData.[OperationID]&#13;
		,PivotData.[StateID]&#13;
		,PivotData.[StateItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalRoleClaim]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalRoleClaimID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[ResourceID]&#13;
					,[OperationID]&#13;
					,[StateID]&#13;
					,[StateItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationExternalRoleClaim_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationExternalRoleClaimID] &#13;
&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[ResourceID]&#13;
		,PivotData.[OperationID]&#13;
		,PivotData.[StateID]&#13;
		,PivotData.[StateItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationExternalRoleClaim]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationExternalRoleClaimID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[ResourceID]&#13;
					,[OperationID]&#13;
					,[StateID]&#13;
					,[StateItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationGroup_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationGroup]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationGroupID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[GroupTemplateID]&#13;
		,PivotData.[ParentOrganisationGroupID]&#13;
		,PivotData.[ParentRootGroupID]&#13;
		,PivotData.[IsManaged]&#13;
		,PivotData.[GroupTypeID]&#13;
		,PivotData.[GroupSubTypeID]&#13;
		,PivotData.[GroupCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationGroup]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationGroupID]&#13;
					,[Name]&#13;
					,[OrganisationID]&#13;
					,[GroupTemplateID]&#13;
					,[ParentOrganisationGroupID]&#13;
					,[ParentRootGroupID]&#13;
					,[IsManaged]&#13;
					,[GroupTypeID]&#13;
					,[GroupSubTypeID]&#13;
					,[GroupCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationGroup_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationGroupID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[GroupTemplateID]&#13;
		,PivotData.[ParentOrganisationGroupID]&#13;
		,PivotData.[ParentRootGroupID]&#13;
		,PivotData.[IsManaged]&#13;
		,PivotData.[GroupTypeID]&#13;
		,PivotData.[GroupSubTypeID]&#13;
		,PivotData.[GroupCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationGroup]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationGroupID]&#13;
					,[Name]&#13;
					,[OrganisationID]&#13;
					,[GroupTemplateID]&#13;
					,[ParentOrganisationGroupID]&#13;
					,[ParentRootGroupID]&#13;
					,[IsManaged]&#13;
					,[GroupTypeID]&#13;
					,[GroupSubTypeID]&#13;
					,[GroupCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationGroupOrganisationRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationGroupOrganisationRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationGroupID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationGroupOrganisationRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationGroupID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationGroupOrganisationRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationGroupID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationGroupOrganisationRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationGroupID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationIdentityCheckProvider_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationIdentityCheckProvider]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationIdentityCheckProviderID]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationIdentityCheckProvider]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[OrganisationIdentityCheckProviderID]&#13;
					,[IsDefault]&#13;
					,[UserTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationIdentityCheckProvider_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationIdentityCheckProviderID] &#13;
&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationIdentityCheckProvider]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[OrganisationIdentityCheckProviderID]&#13;
					,[IsDefault]&#13;
					,[UserTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationProductTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationProductTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationProductTemplateID]&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationProductTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationProductTemplateID]&#13;
					,[ProductTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationProductTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationProductTemplateID] &#13;
&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationProductTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationProductTemplateID]&#13;
					,[ProductTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationship_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationRelationship]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [AccountID]&#13;
		,PivotData.PrimaryKey2 as [ContactID]&#13;
		,PivotData.PrimaryKey3 as [OrganisationRelationshipRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationship]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AccountID]&#13;
					,[ContactID]&#13;
					,[OrganisationRelationshipRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationship_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [AccountID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [ContactID] &#13;
&#13;
		,PivotData.PrimaryKey3 AS [OrganisationRelationshipRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationship]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[AccountID]&#13;
					,[ContactID]&#13;
					,[OrganisationRelationshipRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationshipRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationRelationshipRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationRelationshipRoleID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[OrganisationRelationshipRoleStatusID]&#13;
		,PivotData.[OrganisationRelationshipRoleStateID]&#13;
		,PivotData.[OrganisationRelationshipRoleTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationshipRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRelationshipRoleID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[OrganisationID]&#13;
					,[OrganisationRelationshipRoleStatusID]&#13;
					,[OrganisationRelationshipRoleStateID]&#13;
					,[OrganisationRelationshipRoleTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationshipRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationRelationshipRoleID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[OrganisationRelationshipRoleStatusID]&#13;
		,PivotData.[OrganisationRelationshipRoleStateID]&#13;
		,PivotData.[OrganisationRelationshipRoleTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationshipRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRelationshipRoleID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[OrganisationID]&#13;
					,[OrganisationRelationshipRoleStatusID]&#13;
					,[OrganisationRelationshipRoleStateID]&#13;
					,[OrganisationRelationshipRoleTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationshipRoleExternal_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationRelationshipRoleExternal]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationRelationshipRoleID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationExternalGroupID]&#13;
		,PivotData.PrimaryKey3 as [OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationshipRoleExternal]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRelationshipRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationRelationshipRoleExternal_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationRelationshipRoleID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationExternalGroupID] &#13;
&#13;
		,PivotData.PrimaryKey3 AS [OrganisationExternalRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRelationshipRoleExternal]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRelationshipRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationRoleClaim_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationRoleClaim]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationRoleClaimID]&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[ResourceID]&#13;
		,PivotData.[OperationID]&#13;
		,PivotData.[StateID]&#13;
		,PivotData.[StateItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRoleClaim]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRoleClaimID]&#13;
					,[OrganisationRoleID]&#13;
					,[ResourceID]&#13;
					,[OperationID]&#13;
					,[StateID]&#13;
					,[StateItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationRoleClaim_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationRoleClaimID] &#13;
&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[ResourceID]&#13;
		,PivotData.[OperationID]&#13;
		,PivotData.[StateID]&#13;
		,PivotData.[StateItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationRoleClaim]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationRoleClaimID]&#13;
					,[OrganisationRoleID]&#13;
					,[ResourceID]&#13;
					,[OperationID]&#13;
					,[StateID]&#13;
					,[StateItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationStructure_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationStructure]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationStructureID]&#13;
		,PivotData.[ParentOrganisationStructureID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationStructure]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationStructureID]&#13;
					,[ParentOrganisationStructureID]&#13;
					,[Name]&#13;
					,[IsLeafNode]&#13;
					,[OrganisationID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationStructure_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationStructureID] &#13;
&#13;
		,PivotData.[ParentOrganisationStructureID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationStructure]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationStructureID]&#13;
					,[ParentOrganisationStructureID]&#13;
					,[Name]&#13;
					,[IsLeafNode]&#13;
					,[OrganisationID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationTeam_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationTeam]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationTeamID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[EmailAddress]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[TeamTypeID]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[TeamSubTypeID]&#13;
		,PivotData.[TeamCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationTeam]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationTeamID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[EmailAddress]&#13;
					,[IsDefault]&#13;
					,[TeamTypeID]&#13;
					,[OrganisationUnitID]&#13;
					,[TeamSubTypeID]&#13;
					,[TeamCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationTeam_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationTeamID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[EmailAddress]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[TeamTypeID]&#13;
		,PivotData.[OrganisationUnitID]&#13;
		,PivotData.[TeamSubTypeID]&#13;
		,PivotData.[TeamCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationTeam]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationTeamID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[EmailAddress]&#13;
					,[IsDefault]&#13;
					,[TeamTypeID]&#13;
					,[OrganisationUnitID]&#13;
					,[TeamSubTypeID]&#13;
					,[TeamCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationTypeUserTypeIdentityCheckTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationTypeIdentityCheckTemplateID]&#13;
		,PivotData.[OrganisationTypeID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationTypeID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[OrganisationTypeIdentityCheckTemplateID]&#13;
					,[UserTypeID]&#13;
					,[IsDefault]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationTypeUserTypeIdentityCheckTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationTypeIdentityCheckTemplateID] &#13;
&#13;
		,PivotData.[OrganisationTypeID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[IsDefault]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationTypeUserTypeIdentityCheckTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationTypeID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[OrganisationTypeIdentityCheckTemplateID]&#13;
					,[UserTypeID]&#13;
					,[IsDefault]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnit_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationUnit]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationUnitID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[DivisionName]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[OrganisationUnitTypeID]&#13;
		,PivotData.[OrganisationUnitCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnit]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[DivisionName]&#13;
					,[OrganisationID]&#13;
					,[OrganisationUnitTypeID]&#13;
					,[OrganisationUnitCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnit_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationUnitID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[DivisionName]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[OrganisationUnitTypeID]&#13;
		,PivotData.[OrganisationUnitCategoryID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnit]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[DivisionName]&#13;
					,[OrganisationID]&#13;
					,[OrganisationUnitTypeID]&#13;
					,[OrganisationUnitCategoryID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitOrganisationGroup_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationUnitOrganisationGroup]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationUnitID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitOrganisationGroup]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[OrganisationGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitOrganisationGroup_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationUnitID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationGroupID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitOrganisationGroup]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[OrganisationGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitOrganisationRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationUnitOrganisationRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationUnitID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitOrganisationRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitOrganisationRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationUnitID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitOrganisationRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitStructure_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganisationUnitStructure]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganisationUnitStructureID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationUnitID]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[ParentOrganisationUnitStructureID]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitStructure]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitStructureID]&#13;
					,[OrganisationUnitID]&#13;
					,[OrganisationID]&#13;
					,[ParentOrganisationUnitStructureID]&#13;
					,[IsLeafNode]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganisationUnitStructure_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganisationUnitStructureID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationUnitID] &#13;
&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[ParentOrganisationUnitStructureID]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganisationUnitStructure]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganisationUnitStructureID]&#13;
					,[OrganisationUnitID]&#13;
					,[OrganisationID]&#13;
					,[ParentOrganisationUnitStructureID]&#13;
					,[IsLeafNode]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganPricingItemAttributeTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganPricingItemAttributeTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganPricingItemAttributeID]&#13;
		,PivotData.[OrganPricingItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganPricingItemAttributeTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganPricingItemAttributeID]&#13;
					,[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganPricingItemAttributeTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganPricingItemAttributeID] &#13;
&#13;
		,PivotData.[OrganPricingItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganPricingItemAttributeTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganPricingItemAttributeID]&#13;
					,[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganPricingItemTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganPricingItemTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganPricingItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganPricingItemTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganPricingItemTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganPricingItemTemplateID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganPricingItemTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductItemTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductItemTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductItemTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[OrganPricingItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductItemTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductItemTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductItemTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductItemTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[OrganPricingItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductItemTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductItemTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[OrganPricingItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductProductActionTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductProductActionTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductProductActiongTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionTemplateID]&#13;
		,PivotData.[WorkflowActionProductPlaceholderID]&#13;
		,PivotData.[ParentOrganProductTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductProductActionTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductProductActiongTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionTemplateID]&#13;
					,[WorkflowActionProductPlaceholderID]&#13;
					,[ParentOrganProductTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductProductActionTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductProductActiongTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionTemplateID]&#13;
		,PivotData.[WorkflowActionProductPlaceholderID]&#13;
		,PivotData.[ParentOrganProductTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductProductActionTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductProductActiongTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionTemplateID]&#13;
					,[WorkflowActionProductPlaceholderID]&#13;
					,[ParentOrganProductTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductTargetTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductTargetTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductTargetTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[OrganTargetItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductTargetTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductTargetTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductTargetTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductTargetTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[OrganTargetItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductTargetTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductTargetTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductTemplateID]&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductTemplateID]&#13;
					,[ProductTemplateID]&#13;
					,[ParentID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductTemplateID] &#13;
&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[ParentID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductTemplateID]&#13;
					,[ProductTemplateID]&#13;
					,[ParentID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductUserTypeExternalIdentityCheckTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductUserTypeIdentityCheckID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductUserTypeIdentityCheckID]&#13;
					,[OrganProductTemplateID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[UserTypeID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductUserTypeExternalIdentityCheckTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductUserTypeIdentityCheckID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductUserTypeExternalIdentityCheckTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductUserTypeIdentityCheckID]&#13;
					,[OrganProductTemplateID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[UserTypeID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionClaimTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowActionClaimTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowActionClaimTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionClaimTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionClaimTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionClaimTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionClaimTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowActionClaimTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionClaimTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionClaimTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionClaimTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionNotificationTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowActionNotificationTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowActionNotificationTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionNotificationTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionNotificationTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionNotificationTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionNotificationTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionNotificationTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowActionNotificationTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionNotificationTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionNotificationTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionNotificationTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionNotificationTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionParameterTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowActionParameterTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowActionParameterTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionParameterTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionParameterTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionParameterTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionParameterTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowActionParameterTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowActionParameterTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowActionParameterTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowActionParameterTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowActionParameterTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowActionParameterTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowClaimTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowClaimTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowClaimTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowClaimID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowClaimTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowClaimID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowClaimTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowClaimTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowClaimID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowClaimTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowClaimID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowParameterTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowParameterTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowParameterTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorflowParameterTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowParameterTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowParameterTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorflowParameterTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowParameterTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowParameterTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorflowParameterTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowParameterTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowParameterTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorflowParameterTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowStateActivityActionHierarchyTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowStateActivityActionHierarchyTemplateID]&#13;
		,PivotData.[IsVisible]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowStateActivityActionHierarchyTemplateID]&#13;
					,[IsVisible]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowStateActivityActionHierarchyTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowStateActivityActionHierarchyTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowStateActivityActionHierarchyTemplateID]&#13;
		,PivotData.[IsVisible]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowStateActivityActionHierarchyTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowStateActivityActionHierarchyTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowStateActivityActionHierarchyTemplateID]&#13;
					,[IsVisible]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowStateClaimTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganProductWorkflowStateClaimTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganProductWorkflowStateClaimTemplateID]&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowStateClaimID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowStateClaimTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowStateClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowStateClaimID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganProductWorkflowStateClaimTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganProductWorkflowStateClaimTemplateID] &#13;
&#13;
		,PivotData.[OrganProductTemplateID]&#13;
		,PivotData.[WorkflowStateClaimID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganProductWorkflowStateClaimTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganProductWorkflowStateClaimTemplateID]&#13;
					,[OrganProductTemplateID]&#13;
					,[WorkflowStateClaimID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganTargetItemAttributeTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganTargetItemAttributeTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganTargetItemAttributeID]&#13;
		,PivotData.[OrganTargetItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganTargetItemAttributeTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganTargetItemAttributeID]&#13;
					,[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganTargetItemAttributeTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganTargetItemAttributeID] &#13;
&#13;
		,PivotData.[OrganTargetItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganTargetItemAttributeTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganTargetItemAttributeID]&#13;
					,[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vOrganTargetItemTemplate_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[OrganTargetItemTemplate]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [OrganTargetItemTemplateID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganTargetItemTemplate]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vOrganTargetItemTemplate_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [OrganTargetItemTemplateID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[OrganTargetItemTemplate]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[OrganTargetItemTemplateID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vPricingItem_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[PricingItem]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [PricingItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PricingItem]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vPricingItem_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [PricingItemID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PricingItem]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vPricingItemAttribute_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[PricingItemAttribute]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [PricingItemAttributeID]&#13;
		,PivotData.[PricingItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PricingItemAttribute]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PricingItemAttributeID]&#13;
					,[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vPricingItemAttribute_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [PricingItemAttributeID] &#13;
&#13;
		,PivotData.[PricingItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PricingItemAttribute]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PricingItemAttributeID]&#13;
					,[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProduct_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Product]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductID]&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[ProductTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Product]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductID]&#13;
					,[ProductTemplateID]&#13;
					,[ProductTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProduct_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductID] &#13;
&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[ProductTypeID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Product]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductID]&#13;
					,[ProductTemplateID]&#13;
					,[ProductTypeID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductDetail_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductDetail]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductDetailID]&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductDetail]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductDetailID]&#13;
					,[ProductTemplateID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductDetail_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductDetailID] &#13;
&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductDetail]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductDetailID]&#13;
					,[ProductTemplateID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductItem_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductItem]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductItemID]&#13;
		,PivotData.[ProductID]&#13;
		,PivotData.[PricingItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductItem]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductItemID]&#13;
					,[ProductID]&#13;
					,[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductItem_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductItemID] &#13;
&#13;
		,PivotData.[ProductID]&#13;
		,PivotData.[PricingItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductItem]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductItemID]&#13;
					,[ProductID]&#13;
					,[PricingItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductPricingItemAttributeVariant_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductPricingItemAttributeVariant]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductItemID]&#13;
		,PivotData.PrimaryKey2 as [PricingItemAttributeID]&#13;
		,PivotData.PrimaryKey3 as [VariantID]&#13;
		,PivotData.[BandFrom]&#13;
		,PivotData.[BandTo]&#13;
		,PivotData.[VariantValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductPricingItemAttributeVariant]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductItemID]&#13;
					,[PricingItemAttributeID]&#13;
					,[VariantID]&#13;
					,[BandFrom]&#13;
					,[BandTo]&#13;
					,[VariantValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductPricingItemAttributeVariant_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductItemID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [PricingItemAttributeID] &#13;
&#13;
		,PivotData.PrimaryKey3 AS [VariantID] &#13;
&#13;
		,PivotData.[BandFrom]&#13;
		,PivotData.[BandTo]&#13;
		,PivotData.[VariantValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductPricingItemAttributeVariant]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductItemID]&#13;
					,[PricingItemAttributeID]&#13;
					,[VariantID]&#13;
					,[BandFrom]&#13;
					,[BandTo]&#13;
					,[VariantValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductTarget_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductTarget]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductTargetID]&#13;
		,PivotData.[ProductID]&#13;
		,PivotData.[TargetItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductTarget]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTargetID]&#13;
					,[ProductID]&#13;
					,[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductTarget_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductTargetID] &#13;
&#13;
		,PivotData.[ProductID]&#13;
		,PivotData.[TargetItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductTarget]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTargetID]&#13;
					,[ProductID]&#13;
					,[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductTargetItemAttributeVariant_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductTargetItemAttributeVariant]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductTargetID]&#13;
		,PivotData.PrimaryKey2 as [TargetItemAttributeID]&#13;
		,PivotData.PrimaryKey3 as [VariantID]&#13;
		,PivotData.[BandFrom]&#13;
		,PivotData.[BandTo]&#13;
		,PivotData.[DateFrom]&#13;
		,PivotData.[DateTo]&#13;
		,PivotData.[VariantValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductTargetItemAttributeVariant]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTargetID]&#13;
					,[TargetItemAttributeID]&#13;
					,[VariantID]&#13;
					,[BandFrom]&#13;
					,[BandTo]&#13;
					,[DateFrom]&#13;
					,[DateTo]&#13;
					,[VariantValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductTargetItemAttributeVariant_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductTargetID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [TargetItemAttributeID] &#13;
&#13;
		,PivotData.PrimaryKey3 AS [VariantID] &#13;
&#13;
		,PivotData.[BandFrom]&#13;
		,PivotData.[BandTo]&#13;
		,PivotData.[DateFrom]&#13;
		,PivotData.[DateTo]&#13;
		,PivotData.[VariantValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductTargetItemAttributeVariant]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTargetID]&#13;
					,[TargetItemAttributeID]&#13;
					,[VariantID]&#13;
					,[BandFrom]&#13;
					,[BandTo]&#13;
					,[DateFrom]&#13;
					,[DateTo]&#13;
					,[VariantValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductType_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductType]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductTypeID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductType]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTypeID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductType_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductTypeID] &#13;
&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductType]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductTypeID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vProductUserTypeExternalIdentityCheck_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[ProductUserTypeExternalIdentityCheck]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [ProductUserTypeIdentityCheckID]&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductUserTypeExternalIdentityCheck]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductUserTypeIdentityCheckID]&#13;
					,[ProductTemplateID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[UserTypeID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vProductUserTypeExternalIdentityCheck_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [ProductUserTypeIdentityCheckID] &#13;
&#13;
		,PivotData.[ProductTemplateID]&#13;
		,PivotData.[IdentityCheckProviderID]&#13;
		,PivotData.[UserTypeID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[ProductUserTypeExternalIdentityCheck]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[ProductUserTypeIdentityCheckID]&#13;
					,[ProductTemplateID]&#13;
					,[IdentityCheckProviderID]&#13;
					,[UserTypeID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vPropertyDetail_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[PropertyDetail]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [PropertyDetailID]&#13;
		,PivotData.[PropertyTypeID]&#13;
		,PivotData.[PropertySubTypeID]&#13;
		,PivotData.[PropertyCategoryID]&#13;
		,PivotData.[PropertyValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PropertyDetail]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PropertyDetailID]&#13;
					,[PropertyTypeID]&#13;
					,[PropertySubTypeID]&#13;
					,[PropertyCategoryID]&#13;
					,[PropertyValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vPropertyDetail_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [PropertyDetailID] &#13;
&#13;
		,PivotData.[PropertyTypeID]&#13;
		,PivotData.[PropertySubTypeID]&#13;
		,PivotData.[PropertyCategoryID]&#13;
		,PivotData.[PropertyValue]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[PropertyDetail]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[PropertyDetailID]&#13;
					,[PropertyTypeID]&#13;
					,[PropertySubTypeID]&#13;
					,[PropertyCategoryID]&#13;
					,[PropertyValue]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vRepository_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[Repository]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [RepositoryID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Repository]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryID]&#13;
					,[OwnerID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vRepository_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [RepositoryID] &#13;
&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[Description]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[Repository]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryID]&#13;
					,[OwnerID]&#13;
					,[Name]&#13;
					,[Description]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructure_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[RepositoryStructure]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [RepositoryStructureID]&#13;
		,PivotData.[RepositoryID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[ParentRepositoryStructureID]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructure]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[RepositoryID]&#13;
					,[OwnerID]&#13;
					,[ParentRepositoryStructureID]&#13;
					,[IsLeafNode]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructure_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [RepositoryStructureID] &#13;
&#13;
		,PivotData.[RepositoryID]&#13;
		,PivotData.[OwnerID]&#13;
		,PivotData.[ParentRepositoryStructureID]&#13;
		,PivotData.[IsLeafNode]&#13;
		,PivotData.[Name]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructure]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[RepositoryID]&#13;
					,[OwnerID]&#13;
					,[ParentRepositoryStructureID]&#13;
					,[IsLeafNode]&#13;
					,[Name]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructureGroup_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[RepositoryStructureGroup]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [RepositoryStructureGroupID]&#13;
		,PivotData.[RepositoryStructureID]&#13;
		,PivotData.[OrganisationGroupID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructureGroup]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[OrganisationGroupID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[RepositoryStructureGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructureGroup_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [RepositoryStructureGroupID] &#13;
&#13;
		,PivotData.[RepositoryStructureID]&#13;
		,PivotData.[OrganisationGroupID]&#13;
		,PivotData.[OrganisationExternalGroupID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructureGroup]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[OrganisationGroupID]&#13;
					,[OrganisationExternalGroupID]&#13;
					,[RepositoryStructureGroupID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructureRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[RepositoryStructureRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [RepositoryStructureRoleID]&#13;
		,PivotData.[RepositoryStructureID]&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructureRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[OrganisationRoleID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[RepositoryStructureRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vRepositoryStructureRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [RepositoryStructureRoleID] &#13;
&#13;
		,PivotData.[RepositoryStructureID]&#13;
		,PivotData.[OrganisationRoleID]&#13;
		,PivotData.[OrganisationExternalRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[RepositoryStructureRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[RepositoryStructureID]&#13;
					,[OrganisationRoleID]&#13;
					,[OrganisationExternalRoleID]&#13;
					,[RepositoryStructureRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vState">
      <Sql>select&#13;
&#13;
s.StateID,&#13;
s.ParentStateID,&#13;
si.StateItemID,&#13;
si.ParentStateItemID,&#13;
s.StateName,&#13;
si.StateItemName,&#13;
si.StateItemOrder,&#13;
psi.StateItemName as 'ParentStateItemName'&#13;
&#13;
from [State] s&#13;
&#13;
left outer join StateItem si on si.StateID = s.StateID&#13;
left outer join StateItem psi on psi.StateItemID = si.ParentStateItemID&#13;
&#13;
where&#13;
&#13;
si.StateItemID is not null&#13;
&#13;
&#13;
&#13;
&#13;
</Sql>
    </View>
    <View nm="vTargetItem_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[TargetItem]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [TargetItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[TargetItem]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vTargetItem_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [TargetItemID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[TargetItem]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vTargetItemAttribute_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[TargetItemAttribute]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [TargetItemAttributeID]&#13;
		,PivotData.[TargetItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[TargetItemAttribute]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[TargetItemAttributeID]&#13;
					,[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vTargetItemAttribute_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [TargetItemAttributeID] &#13;
&#13;
		,PivotData.[TargetItemID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[TargetItemAttribute]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[TargetItemAttributeID]&#13;
					,[TargetItemID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vUserAccountDetail_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[UserAccountDetail]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [UserDetailID]&#13;
		,PivotData.[UserID]&#13;
		,PivotData.[Salutation]&#13;
		,PivotData.[FirstName]&#13;
		,PivotData.[MiddleName]&#13;
		,PivotData.[LastName]&#13;
		,PivotData.[Title]&#13;
		,PivotData.[HomePhone]&#13;
		,PivotData.[HomeMobile]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserAccountDetail]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserDetailID]&#13;
					,[UserID]&#13;
					,[Salutation]&#13;
					,[FirstName]&#13;
					,[MiddleName]&#13;
					,[LastName]&#13;
					,[Title]&#13;
					,[HomePhone]&#13;
					,[HomeMobile]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vUserAccountDetail_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [UserDetailID] &#13;
&#13;
		,PivotData.[UserID]&#13;
		,PivotData.[Salutation]&#13;
		,PivotData.[FirstName]&#13;
		,PivotData.[MiddleName]&#13;
		,PivotData.[LastName]&#13;
		,PivotData.[Title]&#13;
		,PivotData.[HomePhone]&#13;
		,PivotData.[HomeMobile]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserAccountDetail]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserDetailID]&#13;
					,[UserID]&#13;
					,[Salutation]&#13;
					,[FirstName]&#13;
					,[MiddleName]&#13;
					,[LastName]&#13;
					,[Title]&#13;
					,[HomePhone]&#13;
					,[HomeMobile]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vUserAccountOrganisationUnit_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[UserAccountOrganisationUnit]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [UserID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationUnitID]&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[JobTitle]&#13;
		,PivotData.[InternalEmailAddress]&#13;
		,PivotData.[NickName]&#13;
		,PivotData.[UserDetailID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserAccountOrganisationUnit]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserID]&#13;
					,[OrganisationUnitID]&#13;
					,[OrganisationID]&#13;
					,[JobTitle]&#13;
					,[InternalEmailAddress]&#13;
					,[NickName]&#13;
					,[UserDetailID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vUserAccountOrganisationUnit_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [UserID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationUnitID] &#13;
&#13;
		,PivotData.[OrganisationID]&#13;
		,PivotData.[JobTitle]&#13;
		,PivotData.[InternalEmailAddress]&#13;
		,PivotData.[NickName]&#13;
		,PivotData.[UserDetailID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserAccountOrganisationUnit]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserID]&#13;
					,[OrganisationUnitID]&#13;
					,[OrganisationID]&#13;
					,[JobTitle]&#13;
					,[InternalEmailAddress]&#13;
					,[NickName]&#13;
					,[UserDetailID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vUserOrganizationRole_Deleted">
      <Sql>SELECT		PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5, &#13;
					max([RowVersion]) AS [RowVersion] &#13;
		FROM		[Audit].AuditHeader &#13;
		WHERE		TableName = '[dbo].[UserOrganizationRole]' &#13;
			AND		Operation = 'd' &#13;
		GROUP BY	PrimaryKey, PrimaryKey2, PrimaryKey3, PrimaryKey4, PrimaryKey5) &#13;
SELECT&#13;
		PivotData.PrimaryKey as [UserID]&#13;
		,PivotData.PrimaryKey2 as [OrganisationRoleID]&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,PivotData.[AutoAudit_CreatedDate]&#13;
		,PivotData.[AutoAudit_CreatedBy]&#13;
		,PivotData.[AutoAudit_ModifiedDate]&#13;
		,PivotData.[AutoAudit_ModifiedBy]&#13;
		,PivotData.[AutoAudit_RowVersion]&#13;
		,SysUser as DeletedBy &#13;
		,CASE WHEN mrd.[RowVersion] = PivotData.HRowVersion then 1 else 0 end AS MostRecentDeleteFlag&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
FROM 	(SELECT		AH.AuditHeaderID, &#13;
					AH.PrimaryKey, &#13;
					AH.PrimaryKey2, &#13;
					AH.PrimaryKey3, &#13;
					AH.PrimaryKey4, &#13;
					AH.PrimaryKey5, &#13;
					AH.[RowVersion] AS HRowVersion, &#13;
					AH.[SysUser] AS SysUser, &#13;
					SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName, &#13;
					ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserOrganizationRole]'&#13;
			AND		AH.Operation='d') AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					,[AutoAudit_CreatedDate]&#13;
					,[AutoAudit_CreatedBy]&#13;
					,[AutoAudit_ModifiedDate]&#13;
					,[AutoAudit_ModifiedBy]&#13;
					,[AutoAudit_RowVersion]&#13;
					)&#13;
					) AS PivotData&#13;
LEFT JOIN 	MostRecentDeletes mrd&#13;
	ON 		PivotData.PrimaryKey = mrd.PrimaryKey&#13;
	AND 	isnull(PivotData.PrimaryKey2,'') = isnull(mrd.PrimaryKey2,'')&#13;
	AND 	isnull(PivotData.PrimaryKey3,'') = isnull(mrd.PrimaryKey3,'')&#13;
	AND 	isnull(PivotData.PrimaryKey4,'') = isnull(mrd.PrimaryKey4,'')&#13;
	AND 	isnull(PivotData.PrimaryKey5,'') = isnull(mrd.PrimaryKey5,'')&#13;
	AND 	PivotData.HRowVersion = mrd.[RowVersion]&#13;
</Sql>
    </View>
    <View nm="vUserOrganizationRole_RowHistory">
      <Sql>SELECT&#13;
		PivotData.AuditDate&#13;
		,PivotData.Operation&#13;
		,PivotData.HRowVersion AS [RowVersion]&#13;
		,PivotData.PrimaryKey AS [UserID] &#13;
&#13;
		,PivotData.PrimaryKey2 AS [OrganisationRoleID] &#13;
&#13;
		,PivotData.[IsActive]&#13;
		,PivotData.[IsDeleted]&#13;
		,'Active' AS ViewScope&#13;
		,RowHistorySource&#13;
		,[SysUser] &#13;
		,[Application] &#13;
		,[SQLStatement] &#13;
FROM 	(SELECT		AH.AuditHeaderID &#13;
					,AH.PrimaryKey &#13;
					,AH.PrimaryKey2 &#13;
					,AH.PrimaryKey3 &#13;
					,AH.PrimaryKey4 &#13;
					,AH.PrimaryKey5 &#13;
					,AH.AuditDate &#13;
					,AH.Operation &#13;
					,AH.[RowVersion] AS HRowVersion &#13;
					,SUBSTRING(AD.ColumnName,2,LEN(AD.ColumnName)-2) AS ColumnName &#13;
					,ISNULL(AD.NewValue,AD.OldValue) AS NewValue&#13;
					,'Active' AS RowHistorySource&#13;
					,AH.[SysUser] &#13;
					,AH.[Application] &#13;
					,AH.[SQLStatement] &#13;
		FROM		[Audit].[AuditHeader] AS AH&#13;
		LEFT JOIN	[Audit].[AuditDetail] AS AD&#13;
			ON		AH.AuditHeaderID = AD.AuditHeaderID&#13;
		WHERE		AH.TableName='[dbo].[UserOrganizationRole]'&#13;
					) AS AD&#13;
		PIVOT		(MAX (NewValue)&#13;
			FOR		ColumnName IN&#13;
					(&#13;
					[UserID]&#13;
					,[OrganisationRoleID]&#13;
					,[IsActive]&#13;
					,[IsDeleted]&#13;
					)&#13;
					) AS PivotData&#13;
</Sql>
    </View>
    <View nm="vWorkflowInstanceExecutionStatusEvent">
      <Sql>SELECT se.[WorkflowInstanceExecutionStatusEventID]&#13;
      ,se.[EventDate]&#13;
      ,se.[EventBy]&#13;
      ,se.[WorkflowExecutionStatusID]&#13;
      ,se.[WorkflowInstanceExecutionID]&#13;
      ,se.[EventOrder]&#13;
	  ,ss.Name&#13;
	  ,isnull(dis.Name,act.Name) as ActionDecision&#13;
	 &#13;
  FROM [TargetFramework].[dbo].[WorkflowInstanceExecutionStatusEvent] se&#13;
&#13;
  left outer join [WorkflowExecutionStatus] ss on se.WorkflowExecutionStatusID = ss.WorkflowExecutionStatusID&#13;
  left outer join [dbo].[WorkflowInstanceExecution] wie on wie.WorkflowInstanceExecutionID = se.WorkflowInstanceExecutionID&#13;
  left outer join [dbo].[WorkflowAction] act on act.WorkflowActionID = wie.WorkflowActionID&#13;
  left outer join [dbo].[WorkflowDecision] dis on dis.[WorkflowDecisionID] = wie.[WorkflowDecisionID]</Sql>
    </View>
    <CustomTypes/>
  </Sch>
  <Dgm nm="Audit">
    <RnCf ClkAct="true" FtSz="9" lkStgy="OffsetDirect" zm="1.0">
      <VbCfg>
        <Fg ky="Auto Number" vl="0"/>
        <Fg ky="Check" vl="0"/>
        <Fg ky="Comment" vl="0"/>
        <Fg ky="Data Type" vl="1"/>
        <Fg ky="Default" vl="0"/>
        <Fg ky="ENUM Values" vl="0"/>
        <Fg ky="Length" vl="1"/>
        <Fg ky="Name" vl="1"/>
        <Fg ky="Nullable" vl="0"/>
        <Fg ky="Schema Name" vl="0"/>
        <Fg ky="Signed" vl="0"/>
      </VbCfg>
    </RnCf>
    <DiaProps>
      <Show AllCols="1" FkCols="1" FkNms="1" PkCols="1"/>
      <ErNotation>DbwErNotation</ErNotation>
      <svg path=""/>
    </DiaProps>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditAllExclusions" x="734" y="50"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditBaseTables" x="1057" y="50"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditDetail" x="408" y="50"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditDetailArchive" x="408" y="273"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditHeader" x="50" y="50"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditHeaderArchive" x="50" y="273"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="AuditSettings" x="734" y="208"/>
    <TbGl bkCl="ffccccff" sch="Audit" tbl="SchemaAudit" x="1057" y="208"/>
    <FkGl bkCl="ff000000" nm="Audit.AuditDetail.fkAuditHeader"/>
    <FkGl bkCl="ff000000" nm="Audit.AuditDetailArchive.fkAuditHeaderArchive"/>
    <Notes/>
    <Zones/>
  </Dgm>
  <Dgm nm="dbo">
    <RnCf ClkAct="true" FtSz="9" lkStgy="OffsetDirect" zm="1.0">
      <VbCfg>
        <Fg ky="Auto Number" vl="0"/>
        <Fg ky="Check" vl="0"/>
        <Fg ky="Comment" vl="0"/>
        <Fg ky="Data Type" vl="1"/>
        <Fg ky="Default" vl="0"/>
        <Fg ky="ENUM Values" vl="0"/>
        <Fg ky="Length" vl="1"/>
        <Fg ky="Name" vl="1"/>
        <Fg ky="Nullable" vl="0"/>
        <Fg ky="Schema Name" vl="0"/>
        <Fg ky="Signed" vl="0"/>
      </VbCfg>
    </RnCf>
    <DiaProps>
      <Show AllCols="1" FkCols="1" FkNms="1" PkCols="1"/>
      <ErNotation>DbwErNotation</ErNotation>
      <svg path=""/>
    </DiaProps>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Account" x="3041" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Address" x="4813" y="1616"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ApplicationLog" x="6941" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Attachment" x="2618" y="1837"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="AttachmentDetail" x="3028" y="1837"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="AttachmentDetailGroup" x="3431" y="1837"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="AttachmentDetailRole" x="3437" y="1195"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ClassificationType" x="4344" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ClassificationTypeCategory" x="4813" y="1934"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Contact" x="2622" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ELMAH_Error" x="7285" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ExternalGroupTemplate" x="3411" y="5580"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ExternalGroupTemplateRole" x="7667" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ExternalRoleTemplate" x="3417" y="1521"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ExternalRoleTemplateClaim" x="3015" y="1521"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="GroupChilds" x="394" y="9441"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Groups" x="50" y="9441"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="GroupTemplate" x="5284" y="336"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="GroupTemplateRole" x="8010" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="IdentityCheckProvider" x="2538" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="LinkedAccountClaims" x="6513" y="795"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="LinkedAccounts" x="6136" y="795"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Operation" x="3010" y="776"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Organisation" x="3467" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationCategory" x="6941" y="198"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationDetail" x="3037" y="5111"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationExternalGroup" x="3871" y="1654"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationExternalGroupOrganisationExternalRole" x="3441" y="2030"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationExternalRole" x="3869" y="633"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationExternalRoleClaim" x="3398" y="633"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationGroup" x="4863" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationGroupOrganisationRole" x="5294" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationIdentityCheckProvider" x="2945" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationProductTemplate" x="1248" y="3287"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationRelationship" x="2507" y="4735"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationRelationshipRole" x="2949" y="4735"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationRelationshipRoleExternal" x="7285" y="198"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationRole" x="4843" y="469"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationRoleClaim" x="5266" y="612"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationService" x="3058" y="5259"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationStructure" x="3029" y="5407"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationTeam" x="3898" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationTypeUserTypeIdentityCheckTemplate" x="2036" y="4494"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationUnit" x="3473" y="50"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationUnitOrganisationGroup" x="5284" y="193"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationUnitOrganisationRole" x="5276" y="469"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganisationUnitStructure" x="2978" y="4928"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganPricingItemAttributeTemplate" x="319" y="3799"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganPricingItemTemplate" x="750" y="3942"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductItemTemplate" x="1180" y="3716"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductPricingItemAttributeVariantTemplate" x="749" y="3716"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductTargetItemAttributeVariantTemplate" x="741" y="4075"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductTargetTemplate" x="1181" y="4075"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductTemplate" x="1624" y="3716"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganProductUserTypeExternalIdentityCheckTemplate" x="2034" y="3716"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganTargetItemAttributeTemplate" x="313" y="4075"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="OrganTargetItemTemplate" x="753" y="4228"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PasswordResetSecrets" x="6126" y="908"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PricingItem" x="453" y="2572"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PricingItemAttribute" x="50" y="2389"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PricingItemAttributeTemplate" x="436" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PricingItemTemplate" x="922" y="2306"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Product" x="1269" y="2389"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductDetail" x="1292" y="3415"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductItem" x="856" y="2389"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductItemTemplate" x="1290" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductPricingItemAttributeVariant" x="453" y="2389"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductPricingItemAttributeVariantTemplate" x="849" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductTarget" x="866" y="2705"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductTargetItemAttributeVariant" x="463" y="2705"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductTargetItemAttributeVariantTemplate" x="520" y="3134"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductTargetTemplate" x="1301" y="3041"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductTemplate" x="1702" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductType" x="1292" y="3563"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductUserTypeExternalIdentityCheck" x="2055" y="2173"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ProductUserTypeExternalIdentityCheckTemplate" x="2059" y="4361"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="PropertyDetail" x="7667" y="198"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RelationshipRoleTemplate" x="8010" y="198"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Repository" x="2584" y="1654"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RepositoryStructure" x="2994" y="1654"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RepositoryStructureGroup" x="3421" y="1654"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RepositoryStructureRole" x="3447" y="1358"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Resource" x="2993" y="633"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ResourceOperation" x="2698" y="776"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RoleTemplate" x="5256" y="1483"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="RoleTemplateClaim" x="5666" y="1483"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="ServiceProvider" x="2196" y="4652"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Setting" x="6941" y="356"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="State" x="3013" y="889"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="StateItem" x="3002" y="1032"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Structure" x="7285" y="356"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="TargetItem" x="463" y="2908"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="TargetItemAttribute" x="60" y="2705"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="TargetItemAttributeTemplate" x="514" y="3041"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="TargetItemTemplate" x="935" y="3041"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Tenant" x="7667" y="356"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="TwoFactorAuthTokens" x="6116" y="1006"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserAccountAudit" x="8010" y="356"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserAccountDetail" x="6106" y="1094"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserAccountLoginSession" x="6941" y="484"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserAccountOrganisationUnit" x="7285" y="484"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserAccounts" x="5659" y="795"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserCertificates" x="6096" y="1292"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserClaims" x="6086" y="1380"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="UserOrganizationRole" x="5256" y="795"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Variant" x="450" y="3716"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Workflow" x="986" y="5723"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowAction" x="1461" y="6168"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionCompleteCondition" x="1954" y="6168"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionCompleteConditionTemplate" x="496" y="8717"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionExecuteCommand" x="1944" y="6261"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionExecuteCommandTemplate" x="454" y="7847"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionParameter" x="1934" y="6354"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionParameterTemplate" x="2351" y="8096"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionPostCommand" x="1924" y="6447"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionPostCommandTemplate" x="464" y="7930"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionPreCommand" x="1914" y="6540"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionPreCommandTemplate" x="474" y="8013"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionRestriction" x="1904" y="6633"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionRestrictionTemplate" x="2301" y="8428"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionStartCondition" x="1894" y="6726"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionStartConditionTemplate" x="506" y="8800"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowActionTemplate" x="457" y="8335"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommand" x="1481" y="5806"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommandCondition" x="1904" y="5806"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommandConditionTemplate" x="484" y="8096"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommandParameter" x="1894" y="5899"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommandParameterTemplate" x="492" y="8169"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCommandTemplate" x="907" y="7847"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowCondition" x="433" y="5723"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowConditionParameter" x="65" y="5816"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowConditionParameterTemplate" x="512" y="8883"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowConditionTemplate" x="927" y="8634"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecision" x="1451" y="7098"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionExecuteCommand" x="1884" y="5992"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionExecuteCommandTemplate" x="504" y="8252"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionFailureAction" x="1884" y="6819"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionFailureActionTemplate" x="60" y="8418"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionParameter" x="1874" y="7098"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionParameterTemplate" x="2361" y="8013"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionSuccessAction" x="1874" y="6912"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionSuccessActionTemplate" x="50" y="8335"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowDecisionTemplate" x="457" y="8501"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowExecution" x="7667" y="484"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowExecutionStatus" x="2667" y="7412"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowExecutionTemplate" x="8010" y="484"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowHierarchy" x="533" y="6135"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowHierarchyTemplate" x="987" y="9049"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstance" x="1421" y="7284"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecution" x="1772" y="7284"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecutionDataItem" x="2667" y="7284"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecutionStatusEvent" x="2173" y="7284"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainCompleteCondition" x="1411" y="7495"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainCompleteConditionTemplate" x="1928" y="7847"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainExecuteCommand" x="1471" y="6085"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainExecuteCommandTemplate" x="1918" y="7930"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainParameter" x="1401" y="7578"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainParameterTemplate" x="1032" y="9348"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainPostCommand" x="600" y="6514"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainPostCommandTemplate" x="944" y="7764"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainPreCommand" x="610" y="6597"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainPreCommandTemplate" x="1888" y="8262"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainRestriction" x="615" y="6680"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainRestrictionTemplate" x="1878" y="8345"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainStartCondition" x="1511" y="5723"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowMainStartConditionTemplate" x="1958" y="7764"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowObjectType" x="440" y="6002"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowObjectTypeTemplate" x="917" y="8335"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowParameter" x="550" y="6391"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowParameterTemplate" x="1898" y="8013"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowRestriction" x="1351" y="7661"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowRestrictionTemplate" x="1868" y="8428"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowRestrictionType" x="1737" y="7661"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowRestrictionTypeTemplate" x="2301" y="8511"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTemplate" x="1477" y="7764"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistion" x="505" y="6268"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionCompleteCondition" x="50" y="5723"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionCompleteConditionTemplate" x="517" y="8966"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionParameter" x="187" y="6391"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionParameterTemplate" x="2341" y="8179"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionStartCondition" x="70" y="5909"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionStartConditionTemplate" x="477" y="8634"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionTemplate" x="959" y="9182"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionWorkflowAction" x="1864" y="7005"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionWorkflowActionTemplate" x="539" y="9182"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionWorkflowDecision" x="1864" y="7191"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionWorkflowDecisionTemplate" x="549" y="9265"/>
    <FkGl bkCl="ff000000" nm="dbo.Account.fk_Account_Account"/>
    <FkGl bkCl="ff000000" nm="dbo.Account.fk_Account_Contact"/>
    <FkGl bkCl="ff000000" nm="dbo.Account.fk_Account_OrganisationUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.Address.fk_Address_ClassificationType"/>
    <FkGl bkCl="ff000000" nm="dbo.Attachment.fk_Attachment_AttachmentDetail"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetail.fk_AttachmentDetail_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetail.fk_AttachmentDetail_RepositoryMap"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailGroup.fk_AttachmentDetailGroup_AttachmentDetail"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailGroup.fk_AttachmentDetailGroup_OrganisationExternalGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailGroup.fk_AttachmentDetailGroup_OrganisationGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailRole.fk_AttachmenDetailRole_OrganisationExternalRole"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailRole.fk_AttachmenDetailRole_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.AttachmentDetailRole.fk_AttachmentRole_AttachmentDetail"/>
    <FkGl bkCl="ff000000" nm="dbo.ClassificationType.FK_ClassificationType_ClassificationTypeCategory"/>
    <FkGl bkCl="ff000000" nm="dbo.ClassificationType.FK_ClassificationType_ClassificationTypeCategory2"/>
    <FkGl bkCl="ff000000" nm="dbo.ExternalRoleTemplateClaim.fk_ExternalRoleTemplateClaim_ExternalRoleTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ExternalRoleTemplateClaim.fk_ExternalRoleTemplateClaim_Operation"/>
    <FkGl bkCl="ff000000" nm="dbo.ExternalRoleTemplateClaim.fk_ExternalRoleTemplateClaim_Resource"/>
    <FkGl bkCl="ff000000" nm="dbo.ExternalRoleTemplateClaim.fk_ExternalRoleTemplateClaim_State"/>
    <FkGl bkCl="ff000000" nm="dbo.ExternalRoleTemplateClaim.fk_ExternalRoleTemplateClaim_StateItem"/>
    <FkGl bkCl="ff000000" nm="dbo.GroupChilds.FK_dbo.GroupChilds_dbo.Groups_GroupID"/>
    <FkGl bkCl="ff000000" nm="dbo.IdentityCheckProvider.fk_IdentityCheckProvider_ServiceProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.LinkedAccountClaims.FK_dbo.LinkedAccountClaims_dbo.LinkedAccounts_LinkedAccount_ProviderName_LinkedAccount_ProviderAccountID"/>
    <FkGl bkCl="ff000000" nm="dbo.LinkedAccounts.FK_dbo.LinkedAccounts_dbo.UserAccounts_UserAccount_ID"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationDetail.fk_OrganisationDetail_Organisation_1"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroup.fk_ExternalGroup_ClassificationType"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroup.fk_ExternalGroup_ClassificationType2"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroup.fk_ExternalGroup_GroupTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroup.fk_ExternalGroup_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroupOrganisationExternalRole.fk_OrganisationExternalGroupOrganisationExternalRole_OrganisationExternalGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalGroupOrganisationExternalRole.fk_OrganisationExternalGroupOrganisationExternalRole_OrganisationExternalRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRole.fk_ExternalRole_ClassificationType"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRole.fk_ExternalRole_ClassificationType2"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRole.fk_ExternalRole_ExternalRoleTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRole.fk_ExternalRole_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRoleClaim.fk_OrganisationExternalRoleClaim_Operation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRoleClaim.fk_OrganisationExternalRoleClaim_OrganisationExternalRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRoleClaim.fk_OrganisationExternalRoleClaim_Resource"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRoleClaim.fk_OrganisationExternalRoleClaim_State"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationExternalRoleClaim.fk_OrganisationExternalRoleClaim_StateItem"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroup.fk_Group_ClassificationType"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroup.fk_Group_ClassificationType2"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroup.fk_Group_GroupTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroup.fk_Group_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroupOrganisationRole.fk_OrganisationGroupOrganisationRole_OrganisationGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationGroupOrganisationRole.fk_OrganisationGroupOrganisationRole_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationIdentityCheckProvider.fk_OrganisationIdentityCheckProvider_IdentityCheckProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationIdentityCheckProvider.fk_OrganisationIdentityCheckProvider_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationProductTemplate.fk_OrganisationProductTemplate_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRelationship.fk_OrganisationRelationship_Account"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRelationship.fk_OrganisationRelationship_Contact"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRelationship.fk_OrganisationRelationship_OrganisationRelationshipRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRelationshipRole.fk_RelationshipRole_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRole.fk_Role_ClassificationType"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRole.fk_Role_ClassificationType2"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRole.fk_Role_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRole.fk_Role_RoleTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRoleClaim.fk_OrganisationRoleClaim_Operation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRoleClaim.fk_OrganisationRoleClaim_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRoleClaim.fk_OrganisationRoleClaim_Resource"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRoleClaim.fk_OrganisationRoleClaim_State"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationRoleClaim.fk_OrganisationRoleClaim_StateItem"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationService.fk_OrganisationService_Organisation"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationStructure.FK_OrganisationStructure"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationTeam.FK ClassificationTypeTeamType"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationTeam.fk_OrganisationTeam_ClassificationType_1"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationTeam.FK_TeamUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationTypeUserTypeIdentityCheckTemplate.fk_OrganisationTypeIdentityCheckProvider_IdentityCheckProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnit.FK OrganisationUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitOrganisationGroup.fk_OrganisationUnitOrganisationGroup_OrganisationGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitOrganisationGroup.fk_OrganisationUnitOrganisationGroup_OrganisationUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitOrganisationRole.fk_OrganisationUnitOrganisationRole_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitOrganisationRole.fk_OrganisationUnitOrganisationRole_OrganisationUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitStructure.FK UnitMap"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganisationUnitStructure.FK_OrganisationUnit"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganPricingItemAttributeTemplate.fk_OrganPricingItemAttributeTemplate_OrganPricingItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductItemTemplate.fk_OrganProductItemTemplate_OrganPricingItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductItemTemplate.fk_OrganProductItemTemplate_OrganProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductPricingItemAttributeVariantTemplate.fk_OrganProductItemAttributeVariantTemplate_OrganPricingAttributeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductPricingItemAttributeVariantTemplate.fk_OrganProductItemAttributeVariantTemplate_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductPricingItemAttributeVariantTemplate.fk_OrganProductPricingItemAttributeVariantTemplate_OrganProductItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTargetItemAttributeVariantTemplate.fk_OrganProductTargetAttributeVariantTemplate_OrganProductTargetTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTargetItemAttributeVariantTemplate.fk_OrganProductTargetAttributeVariantTemplate_OrganTargetAttributeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTargetItemAttributeVariantTemplate.fk_OrganProductTargetAttributeVariantTemplate_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTargetTemplate.fk_OrganProductTargetTemplate_OrganProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTargetTemplate.fk_OrganProductTargetTemplate_OrganTargetItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductTemplate.fk_OrganProductTemplate_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductUserTypeExternalIdentityCheckTemplate.fk_OrganProductUserTypeIdentityCheck_IdentityCheckProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganProductUserTypeExternalIdentityCheckTemplate.fk_OrganProductUserTypeIdentityCheck_OrganProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.OrganTargetItemAttributeTemplate.fk_OrganTargetAttributeTemplate_OrganTargetItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.PasswordResetSecrets.FK_dbo.PasswordResetSecrets_dbo.UserAccounts_UserAccount_ID"/>
    <FkGl bkCl="ff000000" nm="dbo.PricingItemAttribute.fk_PricingAttribute_PricingItem"/>
    <FkGl bkCl="ff000000" nm="dbo.PricingItemAttributeTemplate.fk_PricingAttributeTemplate_PricingItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.Product.fk_Product_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.Product.fk_Product_ProductType"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductDetail.fk_ProductDetail_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductItem.fk_ProductItem_PricingItem"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductItem.fk_ProductItem_Product"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductItemTemplate.fk_ProductItemTemplate_PricingItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductItemTemplate.fk_ProductItemTemplate_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariant.fk_ProductItemAttributeVariant_PricingAttribute"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariant.fk_ProductItemAttributeVariant_ProductItem"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariant.fk_ProductItemAttributeVariant_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariantTemplate.fk_ProductItemAttributeVariantTemplate_PricingAttributeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariantTemplate.fk_ProductItemAttributeVariantTemplate_ProductItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductPricingItemAttributeVariantTemplate.fk_ProductItemAttributeVariantTemplate_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTarget.fk_ProductTarget_Product"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTarget.fk_ProductTarget_TargetItem"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariant.fk_ProductTargetAttributeVariant_ProductTarget"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariant.fk_ProductTargetAttributeVariant_TargetAttribute"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariant.fk_ProductTargetAttributeVariant_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariantTemplate.fk_TargetItemAttributeVariantTemplate_TargetAttributeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariantTemplate.fk_TargetItemAttributeVariantTemplate_TargetItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetItemAttributeVariantTemplate.fk_TargetItemAttributeVariantTemplate_Variant"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetTemplate.fk_ProductTargetTemplate_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTargetTemplate.fk_ProductTargetTemplate_TargetItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductTemplate.fk_ProductTemplate_ProductType"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductUserTypeExternalIdentityCheck.fk_ProductUserTypeIdentityCheck_IdentityCheckProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductUserTypeExternalIdentityCheck.fk_ProductUserTypeIdentityCheck_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductUserTypeExternalIdentityCheckTemplate.fk_ProductUserTypeIdentityCheckTemplate_IdentityCheckProvider"/>
    <FkGl bkCl="ff000000" nm="dbo.ProductUserTypeExternalIdentityCheckTemplate.fk_ProductUserTypeIdentityCheckTemplate_ProductTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructure.fk_RepositoryMap_Repository"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructure.fk_RepositoryStructure_Repository"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureGroup.fk_RepositoryStructureRole_OrganisationExternalGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureGroup.fk_RepositoryStructureRole_OrganisationGroup"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureGroup.fk_RepositoryStructureRole_RepositoryStructure"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureRole.fk_RepositoryStructureGroup_OrganisationExternalRole"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureRole.fk_RepositoryStructureGroup_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.RepositoryStructureRole.fk_RepositoryStructureGroup_RepositoryStructure"/>
    <FkGl bkCl="ff000000" nm="dbo.ResourceOperation.FK_ResourceOperation_Operation"/>
    <FkGl bkCl="ff000000" nm="dbo.ResourceOperation.FK_ResourceOperation_Resource"/>
    <FkGl bkCl="ff000000" nm="dbo.RoleTemplateClaim.fk_RoleTemplateClaim_Operation"/>
    <FkGl bkCl="ff000000" nm="dbo.RoleTemplateClaim.fk_RoleTemplateClaim_Resource"/>
    <FkGl bkCl="ff000000" nm="dbo.RoleTemplateClaim.fk_RoleTemplateClaim_RoleTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.RoleTemplateClaim.fk_RoleTemplateClaim_State"/>
    <FkGl bkCl="ff000000" nm="dbo.RoleTemplateClaim.fk_RoleTemplateClaim_StateItem"/>
    <FkGl bkCl="ff000000" nm="dbo.StateItem.FK_StateItem_State"/>
    <FkGl bkCl="ff000000" nm="dbo.TargetItemAttribute.fk_TargetAttribute_TargetItem"/>
    <FkGl bkCl="ff000000" nm="dbo.TargetItemAttributeTemplate.fk_TargetAttributeTemplate_TargetItemTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.TwoFactorAuthTokens.FK_dbo.TwoFactorAuthTokens_dbo.UserAccounts_UserAccount_ID"/>
    <FkGl bkCl="ff000000" nm="dbo.UserAccountDetail.FK_dbo.UserAccountDetail_dbo.UserAccounts_UserID"/>
    <FkGl bkCl="ff000000" nm="dbo.UserCertificates.FK_dbo.UserCertificates_dbo.UserAccounts_UserAccount_ID"/>
    <FkGl bkCl="ff000000" nm="dbo.UserClaims.FK_dbo.UserClaims_dbo.UserAccounts_UserAccount_ID"/>
    <FkGl bkCl="ff000000" nm="dbo.UserOrganizationRole.FK_UserOrganizationRole_OrganisationRole"/>
    <FkGl bkCl="ff000000" nm="dbo.UserOrganizationRole.FK_UserOrganizationRole_UserAccounts"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowAction.fk_WorkflowAction_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowAction.fk_WorkflowAction_WorkflowObjectType"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionCompleteCondition.fk_WorkflowActionCompleteCondition_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionCompleteCondition.fk_WorkflowActionCompleteCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionCompleteConditionTemplate.fk_WorkflowActionCompleteConditionTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionCompleteConditionTemplate.fk_WorkflowActionCompleteConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionExecuteCommand.fk_WorkflowActionExecuteCommand_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionExecuteCommand.fk_WorkflowActionExecuteCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionExecuteCommandTemplate.fk_WorkflowActionExecuteCommandTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionExecuteCommandTemplate.fk_WorkflowActionExecuteCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionParameter.fk_WorkflowActionParameter_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionParameter.fk_WorkflowActionParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionParameterTemplate.fk_WorkflowActionParamter_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionParameterTemplate.fk_WorkflowActionParamter_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPostCommand.fk_WorkflowActionPostCommand_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPostCommand.fk_WorkflowActionPostCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPostCommandTemplate.fk_WorkflowActionPostCommandTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPostCommandTemplate.fk_WorkflowActionPostCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPreCommand.fk_WorkflowActionPreCommand_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPreCommand.fk_WorkflowActionPreCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPreCommandTemplate.fk_WorkflowActionPreCommandTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionPreCommandTemplate.fk_WorkflowActionPreCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionRestriction.fk_WorkflowActionRestriction_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionRestriction.fk_WorkflowActionRestriction_WorkflowRestriction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionRestrictionTemplate.fk_WorkflowActionRestrictionTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionRestrictionTemplate.fk_WorkflowActionRestrictionTemplate_WorkflowRestrictionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionStartCondition.fk_WorkflowActionStartCondition_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionStartCondition.fk_WorkflowActionStartCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionStartConditionTemplate.fk_WorkflowActionStartConditionTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionStartConditionTemplate.fk_WorkflowActionStartConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowActionTemplate.fk_WorkflowActionTemplate_WorkflowObjectTypeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommand.fk_WorkflowCommand_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommand.fk_WorkflowCommand_WorkflowObjectType"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandCondition.fk_WorkflowCommandCondition_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandCondition.fk_WorkflowCommandCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandConditionTemplate.fk_WorkflowCommandConditionTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandConditionTemplate.fk_WorkflowCommandConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandParameter.fk_WorkflowCommandParameter_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandParameter.fk_WorkflowCommandParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandParameterTemplate.fk_WorkflowCommandParameterTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandParameterTemplate.fk_WorkflowCommandParameterTemplate_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandTemplate.fk_WorkflowCommandTemplate_WorkflowObjectTypeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCommandTemplate.fk_WorkflowCommandTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCondition.fk_WorkflowCondition_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowCondition.fk_WorkflowCondition_WorkflowObjectType"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionParameter.fk_WorkflowConditionParameter_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionParameter.fk_WorkflowConditionParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionParameterTemplate.fk_WorkflowConditionParameter_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionParameterTemplate.fk_WorkflowConditionParameter_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionTemplate.fk_WorkflowConditionTemplate_WorkflowObjectTypeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowConditionTemplate.fk_WorkflowConditionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecision.fk_WorkflowDecision_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecision.fk_WorkflowDecision_WorkflowObjectType"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionExecuteCommand.fk_WorkflowDecisionExecuteCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionExecuteCommand.fk_WorkflowDecisionExecuteCommand_WorkflowDecision"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionExecuteCommandTemplate.fk_WorkflowDecisionExecuteCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionExecuteCommandTemplate.fk_WorkflowDecisionExecuteCommandTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionFailureAction.fk_WorkflowDecisionFailureAction_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionFailureAction.fk_WorkflowDecisionFailureAction_WorkflowDecision"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionFailureActionTemplate.fk_WorkflowDecisionFailureActionTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionFailureActionTemplate.FK_WorkflowDecisionFailureActionTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionParameter.fk_WorkflowDecisionParameter_WorkflowDecision"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionParameter.fk_WorkflowDecisionParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionParameterTemplate.fk_WorkflowDecisionParameterTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionParameterTemplate.fk_WorkflowDecisionParameterTemplate_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionSuccessAction.fk_WorkflowDecisionSuccessAction_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionSuccessAction.fk_WorkflowDecisionSuccessAction_WorkflowDecision"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionSuccessActionTemplate.fk_WorkflowDecisionSuccessActionTemplate_WorkflowActionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionSuccessActionTemplate.FK_WorkflowDecisionSuccessActionTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowDecisionTemplate.fk_WorkflowDecisionTemplate_WorkflowObjectTypeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchy.fk_WorkflowHierarchy_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchy.fk_WorkflowHierarchy_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchyTemplate.FK_WorkflowHierarchyTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchyTemplate.FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstance.fk_WorkflowInstance_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecution.fk_WorkflowInstanceExecutionHistory_WorkflowInstance"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionDataItem.fk_WorkflowInstanceExecutionDataItem_WorkflowInstanceExecutionStatusEvent"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionStatusEvent.fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionStatusEvent.fk_WorkflowInstanceExecutionStatusEvent_WorkflowInstanceExecution"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainCompleteCondition.fk_WorkflowMainCompleteCondition_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainCompleteCondition.fk_WorkflowMainCompleteCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainCompleteConditionTemplate.fk_WorkflowMainCompleteConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainCompleteConditionTemplate.fk_WorkflowMainCompleteConditionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainExecuteCommand.fk_WorkflowMainExecuteCommand_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainExecuteCommand.fk_WorkflowMainExecuteCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainExecuteCommandTemplate.fk_WorkflowMainExecuteCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainExecuteCommandTemplate.fk_WorkflowMainExecuteCommandTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainParameter.fk_WorkflowMainParameter_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainParameter.fk_WorkflowMainParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainParameterTemplate.fk_WorkflowMainParameterTemplate_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainParameterTemplate.fk_WorkflowMainParameterTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPostCommand.fk_WorkflowMainPostCommand_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPostCommand.fk_WorkflowMainPostCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPostCommandTemplate.fk_WorkflowMainPostCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPostCommandTemplate.fk_WorkflowMainPostCommandTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPreCommand.fk_WorkflowMainPreCommand_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPreCommand.fk_WorkflowMainPreCommand_WorkflowCommand"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPreCommandTemplate.fk_WorkflowMainPreCommandTemplate_WorkflowCommandTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainPreCommandTemplate.fk_WorkflowMainPreCommandTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainRestriction.fk_WorkflowMainRestriction_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainRestriction.fk_WorkflowMainRestriction_WorkflowRestriction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainRestrictionTemplate.fk_WorkflowMainRestrictionTemplate_WorkflowRestrictionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainRestrictionTemplate.fk_WorkflowMainRestrictionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainStartCondition.fk_WorkflowMainStartCondition_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainStartCondition.fk_WorkflowMainStartCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainStartConditionTemplate.fk_WorkflowMainStartConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowMainStartConditionTemplate.fk_WorkflowMainStartConditionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowObjectType.fk_WorkflowObjectType_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowObjectTypeTemplate.fk_WorkflowObjectTypeTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowParameter.fk_WorkflowParameter_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowParameterTemplate.fk_WorkflowParameterTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowRestriction.fk_WorkflowRestriction_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowRestriction.fk_WorkflowRestriction_WorkflowRestrictionType"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowRestrictionTemplate.fk_WorkflowRestrictionTemplate_WorkflowRestrictionTypeTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowRestrictionTemplate.fk_WorkflowRestrictionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistion.fk_WorkflowTransistion_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionCompleteCondition.fk_WorkflowTransistionCompleteCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionCompleteCondition.fk_WorkflowTransistionCompleteCondition_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionCompleteConditionTemplate.fk_WorkflowTransistionCompleteConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionCompleteConditionTemplate.fk_WorkflowTransistionCompleteConditionTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionParameter.fk_WorkflowTransistionParameter_WorkflowParameter"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionParameter.fk_WorkflowTransistionParameter_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionParameterTemplate.fk_WorkflowTransistionParameterTemplate_WorkflowParameterTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionParameterTemplate.fk_WorkflowTransistionParameterTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionStartCondition.fk_WorkflowTransistionStartCondition_WorkflowCondition"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionStartCondition.fk_WorkflowTransistionStartCondition_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionStartConditionTemplate.fk_WorkflowTransistionStartConditionTemplate_WorkflowConditionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionStartConditionTemplate.fk_WorkflowTransistionStartConditionTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionTemplate.FK_WorkflowTransistionTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowAction.fk_WorkflowTransistionWorkflowAction_WorkflowAction"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowAction.fk_WorkflowTransistionWorkflowAction_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowActionTemplate.FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowActionTemplate.FK_WorkflowTransistionWorkflowDecisionTemplate_WorkflowTransistionWorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowDecision.fk_WorkflowTransistionWorkflowDecision_WorkflowDecision"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowDecision.fk_WorkflowTransistionWorkflowDecision_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowDecisionTemplate.FK_WorkflowTransistionWorkflowActionTemplate_WorkflowDecisionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionWorkflowDecisionTemplate.FK_WorkflowTransistionWorkflowActionTemplate_WorkflowTransistionWorkflowActionTemplate"/>
    <Notes/>
    <Zones/>
  </Dgm>
  <Dgm nm="Workflow">
    <RnCf ClkAct="true" FtSz="9" lkStgy="OffsetDirect" zm="1.0">
      <VbCfg>
        <Fg ky="Auto Number" vl="0"/>
        <Fg ky="Check" vl="0"/>
        <Fg ky="Comment" vl="0"/>
        <Fg ky="Data Type" vl="1"/>
        <Fg ky="Default" vl="0"/>
        <Fg ky="ENUM Values" vl="0"/>
        <Fg ky="Length" vl="1"/>
        <Fg ky="Name" vl="1"/>
        <Fg ky="Nullable" vl="0"/>
        <Fg ky="Schema Name" vl="0"/>
        <Fg ky="Signed" vl="0"/>
      </VbCfg>
    </RnCf>
    <DiaProps>
      <Show AllCols="1" FkCols="1" FkNms="1" PkCols="1"/>
      <ErNotation>DbwErNotation</ErNotation>
      <svg path=""/>
    </DiaProps>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecutionDataItem" x="664" y="578"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecutionStatusEvent" x="336" y="424"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstance" x="1659" y="294"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceExecution" x="941" y="285"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowExecutionStatus" x="443" y="4"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowInstanceSession" x="1483" y="558"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecution.fk_WorkflowInstanceExecution_WorkflowInstanceSession"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecution.fk_WorkflowInstanceExecutionHistory_WorkflowInstance"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionDataItem.fk_WorkflowInstanceExecutionDataItem_WorkflowInstanceExecutionStatusEvent"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionStatusEvent.fk_WorkflowInstanceExecutionStatusEvent_WorkflowExecutionStatus"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceExecutionStatusEvent.fk_WorkflowInstanceExecutionStatusEvent_WorkflowInstanceExecution"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowInstanceSession.fk_WorkflowInstanceSession_WorkflowInstance"/>
    <Notes/>
    <Zones/>
  </Dgm>
  <Dgm nm="Workflow Core">
    <RnCf ClkAct="true" FtSz="9" lkStgy="OffsetDirect" zm="1.0">
      <VbCfg>
        <Fg ky="Auto Number" vl="0"/>
        <Fg ky="Check" vl="0"/>
        <Fg ky="Comment" vl="0"/>
        <Fg ky="Data Type" vl="1"/>
        <Fg ky="Default" vl="0"/>
        <Fg ky="ENUM Values" vl="0"/>
        <Fg ky="Length" vl="1"/>
        <Fg ky="Name" vl="1"/>
        <Fg ky="Nullable" vl="0"/>
        <Fg ky="Schema Name" vl="0"/>
        <Fg ky="Signed" vl="0"/>
      </VbCfg>
    </RnCf>
    <DiaProps>
      <Show AllCols="1" FkCols="1" FkNms="1" PkCols="1"/>
      <ErNotation>DbwErNotation</ErNotation>
      <svg path=""/>
    </DiaProps>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTemplate" x="410" y="224"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionTemplate" x="775" y="391"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowHierarchyTemplate" x="904" y="70"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionHierarchyTemplate" x="1384" y="203"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="Workflow" x="116" y="323"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistion" x="0" y="566"/>
    <TbGl bkCl="ffccccff" sch="dbo" tbl="WorkflowTransistionHierarchy" x="759" y="546"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchyTemplate.FK_WorkflowHierarchyTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowHierarchyTemplate.FK_WorkflowHierarchyTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistion.fk_WorkflowTransistion_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchy.fk_WorkflowTransistionHierarchy_Workflow"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchy.fk_WorkflowTransistionHierarchy_WorkflowTransistion"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchy.fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate1"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchyTemplate.fk_WorkflowTransistionHierarchyTemplate_WorkflowTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchyTemplate.fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionHierarchyTemplate.fk_WorkflowTransistionHierarchyTemplate_WorkflowTransistionTemplate11"/>
    <FkGl bkCl="ff000000" nm="dbo.WorkflowTransistionTemplate.FK_WorkflowTransistionTemplate_WorkflowTemplate"/>
    <Notes/>
    <Zones/>
  </Dgm>
  <RnmMgr NxRnmId="1"/>
  <DbDocOptionMgr>
    <BasicOptionMgr>
      <Name>db.doc.option.mgr</Name>
      <BoolOpt lbl="Diagrams" nm="doc.diagrams" on="1" spl="0"/>
      <BoolOpt lbl="Foreign Keys" nm="doc.fks" on="1" spl="0"/>
      <BoolOpt lbl="Indexes" nm="doc.indexes" on="1" spl="0"/>
      <BoolOpt lbl="Overwrite CSS File" nm="doc.overwrite.css" on="1" spl="0"/>
      <BoolOpt lbl="Procedures" nm="doc.procs" on="1" spl="0"/>
      <BoolOpt lbl="Schemas" nm="doc.schemas" on="1" spl="0"/>
      <BoolOpt lbl="Sequences" nm="doc.sequences" on="1" spl="0"/>
      <BoolOpt lbl="Tables" nm="doc.tables" on="1" spl="0"/>
      <BoolOpt lbl="Triggers" nm="doc.triggers" on="1" spl="0"/>
      <BoolOpt lbl="Views" nm="doc.views" on="1" spl="0"/>
    </BasicOptionMgr>
  </DbDocOptionMgr>
  <OpenEditors>
    <OpenEditor ClsNm="Diagram" fqn="null.dbo" selected="0"/>
    <OpenEditor ClsNm="View" fqn="dbo.vWorkflowInstanceExecutionStatusEvent" selected="0"/>
    <OpenEditor ClsNm="Diagram" fqn="null.Workflow Core" selected="1"/>
    <OpenEditor ClsNm="Diagram" fqn="null.Audit" selected="0"/>
    <OpenEditor ClsNm="Diagram" fqn="null.Workflow" selected="0"/>
  </OpenEditors>
  <TreePaths>
    <TreePath/>
    <TreePath>/Schemas (2)</TreePath>
    <TreePath>/Schemas (2)/Audit</TreePath>
    <TreePath>/Schemas (2)/Audit/Tables (8)</TreePath>
    <TreePath>/Schemas (2)/dbo</TreePath>
    <TreePath>/Schemas (2)/dbo/Tables (190)</TreePath>
    <TreePath>/Schemas (2)/dbo/Tables (190)/WorkflowAction</TreePath>
    <TreePath>/Schemas (2)/dbo/Tables (190)/WorkflowAction/Columns (10)</TreePath>
    <TreePath>/Schemas (2)/dbo/Views (136)</TreePath>
    <TreePath>/Diagrams (4)</TreePath>
    <TreePath>/Diagrams (4)/dbo</TreePath>
  </TreePaths>
</Db>
