//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 09/04/2015 12:02:58
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class AttachmentConverter
    {

        public static AttachmentDTO ToDto(this Bec.TargetFramework.Data.Attachment source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AttachmentDTO ToDtoWithRelated(this Bec.TargetFramework.Data.Attachment source, int level)
        {
            if (source == null)
              return null;

            var target = new AttachmentDTO();

            // Properties
            target.AttachmentID = source.AttachmentID;
            target.MimeType = source.MimeType;
            target.Body = source.Body;
            target.Subject = source.Subject;
            target.FileName = source.FileName;
            target.FileSize = source.FileSize;
            target.AttachmentDetailID = source.AttachmentDetailID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.ParentID = source.ParentID;

            // Navigation Properties
            if (level > 0) {
              target.AttachmentDetail = source.AttachmentDetail.ToDtoWithRelated(level - 1);
              target.LRDocuments = source.LRDocuments.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.Attachment ToEntity(this AttachmentDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.Attachment();

            // Properties
            target.AttachmentID = source.AttachmentID;
            target.MimeType = source.MimeType;
            target.Body = source.Body;
            target.Subject = source.Subject;
            target.FileName = source.FileName;
            target.FileSize = source.FileSize;
            target.AttachmentDetailID = source.AttachmentDetailID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.ParentID = source.ParentID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AttachmentDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.Attachment> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AttachmentDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.Attachment> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.Attachment> ToEntities(this IEnumerable<AttachmentDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.Attachment source, AttachmentDTO target);

        static partial void OnEntityCreating(AttachmentDTO source, Bec.TargetFramework.Data.Attachment target);

    }

}
