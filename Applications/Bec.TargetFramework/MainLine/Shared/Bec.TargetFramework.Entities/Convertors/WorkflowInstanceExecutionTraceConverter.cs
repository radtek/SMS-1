//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 26/03/2015 16:15:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class WorkflowInstanceExecutionTraceConverter
    {

        public static WorkflowInstanceExecutionTraceDTO ToDto(this Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static WorkflowInstanceExecutionTraceDTO ToDtoWithRelated(this Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace source, int level)
        {
            if (source == null)
              return null;

            var target = new WorkflowInstanceExecutionTraceDTO();

            // Properties
            target.WorkflowInstanceExecutionTraceID = source.WorkflowInstanceExecutionTraceID;
            target.WorkflowInstanceExecutionID = source.WorkflowInstanceExecutionID;
            target.WorkflowInstanceSessionID = source.WorkflowInstanceSessionID;
            target.WorkflowID = source.WorkflowID;
            target.WorkflowVersionNumber = source.WorkflowVersionNumber;
            target.WorkflowInstanceID = source.WorkflowInstanceID;
            target.WorkflowTransistionID = source.WorkflowTransistionID;
            target.WorkflowActionID = source.WorkflowActionID;
            target.WorkflowDecisionID = source.WorkflowDecisionID;
            target.WorkflowConditionID = source.WorkflowConditionID;
            target.WorkflowCommandID = source.WorkflowCommandID;
            target.TraceDetail = source.TraceDetail;
            target.TraceStackTrace = source.TraceStackTrace;
            target.HasError = source.HasError;
            target.ExecutedOn = source.ExecutedOn;
            target.ExecutedBy = source.ExecutedBy;
            target.AdditionalContent = source.AdditionalContent;
            target.NumberOfRetries = source.NumberOfRetries;

            // Navigation Properties
            if (level > 0) {
              target.WorkflowInstanceExecution = source.WorkflowInstanceExecution.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace ToEntity(this WorkflowInstanceExecutionTraceDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace();

            // Properties
            target.WorkflowInstanceExecutionTraceID = source.WorkflowInstanceExecutionTraceID;
            target.WorkflowInstanceExecutionID = source.WorkflowInstanceExecutionID;
            target.WorkflowInstanceSessionID = source.WorkflowInstanceSessionID;
            target.WorkflowID = source.WorkflowID;
            target.WorkflowVersionNumber = source.WorkflowVersionNumber;
            target.WorkflowInstanceID = source.WorkflowInstanceID;
            target.WorkflowTransistionID = source.WorkflowTransistionID;
            target.WorkflowActionID = source.WorkflowActionID;
            target.WorkflowDecisionID = source.WorkflowDecisionID;
            target.WorkflowConditionID = source.WorkflowConditionID;
            target.WorkflowCommandID = source.WorkflowCommandID;
            target.TraceDetail = source.TraceDetail;
            target.TraceStackTrace = source.TraceStackTrace;
            target.HasError = source.HasError;
            target.ExecutedOn = source.ExecutedOn;
            target.ExecutedBy = source.ExecutedBy;
            target.AdditionalContent = source.AdditionalContent;
            target.NumberOfRetries = source.NumberOfRetries;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<WorkflowInstanceExecutionTraceDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<WorkflowInstanceExecutionTraceDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace> ToEntities(this IEnumerable<WorkflowInstanceExecutionTraceDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace source, WorkflowInstanceExecutionTraceDTO target);

        static partial void OnEntityCreating(WorkflowInstanceExecutionTraceDTO source, Bec.TargetFramework.Data.WorkflowInstanceExecutionTrace target);

    }

}
