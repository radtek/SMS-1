//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 26/03/2015 16:15:01
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class WorkflowTransistionConverter
    {

        public static WorkflowTransistionDTO ToDto(this Bec.TargetFramework.Data.WorkflowTransistion source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static WorkflowTransistionDTO ToDtoWithRelated(this Bec.TargetFramework.Data.WorkflowTransistion source, int level)
        {
            if (source == null)
              return null;

            var target = new WorkflowTransistionDTO();

            // Properties
            target.WorkflowTransistionID = source.WorkflowTransistionID;
            target.Name = source.Name;
            target.Description = source.Description;
            target.IsWorkflowStart = source.IsWorkflowStart;
            target.IsWorkflowEnd = source.IsWorkflowEnd;
            target.WorkflowID = source.WorkflowID;
            target.WorkflowVersionNumber = source.WorkflowVersionNumber;

            // Navigation Properties
            if (level > 0) {
              target.WorkflowTransistionWorkflowActions = source.WorkflowTransistionWorkflowActions.ToDtosWithRelated(level - 1);
              target.WorkflowTransistionCompleteConditions = source.WorkflowTransistionCompleteConditions.ToDtosWithRelated(level - 1);
              target.WorkflowTransistionStartConditions = source.WorkflowTransistionStartConditions.ToDtosWithRelated(level - 1);
              target.WorkflowTransistionWorkflowDecisions = source.WorkflowTransistionWorkflowDecisions.ToDtosWithRelated(level - 1);
              target.WorkflowHierarchies = source.WorkflowHierarchies.ToDtosWithRelated(level - 1);
              target.Workflow = source.Workflow.ToDtoWithRelated(level - 1);
              target.WorkflowTransistionHierarchies_ParentComponentID_WorkflowID_WorkflowVersionNumber = source.WorkflowTransistionHierarchies_ParentComponentID_WorkflowID_WorkflowVersionNumber.ToDtosWithRelated(level - 1);
              target.WorkflowTransistionHierarchies_ChildComponentID_WorkflowID_WorkflowVersionNumber = source.WorkflowTransistionHierarchies_ChildComponentID_WorkflowID_WorkflowVersionNumber.ToDtosWithRelated(level - 1);
              target.WorkflowTransistionParameters = source.WorkflowTransistionParameters.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.WorkflowTransistion ToEntity(this WorkflowTransistionDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.WorkflowTransistion();

            // Properties
            target.WorkflowTransistionID = source.WorkflowTransistionID;
            target.Name = source.Name;
            target.Description = source.Description;
            target.IsWorkflowStart = source.IsWorkflowStart;
            target.IsWorkflowEnd = source.IsWorkflowEnd;
            target.WorkflowID = source.WorkflowID;
            target.WorkflowVersionNumber = source.WorkflowVersionNumber;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<WorkflowTransistionDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.WorkflowTransistion> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<WorkflowTransistionDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.WorkflowTransistion> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.WorkflowTransistion> ToEntities(this IEnumerable<WorkflowTransistionDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.WorkflowTransistion source, WorkflowTransistionDTO target);

        static partial void OnEntityCreating(WorkflowTransistionDTO source, Bec.TargetFramework.Data.WorkflowTransistion target);

    }

}
