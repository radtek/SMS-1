//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 09/04/2015 12:02:58
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class ShoppingCartConverter
    {

        public static ShoppingCartDTO ToDto(this Bec.TargetFramework.Data.ShoppingCart source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ShoppingCartDTO ToDtoWithRelated(this Bec.TargetFramework.Data.ShoppingCart source, int level)
        {
            if (source == null)
              return null;

            var target = new ShoppingCartDTO();

            // Properties
            target.ShoppingCartID = source.ShoppingCartID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.CreatedOn = source.CreatedOn;
            target.HasBeenConvertedToTransactionOrder = source.HasBeenConvertedToTransactionOrder;
            target.HasExpired = source.HasExpired;
            target.CurrencyCode = source.CurrencyCode;
            target.CurrencyRateDate = source.CurrencyRateDate;
            target.CurrencyRate = source.CurrencyRate;
            target.CurrencyRateToGBP = source.CurrencyRateToGBP;
            target.CurrencyRateToUSD = source.CurrencyRateToUSD;
            target.CountryCode = source.CountryCode;
            target.GlobalPaymentMethodID = source.GlobalPaymentMethodID;
            target.OrganisationID = source.OrganisationID;
            target.PaymentCardTypeID = source.PaymentCardTypeID;
            target.PaymentMethodTypeID = source.PaymentMethodTypeID;
            target.UserAccountOrganisationID = source.UserAccountOrganisationID;

            // Navigation Properties
            if (level > 0) {
              target.ShoppingCartItems = source.ShoppingCartItems.ToDtosWithRelated(level - 1);
              target.CountryDeductions = source.CountryDeductions.ToDtosWithRelated(level - 1);
              target.Invoices = source.Invoices.ToDtosWithRelated(level - 1);
              target.GlobalPaymentMethod = source.GlobalPaymentMethod.ToDtoWithRelated(level - 1);
              target.UserAccountOrganisation = source.UserAccountOrganisation.ToDtoWithRelated(level - 1);
              target.Organisation = source.Organisation.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.ShoppingCart ToEntity(this ShoppingCartDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.ShoppingCart();

            // Properties
            target.ShoppingCartID = source.ShoppingCartID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.CreatedOn = source.CreatedOn;
            target.HasBeenConvertedToTransactionOrder = source.HasBeenConvertedToTransactionOrder;
            target.HasExpired = source.HasExpired;
            target.CurrencyCode = source.CurrencyCode;
            target.CurrencyRateDate = source.CurrencyRateDate;
            target.CurrencyRate = source.CurrencyRate;
            target.CurrencyRateToGBP = source.CurrencyRateToGBP;
            target.CurrencyRateToUSD = source.CurrencyRateToUSD;
            target.CountryCode = source.CountryCode;
            target.GlobalPaymentMethodID = source.GlobalPaymentMethodID;
            target.OrganisationID = source.OrganisationID;
            target.PaymentCardTypeID = source.PaymentCardTypeID;
            target.PaymentMethodTypeID = source.PaymentMethodTypeID;
            target.UserAccountOrganisationID = source.UserAccountOrganisationID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ShoppingCartDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.ShoppingCart> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ShoppingCartDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.ShoppingCart> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.ShoppingCart> ToEntities(this IEnumerable<ShoppingCartDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.ShoppingCart source, ShoppingCartDTO target);

        static partial void OnEntityCreating(ShoppingCartDTO source, Bec.TargetFramework.Data.ShoppingCart target);

    }

}
