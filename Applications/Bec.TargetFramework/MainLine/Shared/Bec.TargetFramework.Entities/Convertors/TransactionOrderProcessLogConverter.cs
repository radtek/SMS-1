//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 3/27/2015 9:57:20 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class TransactionOrderProcessLogConverter
    {

        public static TransactionOrderProcessLogDTO ToDto(this Bec.TargetFramework.Data.TransactionOrderProcessLog source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TransactionOrderProcessLogDTO ToDtoWithRelated(this Bec.TargetFramework.Data.TransactionOrderProcessLog source, int level)
        {
            if (source == null)
              return null;

            var target = new TransactionOrderProcessLogDTO();

            // Properties
            target.TransactionOrderID = source.TransactionOrderID;
            target.CreatedOn = source.CreatedOn;
            target.TransactionOrderStatusDetail = source.TransactionOrderStatusDetail;
            target.IsTransactionOrderProcessed = source.IsTransactionOrderProcessed;
            target.PaidOn = source.PaidOn;
            target.IsPaid = source.IsPaid;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.TransactionOrderPaymentID = source.TransactionOrderPaymentID;

            // Navigation Properties
            if (level > 0) {
              target.TransactionOrder = source.TransactionOrder.ToDtoWithRelated(level - 1);
              target.StatusType = source.StatusType.ToDtoWithRelated(level - 1);
              target.StatusTypeValue = source.StatusTypeValue.ToDtoWithRelated(level - 1);
              target.TransactionOrderPayment = source.TransactionOrderPayment.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.TransactionOrderProcessLog ToEntity(this TransactionOrderProcessLogDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.TransactionOrderProcessLog();

            // Properties
            target.TransactionOrderID = source.TransactionOrderID;
            target.CreatedOn = source.CreatedOn;
            target.TransactionOrderStatusDetail = source.TransactionOrderStatusDetail;
            target.IsTransactionOrderProcessed = source.IsTransactionOrderProcessed;
            target.PaidOn = source.PaidOn;
            target.IsPaid = source.IsPaid;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.TransactionOrderPaymentID = source.TransactionOrderPaymentID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TransactionOrderProcessLogDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.TransactionOrderProcessLog> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TransactionOrderProcessLogDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.TransactionOrderProcessLog> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.TransactionOrderProcessLog> ToEntities(this IEnumerable<TransactionOrderProcessLogDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.TransactionOrderProcessLog source, TransactionOrderProcessLogDTO target);

        static partial void OnEntityCreating(TransactionOrderProcessLogDTO source, Bec.TargetFramework.Data.TransactionOrderProcessLog target);

    }

}
