//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 26/03/2015 16:15:00
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class TransactionOrderItemConverter
    {

        public static TransactionOrderItemDTO ToDto(this Bec.TargetFramework.Data.TransactionOrderItem source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TransactionOrderItemDTO ToDtoWithRelated(this Bec.TargetFramework.Data.TransactionOrderItem source, int level)
        {
            if (source == null)
              return null;

            var target = new TransactionOrderItemDTO();

            // Properties
            target.OrderItemID = source.OrderItemID;
            target.Quantity = source.Quantity;
            target.Price = source.Price;
            target.PriceInclTaxAndDeduct = source.PriceInclTaxAndDeduct;
            target.PriceExclTaxAndDeduct = source.PriceExclTaxAndDeduct;
            target.TaxTotal = source.TaxTotal;
            target.TaxTotalPercentage = source.TaxTotalPercentage;
            target.TaxTotalValue = source.TaxTotalValue;
            target.DeductionTotal = source.DeductionTotal;
            target.DeductionTotalPercentage = source.DeductionTotalPercentage;
            target.DeductionTotalValue = source.DeductionTotalValue;
            target.DiscountTotal = source.DiscountTotal;
            target.DiscountTotalPercentage = source.DiscountTotalPercentage;
            target.DiscountTotalValue = source.DiscountTotalValue;
            target.OrderID = source.OrderID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.InvoiceLineItemID = source.InvoiceLineItemID;

            // Navigation Properties
            if (level > 0) {
              target.TransactionOrder = source.TransactionOrder.ToDtoWithRelated(level - 1);
              target.InvoiceLineItem = source.InvoiceLineItem.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.TransactionOrderItem ToEntity(this TransactionOrderItemDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.TransactionOrderItem();

            // Properties
            target.OrderItemID = source.OrderItemID;
            target.Quantity = source.Quantity;
            target.Price = source.Price;
            target.PriceInclTaxAndDeduct = source.PriceInclTaxAndDeduct;
            target.PriceExclTaxAndDeduct = source.PriceExclTaxAndDeduct;
            target.TaxTotal = source.TaxTotal;
            target.TaxTotalPercentage = source.TaxTotalPercentage;
            target.TaxTotalValue = source.TaxTotalValue;
            target.DeductionTotal = source.DeductionTotal;
            target.DeductionTotalPercentage = source.DeductionTotalPercentage;
            target.DeductionTotalValue = source.DeductionTotalValue;
            target.DiscountTotal = source.DiscountTotal;
            target.DiscountTotalPercentage = source.DiscountTotalPercentage;
            target.DiscountTotalValue = source.DiscountTotalValue;
            target.OrderID = source.OrderID;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.InvoiceLineItemID = source.InvoiceLineItemID;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TransactionOrderItemDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.TransactionOrderItem> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TransactionOrderItemDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.TransactionOrderItem> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.TransactionOrderItem> ToEntities(this IEnumerable<TransactionOrderItemDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.TransactionOrderItem source, TransactionOrderItemDTO target);

        static partial void OnEntityCreating(TransactionOrderItemDTO source, Bec.TargetFramework.Data.TransactionOrderItem target);

    }

}
