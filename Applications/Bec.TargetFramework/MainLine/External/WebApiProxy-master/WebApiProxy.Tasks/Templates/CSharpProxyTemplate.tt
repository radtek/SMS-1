<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="WebApiProxy.Core.Models" #>
<#@ import namespace="System.Collections.Generic" #>
//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using <#= Configuration.Namespace#>.Models;
using <#= Configuration.EntitiesNamespace #>;
using <#= Configuration.EnumsNamespace #>;
using System.Web.Http;
using BrockAllen.MembershipReboot;
using ServiceStack.Text;

#region Proxies
namespace <#= Configuration.Namespace#>
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string <#= Configuration.Name #>BaseAddress = "<#= Configuration.Metadata.Host #>";
		
	}
}
#endregion

#region Models
namespace <#= Configuration.Namespace#>.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace <#= Configuration.Namespace#>.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

<# foreach(var definition in Configuration.Metadata.Definitions) { #>	
	public partial interface I<#=definition.Name#><#=Configuration.ClientSuffix#> : IClientBase
	{	
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable().Where(m => m != null);
		
		//var queryParameterString = "\"";
		var bodyParameterString = "";


		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		}
	
		var parameterList = "";

		if (allParameters.Any())
		{
			var q = allParameters.Select(m => m.Type + " " + m.Name);
			if (q != null)
				parameterList = string.Join(",", q.ToArray());
		}		
#>

<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		/// <returns></returns>
		<#= String.IsNullOrEmpty(method.ReturnType) ? "Task" : "Task<" + method.ReturnType + ">" #> <#= method.Name #>Async(<#= parameterList#>);

<# foreach(var p in method.UrlParameters) {#>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		/// <returns></returns>
		<#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>);

<#}#>				
	}
<#}#>

}
#endregion

#region Clients
namespace <#= Configuration.Namespace#>.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode) return;
													
			if (response.Content == null)
                throw new NullReferenceException("HttpResponseMessage Content is null");
            else
            {
                HttpError he;
                try
                {
                    he = await response.Content.ReadAsAsync<HttpError>();
                }
                catch (Exception ex)
                {
                    Task<string> incorrectMessageTask = Task.Run(() => response.Content.ReadAsStringAsync());
                    throw new Exception(incorrectMessageTask.Result, ex);
                }
                throw new Exception(he["ExceptionMessage"].ToString());
            }		
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}

        protected async Task DeleteAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Delete, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task DeleteAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Delete, user, null);
            await EnsureSuccessAsync(response);
        }

		protected async Task<Tret> PostAsync<Tbody, Tret>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            return await HandleResponse<Tret>(response);
        }

		protected async Task PostAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task<Tret> GetAsync<Tret>(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            return await HandleResponse<Tret>(response);
        }

		protected async Task GetAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            await EnsureSuccessAsync(response);
        }

		private async Task<T> HandleResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccessAsync(response);
            return await response.ReadContentAsAsync<T>();
        }

        private async Task<HttpResponseMessage> SendAsync<T>(string requestUri, HttpMethod method, string user, T value)
        {
            var req = new HttpRequestMessage
            {
                RequestUri = new Uri(requestUri, UriKind.RelativeOrAbsolute),
                Method = method
            };
            if (value != null) req.Content = new ObjectContent<T>(value, new JsonMediaTypeFormatter(), (MediaTypeHeaderValue)null);
            if (user != null) req.Headers.Add("User", user);
            return await HttpClient.SendAsync(req);
        }

        protected string getHttpContextUser()
        {
            if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null)
                return HttpContext.Current.User.Identity.Name;
            else
                return null;
        }
	}
<# foreach(var definition in Configuration.Metadata.Definitions) { #>
	/// <summary>
	/// <#= definition.Description.ToSummary() #>
	/// </summary>
	public partial class <#=definition.Name#><#= Configuration.ClientSuffix#> : ClientBase, Interfaces.I<#=definition.Name#><#=Configuration.ClientSuffix#>
	{		

		/// <summary>
		/// <#= definition.Description.ToSummary() #>
		/// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>(string url) : base(url)
		{
		}

		/// <summary>
		/// <#= definition.Description.ToSummary() #>
		/// </summary>
		public <#=definition.Name#><#= Configuration.ClientSuffix#>(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
<# foreach(var method in definition.ActionMethods) { 
		var allParameters = method.UrlParameters.AsEnumerable();

		var queryParameterString = "\"";
		var bodyTypeString = "";
		var bodyParameterString = ", null";
		var parameterNameList = "";
		var methodVerb = method.Type.ToTitle();

		//override method type if parameters required
		if (method.BodyParameter != null && methodVerb == "Get") methodVerb = "Post";

		var postOrPut =  methodVerb == "Post" || methodVerb == "Put";

		if (!String.IsNullOrEmpty(method.ReturnType))
		{
			if (method.BodyParameter != null)
				bodyTypeString = "<" + method.BodyParameter.Type + ", " + method.ReturnType + ">";
			else
			{
				if (postOrPut)
					bodyTypeString = "<object, " + method.ReturnType + ">";
				else
					bodyTypeString = "<" + method.ReturnType + ">";
			}
		}
		else
		{
			if (method.BodyParameter != null)
				bodyTypeString = "<" + method.BodyParameter.Type + ">";
			else
			{
				if (postOrPut)
					bodyTypeString = "<object>";
				else
					bodyTypeString = "";
			}
		}

		if (method.BodyParameter != null) {
			allParameters = allParameters.Concat(new [] { method.BodyParameter });
			bodyParameterString = ", " + method.BodyParameter.Name;
		} else {
			if(methodVerb == "Delete")
				bodyParameterString = "";
			else
				bodyParameterString = ", null";
		}

		if (allParameters.Any()) {
			queryParameterString = "?";
			queryParameterString += string.Join(" + \"&", allParameters.Where(m => m != null).Select(m => m.Name + "=\" + " + m.Name).ToArray());
			parameterNameList =  string.Join(", ", allParameters.Select(m => m.Name));
		}

		var parameterList = "";

		if (allParameters.Any())
		{
		var q = allParameters.Where(m => m != null).Select(m => m.Type + " " + m.Name);

		if (q != null)
			parameterList = string.Join(",", q.ToArray());
		}
				
		var url = ("\"" + method.Url.Replace("{", "\" + ").Replace("}", " + \"") + "\"").Replace(" + \"\"","");
#>
		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		/// <returns></returns>
		public virtual async <#= String.IsNullOrEmpty(method.ReturnType) ? "Task" : "Task<" + method.ReturnType + ">" #> <#= method.Name #>Async(<#= parameterList#>)
		{
<# foreach(var p in method.UrlParameters.Where(m=>m.Type == "String")) { #>
			<#=p.Name#> = <#=p.Name#>.UrlEncode();
<# } #>
			string _user = getHttpContextUser();
			<# if(!String.IsNullOrEmpty(method.ReturnType)) { #>return <#}#>await <#=methodVerb#>Async<#= bodyTypeString #>(<#=url#><#= (postOrPut || methodVerb == "Delete") ? bodyParameterString:""#>, _user);
		}

		/// <summary>
		/// <#= method.Description #>
		/// </summary>
<# foreach(var p in method.UrlParameters) { #>
		/// <param name="<#= p.Name #>"><#= p.Description #></param>
<# } #>
		public virtual <#= String.IsNullOrEmpty(method.ReturnType) ? "void" : method.ReturnType #> <#= method.Name #>(<#= parameterList#>)
		{
<# foreach(var p in method.UrlParameters.Where(m=>m.Type == "String")) { #>
			<#=p.Name#> = <#=p.Name#>.UrlEncode();
<# } #>
			string _user = getHttpContextUser();
			<# if(!String.IsNullOrEmpty(method.ReturnType)) { #>return <#}#>Task.Run(() => <#=methodVerb#>Async<#= bodyTypeString #>(<#=url#><#= (postOrPut || methodVerb == "Delete") ? bodyParameterString:""#>, _user))<# if(!String.IsNullOrEmpty(method.ReturnType)) { #>.Result<#}#>;
		}

<#}#>
		#endregion
	}
<# } #>
}
#endregion

