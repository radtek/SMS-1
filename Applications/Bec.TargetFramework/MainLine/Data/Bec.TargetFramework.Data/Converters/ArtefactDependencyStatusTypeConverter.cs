//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Entities
{

    public static partial class ArtefactDependencyStatusTypeConverter
    {

        public static ArtefactDependencyStatusTypeDTO ToDto(this Bec.TargetFramework.Data.ArtefactDependencyStatusType source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ArtefactDependencyStatusTypeDTO ToDtoWithRelated(this Bec.TargetFramework.Data.ArtefactDependencyStatusType source, int level)
        {
            if (source == null)
              return null;

            var target = new ArtefactDependencyStatusTypeDTO();

            // Properties
            target.ArtefactDependencyStatusTypeID = source.ArtefactDependencyStatusTypeID;
            target.ArtefactDependencyID = source.ArtefactDependencyID;
            target.ArtefactID = source.ArtefactID;
            target.ArtefactVersionNumber = source.ArtefactVersionNumber;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.DependencyCanBeCreated = source.DependencyCanBeCreated;
            target.DependencyCanBeEdited = source.DependencyCanBeEdited;
            target.DependencyCanBeDeleted = source.DependencyCanBeDeleted;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;

            // Navigation Properties
            if (level > 0) {
              target.ArtefactDependency = source.ArtefactDependency.ToDtoWithRelated(level - 1);
              target.StatusTypeValue = source.StatusTypeValue.ToDtoWithRelated(level - 1);
              target.ArtefactStatusType = source.ArtefactStatusType.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.ArtefactDependencyStatusType ToEntity(this ArtefactDependencyStatusTypeDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.ArtefactDependencyStatusType();

            // Properties
            target.ArtefactDependencyStatusTypeID = source.ArtefactDependencyStatusTypeID;
            target.ArtefactDependencyID = source.ArtefactDependencyID;
            target.ArtefactID = source.ArtefactID;
            target.ArtefactVersionNumber = source.ArtefactVersionNumber;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.DependencyCanBeCreated = source.DependencyCanBeCreated;
            target.DependencyCanBeEdited = source.DependencyCanBeEdited;
            target.DependencyCanBeDeleted = source.DependencyCanBeDeleted;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ArtefactDependencyStatusTypeDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.ArtefactDependencyStatusType> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ArtefactDependencyStatusTypeDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.ArtefactDependencyStatusType> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.ArtefactDependencyStatusType> ToEntities(this IEnumerable<ArtefactDependencyStatusTypeDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.ArtefactDependencyStatusType source, ArtefactDependencyStatusTypeDTO target);

        static partial void OnEntityCreating(ArtefactDependencyStatusTypeDTO source, Bec.TargetFramework.Data.ArtefactDependencyStatusType target);

    }

}
