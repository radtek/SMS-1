//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.Business.Client.Models;
using Bec.TargetFramework.Entities;
using Bec.TargetFramework.Entities.Enums;
using System.Web.Http;
using BrockAllen.MembershipReboot;
using ServiceStack.Text;

#region Proxies
namespace Bec.TargetFramework.Business.Client
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string WebApiProxyBaseAddress = "http://localhost:9000";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.Business.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace Bec.TargetFramework.Business.Client.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	public partial interface IAddressLogicClient : IClientBase	{	

		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber);

		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber);

		/// <param name="postCode"></param>
		/// <returns></returns>
		Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode);

		/// <param name="postCode"></param>
		/// <returns></returns>
		GoogleGeoCodeResponse GeoCodePostcode(String postCode);
	}

	public partial interface IClassificationDataLogicClient : IClientBase	{	

		/// <returns></returns>
		Task<List<CountryCodeDTO>> GetCountriesAsync();

		/// <returns></returns>
		List<CountryCodeDTO> GetCountries();

		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName);

		/// <param name="typeName"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName);

		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID);

		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID);

		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName);

		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Int32 GetClassificationDataForTypeName(String categoryName,String typeName);
	}

	public partial interface IInvoiceLogicClient : IClientBase	{	

		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		Task<Boolean> DoesInvoiceExistForShoppingCartAsync(Guid shoppingCartId);

		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		Boolean DoesInvoiceExistForShoppingCart(Guid shoppingCartId);

		/// <returns></returns>
		Task<VOrganisationDetailDTO> GetPaymentProviderOrganisationDetailAsync();

		/// <returns></returns>
		VOrganisationDetailDTO GetPaymentProviderOrganisationDetail();

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task<VInvoiceWithCurrentTransactionOrderStatusDTO> GetInvoiceWithCurrentTransactionOrderStatusAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		VInvoiceWithCurrentTransactionOrderStatusDTO GetInvoiceWithCurrentTransactionOrderStatus(Guid invoiceID);

		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		Task<InvoiceDTO> GetInvoiceForShoppingCartAsync(Guid shoppingCartId);

		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		InvoiceDTO GetInvoiceForShoppingCart(Guid shoppingCartId);

		/// <param name="cartID"></param>
		/// <param name="reference"></param>
		/// <returns></returns>
		Task<InvoiceDTO> CreateAndSaveInvoiceFromShoppingCartAsync(Guid cartID,String reference);

		/// <param name="cartID"></param>
		/// <param name="reference"></param>
		/// <returns></returns>
		InvoiceDTO CreateAndSaveInvoiceFromShoppingCart(Guid cartID,String reference);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task DeleteInvoiceAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void DeleteInvoice(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task FreezeInvoiceAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void FreezeInvoice(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task CloseInvoiceAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void CloseInvoice(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		Task MarkInvoiceWithAccountingStatusAsync(Guid invoiceID,InvoiceAccountingStatusIDEnum value);

		/// <param name="invoiceID"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		void MarkInvoiceWithAccountingStatus(Guid invoiceID,InvoiceAccountingStatusIDEnum value);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsPaidAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsPaid(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsUnpaidAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsUnpaid(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsCancelledAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsCancelled(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsProcessingAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsProcessing(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsPaymentDueAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsPaymentDue(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsActiveAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsActive(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		Task MarkInvoiceAsPaymentScheduledAsync(Guid invoiceID);

		/// <param name="invoiceID"></param>
		/// <returns></returns>
		void MarkInvoiceAsPaymentScheduled(Guid invoiceID);
	}

	public partial interface INotificationLogicClient : IClientBase	{	

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);

		/// <returns></returns>
		Task SaveNotificationAsync(NotificationDTO dto);

		/// <returns></returns>
		void SaveNotification(NotificationDTO dto);

		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);

		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);

		/// <param name="name"></param>
		/// <returns></returns>
		Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		Task<IEnumerable<VDefaultEmailAddressDTO>> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);

		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		IEnumerable<VDefaultEmailAddressDTO> RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);

		/// <param name="userAccountOrganisationId"></param>
		/// <param name="count"></param>
		/// <returns></returns>
		Task<List<VNotificationViewOnlyUaoDTO>> GetLatestInternalAsync(Guid userAccountOrganisationId,Int32 count);

		/// <param name="userAccountOrganisationId"></param>
		/// <param name="count"></param>
		/// <returns></returns>
		List<VNotificationViewOnlyUaoDTO> GetLatestInternal(Guid userAccountOrganisationId,Int32 count);

		/// <param name="userAccountOrganisationId"></param>
		/// <returns></returns>
		Task<List<VNotificationViewOnlyUaoDTO>> GetInternalAsync(Guid userAccountOrganisationId);

		/// <param name="userAccountOrganisationId"></param>
		/// <returns></returns>
		List<VNotificationViewOnlyUaoDTO> GetInternal(Guid userAccountOrganisationId);

		/// <param name="notificationId"></param>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="notificationExportFormat"></param>
		/// <returns></returns>
		Task<NotificationContentDTO> GetNotificationContentAsync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat);

		/// <param name="notificationId"></param>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="notificationExportFormat"></param>
		/// <returns></returns>
		NotificationContentDTO GetNotificationContent(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat);

		/// <param name="userId"></param>
		/// <param name="types"></param>
		/// <returns></returns>
		Task<List<VNotificationInternalUnreadDTO>> GetUnreadNotificationsAsync(Guid userId,NotificationConstructEnum[] types);

		/// <param name="userId"></param>
		/// <param name="types"></param>
		/// <returns></returns>
		List<VNotificationInternalUnreadDTO> GetUnreadNotifications(Guid userId,NotificationConstructEnum[] types);

		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<NotificationResultDTO> GetTcAndCsTextAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		NotificationResultDTO GetTcAndCsText(Guid accountID);

		/// <param name="notificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<Byte[]> RetrieveNotificationConstructDataAsync(Guid notificationConstructID,Int32 versionNumber,DTOMap data);

		/// <param name="notificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Byte[] RetrieveNotificationConstructData(Guid notificationConstructID,Int32 versionNumber,DTOMap data);

		/// <param name="notificationID"></param>
		/// <returns></returns>
		Task MarkAcceptedAsync(Guid notificationID);

		/// <param name="notificationID"></param>
		/// <returns></returns>
		void MarkAccepted(Guid notificationID);

		/// <param name="eventStatusID"></param>
		/// <param name="status"></param>
		/// <param name="recipients"></param>
		/// <param name="subject"></param>
		/// <param name="body"></param>
		/// <returns></returns>
		Task UpdateEventStatusAsync(Guid eventStatusID,String status,String recipients,String subject,String body);

		/// <param name="eventStatusID"></param>
		/// <param name="status"></param>
		/// <param name="recipients"></param>
		/// <param name="subject"></param>
		/// <param name="body"></param>
		/// <returns></returns>
		void UpdateEventStatus(Guid eventStatusID,String status,String recipients,String subject,String body);

		/// <param name="eventName"></param>
		/// <param name="eventReference"></param>
		/// <returns></returns>
		Task<List<EventStatusDTO>> GetEventStatusAsync(String eventName,String eventReference);

		/// <param name="eventName"></param>
		/// <param name="eventReference"></param>
		/// <returns></returns>
		List<EventStatusDTO> GetEventStatus(String eventName,String eventReference);

		/// <param name="count"></param>
		/// <param name="organisationId"></param>
		/// <param name="notificationConstructEnum"></param>
		/// <returns></returns>
		Task PublishNewInternalMessagesNotificationEventAsync(Int32 count,Guid organisationId,NotificationConstructEnum notificationConstructEnum);

		/// <param name="count"></param>
		/// <param name="organisationId"></param>
		/// <param name="notificationConstructEnum"></param>
		/// <returns></returns>
		void PublishNewInternalMessagesNotificationEvent(Int32 count,Guid organisationId,NotificationConstructEnum notificationConstructEnum);
	}

	public partial interface IOrganisationLogicClient : IClientBase	{	

		/// <param name="organisationID"></param>
		/// <returns></returns>
		Task<Boolean> HasOrganisationAnySafeBankAccountAsync(Guid organisationID);

		/// <param name="organisationID"></param>
		/// <returns></returns>
		Boolean HasOrganisationAnySafeBankAccount(Guid organisationID);

		/// <param name="days"></param>
		/// <param name="hours"></param>
		/// <param name="minutes"></param>
		/// <returns></returns>
		Task ExpireTemporaryLoginsAsync(Int32 days,Int32 hours,Int32 minutes);

		/// <param name="days"></param>
		/// <param name="hours"></param>
		/// <param name="minutes"></param>
		/// <returns></returns>
		void ExpireTemporaryLogins(Int32 days,Int32 hours,Int32 minutes);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		Task ExpireUserAccountOrganisationAsync(Guid uaoID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		void ExpireUserAccountOrganisation(Guid uaoID);

		/// <param name="regulatorNumber"></param>
		/// <returns></returns>
		Task<Boolean> IsOrganisationInSystemAsync(String regulatorNumber);

		/// <param name="regulatorNumber"></param>
		/// <returns></returns>
		Boolean IsOrganisationInSystem(String regulatorNumber);

		/// <returns></returns>
		Task RejectOrganisationAsync(RejectCompanyDTO dto);

		/// <returns></returns>
		void RejectOrganisation(RejectCompanyDTO dto);

		/// <param name="organisationID"></param>
		/// <returns></returns>
		Task ActivateOrganisationAsync(Guid organisationID);

		/// <param name="organisationID"></param>
		/// <returns></returns>
		void ActivateOrganisation(Guid organisationID);

		/// <param name="orgStatus"></param>
		/// <returns></returns>
		Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus);

		/// <param name="orgStatus"></param>
		/// <returns></returns>
		List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus);

		/// <param name="organisationType"></param>
		/// <returns></returns>
		Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto);

		/// <param name="organisationType"></param>
		/// <returns></returns>
		Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto);

		/// <param name="organisationID"></param>
		/// <param name="userTypeValue"></param>
		/// <param name="addDefaultRoles"></param>
		/// <param name="roles"></param>
		/// <returns></returns>
		Task<UserAccountOrganisationDTO> AddNewUserToOrganisationAsync(Guid organisationID,UserTypeEnum userTypeValue,Boolean addDefaultRoles,Guid[] roles,ContactDTO userContactDto);

		/// <param name="organisationID"></param>
		/// <param name="userTypeValue"></param>
		/// <param name="addDefaultRoles"></param>
		/// <param name="roles"></param>
		/// <returns></returns>
		UserAccountOrganisationDTO AddNewUserToOrganisation(Guid organisationID,UserTypeEnum userTypeValue,Boolean addDefaultRoles,Guid[] roles,ContactDTO userContactDto);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		Task AddPersonalDetailsAsync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		void AddPersonalDetails(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		Task<Boolean> RequiresPersonalDetailsAsync(Guid uaoId);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		Boolean RequiresPersonalDetails(Guid uaoId);

		/// <param name="userOrgID"></param>
		/// <param name="type"></param>
		/// <returns></returns>
		Task CreateTsAndCsNotificationAsync(Guid userOrgID,NotificationConstructEnum type);

		/// <param name="userOrgID"></param>
		/// <param name="type"></param>
		/// <returns></returns>
		void CreateTsAndCsNotification(Guid userOrgID,NotificationConstructEnum type);

		/// <returns></returns>
		Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync();

		/// <returns></returns>
		Nullable<Guid> GetTemporaryOrganisationBranchID();

		/// <param name="id"></param>
		/// <returns></returns>
		Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		VOrganisationDTO GetOrganisationDTO(Guid id);

		/// <param name="orgID"></param>
		/// <param name="enumType"></param>
		/// <param name="status"></param>
		/// <param name="reason"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		Task AddOrganisationStatusAsync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes);

		/// <param name="orgID"></param>
		/// <param name="enumType"></param>
		/// <param name="status"></param>
		/// <param name="reason"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		void AddOrganisationStatus(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes);

		/// <param name="orgID"></param>
		/// <param name="email"></param>
		/// <returns></returns>
		Task<Boolean> CheckDuplicateUserSmsTransactionAsync(Guid orgID,String email,SmsTransactionDTO dto);

		/// <param name="orgID"></param>
		/// <param name="email"></param>
		/// <returns></returns>
		Boolean CheckDuplicateUserSmsTransaction(Guid orgID,String email,SmsTransactionDTO dto);

		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="salutation"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="email"></param>
		/// <param name="birthDate"></param>
		/// <returns></returns>
		Task<Guid> AddSmsClientAsync(Guid orgID,Guid uaoID,String salutation,String firstName,String lastName,String email,DateTime birthDate);

		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="salutation"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="email"></param>
		/// <param name="birthDate"></param>
		/// <returns></returns>
		Guid AddSmsClient(Guid orgID,Guid uaoID,String salutation,String firstName,String lastName,String email,DateTime birthDate);

		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="buyerUaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <returns></returns>
		Task<Guid> PurchaseProductAsync(Guid orgID,Guid uaoID,Guid buyerUaoID,Guid productID,Int32 productVersion,SmsTransactionDTO dto);

		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="buyerUaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <returns></returns>
		Guid PurchaseProduct(Guid orgID,Guid uaoID,Guid buyerUaoID,Guid productID,Int32 productVersion,SmsTransactionDTO dto);

		/// <param name="uaoID"></param>
		/// <param name="accountNumber"></param>
		/// <param name="sortCode"></param>
		/// <returns></returns>
		Task UpdateSmsUserAccountOrganisationTransactionAsync(Guid uaoID,String accountNumber,String sortCode,SmsUserAccountOrganisationTransactionDTO dto);

		/// <param name="uaoID"></param>
		/// <param name="accountNumber"></param>
		/// <param name="sortCode"></param>
		/// <returns></returns>
		void UpdateSmsUserAccountOrganisationTransaction(Guid uaoID,String accountNumber,String sortCode,SmsUserAccountOrganisationTransactionDTO dto);

		/// <returns></returns>
		Task AssignSmsClientToTransactionAsync(AssignSmsClientToTransactionDTO assignSmsClientToTransactionDTO);

		/// <returns></returns>
		void AssignSmsClientToTransaction(AssignSmsClientToTransactionDTO assignSmsClientToTransactionDTO);

		/// <param name="orgID"></param>
		/// <returns></returns>
		Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOrganisationBankAccountsAsync(Guid orgID);

		/// <param name="orgID"></param>
		/// <returns></returns>
		List<VOrganisationBankAccountsWithStatusDTO> GetOrganisationBankAccounts(Guid orgID);

		/// <returns></returns>
		Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOutstandingBankAccountsAsync();

		/// <returns></returns>
		List<VOrganisationBankAccountsWithStatusDTO> GetOutstandingBankAccounts();

		/// <param name="orgID"></param>
		/// <returns></returns>
		Task<Guid> AddBankAccountAsync(Guid orgID,OrganisationBankAccountDTO accountDTO);

		/// <param name="orgID"></param>
		/// <returns></returns>
		Guid AddBankAccount(Guid orgID,OrganisationBankAccountDTO accountDTO);

		/// <returns></returns>
		Task AddBankAccountStatusAsync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest);

		/// <returns></returns>
		void AddBankAccountStatus(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest);

		/// <param name="orgID"></param>
		/// <param name="baID"></param>
		/// <param name="active"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		Task ToggleBankAccountActiveAsync(Guid orgID,Guid baID,Boolean active,String notes);

		/// <param name="orgID"></param>
		/// <param name="baID"></param>
		/// <param name="active"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		void ToggleBankAccountActive(Guid orgID,Guid baID,Boolean active,String notes);

		/// <param name="orgID"></param>
		/// <param name="transactionOrderID"></param>
		/// <param name="uaoID"></param>
		/// <param name="amount"></param>
		/// <param name="rowVersion"></param>
		/// <returns></returns>
		Task AddCreditAsync(Guid orgID,Guid transactionOrderID,Guid uaoID,Decimal amount,Nullable<Int64> rowVersion);

		/// <param name="orgID"></param>
		/// <param name="transactionOrderID"></param>
		/// <param name="uaoID"></param>
		/// <param name="amount"></param>
		/// <param name="rowVersion"></param>
		/// <returns></returns>
		void AddCredit(Guid orgID,Guid transactionOrderID,Guid uaoID,Decimal amount,Nullable<Int64> rowVersion);

		/// <param name="orgID"></param>
		/// <returns></returns>
		Task<Guid> GetCreditAccountIdAsync(Guid orgID);

		/// <param name="orgID"></param>
		/// <returns></returns>
		Guid GetCreditAccountId(Guid orgID);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<OrganisationLedgerAccountDTO> GetCreditAccountAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		OrganisationLedgerAccountDTO GetCreditAccount(Guid orgId);

		/// <param name="accountID"></param>
		/// <param name="date"></param>
		/// <returns></returns>
		Task<Decimal> GetBalanceAsAtAsync(Guid accountID,DateTime date);

		/// <param name="accountID"></param>
		/// <param name="date"></param>
		/// <returns></returns>
		Decimal GetBalanceAsAt(Guid accountID,DateTime date);
	}

	public partial interface IPaymentLogicClient : IClientBase	{	

		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		Task<TransactionOrderPaymentDTO> GetTheSuccessfulOrderPaymentForTransactionOrderAsync(Guid transactionOrderId);

		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		TransactionOrderPaymentDTO GetTheSuccessfulOrderPaymentForTransactionOrder(Guid transactionOrderId);

		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		Task<Boolean> DoesASuccessfulOrderPaymentExistForTransactionOrderAsync(Guid transactionOrderId);

		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		Boolean DoesASuccessfulOrderPaymentExistForTransactionOrder(Guid transactionOrderId);

		/// <returns></returns>
		Task<TransactionOrderPaymentDTO> ProcessPaymentTransactionAsync(OrderRequestDTO request);

		/// <returns></returns>
		TransactionOrderPaymentDTO ProcessPaymentTransaction(OrderRequestDTO request);

		/// <param name="uaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <param name="cardType"></param>
		/// <param name="methodType"></param>
		/// <param name="reference"></param>
		/// <param name="amount"></param>
		/// <returns></returns>
		Task<Guid> PurchaseProductAsync(Guid uaoID,Guid productID,Int32 productVersion,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,String reference,Nullable<Decimal> amount);

		/// <param name="uaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <param name="cardType"></param>
		/// <param name="methodType"></param>
		/// <param name="reference"></param>
		/// <param name="amount"></param>
		/// <returns></returns>
		Guid PurchaseProduct(Guid uaoID,Guid productID,Int32 productVersion,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,String reference,Nullable<Decimal> amount);

		/// <returns></returns>
		Task AmendCreditAsync(CreditAdjustmentDTO creditAdjustmentDto);

		/// <returns></returns>
		void AmendCredit(CreditAdjustmentDTO creditAdjustmentDto);
	}

	public partial interface IProductLogicClient : IClientBase	{	

		/// <returns></returns>
		Task<ProductDTO> GetTopUpProductAsync();

		/// <returns></returns>
		ProductDTO GetTopUpProduct();

		/// <returns></returns>
		Task<ProductDTO> GetBankAccountCheckProductAsync();

		/// <returns></returns>
		ProductDTO GetBankAccountCheckProduct();
	}

	public partial interface IShoppingCartLogicClient : IClientBase	{	

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="cardTypeEnum"></param>
		/// <param name="paymentTypeEnum"></param>
		/// <param name="countryCode"></param>
		/// <returns></returns>
		Task<ShoppingCartDTO> CreateShoppingCartAsync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="cardTypeEnum"></param>
		/// <param name="paymentTypeEnum"></param>
		/// <param name="countryCode"></param>
		/// <returns></returns>
		ShoppingCartDTO CreateShoppingCart(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode);

		/// <param name="cartID"></param>
		/// <param name="productID"></param>
		/// <param name="versionNumber"></param>
		/// <param name="quantity"></param>
		/// <param name="customerPrice"></param>
		/// <returns></returns>
		Task AddProductToShoppingCartAsync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice);

		/// <param name="cartID"></param>
		/// <param name="productID"></param>
		/// <param name="versionNumber"></param>
		/// <param name="quantity"></param>
		/// <param name="customerPrice"></param>
		/// <returns></returns>
		void AddProductToShoppingCart(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice);

		/// <param name="cartID"></param>
		/// <param name="itemID"></param>
		/// <returns></returns>
		Task RemoveProductFromShoppingCartAsync(Guid cartID,Guid itemID);

		/// <param name="cartID"></param>
		/// <param name="itemID"></param>
		/// <returns></returns>
		void RemoveProductFromShoppingCart(Guid cartID,Guid itemID);
	}

	public partial interface ITFSettingsLogicClient : IClientBase	{	

		/// <returns></returns>
		Task<Dictionary<String, String>> GetSettingsAsync();

		/// <returns></returns>
		Dictionary<String, String> GetSettings();
	}

	public partial interface ITransactionOrderLogicClient : IClientBase	{	

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		Task<TransactionOrderDTO> GetTransactionForInvoiceAsync(Guid invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		TransactionOrderDTO GetTransactionForInvoice(Guid invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		Task<Boolean> DoesTransactionExistForInvoiceAsync(Guid invoiceId);

		/// <param name="invoiceId"></param>
		/// <returns></returns>
		Boolean DoesTransactionExistForInvoice(Guid invoiceId);

		/// <param name="invoiceID"></param>
		/// <param name="typeEnumValue"></param>
		/// <returns></returns>
		Task<TransactionOrderDTO> CreateAndSaveTransactionOrderFromShoppingCartDTOAsync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue);

		/// <param name="invoiceID"></param>
		/// <param name="typeEnumValue"></param>
		/// <returns></returns>
		TransactionOrderDTO CreateAndSaveTransactionOrderFromShoppingCartDTO(Guid invoiceID,TransactionTypeIDEnum typeEnumValue);
	}

	public partial interface IUserAccountAuditLogicClient : IClientBase	{	

		/// <param name="requestData"></param>
		/// <returns></returns>
		Task CreateAndSaveAuditAsync(String requestData,WebUserObject wuo);

		/// <param name="requestData"></param>
		/// <returns></returns>
		void CreateAndSaveAudit(String requestData,WebUserObject wuo);
	}

	public partial interface IUserLogicClient : IClientBase, BrockAllen.MembershipReboot.AccountService.IPartialUserLogicController	{	

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		Task<UserLoginValidation> AuthenticateUserAsync(String username,String password);

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		UserLoginValidation AuthenticateUser(String username,String password);

		/// <returns></returns>
		Task<ContactDTO> AddUserAsync(ContactDTO dto);

		/// <returns></returns>
		ContactDTO AddUser(ContactDTO dto);

		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <param name="registering"></param>
		/// <param name="pin"></param>
		/// <returns></returns>
		Task ResetUserPasswordAsync(Guid userID,String newPassword,Boolean registering,String pin);

		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <param name="registering"></param>
		/// <param name="pin"></param>
		/// <returns></returns>
		void ResetUserPassword(Guid userID,String newPassword,Boolean registering,String pin);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<Boolean> HasPasswordExpiredAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean HasPasswordExpired(Guid userID);

		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser);

		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		void LockOrUnlockUser(Guid userId,Boolean lockUser);

		/// <param name="userName"></param>
		/// <returns></returns>
		Task<Boolean> IsUserExistAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		Boolean IsUserExist(String userName);

		/// <param name="email"></param>
		/// <returns></returns>
		Task<Boolean> IsEmailExistAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		Boolean IsEmailExist(String email);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		Task<Boolean> IsUserAccountRegisteredAsync(Guid uaoId);

		/// <param name="uaoId"></param>
		/// <returns></returns>
		Boolean IsUserAccountRegistered(Guid uaoId);

		/// <param name="contactID"></param>
		/// <returns></returns>
		Task<IEnumerable<AddressDTO>> GetUserAddressesAsync(Guid contactID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		IEnumerable<AddressDTO> GetUserAddresses(Guid contactID);

		/// <returns></returns>
		Task<List<UserAccount>> GetAllUserAccountAsync();

		/// <returns></returns>
		List<UserAccount> GetAllUserAccount();

		/// <param name="key"></param>
		/// <returns></returns>
		Task<UserAccount> GetUserAccountAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		UserAccount GetUserAccount(Guid key);

		/// <param name="email"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByEmailAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmail(String email);

		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id);

		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id);

		/// <param name="username"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByUsernameAsync(String username);

		/// <param name="username"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByUsername(String username);

		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly);

		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly);

		/// <param name="userName"></param>
		/// <returns></returns>
		Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		UserAccountDTO GetUserAccountByUsername(String userName);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<List<ContactDTO>> GetUserContactsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<ContactDTO> GetUserContacts(Guid userId);

		/// <param name="key"></param>
		/// <returns></returns>
		Task<List<UserAccount>> GetUserAccountsAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		List<UserAccount> GetUserAccounts(Guid key);

		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID);

		/// <returns></returns>
		Task<UserAccount> CreateUserAccountAsync();

		/// <returns></returns>
		UserAccount CreateUserAccount();

		/// <returns></returns>
		Task AddUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void AddUserAccount(UserAccount user);

		/// <returns></returns>
		Task RemoveUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void RemoveUserAccount(UserAccount user);

		/// <returns></returns>
		Task UpdateUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void UpdateUserAccount(UserAccount user);

		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID);

		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID);

		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg);

		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg);

		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<List<String>> UserLoginSessionsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<String> UserLoginSessions(Guid userId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task LogEveryoneElseOutAsync(Guid userId,String sessionId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void LogEveryoneElseOut(Guid userId,String sessionId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<Boolean> DoesUserExistAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean DoesUserExist(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		UserAccountOrganisationDTO GetPermanentUAO(Guid userID);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		Guid GetPersonalUserAccountOrganisation(Guid userId);

		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		Task<UserAccount> CreateAccountAsync(String userName,String password,String email,Guid userId);

		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UserAccount CreateAccount(String userName,String password,String email,Guid userId);

		/// <returns></returns>
		Task CreateContactAsync(ContactDTO contactDTO);

		/// <returns></returns>
		void CreateContact(ContactDTO contactDTO);

		/// <param name="parentID"></param>
		/// <returns></returns>
		Task<Boolean> ContactExistsAsync(Guid parentID);

		/// <param name="parentID"></param>
		/// <returns></returns>
		Boolean ContactExists(Guid parentID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task DeleteAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void DeleteAccount(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task CloseAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void CloseAccount(Guid userID);

		/// <returns></returns>
		Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync();

		/// <returns></returns>
		List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn();

		/// <param name="email"></param>
		/// <returns></returns>
		Task SendUsernameReminderAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		void SendUsernameReminder(String email);

		/// <param name="username"></param>
		/// <returns></returns>
		Task CreatePasswordResetRequestAsync(String username);

		/// <param name="username"></param>
		/// <returns></returns>
		void CreatePasswordResetRequest(String username);

		/// <param name="uaoID"></param>
		/// <param name="blank"></param>
		/// <param name="overwriteExisting"></param>
		/// <returns></returns>
		Task GeneratePinAsync(Guid uaoID,Boolean blank,Boolean overwriteExisting);

		/// <param name="uaoID"></param>
		/// <param name="blank"></param>
		/// <param name="overwriteExisting"></param>
		/// <returns></returns>
		void GeneratePin(Guid uaoID,Boolean blank,Boolean overwriteExisting);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		Task<Boolean> IncrementInvalidPINAsync(Guid uaoID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		Boolean IncrementInvalidPIN(Guid uaoID);

		/// <param name="uaoId"></param>
		/// <param name="phoneNumber"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		Task RegisterUserAsync(Guid uaoId,String phoneNumber,String password);

		/// <param name="uaoId"></param>
		/// <param name="phoneNumber"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		void RegisterUser(Guid uaoId,String phoneNumber,String password);

		/// <param name="uaoID"></param>
		/// <param name="withRelatedLevel"></param>
		/// <returns></returns>
		Task<List<UserAccountOrganisationRoleDTO>> GetRolesAsync(Guid uaoID,Int32 withRelatedLevel);

		/// <param name="uaoID"></param>
		/// <param name="withRelatedLevel"></param>
		/// <returns></returns>
		List<UserAccountOrganisationRoleDTO> GetRoles(Guid uaoID,Int32 withRelatedLevel);

		/// <param name="uaoId"></param>
		/// <param name="newUsername"></param>
		/// <returns></returns>
		Task ChangeUsernameAndEmailAsync(Guid uaoId,String newUsername);

		/// <param name="uaoId"></param>
		/// <param name="newUsername"></param>
		/// <returns></returns>
		void ChangeUsernameAndEmail(Guid uaoId,String newUsername);
	}

}
#endregion

#region Clients
namespace Bec.TargetFramework.Business.Client.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode) return;
													
			if (response.Content == null)
                throw new NullReferenceException("HttpResponseMessage Content is null");
            else
            {
                HttpError he;
                try
                {
                    he = await response.Content.ReadAsAsync<HttpError>();
                }
                catch (Exception ex)
                {
                    Task<string> incorrectMessageTask = Task.Run(() => response.Content.ReadAsStringAsync());
                    throw new Exception(incorrectMessageTask.Result, ex);
                }
				if (he.ContainsKey("ExceptionMessage"))
					throw new Exception(he["ExceptionMessage"].ToString());
				else if (he.ContainsKey("Message"))
					throw new Exception(he["Message"].ToString());
				else
				throw new Exception(he.Keys.Dump() + ": " + he.Values.Dump());
            }		
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}

        protected async Task DeleteAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Delete, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task DeleteAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Delete, user, null);
            await EnsureSuccessAsync(response);
        }

		protected async Task<Tret> PostAsync<Tbody, Tret>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            return await HandleResponse<Tret>(response);
        }

		protected async Task PostAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task<Tret> GetAsync<Tret>(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            return await HandleResponse<Tret>(response);
        }

		protected async Task GetAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            await EnsureSuccessAsync(response);
        }

		private async Task<T> HandleResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccessAsync(response);
            return await response.ReadContentAsAsync<T>();
        }

        private Task<HttpResponseMessage> SendAsync<T>(string requestUri, HttpMethod method, string user, T value)
        {
            var req = new HttpRequestMessage
            {
                RequestUri = new Uri(requestUri, UriKind.RelativeOrAbsolute),
                Method = method
            };
            if (value != null) req.Content = new ObjectContent<T>(value, new JsonMediaTypeFormatter(), (MediaTypeHeaderValue)null);
            if (user != null) req.Headers.Add("User", user);
            return HttpClient.SendAsync(req);
        }

        protected string getHttpContextUser()
        {
            if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null)
                return HttpContext.Current.User.Identity.Name;
            else
                return null;
        }

		protected string mapArray<T>(string name, T[] values)
        {
            return string.Concat(values.Select(v => "&" + name + "=" + v.ToString()));
        }
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class AddressLogicClient : ClientBase, Interfaces.IAddressLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public AddressLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public AddressLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		public virtual Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber)
		{
			postCode = postCode.UrlEncode();
			buildingNameOrNumber = buildingNameOrNumber.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, List<PostCodeDTO>>("api/AddressLogic/FindAddressesByPostCodeAsync?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		public virtual List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber)
		{
			postCode = postCode.UrlEncode();
			buildingNameOrNumber = buildingNameOrNumber.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<PostCodeDTO>>("api/AddressLogic/FindAddressesByPostCodeAsync?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <returns></returns>
		public virtual Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode)
		{
			postCode = postCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, GoogleGeoCodeResponse>("api/AddressLogic/GeoCodePostcodeAsync?postCode=" + postCode, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		public virtual GoogleGeoCodeResponse GeoCodePostcode(String postCode)
		{
			postCode = postCode.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, GoogleGeoCodeResponse>("api/AddressLogic/GeoCodePostcodeAsync?postCode=" + postCode, null, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ClassificationDataLogicClient : ClientBase, Interfaces.IClassificationDataLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<List<CountryCodeDTO>> GetCountriesAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CountryCodeDTO> GetCountries()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName)
		{
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		public virtual List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName)
		{
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		public virtual Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		public virtual List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			categoryName = categoryName.UrlEncode();
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
			categoryName = categoryName.UrlEncode();
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class InvoiceLogicClient : ClientBase, Interfaces.IInvoiceLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public InvoiceLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public InvoiceLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		public virtual Task<Boolean> DoesInvoiceExistForShoppingCartAsync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/InvoiceLogic/DoesInvoiceExistForShoppingCart?shoppingCartId=" + shoppingCartId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="shoppingCartId"></param>
		public virtual Boolean DoesInvoiceExistForShoppingCart(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/InvoiceLogic/DoesInvoiceExistForShoppingCart?shoppingCartId=" + shoppingCartId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<VOrganisationDetailDTO> GetPaymentProviderOrganisationDetailAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<VOrganisationDetailDTO>("api/InvoiceLogic/GetPaymentProviderOrganisationDetail", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual VOrganisationDetailDTO GetPaymentProviderOrganisationDetail()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationDetailDTO>("api/InvoiceLogic/GetPaymentProviderOrganisationDetail", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task<VInvoiceWithCurrentTransactionOrderStatusDTO> GetInvoiceWithCurrentTransactionOrderStatusAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return GetAsync<VInvoiceWithCurrentTransactionOrderStatusDTO>("api/InvoiceLogic/GetInvoiceWithCurrentTransactionOrderStatus?invoiceID=" + invoiceID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual VInvoiceWithCurrentTransactionOrderStatusDTO GetInvoiceWithCurrentTransactionOrderStatus(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VInvoiceWithCurrentTransactionOrderStatusDTO>("api/InvoiceLogic/GetInvoiceWithCurrentTransactionOrderStatus?invoiceID=" + invoiceID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="shoppingCartId"></param>
		/// <returns></returns>
		public virtual Task<InvoiceDTO> GetInvoiceForShoppingCartAsync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return GetAsync<InvoiceDTO>("api/InvoiceLogic/GetInvoiceForShoppingCart?shoppingCartId=" + shoppingCartId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="shoppingCartId"></param>
		public virtual InvoiceDTO GetInvoiceForShoppingCart(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<InvoiceDTO>("api/InvoiceLogic/GetInvoiceForShoppingCart?shoppingCartId=" + shoppingCartId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="reference"></param>
		/// <returns></returns>
		public virtual Task<InvoiceDTO> CreateAndSaveInvoiceFromShoppingCartAsync(Guid cartID,String reference)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, InvoiceDTO>("api/InvoiceLogic/CreateAndSaveInvoiceFromShoppingCartAsync?cartID=" + cartID + "&reference=" + reference, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="reference"></param>
		public virtual InvoiceDTO CreateAndSaveInvoiceFromShoppingCart(Guid cartID,String reference)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, InvoiceDTO>("api/InvoiceLogic/CreateAndSaveInvoiceFromShoppingCartAsync?cartID=" + cartID + "&reference=" + reference, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task DeleteInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return DeleteAsync("api/InvoiceLogic/DeleteInvoiceAsync?invoiceID=" + invoiceID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void DeleteInvoice(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/InvoiceLogic/DeleteInvoiceAsync?invoiceID=" + invoiceID, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task FreezeInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/FreezeInvoiceAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void FreezeInvoice(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/FreezeInvoiceAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task CloseInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/CloseInvoiceAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void CloseInvoice(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/CloseInvoiceAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceWithAccountingStatusAsync(Guid invoiceID,InvoiceAccountingStatusIDEnum value)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceWithAccountingStatusAsync?invoiceID=" + invoiceID + "&value=" + value, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <param name="value"></param>
		public virtual void MarkInvoiceWithAccountingStatus(Guid invoiceID,InvoiceAccountingStatusIDEnum value)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceWithAccountingStatusAsync?invoiceID=" + invoiceID + "&value=" + value, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsPaidAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaidAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsPaid(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaidAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsUnpaidAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsUnpaidAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsUnpaid(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsUnpaidAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsCancelledAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsCancelledAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsCancelled(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsCancelledAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsProcessingAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsProcessingAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsProcessing(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsProcessingAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsPaymentDueAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentDueAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsPaymentDue(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentDueAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsActiveAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsActiveAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsActive(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsActiveAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <returns></returns>
		public virtual Task MarkInvoiceAsPaymentScheduledAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentScheduledAsync?invoiceID=" + invoiceID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		public virtual void MarkInvoiceAsPaymentScheduled(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentScheduledAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class NotificationLogicClient : ClientBase, Interfaces.INotificationLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		public virtual Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		public virtual Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task SaveNotificationAsync(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<NotificationDTO>("api/NotificationLogic/SaveNotificationAsync", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveNotification(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<NotificationDTO>("api/NotificationLogic/SaveNotificationAsync", dto, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		public virtual Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		public virtual List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		public virtual Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		public virtual List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name)
		{
			name = name.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name)
		{
			name = name.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		public virtual Task<IEnumerable<VDefaultEmailAddressDTO>> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, IEnumerable<VDefaultEmailAddressDTO>>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		public virtual IEnumerable<VDefaultEmailAddressDTO> RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<VDefaultEmailAddressDTO>>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual Task<List<VNotificationViewOnlyUaoDTO>> GetLatestInternalAsync(Guid userAccountOrganisationId,Int32 count)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetLatestInternal?userAccountOrganisationId=" + userAccountOrganisationId + "&count=" + count, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="count"></param>
		public virtual List<VNotificationViewOnlyUaoDTO> GetLatestInternal(Guid userAccountOrganisationId,Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetLatestInternal?userAccountOrganisationId=" + userAccountOrganisationId + "&count=" + count, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationId"></param>
		/// <returns></returns>
		public virtual Task<List<VNotificationViewOnlyUaoDTO>> GetInternalAsync(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetInternal?userAccountOrganisationId=" + userAccountOrganisationId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationId"></param>
		public virtual List<VNotificationViewOnlyUaoDTO> GetInternal(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetInternal?userAccountOrganisationId=" + userAccountOrganisationId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationId"></param>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="notificationExportFormat"></param>
		/// <returns></returns>
		public virtual Task<NotificationContentDTO> GetNotificationContentAsync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationContentDTO>("api/NotificationLogic/GetNotificationContent?notificationId=" + notificationId + "&userAccountOrganisationId=" + userAccountOrganisationId + "&notificationExportFormat=" + notificationExportFormat, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationId"></param>
		/// <param name="userAccountOrganisationId"></param>
		/// <param name="notificationExportFormat"></param>
		public virtual NotificationContentDTO GetNotificationContent(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationContentDTO>("api/NotificationLogic/GetNotificationContent?notificationId=" + notificationId + "&userAccountOrganisationId=" + userAccountOrganisationId + "&notificationExportFormat=" + notificationExportFormat, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="types"></param>
		/// <returns></returns>
		public virtual Task<List<VNotificationInternalUnreadDTO>> GetUnreadNotificationsAsync(Guid userId,NotificationConstructEnum[] types)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationInternalUnreadDTO>>("api/NotificationLogic/GetUnreadNotifications?userId=" + userId + mapArray("types", types), _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="types"></param>
		public virtual List<VNotificationInternalUnreadDTO> GetUnreadNotifications(Guid userId,NotificationConstructEnum[] types)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationInternalUnreadDTO>>("api/NotificationLogic/GetUnreadNotifications?userId=" + userId + mapArray("types", types), _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual Task<NotificationResultDTO> GetTcAndCsTextAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationResultDTO>("api/NotificationLogic/GetTcAndCsText?accountID=" + accountID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual NotificationResultDTO GetTcAndCsText(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationResultDTO>("api/NotificationLogic/GetTcAndCsText?accountID=" + accountID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual Task<Byte[]> RetrieveNotificationConstructDataAsync(Guid notificationConstructID,Int32 versionNumber,DTOMap data)
		{
			string _user = getHttpContextUser();
			return PostAsync<DTOMap, Byte[]>("api/NotificationLogic/RetrieveNotificationConstructData?notificationConstructID=" + notificationConstructID + "&versionNumber=" + versionNumber, data, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual Byte[] RetrieveNotificationConstructData(Guid notificationConstructID,Int32 versionNumber,DTOMap data)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<DTOMap, Byte[]>("api/NotificationLogic/RetrieveNotificationConstructData?notificationConstructID=" + notificationConstructID + "&versionNumber=" + versionNumber, data, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationID"></param>
		/// <returns></returns>
		public virtual Task MarkAcceptedAsync(Guid notificationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/MarkAcceptedAsync?notificationID=" + notificationID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="notificationID"></param>
		public virtual void MarkAccepted(Guid notificationID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/MarkAcceptedAsync?notificationID=" + notificationID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventStatusID"></param>
		/// <param name="status"></param>
		/// <param name="recipients"></param>
		/// <param name="subject"></param>
		/// <param name="body"></param>
		/// <returns></returns>
		public virtual Task UpdateEventStatusAsync(Guid eventStatusID,String status,String recipients,String subject,String body)
		{
			status = status.UrlEncode();
			recipients = recipients.UrlEncode();
			subject = subject.UrlEncode();
			body = body.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/UpdateEventStatusAsync?eventStatusID=" + eventStatusID + "&status=" + status + "&recipients=" + recipients + "&subject=" + subject + "&body=" + body, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventStatusID"></param>
		/// <param name="status"></param>
		/// <param name="recipients"></param>
		/// <param name="subject"></param>
		/// <param name="body"></param>
		public virtual void UpdateEventStatus(Guid eventStatusID,String status,String recipients,String subject,String body)
		{
			status = status.UrlEncode();
			recipients = recipients.UrlEncode();
			subject = subject.UrlEncode();
			body = body.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/UpdateEventStatusAsync?eventStatusID=" + eventStatusID + "&status=" + status + "&recipients=" + recipients + "&subject=" + subject + "&body=" + body, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <param name="eventReference"></param>
		/// <returns></returns>
		public virtual Task<List<EventStatusDTO>> GetEventStatusAsync(String eventName,String eventReference)
		{
			eventName = eventName.UrlEncode();
			eventReference = eventReference.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<EventStatusDTO>>("api/NotificationLogic/GetEventStatus?eventName=" + eventName + "&eventReference=" + eventReference, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <param name="eventReference"></param>
		public virtual List<EventStatusDTO> GetEventStatus(String eventName,String eventReference)
		{
			eventName = eventName.UrlEncode();
			eventReference = eventReference.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<EventStatusDTO>>("api/NotificationLogic/GetEventStatus?eventName=" + eventName + "&eventReference=" + eventReference, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <param name="organisationId"></param>
		/// <param name="notificationConstructEnum"></param>
		/// <returns></returns>
		public virtual Task PublishNewInternalMessagesNotificationEventAsync(Int32 count,Guid organisationId,NotificationConstructEnum notificationConstructEnum)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/PublishNewInternalMessagesNotificationEvent?count=" + count + "&organisationId=" + organisationId + "&notificationConstructEnum=" + notificationConstructEnum, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <param name="organisationId"></param>
		/// <param name="notificationConstructEnum"></param>
		public virtual void PublishNewInternalMessagesNotificationEvent(Int32 count,Guid organisationId,NotificationConstructEnum notificationConstructEnum)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/PublishNewInternalMessagesNotificationEvent?count=" + count + "&organisationId=" + organisationId + "&notificationConstructEnum=" + notificationConstructEnum, null, _user)).Wait();
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class OrganisationLogicClient : ClientBase, Interfaces.IOrganisationLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		public virtual Task<Boolean> HasOrganisationAnySafeBankAccountAsync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/HasOrganisationAnySafeBankAccount?organisationID=" + organisationID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		public virtual Boolean HasOrganisationAnySafeBankAccount(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/HasOrganisationAnySafeBankAccount?organisationID=" + organisationID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="days"></param>
		/// <param name="hours"></param>
		/// <param name="minutes"></param>
		/// <returns></returns>
		public virtual Task ExpireTemporaryLoginsAsync(Int32 days,Int32 hours,Int32 minutes)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ExpireTemporaryLoginsAsync?days=" + days + "&hours=" + hours + "&minutes=" + minutes, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="days"></param>
		/// <param name="hours"></param>
		/// <param name="minutes"></param>
		public virtual void ExpireTemporaryLogins(Int32 days,Int32 hours,Int32 minutes)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ExpireTemporaryLoginsAsync?days=" + days + "&hours=" + hours + "&minutes=" + minutes, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <returns></returns>
		public virtual Task ExpireUserAccountOrganisationAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ExpireUserAccountOrganisationAsync?uaoID=" + uaoID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		public virtual void ExpireUserAccountOrganisation(Guid uaoID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ExpireUserAccountOrganisationAsync?uaoID=" + uaoID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="regulatorNumber"></param>
		/// <returns></returns>
		public virtual Task<Boolean> IsOrganisationInSystemAsync(String regulatorNumber)
		{
			regulatorNumber = regulatorNumber.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/IsOrganisationInSystem?regulatorNumber=" + regulatorNumber, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="regulatorNumber"></param>
		public virtual Boolean IsOrganisationInSystem(String regulatorNumber)
		{
			regulatorNumber = regulatorNumber.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/IsOrganisationInSystem?regulatorNumber=" + regulatorNumber, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task RejectOrganisationAsync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisationAsync", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void RejectOrganisation(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisationAsync", dto, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		public virtual Task ActivateOrganisationAsync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ActivateOrganisationAsync?organisationID=" + organisationID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		public virtual void ActivateOrganisation(Guid organisationID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ActivateOrganisationAsync?organisationID=" + organisationID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		/// <returns></returns>
		public virtual Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		public virtual List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		/// <returns></returns>
		public virtual Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministratorAsync?organisationType=" + organisationType, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		public virtual Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministratorAsync?organisationType=" + organisationType, dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userTypeValue"></param>
		/// <param name="addDefaultRoles"></param>
		/// <param name="roles"></param>
		/// <returns></returns>
		public virtual Task<UserAccountOrganisationDTO> AddNewUserToOrganisationAsync(Guid organisationID,UserTypeEnum userTypeValue,Boolean addDefaultRoles,Guid[] roles,ContactDTO userContactDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<ContactDTO, UserAccountOrganisationDTO>("api/OrganisationLogic/AddNewUserToOrganisationAsync?organisationID=" + organisationID + "&userTypeValue=" + userTypeValue + "&addDefaultRoles=" + addDefaultRoles + mapArray("roles", roles), userContactDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userTypeValue"></param>
		/// <param name="addDefaultRoles"></param>
		/// <param name="roles"></param>
		public virtual UserAccountOrganisationDTO AddNewUserToOrganisation(Guid organisationID,UserTypeEnum userTypeValue,Boolean addDefaultRoles,Guid[] roles,ContactDTO userContactDto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<ContactDTO, UserAccountOrganisationDTO>("api/OrganisationLogic/AddNewUserToOrganisationAsync?organisationID=" + organisationID + "&userTypeValue=" + userTypeValue + "&addDefaultRoles=" + addDefaultRoles + mapArray("roles", roles), userContactDto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <returns></returns>
		public virtual Task AddPersonalDetailsAsync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddPersonalDetailsDTO>("api/OrganisationLogic/AddPersonalDetails?uaoId=" + uaoId, addPersonalDetailsDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		public virtual void AddPersonalDetails(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<AddPersonalDetailsDTO>("api/OrganisationLogic/AddPersonalDetails?uaoId=" + uaoId, addPersonalDetailsDto, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <returns></returns>
		public virtual Task<Boolean> RequiresPersonalDetailsAsync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/RequiresPersonalDetails?uaoId=" + uaoId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		public virtual Boolean RequiresPersonalDetails(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/RequiresPersonalDetails?uaoId=" + uaoId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userOrgID"></param>
		/// <param name="type"></param>
		/// <returns></returns>
		public virtual Task CreateTsAndCsNotificationAsync(Guid userOrgID,NotificationConstructEnum type)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/CreateTsAndCsNotificationAsync?userOrgID=" + userOrgID + "&type=" + type, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userOrgID"></param>
		/// <param name="type"></param>
		public virtual void CreateTsAndCsNotification(Guid userOrgID,NotificationConstructEnum type)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/CreateTsAndCsNotificationAsync?userOrgID=" + userOrgID + "&type=" + type, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> GetTemporaryOrganisationBranchID()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id)
		{
			string _user = getHttpContextUser();
			return GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO?id=" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual VOrganisationDTO GetOrganisationDTO(Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO?id=" + id, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="enumType"></param>
		/// <param name="status"></param>
		/// <param name="reason"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		public virtual Task AddOrganisationStatusAsync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/AddOrganisationStatusAsync?orgID=" + orgID + "&enumType=" + enumType + "&status=" + status + "&reason=" + reason + "&notes=" + notes, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="enumType"></param>
		/// <param name="status"></param>
		/// <param name="reason"></param>
		/// <param name="notes"></param>
		public virtual void AddOrganisationStatus(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/AddOrganisationStatusAsync?orgID=" + orgID + "&enumType=" + enumType + "&status=" + status + "&reason=" + reason + "&notes=" + notes, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual Task<Boolean> CheckDuplicateUserSmsTransactionAsync(Guid orgID,String email,SmsTransactionDTO dto)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<SmsTransactionDTO, Boolean>("api/OrganisationLogic/CheckDuplicateUserSmsTransaction?orgID=" + orgID + "&email=" + email, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="email"></param>
		public virtual Boolean CheckDuplicateUserSmsTransaction(Guid orgID,String email,SmsTransactionDTO dto)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<SmsTransactionDTO, Boolean>("api/OrganisationLogic/CheckDuplicateUserSmsTransaction?orgID=" + orgID + "&email=" + email, dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="salutation"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="email"></param>
		/// <param name="birthDate"></param>
		/// <returns></returns>
		public virtual Task<Guid> AddSmsClientAsync(Guid orgID,Guid uaoID,String salutation,String firstName,String lastName,String email,DateTime birthDate)
		{
			salutation = salutation.UrlEncode();
			firstName = firstName.UrlEncode();
			lastName = lastName.UrlEncode();
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Guid>("api/OrganisationLogic/AddSmsClient?orgID=" + orgID + "&uaoID=" + uaoID + "&salutation=" + salutation + "&firstName=" + firstName + "&lastName=" + lastName + "&email=" + email + "&birthDate=" + birthDate.ToString("O"), null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="salutation"></param>
		/// <param name="firstName"></param>
		/// <param name="lastName"></param>
		/// <param name="email"></param>
		/// <param name="birthDate"></param>
		public virtual Guid AddSmsClient(Guid orgID,Guid uaoID,String salutation,String firstName,String lastName,String email,DateTime birthDate)
		{
			salutation = salutation.UrlEncode();
			firstName = firstName.UrlEncode();
			lastName = lastName.UrlEncode();
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Guid>("api/OrganisationLogic/AddSmsClient?orgID=" + orgID + "&uaoID=" + uaoID + "&salutation=" + salutation + "&firstName=" + firstName + "&lastName=" + lastName + "&email=" + email + "&birthDate=" + birthDate.ToString("O"), null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="buyerUaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <returns></returns>
		public virtual Task<Guid> PurchaseProductAsync(Guid orgID,Guid uaoID,Guid buyerUaoID,Guid productID,Int32 productVersion,SmsTransactionDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<SmsTransactionDTO, Guid>("api/OrganisationLogic/PurchaseProduct?orgID=" + orgID + "&uaoID=" + uaoID + "&buyerUaoID=" + buyerUaoID + "&productID=" + productID + "&productVersion=" + productVersion, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="uaoID"></param>
		/// <param name="buyerUaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		public virtual Guid PurchaseProduct(Guid orgID,Guid uaoID,Guid buyerUaoID,Guid productID,Int32 productVersion,SmsTransactionDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<SmsTransactionDTO, Guid>("api/OrganisationLogic/PurchaseProduct?orgID=" + orgID + "&uaoID=" + uaoID + "&buyerUaoID=" + buyerUaoID + "&productID=" + productID + "&productVersion=" + productVersion, dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="accountNumber"></param>
		/// <param name="sortCode"></param>
		/// <returns></returns>
		public virtual Task UpdateSmsUserAccountOrganisationTransactionAsync(Guid uaoID,String accountNumber,String sortCode,SmsUserAccountOrganisationTransactionDTO dto)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<SmsUserAccountOrganisationTransactionDTO>("api/OrganisationLogic/UpdateSmsUserAccountOrganisationTransactionAsync?uaoID=" + uaoID + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="accountNumber"></param>
		/// <param name="sortCode"></param>
		public virtual void UpdateSmsUserAccountOrganisationTransaction(Guid uaoID,String accountNumber,String sortCode,SmsUserAccountOrganisationTransactionDTO dto)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<SmsUserAccountOrganisationTransactionDTO>("api/OrganisationLogic/UpdateSmsUserAccountOrganisationTransactionAsync?uaoID=" + uaoID + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, dto, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task AssignSmsClientToTransactionAsync(AssignSmsClientToTransactionDTO assignSmsClientToTransactionDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<AssignSmsClientToTransactionDTO>("api/OrganisationLogic/AssignSmsClientToTransaction", assignSmsClientToTransactionDTO, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AssignSmsClientToTransaction(AssignSmsClientToTransactionDTO assignSmsClientToTransactionDTO)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<AssignSmsClientToTransactionDTO>("api/OrganisationLogic/AssignSmsClientToTransaction", assignSmsClientToTransactionDTO, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <returns></returns>
		public virtual Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOrganisationBankAccountsAsync(Guid orgID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/OrganisationLogic/GetOrganisationBankAccounts?orgID=" + orgID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		public virtual List<VOrganisationBankAccountsWithStatusDTO> GetOrganisationBankAccounts(Guid orgID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/OrganisationLogic/GetOrganisationBankAccounts?orgID=" + orgID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOutstandingBankAccountsAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/OrganisationLogic/GetOutstandingBankAccounts", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VOrganisationBankAccountsWithStatusDTO> GetOutstandingBankAccounts()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/OrganisationLogic/GetOutstandingBankAccounts", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <returns></returns>
		public virtual Task<Guid> AddBankAccountAsync(Guid orgID,OrganisationBankAccountDTO accountDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrganisationBankAccountDTO, Guid>("api/OrganisationLogic/AddBankAccount?orgID=" + orgID, accountDTO, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		public virtual Guid AddBankAccount(Guid orgID,OrganisationBankAccountDTO accountDTO)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<OrganisationBankAccountDTO, Guid>("api/OrganisationLogic/AddBankAccount?orgID=" + orgID, accountDTO, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task AddBankAccountStatusAsync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrganisationBankAccountStateChangeDTO>("api/OrganisationLogic/AddBankAccountStatusAsync", bankAccountStatusChangeRequest, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddBankAccountStatus(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<OrganisationBankAccountStateChangeDTO>("api/OrganisationLogic/AddBankAccountStatusAsync", bankAccountStatusChangeRequest, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="baID"></param>
		/// <param name="active"></param>
		/// <param name="notes"></param>
		/// <returns></returns>
		public virtual Task ToggleBankAccountActiveAsync(Guid orgID,Guid baID,Boolean active,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ToggleBankAccountActive?orgID=" + orgID + "&baID=" + baID + "&active=" + active + "&notes=" + notes, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="baID"></param>
		/// <param name="active"></param>
		/// <param name="notes"></param>
		public virtual void ToggleBankAccountActive(Guid orgID,Guid baID,Boolean active,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ToggleBankAccountActive?orgID=" + orgID + "&baID=" + baID + "&active=" + active + "&notes=" + notes, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="transactionOrderID"></param>
		/// <param name="uaoID"></param>
		/// <param name="amount"></param>
		/// <param name="rowVersion"></param>
		/// <returns></returns>
		public virtual Task AddCreditAsync(Guid orgID,Guid transactionOrderID,Guid uaoID,Decimal amount,Nullable<Int64> rowVersion)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/AddCreditAsync?orgID=" + orgID + "&transactionOrderID=" + transactionOrderID + "&uaoID=" + uaoID + "&amount=" + amount + "&rowVersion=" + rowVersion, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <param name="transactionOrderID"></param>
		/// <param name="uaoID"></param>
		/// <param name="amount"></param>
		/// <param name="rowVersion"></param>
		public virtual void AddCredit(Guid orgID,Guid transactionOrderID,Guid uaoID,Decimal amount,Nullable<Int64> rowVersion)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/AddCreditAsync?orgID=" + orgID + "&transactionOrderID=" + transactionOrderID + "&uaoID=" + uaoID + "&amount=" + amount + "&rowVersion=" + rowVersion, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		/// <returns></returns>
		public virtual Task<Guid> GetCreditAccountIdAsync(Guid orgID)
		{
			string _user = getHttpContextUser();
			return GetAsync<Guid>("api/OrganisationLogic/GetCreditAccountId?orgID=" + orgID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgID"></param>
		public virtual Guid GetCreditAccountId(Guid orgID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Guid>("api/OrganisationLogic/GetCreditAccountId?orgID=" + orgID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual Task<OrganisationLedgerAccountDTO> GetCreditAccountAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return GetAsync<OrganisationLedgerAccountDTO>("api/OrganisationLogic/GetCreditAccount?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual OrganisationLedgerAccountDTO GetCreditAccount(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<OrganisationLedgerAccountDTO>("api/OrganisationLogic/GetCreditAccount?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="date"></param>
		/// <returns></returns>
		public virtual Task<Decimal> GetBalanceAsAtAsync(Guid accountID,DateTime date)
		{
			string _user = getHttpContextUser();
			return GetAsync<Decimal>("api/OrganisationLogic/GetBalanceAsAt?accountID=" + accountID + "&date=" + date.ToString("O"), _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="date"></param>
		public virtual Decimal GetBalanceAsAt(Guid accountID,DateTime date)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Decimal>("api/OrganisationLogic/GetBalanceAsAt?accountID=" + accountID + "&date=" + date.ToString("O"), _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class PaymentLogicClient : ClientBase, Interfaces.IPaymentLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public PaymentLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public PaymentLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		public virtual Task<TransactionOrderPaymentDTO> GetTheSuccessfulOrderPaymentForTransactionOrderAsync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return GetAsync<TransactionOrderPaymentDTO>("api/PaymentLogic/GetTheSuccessfulOrderPaymentForTransactionOrder?transactionOrderId=" + transactionOrderId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="transactionOrderId"></param>
		public virtual TransactionOrderPaymentDTO GetTheSuccessfulOrderPaymentForTransactionOrder(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<TransactionOrderPaymentDTO>("api/PaymentLogic/GetTheSuccessfulOrderPaymentForTransactionOrder?transactionOrderId=" + transactionOrderId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="transactionOrderId"></param>
		/// <returns></returns>
		public virtual Task<Boolean> DoesASuccessfulOrderPaymentExistForTransactionOrderAsync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/PaymentLogic/DoesASuccessfulOrderPaymentExistForTransactionOrder?transactionOrderId=" + transactionOrderId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="transactionOrderId"></param>
		public virtual Boolean DoesASuccessfulOrderPaymentExistForTransactionOrder(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/PaymentLogic/DoesASuccessfulOrderPaymentExistForTransactionOrder?transactionOrderId=" + transactionOrderId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<TransactionOrderPaymentDTO> ProcessPaymentTransactionAsync(OrderRequestDTO request)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/PaymentLogic/ProcessPaymentTransaction", request, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual TransactionOrderPaymentDTO ProcessPaymentTransaction(OrderRequestDTO request)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/PaymentLogic/ProcessPaymentTransaction", request, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <param name="cardType"></param>
		/// <param name="methodType"></param>
		/// <param name="reference"></param>
		/// <param name="amount"></param>
		/// <returns></returns>
		public virtual Task<Guid> PurchaseProductAsync(Guid uaoID,Guid productID,Int32 productVersion,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,String reference,Nullable<Decimal> amount)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Guid>("api/PaymentLogic/PurchaseProduct?uaoID=" + uaoID + "&productID=" + productID + "&productVersion=" + productVersion + "&cardType=" + cardType + "&methodType=" + methodType + "&reference=" + reference + "&amount=" + amount, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="productID"></param>
		/// <param name="productVersion"></param>
		/// <param name="cardType"></param>
		/// <param name="methodType"></param>
		/// <param name="reference"></param>
		/// <param name="amount"></param>
		public virtual Guid PurchaseProduct(Guid uaoID,Guid productID,Int32 productVersion,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,String reference,Nullable<Decimal> amount)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Guid>("api/PaymentLogic/PurchaseProduct?uaoID=" + uaoID + "&productID=" + productID + "&productVersion=" + productVersion + "&cardType=" + cardType + "&methodType=" + methodType + "&reference=" + reference + "&amount=" + amount, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task AmendCreditAsync(CreditAdjustmentDTO creditAdjustmentDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<CreditAdjustmentDTO>("api/PaymentLogic/AmendCredit", creditAdjustmentDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AmendCredit(CreditAdjustmentDTO creditAdjustmentDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<CreditAdjustmentDTO>("api/PaymentLogic/AmendCredit", creditAdjustmentDto, _user)).Wait();
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ProductLogicClient : ClientBase, Interfaces.IProductLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public ProductLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ProductLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<ProductDTO> GetTopUpProductAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<ProductDTO>("api/ProductLogic/GetTopUpProduct", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ProductDTO GetTopUpProduct()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ProductDTO>("api/ProductLogic/GetTopUpProduct", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<ProductDTO> GetBankAccountCheckProductAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<ProductDTO>("api/ProductLogic/GetBankAccountCheckProduct", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ProductDTO GetBankAccountCheckProduct()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ProductDTO>("api/ProductLogic/GetBankAccountCheckProduct", _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ShoppingCartLogicClient : ClientBase, Interfaces.IShoppingCartLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public ShoppingCartLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ShoppingCartLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="cardTypeEnum"></param>
		/// <param name="paymentTypeEnum"></param>
		/// <param name="countryCode"></param>
		/// <returns></returns>
		public virtual Task<ShoppingCartDTO> CreateShoppingCartAsync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode)
		{
			countryCode = countryCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, ShoppingCartDTO>("api/ShoppingCartLogic/CreateShoppingCartAsync?userAccountOrganisationID=" + userAccountOrganisationID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum + "&countryCode=" + countryCode, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="cardTypeEnum"></param>
		/// <param name="paymentTypeEnum"></param>
		/// <param name="countryCode"></param>
		public virtual ShoppingCartDTO CreateShoppingCart(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode)
		{
			countryCode = countryCode.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, ShoppingCartDTO>("api/ShoppingCartLogic/CreateShoppingCartAsync?userAccountOrganisationID=" + userAccountOrganisationID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum + "&countryCode=" + countryCode, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="productID"></param>
		/// <param name="versionNumber"></param>
		/// <param name="quantity"></param>
		/// <param name="customerPrice"></param>
		/// <returns></returns>
		public virtual Task AddProductToShoppingCartAsync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/ShoppingCartLogic/AddProductToShoppingCartAsync?cartID=" + cartID + "&productID=" + productID + "&versionNumber=" + versionNumber + "&quantity=" + quantity + "&customerPrice=" + customerPrice, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="productID"></param>
		/// <param name="versionNumber"></param>
		/// <param name="quantity"></param>
		/// <param name="customerPrice"></param>
		public virtual void AddProductToShoppingCart(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/ShoppingCartLogic/AddProductToShoppingCartAsync?cartID=" + cartID + "&productID=" + productID + "&versionNumber=" + versionNumber + "&quantity=" + quantity + "&customerPrice=" + customerPrice, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="itemID"></param>
		/// <returns></returns>
		public virtual Task RemoveProductFromShoppingCartAsync(Guid cartID,Guid itemID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/ShoppingCartLogic/RemoveProductFromShoppingCart?cartID=" + cartID + "&itemID=" + itemID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="cartID"></param>
		/// <param name="itemID"></param>
		public virtual void RemoveProductFromShoppingCart(Guid cartID,Guid itemID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/ShoppingCartLogic/RemoveProductFromShoppingCart?cartID=" + cartID + "&itemID=" + itemID, null, _user)).Wait();
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TFSettingsLogicClient : ClientBase, Interfaces.ITFSettingsLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public TFSettingsLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TFSettingsLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<Dictionary<String, String>> GetSettingsAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<Dictionary<String, String>>("api/TFSettingsLogic/GetSettings", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, String> GetSettings()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Dictionary<String, String>>("api/TFSettingsLogic/GetSettings", _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TransactionOrderLogicClient : ClientBase, Interfaces.ITransactionOrderLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public TransactionOrderLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TransactionOrderLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual Task<TransactionOrderDTO> GetTransactionForInvoiceAsync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return GetAsync<TransactionOrderDTO>("api/TransactionOrderLogic/GetTransactionForInvoice?invoiceId=" + invoiceId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual TransactionOrderDTO GetTransactionForInvoice(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<TransactionOrderDTO>("api/TransactionOrderLogic/GetTransactionForInvoice?invoiceId=" + invoiceId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceId"></param>
		/// <returns></returns>
		public virtual Task<Boolean> DoesTransactionExistForInvoiceAsync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/TransactionOrderLogic/DoesTransactionExistForInvoice?invoiceId=" + invoiceId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceId"></param>
		public virtual Boolean DoesTransactionExistForInvoice(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/TransactionOrderLogic/DoesTransactionExistForInvoice?invoiceId=" + invoiceId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <param name="typeEnumValue"></param>
		/// <returns></returns>
		public virtual Task<TransactionOrderDTO> CreateAndSaveTransactionOrderFromShoppingCartDTOAsync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, TransactionOrderDTO>("api/TransactionOrderLogic/CreateAndSaveTransactionOrderFromShoppingCartDTO?invoiceID=" + invoiceID + "&typeEnumValue=" + typeEnumValue, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="invoiceID"></param>
		/// <param name="typeEnumValue"></param>
		public virtual TransactionOrderDTO CreateAndSaveTransactionOrderFromShoppingCartDTO(Guid invoiceID,TransactionTypeIDEnum typeEnumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, TransactionOrderDTO>("api/TransactionOrderLogic/CreateAndSaveTransactionOrderFromShoppingCartDTO?invoiceID=" + invoiceID + "&typeEnumValue=" + typeEnumValue, null, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class UserAccountAuditLogicClient : ClientBase, Interfaces.IUserAccountAuditLogicClient	{		

		/// <summary>
		/// 
		/// </summary>
		public UserAccountAuditLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public UserAccountAuditLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		/// <returns></returns>
		public virtual Task CreateAndSaveAuditAsync(String requestData,WebUserObject wuo)
		{
			requestData = requestData.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<WebUserObject>("api/UserAccountAuditLogic/CreateAndSaveAudit?requestData=" + requestData, wuo, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="requestData"></param>
		public virtual void CreateAndSaveAudit(String requestData,WebUserObject wuo)
		{
			requestData = requestData.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<WebUserObject>("api/UserAccountAuditLogic/CreateAndSaveAudit?requestData=" + requestData, wuo, _user)).Wait();
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class UserLogicClient : ClientBase, Interfaces.IUserLogicClient, BrockAllen.MembershipReboot.AccountService.IPartialUserLogicController	{		

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual Task<UserLoginValidation> AuthenticateUserAsync(String username,String password)
		{
			username = username.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUser?username=" + username + "&password=" + password, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		public virtual UserLoginValidation AuthenticateUser(String username,String password)
		{
			username = username.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUser?username=" + username + "&password=" + password, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<ContactDTO> AddUserAsync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUserAsync", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ContactDTO AddUser(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUserAsync", dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <param name="registering"></param>
		/// <param name="pin"></param>
		/// <returns></returns>
		public virtual Task ResetUserPasswordAsync(Guid userID,String newPassword,Boolean registering,String pin)
		{
			newPassword = newPassword.UrlEncode();
			pin = pin.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/ResetUserPassword?userID=" + userID + "&newPassword=" + newPassword + "&registering=" + registering + "&pin=" + pin, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <param name="registering"></param>
		/// <param name="pin"></param>
		public virtual void ResetUserPassword(Guid userID,String newPassword,Boolean registering,String pin)
		{
			newPassword = newPassword.UrlEncode();
			pin = pin.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ResetUserPassword?userID=" + userID + "&newPassword=" + newPassword + "&registering=" + registering + "&pin=" + pin, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual Task<Boolean> HasPasswordExpiredAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean HasPasswordExpired(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		public virtual Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/LockOrUnlockUserAsync?userId=" + userId + "&lockUser=" + lockUser, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		public virtual void LockOrUnlockUser(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LockOrUnlockUserAsync?userId=" + userId + "&lockUser=" + lockUser, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual Task<Boolean> IsUserExistAsync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual Boolean IsUserExist(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual Task<Boolean> IsEmailExistAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual Boolean IsEmailExist(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <returns></returns>
		public virtual Task<Boolean> IsUserAccountRegisteredAsync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsUserAccountRegistered?uaoId=" + uaoId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		public virtual Boolean IsUserAccountRegistered(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsUserAccountRegistered?uaoId=" + uaoId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		/// <returns></returns>
		public virtual Task<IEnumerable<AddressDTO>> GetUserAddressesAsync(Guid contactID)
		{
			string _user = getHttpContextUser();
			return GetAsync<IEnumerable<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		public virtual IEnumerable<AddressDTO> GetUserAddresses(Guid contactID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<IEnumerable<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<List<UserAccount>> GetAllUserAccountAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccount", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserAccount> GetAllUserAccount()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccount", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual Task<UserAccount> GetUserAccountAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetUserAccount?key=" + key, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual UserAccount GetUserAccount(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetUserAccount?key=" + key, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual Task<UserAccount> GetBAUserAccountByEmailAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmail?email=" + email, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual UserAccount GetBAUserAccountByEmail(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmail?email=" + email, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotID?email=" + email + "&id=" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		public virtual UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotID?email=" + email + "&id=" + id, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		public virtual Task<UserAccount> GetBAUserAccountByUsernameAsync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsername?username=" + username, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		public virtual UserAccount GetBAUserAccountByUsername(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsername?username=" + username, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		public virtual Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		public virtual List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual UserAccountDTO GetUserAccountByUsername(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual Task<List<ContactDTO>> GetUserContactsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<ContactDTO> GetUserContacts(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual Task<List<UserAccount>> GetUserAccountsAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual List<UserAccount> GetUserAccounts(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<UserAccount> CreateUserAccountAsync()
		{
			string _user = getHttpContextUser();
			return PostAsync<object, UserAccount>("api/UserLogic/CreateUserAccount", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UserAccount CreateUserAccount()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateUserAccount", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task AddUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/AddUserAccountAsync", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/AddUserAccountAsync", user, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task RemoveUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/RemoveUserAccountAsync", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void RemoveUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/RemoveUserAccountAsync", user, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task UpdateUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/UpdateUserAccountAsync", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/UpdateUserAccountAsync", user, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		public virtual Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		public virtual List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <returns></returns>
		public virtual Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		public virtual ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		public virtual Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		public virtual VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual Task<List<String>> UserLoginSessionsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<String> UserLoginSessions(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual Task LogEveryoneElseOutAsync(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/LogEveryoneElseOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void LogEveryoneElseOut(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LogEveryoneElseOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		public virtual Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			sessionId = sessionId.UrlEncode();
			userHostAddress = userHostAddress.UrlEncode();
			userIdAddress = userIdAddress.UrlEncode();
			userLocation = userLocation.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/SaveUserAccountLoginSessionAsync?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		public virtual void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			sessionId = sessionId.UrlEncode();
			userHostAddress = userHostAddress.UrlEncode();
			userIdAddress = userIdAddress.UrlEncode();
			userLocation = userLocation.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SaveUserAccountLoginSessionAsync?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionDataAsync?userId=" + userId + "&sessionId=" + sessionId, requestData, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionDataAsync?userId=" + userId + "&sessionId=" + sessionId, requestData, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual Task<Boolean> DoesUserExistAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean DoesUserExist(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual UserAccountOrganisationDTO GetPermanentUAO(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual Guid GetPersonalUserAccountOrganisation(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual Task<UserAccount> CreateAccountAsync(String userName,String password,String email,Guid userId)
		{
			userName = userName.UrlEncode();
			password = password.UrlEncode();
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, UserAccount>("api/UserLogic/CreateAccountAsync?userName=" + userName + "&password=" + password + "&email=" + email + "&userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="userId"></param>
		public virtual UserAccount CreateAccount(String userName,String password,String email,Guid userId)
		{
			userName = userName.UrlEncode();
			password = password.UrlEncode();
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateAccountAsync?userName=" + userName + "&password=" + password + "&email=" + email + "&userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task CreateContactAsync(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<ContactDTO>("api/UserLogic/CreateContactAsync", contactDTO, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void CreateContact(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/UserLogic/CreateContactAsync", contactDTO, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		/// <returns></returns>
		public virtual Task<Boolean> ContactExistsAsync(Guid parentID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		public virtual Boolean ContactExists(Guid parentID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual Task DeleteAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return DeleteAsync("api/UserLogic/DeleteAccountAsync?userID=" + userID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void DeleteAccount(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/UserLogic/DeleteAccountAsync?userID=" + userID, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual Task CloseAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/CloseAccountAsync?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void CloseAccount(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/CloseAccountAsync?userID=" + userID, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual Task SendUsernameReminderAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/SendUsernameReminderAsync?email=" + email, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual void SendUsernameReminder(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SendUsernameReminderAsync?email=" + email, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		public virtual Task CreatePasswordResetRequestAsync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/CreatePasswordResetRequestAsync?username=" + username, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		public virtual void CreatePasswordResetRequest(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/CreatePasswordResetRequestAsync?username=" + username, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="blank"></param>
		/// <param name="overwriteExisting"></param>
		/// <returns></returns>
		public virtual Task GeneratePinAsync(Guid uaoID,Boolean blank,Boolean overwriteExisting)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/GeneratePinAsync?uaoID=" + uaoID + "&blank=" + blank + "&overwriteExisting=" + overwriteExisting, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="blank"></param>
		/// <param name="overwriteExisting"></param>
		public virtual void GeneratePin(Guid uaoID,Boolean blank,Boolean overwriteExisting)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/GeneratePinAsync?uaoID=" + uaoID + "&blank=" + blank + "&overwriteExisting=" + overwriteExisting, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <returns></returns>
		public virtual Task<Boolean> IncrementInvalidPINAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IncrementInvalidPINAsync?uaoID=" + uaoID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		public virtual Boolean IncrementInvalidPIN(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IncrementInvalidPINAsync?uaoID=" + uaoID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <param name="phoneNumber"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual Task RegisterUserAsync(Guid uaoId,String phoneNumber,String password)
		{
			phoneNumber = phoneNumber.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/RegisterUserAsync?uaoId=" + uaoId + "&phoneNumber=" + phoneNumber + "&password=" + password, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <param name="phoneNumber"></param>
		/// <param name="password"></param>
		public virtual void RegisterUser(Guid uaoId,String phoneNumber,String password)
		{
			phoneNumber = phoneNumber.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/RegisterUserAsync?uaoId=" + uaoId + "&phoneNumber=" + phoneNumber + "&password=" + password, null, _user)).Wait();
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="withRelatedLevel"></param>
		/// <returns></returns>
		public virtual Task<List<UserAccountOrganisationRoleDTO>> GetRolesAsync(Guid uaoID,Int32 withRelatedLevel)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountOrganisationRoleDTO>>("api/UserLogic/GetRoles?uaoID=" + uaoID + "&withRelatedLevel=" + withRelatedLevel, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="withRelatedLevel"></param>
		public virtual List<UserAccountOrganisationRoleDTO> GetRoles(Guid uaoID,Int32 withRelatedLevel)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationRoleDTO>>("api/UserLogic/GetRoles?uaoID=" + uaoID + "&withRelatedLevel=" + withRelatedLevel, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <param name="newUsername"></param>
		/// <returns></returns>
		public virtual Task ChangeUsernameAndEmailAsync(Guid uaoId,String newUsername)
		{
			newUsername = newUsername.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/ChangeUsernameAndEmail?uaoId=" + uaoId + "&newUsername=" + newUsername, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoId"></param>
		/// <param name="newUsername"></param>
		public virtual void ChangeUsernameAndEmail(Guid uaoId,String newUsername)
		{
			newUsername = newUsername.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ChangeUsernameAndEmail?uaoId=" + uaoId + "&newUsername=" + newUsername, null, _user)).Wait();
		}

		#endregion
	}
}
#endregion

