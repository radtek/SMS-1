//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.Business.Client.Models;
using Bec.TargetFramework.Entities;
using Bec.TargetFramework.Entities.Enums;
using BrockAllen.MembershipReboot;

#region Proxies
namespace Bec.TargetFramework.Business.Client
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string WebApiProxyBaseAddress = "http://localhost:9000";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.Business.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace Bec.TargetFramework.Business.Client.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface IClassificationDataLogicClient : IClientBase
	{	

		/// <returns></returns>
		Task<HttpResponseMessage> GetCountriesAsync();

		/// <returns></returns>
		List<CountryCodeDTO> GetCountries();

		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetRootClassificationDataForTypeNameAsync(String typeName);

		/// <param name="typeName"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName);

		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID);

		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID);

		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetClassificationDataForTypeNameAsync(String categoryName,String typeName);

		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Int32 GetClassificationDataForTypeName(String categoryName,String typeName);
				
	}
	
	public partial interface IDataLogicClient : IClientBase
	{	

		/// <param name="eventName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetTFEventByNameAsync(String eventName);

		/// <param name="eventName"></param>
		/// <returns></returns>
		TFEventDTO GetTFEventByName(String eventName);

		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetWorkflowTreeAsync(Guid workflowID,Int32 workflowVersionNumber);

		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		List<VWorkflowTreeDTO> GetWorkflowTree(Guid workflowID,Int32 workflowVersionNumber);

		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetStatusTypeAsync(String statusTypeEnum);

		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		List<VStatusTypeDTO> GetStatusType(String statusTypeEnum);

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomFirstAndLastName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomNameAsync();

		/// <returns></returns>
		String GenerateRandomName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomLastNameAsync();

		/// <returns></returns>
		String GenerateRandomLastName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomFirstName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomFemaleFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomFemaleFirstName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomMaleFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomMaleFirstName();

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFirstAndLastNames(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleLastNames(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleFemaleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFemaleFirstAndLastNames(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleMaleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleMaleFirstAndLastNames(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleFemaleFirstNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFemaleFirstNames(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GenerateMultipleMaleFirstNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleMaleFirstNames(Int32 count);

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomFemaleFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomFemaleFirstAndLastName();

		/// <returns></returns>
		Task<HttpResponseMessage> GenerateRandomMaleFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomMaleFirstAndLastName();

		/// <param name="name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetServiceDefinitionWithDetailAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		ServiceDefinitionDTO GetServiceDefinitionWithDetail(String name);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> MarkServiceInterfaceAsPendingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsPending(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> MarkServiceInterfaceAsProcessingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsProcessing(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> MarkServiceInterfaceAsFailedAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsFailed(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> MarkServiceInterfaceAsSuccessfulAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsSuccessful(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);
				
	}
	
	public partial interface INotificationLogicClient : IClientBase
	{	

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);

		/// <returns></returns>
		Task<HttpResponseMessage> SaveNotificationAsync(NotificationDTO dto);

		/// <returns></returns>
		Boolean SaveNotification(NotificationDTO dto);

		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);

		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);

		/// <param name="name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetLatestNotificationConstructIdFromNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);

		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		VDefaultEmailAddressDTO RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);
				
	}
	
	public partial interface IOrganisationLogicClient : IClientBase
	{	

		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber);

		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber);

		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> FindDuplicateOrganisationsAsync(Boolean manual,String line1,String line2,String town,String county,String postalCode);

		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		List<VOrganisationWithStatusAndAdminDTO> FindDuplicateOrganisations(Boolean manual,String line1,String line2,String town,String county,String postalCode);

		/// <param name="postCode"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GeoCodePostcodeAsync(String postCode);

		/// <param name="postCode"></param>
		/// <returns></returns>
		GoogleGeoCodeResponse GeoCodePostcode(String postCode);

		/// <param name="orgStatus"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus);

		/// <param name="orgStatus"></param>
		/// <returns></returns>
		List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus);

		/// <param name="organisationType"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto);

		/// <param name="organisationType"></param>
		/// <returns></returns>
		Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto);

		/// <returns></returns>
		Task<HttpResponseMessage> GetTemporaryOrganisationBranchIDAsync();

		/// <returns></returns>
		Nullable<Guid> GetTemporaryOrganisationBranchID();

		/// <param name="searchText"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetAllOrganisationDetailDTOAsync(String searchText);

		/// <param name="searchText"></param>
		/// <returns></returns>
		List<vOrganisationDTO> GetAllOrganisationDetailDTO(String searchText);

		/// <param name="id"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationDTOAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		vOrganisationDTO GetOrganisationDTO(Guid id);

		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ActivateDeactivateOrDeleteOrganisationAsync(Guid id,Boolean delete);

		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		void ActivateDeactivateOrDeleteOrganisation(Guid id,Boolean delete);

		/// <returns></returns>
		Task<HttpResponseMessage> AddNewOrganisationFromWizardAsync(OrganisationDTO dto);

		/// <returns></returns>
		void AddNewOrganisationFromWizard(OrganisationDTO dto);

		/// <returns></returns>
		Task<HttpResponseMessage> SaveOrganisationDetailAsync(OrganisationDTO dto);

		/// <returns></returns>
		void SaveOrganisationDetail(OrganisationDTO dto);

		/// <param name="Name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesOrganisationNameExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationNameExist(String Name);

		/// <param name="name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesOrganisationBranchExistAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationBranchExist(String name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesOrganisationLogoExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationLogoExist(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesOrganisationUnitExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationUnitExist(String Name);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgRolesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<RoleDTO> GetOrgRoles(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgGroupsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<GroupDTO> GetOrgGroups(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgRolesforOrgIdAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<RoleDTO> GetOrgRolesforOrgId(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgGroupsforOrgIdAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<GroupDTO> GetOrgGroupsforOrgId(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationLogosAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<vAttachmentDTO> GetOrganisationLogos(Guid orgId);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationLogoAsync(Guid attachmentDetailID);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		vAttachmentDTO GetOrganisationLogo(Guid attachmentDetailID);

		/// <returns></returns>
		Task<HttpResponseMessage> SaveOrganisationLogoAsync(vAttachmentDTO dto);

		/// <returns></returns>
		void SaveOrganisationLogo(vAttachmentDTO dto);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ActivateOrDeactivateOrganisationLogoAsync(Guid attachmentDetailID);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		void ActivateOrDeactivateOrganisationLogo(Guid attachmentDetailID);

		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DefaultOrganisationLogoAsync(Guid organisationID,Guid attachmentDetailID);

		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		void DefaultOrganisationLogo(Guid organisationID,Guid attachmentDetailID);

		/// <returns></returns>
		Task<HttpResponseMessage> SaveOrganisationUnitAsync(OrganisationUnitDTO dto);

		/// <returns></returns>
		void SaveOrganisationUnit(OrganisationUnitDTO dto);

		/// <param name="unitID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationUnitAsync(Int32 unitID);

		/// <param name="unitID"></param>
		/// <returns></returns>
		OrganisationUnitDTO GetOrganisationUnit(Int32 unitID);

		/// <param name="unitID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DeleteOrganisationUnitAsync(Int32 unitID);

		/// <param name="unitID"></param>
		/// <returns></returns>
		void DeleteOrganisationUnit(Int32 unitID);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrgansationBranchDTOsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationDTO> GetOrgansationBranchDTOs(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationBranchesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<vBranchDTO> GetOrganisationBranches(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetAllBranchesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<ContactDTO> GetAllBranches(Guid orgId);

		/// <returns></returns>
		Task<HttpResponseMessage> SaveOrganisationBranchAsync(ContactDTO dto);

		/// <returns></returns>
		void SaveOrganisationBranch(ContactDTO dto);

		/// <param name="branchID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationBranchAsync(Int32 branchID);

		/// <param name="branchID"></param>
		/// <returns></returns>
		vBranchDTO GetOrganisationBranch(Int32 branchID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DeleteOrganisationBranchAsync(Guid contactID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		void DeleteOrganisationBranch(Guid contactID);

		/// <param name="id"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetAllBranchAddressesAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<AddressDTO> GetAllBranchAddresses(Guid id);

		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationDetailsAsync();

		/// <returns></returns>
		List<OrganisationDetailDTO> GetOrganisationDetails();

		/// <param name="id"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationDetailsIncludingBranchesAsync(String id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<OrganisationDetailDTO> GetOrganisationDetailsIncludingBranches(String id);

		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationUnitsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationUnitDTO> GetOrganisationUnits(Guid orgId);

		/// <param name="typeId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationTemplatesforOrganisationTypeAsync(Int32 typeId);

		/// <param name="typeId"></param>
		/// <returns></returns>
		List<VOrganisationTemplateDTO> GetOrganisationTemplatesforOrganisationType(Int32 typeId);
				
	}
	
	public partial interface ISettingsLogicClient : IClientBase
	{	

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllSettingsAsync();

		/// <returns></returns>
		Dictionary<String, SettingDTO> GetAllSettings();

		/// <returns></returns>
		Task<HttpResponseMessage> GetSettingAsync(SettingDTO setting);

		/// <returns></returns>
		SettingDTO GetSetting(SettingDTO setting);

		/// <returns></returns>
		Task<HttpResponseMessage> InsertSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void InsertSetting(SettingDTO dto);

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void UpdateSetting(SettingDTO dto);

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void DeleteSetting(SettingDTO dto);

		/// <param name="settingId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetSettingByIdAsync(Int32 settingId);

		/// <param name="settingId"></param>
		/// <returns></returns>
		SettingDTO GetSettingById(Int32 settingId);

		/// <param name="name"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetSettingByNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		SettingDTO GetSettingByName(String name);
				
	}
	
	public partial interface IUserLogicClient : IClientBase
	{	

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> AuthenticateUserAsync(String username,String password);

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		UserLoginValidation AuthenticateUser(String username,String password);

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUserDetailDTOAsync();

		/// <returns></returns>
		List<UserDetailDTO> GetAllUserDetailDTO();

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUserManagementDTOAsync();

		/// <returns></returns>
		List<vUserManagementDTO> GetAllUserManagementDTO();

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUserManagementDTOCountAsync();

		/// <returns></returns>
		Int32 GetAllUserManagementDTOCount();

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GerUserManagementDTOAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		vUserManagementDTO GerUserManagementDTO(Guid userId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserRolesAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationRoleDTO> GetUserRoles(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationRolesAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationRoleDTO> GetOrganisationRoles(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserGroupsAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationGroupDTO> GetUserGroups(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetOrganisationGroupsAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationGroupDTO> GetOrganisationGroups(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUserStatusAsync(Guid userId,Boolean delete);

		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		void UpdateUserStatus(Guid userId,Boolean delete);

		/// <returns></returns>
		Task<HttpResponseMessage> AddUserAsync(ContactDTO dto);

		/// <returns></returns>
		ContactDTO AddUser(ContactDTO dto);

		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> AddUserDetailsAsync(String userType,String userCategory,ContactDTO dto);

		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		void AddUserDetails(String userType,String userCategory,ContactDTO dto);

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUserAsync(ContactDTO dto);

		/// <returns></returns>
		void UpdateUser(ContactDTO dto);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> EditUserAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		ContactDTO EditUser(Guid userId);

		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ResetUserPasswordAsync(Guid userID,String newPassword);

		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		void ResetUserPassword(Guid userID,String newPassword);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> HasPasswordExpiredAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean HasPasswordExpired(Guid userID);

		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> LockOrUnlockUserAsync(Guid userId,Boolean lockUser);

		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		void LockOrUnlockUser(Guid userId,Boolean lockUser);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ResetPasswordAndSetVerificationKeyAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		String ResetPasswordAndSetVerificationKey(Guid userId);

		/// <param name="email"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ResetPasswordAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		void ResetPassword(String email);

		/// <param name="userName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> IsUserExistAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		Boolean IsUserExist(String userName);

		/// <param name="email"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> IsEmailExistAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		Boolean IsEmailExist(String email);

		/// <param name="contactID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAddressesAsync(Guid contactID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		List<AddressDTO> GetUserAddresses(Guid contactID);

		/// <param name="id"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAddressToContactAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		void DeleteAddressToContact(Guid id);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> SaveUserRolesAsync(Guid userId,List<OrganisationRoleDTO> selectedRoles);

		/// <param name="userId"></param>
		/// <returns></returns>
		void SaveUserRoles(Guid userId,List<OrganisationRoleDTO> selectedRoles);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> SaveUserGroupsAsync(Guid userId,List<OrganisationGroupDTO> selectedGroups);

		/// <param name="userId"></param>
		/// <returns></returns>
		void SaveUserGroups(Guid userId,List<OrganisationGroupDTO> selectedGroups);

		/// <returns></returns>
		Task<HttpResponseMessage> GetAllUserAccountAsync();

		/// <returns></returns>
		List<UserAccount> GetAllUserAccount();

		/// <param name="key"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		UserAccount GetUserAccount(Guid key);

		/// <param name="email"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetBAUserAccountByEmailAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmail(String email);

		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id);

		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id);

		/// <param name="key"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetBAUserAccountByVerificationKeyAsync(String key);

		/// <param name="key"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByVerificationKey(String key);

		/// <param name="username"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetBAUserAccountByUsernameAsync(String username);

		/// <param name="username"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByUsername(String username);

		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly);

		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly);

		/// <param name="userName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountByUsernameAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		UserAccountDTO GetUserAccountByUsername(String userName);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserContactsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<ContactDTO> GetUserContacts(Guid userId);

		/// <param name="key"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountsAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		List<UserAccount> GetUserAccounts(Guid key);

		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountOrganisationAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID);

		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg);

		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg);

		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID);

		/// <returns></returns>
		Task<HttpResponseMessage> CreateUserAccountAsync();

		/// <returns></returns>
		UserAccount CreateUserAccount();

		/// <returns></returns>
		Task<HttpResponseMessage> AddUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void AddUserAccount(UserAccount user);

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void RemoveUserAccount(UserAccount user);

		/// <returns></returns>
		Task<HttpResponseMessage> UpdateUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void UpdateUserAccount(UserAccount user);

		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetUserClaimsAsync(Guid userId,Guid organisationID);

		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> UserLoginSessionsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<String> UserLoginSessions(Guid userId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> LogEveryoneElseOutAsync(Guid userId,String sessionId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void LogEveryoneElseOut(Guid userId,String sessionId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData);

		/// <param name="tempUserId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> LockUserTemporaryAccountAsync(Guid tempUserId);

		/// <param name="tempUserId"></param>
		/// <returns></returns>
		void LockUserTemporaryAccount(Guid tempUserId);

		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesUserExistAsync(Guid userID,Boolean isTemporary);

		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		Boolean DoesUserExist(Guid userID,Boolean isTemporary);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetPermanentUAOAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		UserAccountOrganisationDTO GetPermanentUAO(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DoesPermanentUserHavePersonalOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean DoesPermanentUserHavePersonalOrganisation(Guid userID);

		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetPersonalUserAccountOrganisationAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		Guid GetPersonalUserAccountOrganisation(Guid userId);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> AddUserToTemporaryOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Nullable<Guid> AddUserToTemporaryOrganisation(Guid userID);

		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> CreateTemporaryAccountAsync(String email,String password,Boolean temporaryAccount,Guid userId);

		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UserAccount CreateTemporaryAccount(String email,String password,Boolean temporaryAccount,Guid userId);

		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> CreateAccountAsync(String userName,String password,String email,Boolean temporaryAccount,Guid userId);

		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UserAccount CreateAccount(String userName,String password,String email,Boolean temporaryAccount,Guid userId);

		/// <returns></returns>
		Task<HttpResponseMessage> CreateContactAsync(ContactDTO contactDTO);

		/// <returns></returns>
		void CreateContact(ContactDTO contactDTO);

		/// <param name="parentID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> ContactExistsAsync(Guid parentID);

		/// <param name="parentID"></param>
		/// <returns></returns>
		Boolean ContactExists(Guid parentID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void DeleteAccount(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> CloseAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void CloseAccount(Guid userID);

		/// <returns></returns>
		Task<HttpResponseMessage> GetUserAccountsNotLoggedInAsync();

		/// <returns></returns>
		List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn();

		/// <param name="userID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetVUserAccountOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		VUserAccountOrganisationDTO GetVUserAccountOrganisation(Guid userID);

		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> RemovePasswordResetSecretAsync(Guid accountID,Guid PasswordResetSecretID);

		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		void RemovePasswordResetSecret(Guid accountID,Guid PasswordResetSecretID);

		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> AddPasswordResetSecretAsync(Guid accountID,String password,String question,String answer);

		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		void AddPasswordResetSecret(Guid accountID,String password,String question,String answer);
				
	}
	
	public partial interface IValidationLogicClient : IClientBase
	{	

		/// <param name="strSRAID"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetEmployeeByIdAsync(String strSRAID);

		/// <param name="strSRAID"></param>
		/// <returns></returns>
		EmployeeDTO GetEmployeeById(String strSRAID);

		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> GetCompanyDetailsByNameAsync(String strCopmanyName);

		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		CompanyDTO GetCompanyDetailsByName(String strCopmanyName);

		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> IsInvalidBranchAsync(String strBranchSraId,String strCompanyName,String strPostCode);

		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		Boolean IsInvalidBranch(String strBranchSraId,String strCompanyName,String strPostCode);

		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> IsInvalidEmployeeAsync(String strSraId,String strLastName,String strCompanyName,Boolean IsColp);

		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		Boolean IsInvalidEmployee(String strSraId,String strLastName,String strCompanyName,Boolean IsColp);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DuplicateComplianceOfficerAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO DuplicateComplianceOfficer(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> DuplicateCompanyAsync(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail);

		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO DuplicateCompany(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<HttpResponseMessage> COwithAnotherFirmAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO COwithAnotherFirm(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);
				
	}

}
#endregion

#region Clients
namespace Bec.TargetFramework.Business.Client.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ClassificationDataLogicClient : ClientBase, Interfaces.IClassificationDataLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountriesAsync()
		{
			return await HttpClient.GetAsync("api/ClassificationDataLogic/GetCountries");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CountryCodeDTO> GetCountries()
		{
						 var result = Task.Run(() => GetCountriesAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<CountryCodeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetRootClassificationDataForTypeNameAsync(String typeName)
		{
			return await HttpClient.GetAsync("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		public virtual List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName)
		{
						 var result = Task.Run(() => GetRootClassificationDataForTypeNameAsync(typeName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<ClassificationTypeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID)
		{
			return await HttpClient.GetAsync("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		public virtual List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID)
		{
						 var result = Task.Run(() => GetSubClassificationDataForParentIDAsync(classificationTypeID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<ClassificationTypeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			return await HttpClient.GetAsync("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
						 var result = Task.Run(() => GetClassificationDataForTypeNameAsync(categoryName, typeName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Int32>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class DataLogicClient : ClientBase, Interfaces.IDataLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public DataLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public DataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTFEventByNameAsync(String eventName)
		{
			return await HttpClient.GetAsync("api/DataLogic/GetTFEventByName?eventName=" + eventName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		public virtual TFEventDTO GetTFEventByName(String eventName)
		{
						 var result = Task.Run(() => GetTFEventByNameAsync(eventName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<TFEventDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetWorkflowTreeAsync(Guid workflowID,Int32 workflowVersionNumber)
		{
			return await HttpClient.GetAsync("api/DataLogic/GetWorkflowTree?workflowID=" + workflowID + "&workflowVersionNumber=" + workflowVersionNumber);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		public virtual List<VWorkflowTreeDTO> GetWorkflowTree(Guid workflowID,Int32 workflowVersionNumber)
		{
						 var result = Task.Run(() => GetWorkflowTreeAsync(workflowID, workflowVersionNumber)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VWorkflowTreeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetStatusTypeAsync(String statusTypeEnum)
		{
			return await HttpClient.GetAsync("api/DataLogic/GetStatusType?statusTypeEnum=" + statusTypeEnum);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="statusTypeEnum"></param>
		public virtual List<VStatusTypeDTO> GetStatusType(String statusTypeEnum)
		{
						 var result = Task.Run(() => GetStatusTypeAsync(statusTypeEnum)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VStatusTypeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomFirstAndLastNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomFirstAndLastName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFirstAndLastName()
		{
						 var result = Task.Run(() => GenerateRandomFirstAndLastNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomName()
		{
						 var result = Task.Run(() => GenerateRandomNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomLastNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomLastName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomLastName()
		{
						 var result = Task.Run(() => GenerateRandomLastNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomFirstNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomFirstName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFirstName()
		{
						 var result = Task.Run(() => GenerateRandomFirstNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomFemaleFirstNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomFemaleFirstName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFemaleFirstName()
		{
						 var result = Task.Run(() => GenerateRandomFemaleFirstNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomMaleFirstNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomMaleFirstName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomMaleFirstName()
		{
						 var result = Task.Run(() => GenerateRandomMaleFirstNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleFirstAndLastNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleFirstAndLastNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFirstAndLastNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleFirstAndLastNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleLastNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleLastNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleLastNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleLastNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleFemaleFirstAndLastNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleFemaleFirstAndLastNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFemaleFirstAndLastNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleFemaleFirstAndLastNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleMaleFirstAndLastNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleMaleFirstAndLastNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleMaleFirstAndLastNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleMaleFirstAndLastNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleFemaleFirstNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleFemaleFirstNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFemaleFirstNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleFemaleFirstNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateMultipleMaleFirstNamesAsync(Int32 count)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateMultipleMaleFirstNames?count=" + count, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleMaleFirstNames(Int32 count)
		{
						 var result = Task.Run(() => GenerateMultipleMaleFirstNamesAsync(count)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<IEnumerable<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomFemaleFirstAndLastNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomFemaleFirstAndLastName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFemaleFirstAndLastName()
		{
						 var result = Task.Run(() => GenerateRandomFemaleFirstAndLastNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GenerateRandomMaleFirstAndLastNameAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/GenerateRandomMaleFirstAndLastName", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomMaleFirstAndLastName()
		{
						 var result = Task.Run(() => GenerateRandomMaleFirstAndLastNameAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetServiceDefinitionWithDetailAsync(String name)
		{
			return await HttpClient.GetAsync("api/DataLogic/GetServiceDefinitionWithDetail?name=" + name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual ServiceDefinitionDTO GetServiceDefinitionWithDetail(String name)
		{
						 var result = Task.Run(() => GetServiceDefinitionWithDetailAsync(name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<ServiceDefinitionDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MarkServiceInterfaceAsPendingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/MarkServiceInterfaceAsPending?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsPending(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
						 var result = Task.Run(() => MarkServiceInterfaceAsPendingAsync(serviceDefinitionID, productPurchaseProductTaskID, parentID, data)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MarkServiceInterfaceAsProcessingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/MarkServiceInterfaceAsProcessing?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsProcessing(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
						 var result = Task.Run(() => MarkServiceInterfaceAsProcessingAsync(serviceDefinitionID, productPurchaseProductTaskID, parentID, data)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MarkServiceInterfaceAsFailedAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/MarkServiceInterfaceAsFailed?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsFailed(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
						 var result = Task.Run(() => MarkServiceInterfaceAsFailedAsync(serviceDefinitionID, productPurchaseProductTaskID, parentID, data)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MarkServiceInterfaceAsSuccessfulAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			return await HttpClient.PostAsJsonAsync("api/DataLogic/MarkServiceInterfaceAsSuccessful?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsSuccessful(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
						 var result = Task.Run(() => MarkServiceInterfaceAsSuccessfulAsync(serviceDefinitionID, productPurchaseProductTaskID, parentID, data)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class NotificationLogicClient : ClientBase, Interfaces.INotificationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			return await HttpClient.PostAsJsonAsync("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		public virtual Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
						 var result = Task.Run(() => HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(uaoID, organisationId, notifcationConstructID, notificationConstructVersion, notificationParentID, isRead, sentInLast)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveNotificationAsync(NotificationDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<NotificationDTO>("api/NotificationLogic/SaveNotification", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SaveNotification(NotificationDTO dto)
		{
						 var result = Task.Run(() => SaveNotificationAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			return await HttpClient.GetAsync("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		public virtual List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
						 var result = Task.Run(() => GetNotificationGroupConstructsAsync(userTypeID, organisationTypeID, enumValue)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VNotificationConstructGroupDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			return await HttpClient.GetAsync("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
						 var result = Task.Run(() => GetNotificationConstructAsync(organisationNotificationConstructID, versionNumber)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<NotificationConstructDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			return await HttpClient.GetAsync("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		public virtual List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
						 var result = Task.Run(() => GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(userAccountOrganisationID, userTypeID, organisationTypeId, groupEnumValue)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VNotificationWithUAOVerificationCodeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetLatestNotificationConstructIdFromNameAsync(String name)
		{
			return await HttpClient.GetAsync("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name)
		{
						 var result = Task.Run(() => GetLatestNotificationConstructIdFromNameAsync(name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<NotificationConstructDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			return await HttpClient.GetAsync("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
						 var result = Task.Run(() => GetNotificationConstructViewDataAsync(organisationNotificationConstructID, versionNumber)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<VNotificationConstructDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			return await HttpClient.PostAsJsonAsync("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		public virtual VDefaultEmailAddressDTO RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
						 var result = Task.Run(() => RecipientAddressDetailAsync(organisationID, userAccountOrganisationID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<VDefaultEmailAddressDTO>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class OrganisationLogicClient : ClientBase, Interfaces.IOrganisationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/FindAddressesByPostCode?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		public virtual List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber)
		{
						 var result = Task.Run(() => FindAddressesByPostCodeAsync(postCode, buildingNameOrNumber)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<PostCodeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> FindDuplicateOrganisationsAsync(Boolean manual,String line1,String line2,String town,String county,String postalCode)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/FindDuplicateOrganisations?manual=" + manual + "&line1=" + line1 + "&line2=" + line2 + "&town=" + town + "&county=" + county + "&postalCode=" + postalCode, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		public virtual List<VOrganisationWithStatusAndAdminDTO> FindDuplicateOrganisations(Boolean manual,String line1,String line2,String town,String county,String postalCode)
		{
						 var result = Task.Run(() => FindDuplicateOrganisationsAsync(manual, line1, line2, town, county, postalCode)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VOrganisationWithStatusAndAdminDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GeoCodePostcodeAsync(String postCode)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/GeoCodePostcode?postCode=" + postCode, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		public virtual GoogleGeoCodeResponse GeoCodePostcode(String postCode)
		{
						 var result = Task.Run(() => GeoCodePostcodeAsync(postCode)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<GoogleGeoCodeResponse>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		public virtual List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus)
		{
						 var result = Task.Run(() => GetCompaniesAsync(orgStatus)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VOrganisationWithStatusAndAdminDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<AddCompanyDTO>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministrator?organisationType=" + organisationType, dto);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		public virtual Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
						 var result = Task.Run(() => AddNewUnverifiedOrganisationAndAdministratorAsync(organisationType, dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Guid>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetTemporaryOrganisationBranchIDAsync()
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetTemporaryOrganisationBranchID");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> GetTemporaryOrganisationBranchID()
		{
						 var result = Task.Run(() => GetTemporaryOrganisationBranchIDAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Nullable<Guid>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="searchText"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllOrganisationDetailDTOAsync(String searchText)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetAllOrganisationDetailDTO?searchText=" + searchText);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="searchText"></param>
		public virtual List<vOrganisationDTO> GetAllOrganisationDetailDTO(String searchText)
		{
						 var result = Task.Run(() => GetAllOrganisationDetailDTOAsync(searchText)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<vOrganisationDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationDTOAsync(Guid id)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationDTO/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual vOrganisationDTO GetOrganisationDTO(Guid id)
		{
						 var result = Task.Run(() => GetOrganisationDTOAsync(id)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<vOrganisationDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ActivateDeactivateOrDeleteOrganisationAsync(Guid id,Boolean delete)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/ActivateDeactivateOrDeleteOrganisation/" + id + "?delete=" + delete, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="delete"></param>
		public virtual void ActivateDeactivateOrDeleteOrganisation(Guid id,Boolean delete)
		{
						 var result = Task.Run(() => ActivateDeactivateOrDeleteOrganisationAsync(id, delete)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddNewOrganisationFromWizardAsync(OrganisationDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<OrganisationDTO>("api/OrganisationLogic/AddNewOrganisationFromWizard", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddNewOrganisationFromWizard(OrganisationDTO dto)
		{
						 var result = Task.Run(() => AddNewOrganisationFromWizardAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveOrganisationDetailAsync(OrganisationDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<OrganisationDTO>("api/OrganisationLogic/SaveOrganisationDetail", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationDetail(OrganisationDTO dto)
		{
						 var result = Task.Run(() => SaveOrganisationDetailAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesOrganisationNameExistAsync(String Name)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/DoesOrganisationNameExist?Name=" + Name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationNameExist(String Name)
		{
						 var result = Task.Run(() => DoesOrganisationNameExistAsync(Name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesOrganisationBranchExistAsync(String name)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/DoesOrganisationBranchExist?name=" + name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual Boolean DoesOrganisationBranchExist(String name)
		{
						 var result = Task.Run(() => DoesOrganisationBranchExistAsync(name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesOrganisationLogoExistAsync(String Name)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/DoesOrganisationLogoExist?Name=" + Name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationLogoExist(String Name)
		{
						 var result = Task.Run(() => DoesOrganisationLogoExistAsync(Name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesOrganisationUnitExistAsync(String Name)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/DoesOrganisationUnitExist?Name=" + Name, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationUnitExist(String Name)
		{
						 var result = Task.Run(() => DoesOrganisationUnitExistAsync(Name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgRolesAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrgRoles?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<RoleDTO> GetOrgRoles(Guid orgId)
		{
						 var result = Task.Run(() => GetOrgRolesAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<RoleDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgGroupsAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrgGroups?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<GroupDTO> GetOrgGroups(Guid orgId)
		{
						 var result = Task.Run(() => GetOrgGroupsAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<GroupDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgRolesforOrgIdAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrgRolesforOrgId?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<RoleDTO> GetOrgRolesforOrgId(Guid orgId)
		{
						 var result = Task.Run(() => GetOrgRolesforOrgIdAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<RoleDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgGroupsforOrgIdAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrgGroupsforOrgId?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<GroupDTO> GetOrgGroupsforOrgId(Guid orgId)
		{
						 var result = Task.Run(() => GetOrgGroupsforOrgIdAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<GroupDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationLogosAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationLogos?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<vAttachmentDTO> GetOrganisationLogos(Guid orgId)
		{
						 var result = Task.Run(() => GetOrganisationLogosAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<vAttachmentDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationLogoAsync(Guid attachmentDetailID)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationLogo?attachmentDetailID=" + attachmentDetailID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		public virtual vAttachmentDTO GetOrganisationLogo(Guid attachmentDetailID)
		{
						 var result = Task.Run(() => GetOrganisationLogoAsync(attachmentDetailID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<vAttachmentDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveOrganisationLogoAsync(vAttachmentDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<vAttachmentDTO>("api/OrganisationLogic/SaveOrganisationLogo", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationLogo(vAttachmentDTO dto)
		{
						 var result = Task.Run(() => SaveOrganisationLogoAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ActivateOrDeactivateOrganisationLogoAsync(Guid attachmentDetailID)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/ActivateOrDeactivateOrganisationLogo?attachmentDetailID=" + attachmentDetailID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		public virtual void ActivateOrDeactivateOrganisationLogo(Guid attachmentDetailID)
		{
						 var result = Task.Run(() => ActivateOrDeactivateOrganisationLogoAsync(attachmentDetailID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DefaultOrganisationLogoAsync(Guid organisationID,Guid attachmentDetailID)
		{
			return await HttpClient.PostAsJsonAsync("api/OrganisationLogic/DefaultOrganisationLogo?organisationID=" + organisationID + "&attachmentDetailID=" + attachmentDetailID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		public virtual void DefaultOrganisationLogo(Guid organisationID,Guid attachmentDetailID)
		{
						 var result = Task.Run(() => DefaultOrganisationLogoAsync(organisationID, attachmentDetailID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveOrganisationUnitAsync(OrganisationUnitDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<OrganisationUnitDTO>("api/OrganisationLogic/SaveOrganisationUnit", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationUnit(OrganisationUnitDTO dto)
		{
						 var result = Task.Run(() => SaveOrganisationUnitAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationUnitAsync(Int32 unitID)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationUnit?unitID=" + unitID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		public virtual OrganisationUnitDTO GetOrganisationUnit(Int32 unitID)
		{
						 var result = Task.Run(() => GetOrganisationUnitAsync(unitID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<OrganisationUnitDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteOrganisationUnitAsync(Int32 unitID)
		{
			return await HttpClient.DeleteAsync("api/OrganisationLogic/DeleteOrganisationUnit?unitID=" + unitID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		public virtual void DeleteOrganisationUnit(Int32 unitID)
		{
						 var result = Task.Run(() => DeleteOrganisationUnitAsync(unitID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrgansationBranchDTOsAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrgansationBranchDTOs?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<OrganisationDTO> GetOrgansationBranchDTOs(Guid orgId)
		{
						 var result = Task.Run(() => GetOrgansationBranchDTOsAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationBranchesAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationBranches?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<vBranchDTO> GetOrganisationBranches(Guid orgId)
		{
						 var result = Task.Run(() => GetOrganisationBranchesAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<vBranchDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllBranchesAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetAllBranches?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<ContactDTO> GetAllBranches(Guid orgId)
		{
						 var result = Task.Run(() => GetAllBranchesAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<ContactDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveOrganisationBranchAsync(ContactDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<ContactDTO>("api/OrganisationLogic/SaveOrganisationBranch", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationBranch(ContactDTO dto)
		{
						 var result = Task.Run(() => SaveOrganisationBranchAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="branchID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationBranchAsync(Int32 branchID)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationBranch?branchID=" + branchID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="branchID"></param>
		public virtual vBranchDTO GetOrganisationBranch(Int32 branchID)
		{
						 var result = Task.Run(() => GetOrganisationBranchAsync(branchID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<vBranchDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteOrganisationBranchAsync(Guid contactID)
		{
			return await HttpClient.DeleteAsync("api/OrganisationLogic/DeleteOrganisationBranch?contactID=" + contactID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		public virtual void DeleteOrganisationBranch(Guid contactID)
		{
						 var result = Task.Run(() => DeleteOrganisationBranchAsync(contactID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllBranchAddressesAsync(Guid id)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetAllBranchAddresses/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<AddressDTO> GetAllBranchAddresses(Guid id)
		{
						 var result = Task.Run(() => GetAllBranchAddressesAsync(id)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<AddressDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationDetailsAsync()
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationDetails");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<OrganisationDetailDTO> GetOrganisationDetails()
		{
						 var result = Task.Run(() => GetOrganisationDetailsAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationDetailDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationDetailsIncludingBranchesAsync(String id)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationDetailsIncludingBranches/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<OrganisationDetailDTO> GetOrganisationDetailsIncludingBranches(String id)
		{
						 var result = Task.Run(() => GetOrganisationDetailsIncludingBranchesAsync(id)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationDetailDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationUnitsAsync(Guid orgId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationUnits?orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<OrganisationUnitDTO> GetOrganisationUnits(Guid orgId)
		{
						 var result = Task.Run(() => GetOrganisationUnitsAsync(orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationUnitDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationTemplatesforOrganisationTypeAsync(Int32 typeId)
		{
			return await HttpClient.GetAsync("api/OrganisationLogic/GetOrganisationTemplatesforOrganisationType?typeId=" + typeId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeId"></param>
		public virtual List<VOrganisationTemplateDTO> GetOrganisationTemplatesforOrganisationType(Int32 typeId)
		{
						 var result = Task.Run(() => GetOrganisationTemplatesforOrganisationTypeAsync(typeId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VOrganisationTemplateDTO>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class SettingsLogicClient : ClientBase, Interfaces.ISettingsLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public SettingsLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public SettingsLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllSettingsAsync()
		{
			return await HttpClient.GetAsync("api/SettingsLogic/GetAllSettings");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, SettingDTO> GetAllSettings()
		{
						 var result = Task.Run(() => GetAllSettingsAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Dictionary<String, SettingDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSettingAsync(SettingDTO setting)
		{
			return await HttpClient.GetAsync("api/SettingsLogic/GetSetting");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual SettingDTO GetSetting(SettingDTO setting)
		{
						 var result = Task.Run(() => GetSettingAsync(setting)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<SettingDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> InsertSettingAsync(SettingDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<SettingDTO>("api/SettingsLogic/InsertSetting", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void InsertSetting(SettingDTO dto)
		{
						 var result = Task.Run(() => InsertSettingAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateSettingAsync(SettingDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<SettingDTO>("api/SettingsLogic/UpdateSetting", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateSetting(SettingDTO dto)
		{
						 var result = Task.Run(() => UpdateSettingAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteSettingAsync(SettingDTO dto)
		{
			return await HttpClient.DeleteAsync("api/SettingsLogic/DeleteSetting");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void DeleteSetting(SettingDTO dto)
		{
						 var result = Task.Run(() => DeleteSettingAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="settingId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSettingByIdAsync(Int32 settingId)
		{
			return await HttpClient.GetAsync("api/SettingsLogic/GetSettingById?settingId=" + settingId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="settingId"></param>
		public virtual SettingDTO GetSettingById(Int32 settingId)
		{
						 var result = Task.Run(() => GetSettingByIdAsync(settingId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<SettingDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetSettingByNameAsync(String name)
		{
			return await HttpClient.GetAsync("api/SettingsLogic/GetSettingByName?name=" + name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual SettingDTO GetSettingByName(String name)
		{
						 var result = Task.Run(() => GetSettingByNameAsync(name)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<SettingDTO>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class UserLogicClient : ClientBase, Interfaces.IUserLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AuthenticateUserAsync(String username,String password)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/AuthenticateUser?username=" + username + "&password=" + password, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		public virtual UserLoginValidation AuthenticateUser(String username,String password)
		{
						 var result = Task.Run(() => AuthenticateUserAsync(username, password)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserLoginValidation>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUserDetailDTOAsync()
		{
			return await HttpClient.GetAsync("api/UserLogic/GetAllUserDetailDTO");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserDetailDTO> GetAllUserDetailDTO()
		{
						 var result = Task.Run(() => GetAllUserDetailDTOAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserDetailDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUserManagementDTOAsync()
		{
			return await HttpClient.GetAsync("api/UserLogic/GetAllUserManagementDTO");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<vUserManagementDTO> GetAllUserManagementDTO()
		{
						 var result = Task.Run(() => GetAllUserManagementDTOAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<vUserManagementDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUserManagementDTOCountAsync()
		{
			return await HttpClient.GetAsync("api/UserLogic/GetAllUserManagementDTOCount");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 GetAllUserManagementDTOCount()
		{
						 var result = Task.Run(() => GetAllUserManagementDTOCountAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Int32>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GerUserManagementDTOAsync(Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/GerUserManagementDTO?userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual vUserManagementDTO GerUserManagementDTO(Guid userId)
		{
						 var result = Task.Run(() => GerUserManagementDTOAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<vUserManagementDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserRolesAsync(Guid userId,Guid orgId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserRoles?userId=" + userId + "&orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationRoleDTO> GetUserRoles(Guid userId,Guid orgId)
		{
						 var result = Task.Run(() => GetUserRolesAsync(userId, orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationRoleDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationRolesAsync(Guid userId,Guid orgId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetOrganisationRoles?userId=" + userId + "&orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationRoleDTO> GetOrganisationRoles(Guid userId,Guid orgId)
		{
						 var result = Task.Run(() => GetOrganisationRolesAsync(userId, orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationRoleDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserGroupsAsync(Guid userId,Guid orgId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserGroups?userId=" + userId + "&orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationGroupDTO> GetUserGroups(Guid userId,Guid orgId)
		{
						 var result = Task.Run(() => GetUserGroupsAsync(userId, orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationGroupDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetOrganisationGroupsAsync(Guid userId,Guid orgId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetOrganisationGroups?userId=" + userId + "&orgId=" + orgId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationGroupDTO> GetOrganisationGroups(Guid userId,Guid orgId)
		{
						 var result = Task.Run(() => GetOrganisationGroupsAsync(userId, orgId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<OrganisationGroupDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUserStatusAsync(Guid userId,Boolean delete)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/UpdateUserStatus?userId=" + userId + "&delete=" + delete, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="delete"></param>
		public virtual void UpdateUserStatus(Guid userId,Boolean delete)
		{
						 var result = Task.Run(() => UpdateUserStatusAsync(userId, delete)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserAsync(ContactDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<ContactDTO>("api/UserLogic/AddUser", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ContactDTO AddUser(ContactDTO dto)
		{
						 var result = Task.Run(() => AddUserAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<ContactDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserDetailsAsync(String userType,String userCategory,ContactDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<ContactDTO>("api/UserLogic/AddUserDetails?userType=" + userType + "&userCategory=" + userCategory, dto);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		public virtual void AddUserDetails(String userType,String userCategory,ContactDTO dto)
		{
						 var result = Task.Run(() => AddUserDetailsAsync(userType, userCategory, dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUserAsync(ContactDTO dto)
		{
			return await HttpClient.PostAsJsonAsync<ContactDTO>("api/UserLogic/UpdateUser", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateUser(ContactDTO dto)
		{
						 var result = Task.Run(() => UpdateUserAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditUserAsync(Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/EditUser?userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual ContactDTO EditUser(Guid userId)
		{
						 var result = Task.Run(() => EditUserAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<ContactDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetUserPasswordAsync(Guid userID,String newPassword)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/ResetUserPassword?userID=" + userID + "&newPassword=" + newPassword, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		public virtual void ResetUserPassword(Guid userID,String newPassword)
		{
						 var result = Task.Run(() => ResetUserPasswordAsync(userID, newPassword)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> HasPasswordExpiredAsync(Guid userID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/HasPasswordExpired?userID=" + userID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean HasPasswordExpired(Guid userID)
		{
						 var result = Task.Run(() => HasPasswordExpiredAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LockOrUnlockUserAsync(Guid userId,Boolean lockUser)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/LockOrUnlockUser?userId=" + userId + "&lockUser=" + lockUser, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		public virtual void LockOrUnlockUser(Guid userId,Boolean lockUser)
		{
						 var result = Task.Run(() => LockOrUnlockUserAsync(userId, lockUser)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetPasswordAndSetVerificationKeyAsync(Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/ResetPasswordAndSetVerificationKey?userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual String ResetPasswordAndSetVerificationKey(Guid userId)
		{
						 var result = Task.Run(() => ResetPasswordAndSetVerificationKeyAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<String>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ResetPasswordAsync(String email)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/ResetPassword?email=" + email, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual void ResetPassword(String email)
		{
						 var result = Task.Run(() => ResetPasswordAsync(email)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsUserExistAsync(String userName)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/IsUserExist?userName=" + userName, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual Boolean IsUserExist(String userName)
		{
						 var result = Task.Run(() => IsUserExistAsync(userName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsEmailExistAsync(String email)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/IsEmailExist?email=" + email, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual Boolean IsEmailExist(String email)
		{
						 var result = Task.Run(() => IsEmailExistAsync(email)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAddressesAsync(Guid contactID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAddresses?contactID=" + contactID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		public virtual List<AddressDTO> GetUserAddresses(Guid contactID)
		{
						 var result = Task.Run(() => GetUserAddressesAsync(contactID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<AddressDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAddressToContactAsync(Guid id)
		{
			return await HttpClient.DeleteAsync("api/UserLogic/DeleteAddressToContact/" + id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual void DeleteAddressToContact(Guid id)
		{
						 var result = Task.Run(() => DeleteAddressToContactAsync(id)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveUserRolesAsync(Guid userId,List<OrganisationRoleDTO> selectedRoles)
		{
			return await HttpClient.PostAsJsonAsync<List<OrganisationRoleDTO>>("api/UserLogic/SaveUserRoles?userId=" + userId, selectedRoles);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual void SaveUserRoles(Guid userId,List<OrganisationRoleDTO> selectedRoles)
		{
						 var result = Task.Run(() => SaveUserRolesAsync(userId, selectedRoles)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveUserGroupsAsync(Guid userId,List<OrganisationGroupDTO> selectedGroups)
		{
			return await HttpClient.PostAsJsonAsync<List<OrganisationGroupDTO>>("api/UserLogic/SaveUserGroups?userId=" + userId, selectedGroups);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual void SaveUserGroups(Guid userId,List<OrganisationGroupDTO> selectedGroups)
		{
						 var result = Task.Run(() => SaveUserGroupsAsync(userId, selectedGroups)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAllUserAccountAsync()
		{
			return await HttpClient.GetAsync("api/UserLogic/GetAllUserAccount");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserAccount> GetAllUserAccount()
		{
						 var result = Task.Run(() => GetAllUserAccountAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserAccount>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountAsync(Guid key)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccount?key=" + key);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual UserAccount GetUserAccount(Guid key)
		{
						 var result = Task.Run(() => GetUserAccountAsync(key)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBAUserAccountByEmailAsync(String email)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetBAUserAccountByEmail?email=" + email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual UserAccount GetBAUserAccountByEmail(String email)
		{
						 var result = Task.Run(() => GetBAUserAccountByEmailAsync(email)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetBAUserAccountByEmailAndNotID/" + id + "?email=" + email);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		public virtual UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id)
		{
						 var result = Task.Run(() => GetBAUserAccountByEmailAndNotIDAsync(email, id)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBAUserAccountByVerificationKeyAsync(String key)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetBAUserAccountByVerificationKey?key=" + key);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual UserAccount GetBAUserAccountByVerificationKey(String key)
		{
						 var result = Task.Run(() => GetBAUserAccountByVerificationKeyAsync(key)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBAUserAccountByUsernameAsync(String username)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetBAUserAccountByUsername?username=" + username);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		public virtual UserAccount GetBAUserAccountByUsername(String username)
		{
						 var result = Task.Run(() => GetBAUserAccountByUsernameAsync(username)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		public virtual List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly)
		{
						 var result = Task.Run(() => GetUserAccountByEmailAsync(email, permanentAccountonly)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserAccountDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountByUsernameAsync(String userName)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountByUsername?userName=" + userName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual UserAccountDTO GetUserAccountByUsername(String userName)
		{
						 var result = Task.Run(() => GetUserAccountByUsernameAsync(userName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccountDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserContactsAsync(Guid userId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserContacts?userId=" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<ContactDTO> GetUserContacts(Guid userId)
		{
						 var result = Task.Run(() => GetUserContactsAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<ContactDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountsAsync(Guid key)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccounts?key=" + key);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual List<UserAccount> GetUserAccounts(Guid key)
		{
						 var result = Task.Run(() => GetUserAccountsAsync(key)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserAccount>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountOrganisationAsync(Guid accountID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID)
		{
						 var result = Task.Run(() => GetUserAccountOrganisationAsync(accountID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserAccountOrganisationDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		public virtual ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID)
		{
						 var result = Task.Run(() => GetUserAccountOrganisationPrimaryContactAsync(uaoID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<ContactDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		public virtual VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg)
		{
						 var result = Task.Run(() => GetUserAccountOrganisationUserTypeOrganisationTypeAsync(accountID, personalOrg)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID)
		{
						 var result = Task.Run(() => GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(accountID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateUserAccountAsync()
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/CreateUserAccount", default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UserAccount CreateUserAccount()
		{
						 var result = Task.Run(() => CreateUserAccountAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserAccountAsync(UserAccount user)
		{
			return await HttpClient.PostAsJsonAsync<UserAccount>("api/UserLogic/AddUserAccount", user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddUserAccount(UserAccount user)
		{
						 var result = Task.Run(() => AddUserAccountAsync(user)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveUserAccountAsync(UserAccount user)
		{
			return await HttpClient.PostAsJsonAsync<UserAccount>("api/UserLogic/RemoveUserAccount", user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void RemoveUserAccount(UserAccount user)
		{
						 var result = Task.Run(() => RemoveUserAccountAsync(user)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UpdateUserAccountAsync(UserAccount user)
		{
			return await HttpClient.PostAsJsonAsync<UserAccount>("api/UserLogic/UpdateUserAccount", user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateUserAccount(UserAccount user)
		{
						 var result = Task.Run(() => UpdateUserAccountAsync(user)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserClaimsAsync(Guid userId,Guid organisationID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		public virtual List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID)
		{
						 var result = Task.Run(() => GetUserClaimsAsync(userId, organisationID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<UserClaimDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UserLoginSessionsAsync(Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/UserLoginSessions?userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<String> UserLoginSessions(Guid userId)
		{
						 var result = Task.Run(() => UserLoginSessionsAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<String>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LogEveryoneElseOutAsync(Guid userId,String sessionId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/LogEveryoneElseOut?userId=" + userId + "&sessionId=" + sessionId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void LogEveryoneElseOut(Guid userId,String sessionId)
		{
						 var result = Task.Run(() => LogEveryoneElseOutAsync(userId, sessionId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/SaveUserAccountLoginSession?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		public virtual void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
						 var result = Task.Run(() => SaveUserAccountLoginSessionAsync(userId, sessionId, userHostAddress, userIdAddress, userLocation)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			return await HttpClient.PostAsJsonAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionData?userId=" + userId + "&sessionId=" + sessionId, requestData);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
						 var result = Task.Run(() => SaveUserAccountLoginSessionDataAsync(userId, sessionId, requestData)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="tempUserId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LockUserTemporaryAccountAsync(Guid tempUserId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/LockUserTemporaryAccount?tempUserId=" + tempUserId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="tempUserId"></param>
		public virtual void LockUserTemporaryAccount(Guid tempUserId)
		{
						 var result = Task.Run(() => LockUserTemporaryAccountAsync(tempUserId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesUserExistAsync(Guid userID,Boolean isTemporary)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/DoesUserExist?userID=" + userID + "&isTemporary=" + isTemporary, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		public virtual Boolean DoesUserExist(Guid userID,Boolean isTemporary)
		{
						 var result = Task.Run(() => DoesUserExistAsync(userID, isTemporary)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPermanentUAOAsync(Guid userID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetPermanentUAO?userID=" + userID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual UserAccountOrganisationDTO GetPermanentUAO(Guid userID)
		{
						 var result = Task.Run(() => GetPermanentUAOAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccountOrganisationDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DoesPermanentUserHavePersonalOrganisationAsync(Guid userID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/DoesPermanentUserHavePersonalOrganisation?userID=" + userID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean DoesPermanentUserHavePersonalOrganisation(Guid userID)
		{
						 var result = Task.Run(() => DoesPermanentUserHavePersonalOrganisationAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetPersonalUserAccountOrganisationAsync(Guid userId)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual Guid GetPersonalUserAccountOrganisation(Guid userId)
		{
						 var result = Task.Run(() => GetPersonalUserAccountOrganisationAsync(userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Guid>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddUserToTemporaryOrganisationAsync(Guid userID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/AddUserToTemporaryOrganisation?userID=" + userID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Nullable<Guid> AddUserToTemporaryOrganisation(Guid userID)
		{
						 var result = Task.Run(() => AddUserToTemporaryOrganisationAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Nullable<Guid>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateTemporaryAccountAsync(String email,String password,Boolean temporaryAccount,Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/CreateTemporaryAccount?email=" + email + "&password=" + password + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		public virtual UserAccount CreateTemporaryAccount(String email,String password,Boolean temporaryAccount,Guid userId)
		{
						 var result = Task.Run(() => CreateTemporaryAccountAsync(email, password, temporaryAccount, userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAccountAsync(String userName,String password,String email,Boolean temporaryAccount,Guid userId)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/CreateAccount?userName=" + userName + "&password=" + password + "&email=" + email + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		public virtual UserAccount CreateAccount(String userName,String password,String email,Boolean temporaryAccount,Guid userId)
		{
						 var result = Task.Run(() => CreateAccountAsync(userName, password, email, temporaryAccount, userId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<UserAccount>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateContactAsync(ContactDTO contactDTO)
		{
			return await HttpClient.PostAsJsonAsync<ContactDTO>("api/UserLogic/CreateContact", contactDTO);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void CreateContact(ContactDTO contactDTO)
		{
						 var result = Task.Run(() => CreateContactAsync(contactDTO)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> ContactExistsAsync(Guid parentID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/ContactExists?parentID=" + parentID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		public virtual Boolean ContactExists(Guid parentID)
		{
						 var result = Task.Run(() => ContactExistsAsync(parentID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAccountAsync(Guid userID)
		{
			return await HttpClient.DeleteAsync("api/UserLogic/DeleteAccount?userID=" + userID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void DeleteAccount(Guid userID)
		{
						 var result = Task.Run(() => DeleteAccountAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CloseAccountAsync(Guid userID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/CloseAccount?userID=" + userID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void CloseAccount(Guid userID)
		{
						 var result = Task.Run(() => CloseAccountAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetUserAccountsNotLoggedInAsync()
		{
			return await HttpClient.GetAsync("api/UserLogic/GetUserAccountsNotLoggedIn");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn()
		{
						 var result = Task.Run(() => GetUserAccountsNotLoggedInAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VUserAccountNotLoggedInDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetVUserAccountOrganisationAsync(Guid userID)
		{
			return await HttpClient.GetAsync("api/UserLogic/GetVUserAccountOrganisation?userID=" + userID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual VUserAccountOrganisationDTO GetVUserAccountOrganisation(Guid userID)
		{
						 var result = Task.Run(() => GetVUserAccountOrganisationAsync(userID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<VUserAccountOrganisationDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemovePasswordResetSecretAsync(Guid accountID,Guid PasswordResetSecretID)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/RemovePasswordResetSecret?accountID=" + accountID + "&PasswordResetSecretID=" + PasswordResetSecretID, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		public virtual void RemovePasswordResetSecret(Guid accountID,Guid PasswordResetSecretID)
		{
						 var result = Task.Run(() => RemovePasswordResetSecretAsync(accountID, PasswordResetSecretID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddPasswordResetSecretAsync(Guid accountID,String password,String question,String answer)
		{
			return await HttpClient.PostAsJsonAsync("api/UserLogic/AddPasswordResetSecret?accountID=" + accountID + "&password=" + password + "&question=" + question + "&answer=" + answer, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		public virtual void AddPasswordResetSecret(Guid accountID,String password,String question,String answer)
		{
						 var result = Task.Run(() => AddPasswordResetSecretAsync(accountID, password, question, answer)).Result;		 
			 
			EnsureSuccess(result);
				 
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ValidationLogicClient : ClientBase, Interfaces.IValidationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ValidationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ValidationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSRAID"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetEmployeeByIdAsync(String strSRAID)
		{
			return await HttpClient.GetAsync("api/ValidationLogic/GetEmployeeById?strSRAID=" + strSRAID);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSRAID"></param>
		public virtual EmployeeDTO GetEmployeeById(String strSRAID)
		{
						 var result = Task.Run(() => GetEmployeeByIdAsync(strSRAID)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<EmployeeDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCompanyDetailsByNameAsync(String strCopmanyName)
		{
			return await HttpClient.GetAsync("api/ValidationLogic/GetCompanyDetailsByName?strCopmanyName=" + strCopmanyName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strCopmanyName"></param>
		public virtual CompanyDTO GetCompanyDetailsByName(String strCopmanyName)
		{
						 var result = Task.Run(() => GetCompanyDetailsByNameAsync(strCopmanyName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<CompanyDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsInvalidBranchAsync(String strBranchSraId,String strCompanyName,String strPostCode)
		{
			return await HttpClient.PostAsJsonAsync("api/ValidationLogic/IsInvalidBranch?strBranchSraId=" + strBranchSraId + "&strCompanyName=" + strCompanyName + "&strPostCode=" + strPostCode, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		public virtual Boolean IsInvalidBranch(String strBranchSraId,String strCompanyName,String strPostCode)
		{
						 var result = Task.Run(() => IsInvalidBranchAsync(strBranchSraId, strCompanyName, strPostCode)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> IsInvalidEmployeeAsync(String strSraId,String strLastName,String strCompanyName,Boolean IsColp)
		{
			return await HttpClient.PostAsJsonAsync("api/ValidationLogic/IsInvalidEmployee?strSraId=" + strSraId + "&strLastName=" + strLastName + "&strCompanyName=" + strCompanyName + "&IsColp=" + IsColp, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		public virtual Boolean IsInvalidEmployee(String strSraId,String strLastName,String strCompanyName,Boolean IsColp)
		{
						 var result = Task.Run(() => IsInvalidEmployeeAsync(strSraId, strLastName, strCompanyName, IsColp)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DuplicateComplianceOfficerAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			return await HttpClient.PostAsJsonAsync("api/ValidationLogic/DuplicateComplianceOfficer?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO DuplicateComplianceOfficer(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
						 var result = Task.Run(() => DuplicateComplianceOfficerAsync(CORegulator, CORegulatorNumber, COFirmName, COFirmTradingName, COLastName, COEmail)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<RegistrationValidationErrorDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DuplicateCompanyAsync(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail)
		{
			return await HttpClient.PostAsJsonAsync("api/ValidationLogic/DuplicateCompany?FirmRegulator=" + FirmRegulator + "&BranchRegulatorNumber=" + BranchRegulatorNumber + "&FirmName=" + FirmName + "&FirmTradingName=" + FirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO DuplicateCompany(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail)
		{
						 var result = Task.Run(() => DuplicateCompanyAsync(FirmRegulator, BranchRegulatorNumber, FirmName, FirmTradingName, COLastName, COEmail)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<RegistrationValidationErrorDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> COwithAnotherFirmAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			return await HttpClient.PostAsJsonAsync("api/ValidationLogic/COwithAnotherFirm?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO COwithAnotherFirm(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
						 var result = Task.Run(() => COwithAnotherFirmAsync(CORegulator, CORegulatorNumber, COFirmName, COFirmTradingName, COLastName, COEmail)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<RegistrationValidationErrorDTO>().Result;
			 		}

		#endregion
	}
}
#endregion

