//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.Business.Client.Models;
using Bec.TargetFramework.Entities;
using Bec.TargetFramework.Entities.Enums;
using System.Web.Http;
using BrockAllen.MembershipReboot;
using ServiceStack.Text;
using nClam;

#region Proxies
namespace Bec.TargetFramework.Business.Client
{
	public partial class Configuration
	{
		public static string WebApiProxyBaseAddress = "http://localhost:9000";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.Business.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace Bec.TargetFramework.Business.Client.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	public partial interface IAddressLogicClient : IClientBase	{	
		Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber);
		List<PostCodeDTO> FindAddressesByPostCodeSync(String postCode,String buildingNameOrNumber);
		Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode);
		GoogleGeoCodeResponse GeoCodePostcodeSync(String postCode);
	}
	 
	public partial interface IBankAccountLogicClient : IClientBase	{	
		Task<Boolean> HasOrganisationAnySafeBankAccountAsync(Guid organisationID);
		Boolean HasOrganisationAnySafeBankAccountSync(Guid organisationID);
		Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOrganisationBankAccountsAsync(Guid orgID);
		List<VOrganisationBankAccountsWithStatusDTO> GetOrganisationBankAccountsSync(Guid orgID);
		Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOutstandingBankAccountsAsync();
		List<VOrganisationBankAccountsWithStatusDTO> GetOutstandingBankAccountsSync();
		Task<Guid> AddBankAccountAsync(Guid orgID,OrganisationBankAccountDTO accountDTO);
		Guid AddBankAccountSync(Guid orgID,OrganisationBankAccountDTO accountDTO);
		Task AddBankAccountStatusAsync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest);
		void AddBankAccountStatusSync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest);
		Task<Boolean> CheckBankAccountAsync(Guid orgID,Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode);
		Boolean CheckBankAccountSync(Guid orgID,Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode);
		Task WriteCheckAuditAsync(Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode,Boolean isMatch);
		void WriteCheckAuditSync(Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode,Boolean isMatch);
		Task ToggleBankAccountActiveAsync(Guid orgID,Guid baID,Boolean active,String notes);
		void ToggleBankAccountActiveSync(Guid orgID,Guid baID,Boolean active,String notes);
		Task PublishCheckNoMatchNotificationAsync(Guid uaoID,Guid uaotxID,String accountNumber,String sortCode);
		void PublishCheckNoMatchNotificationSync(Guid uaoID,Guid uaotxID,String accountNumber,String sortCode);
	}
	 
	public partial interface IClassificationDataLogicClient : IClientBase	{	
		Task<List<CountryCodeDTO>> GetCountriesAsync();
		List<CountryCodeDTO> GetCountriesSync();
		Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName);
		List<ClassificationTypeDTO> GetRootClassificationDataForTypeNameSync(String typeName);
		Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID);
		List<ClassificationTypeDTO> GetSubClassificationDataForParentIDSync(Int32 classificationTypeID);
		Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName);
		Int32 GetClassificationDataForTypeNameSync(String categoryName,String typeName);
	}
	 
	public partial interface IFileLogicClient : IClientBase	{	
		Task<ClamScanResult> UploadFileAsync(FileDTO file);
		ClamScanResult UploadFileSync(FileDTO file);
		Task ClearUnusedFilesAsync(Guid uaoID);
		void ClearUnusedFilesSync(Guid uaoID);
		Task<FileDTO> DownloadFileAsync(Guid fileID,Guid parentID);
		FileDTO DownloadFileSync(Guid fileID,Guid parentID);
		Task RemovePendingUploadAsync(Guid uaoID,Guid id,String filename);
		void RemovePendingUploadSync(Guid uaoID,Guid id,String filename);
		Task<ClamScanResult> ScanForVirusAsync(ScanBytesDTO data);
		ClamScanResult ScanForVirusSync(ScanBytesDTO data);
	}
	 
	public partial interface IInvoiceLogicClient : IClientBase	{	
		Task<Boolean> DoesInvoiceExistForShoppingCartAsync(Guid shoppingCartId);
		Boolean DoesInvoiceExistForShoppingCartSync(Guid shoppingCartId);
		Task<VOrganisationDetailDTO> GetPaymentProviderOrganisationDetailAsync();
		VOrganisationDetailDTO GetPaymentProviderOrganisationDetailSync();
		Task<VInvoiceWithCurrentTransactionOrderStatusDTO> GetInvoiceWithCurrentTransactionOrderStatusAsync(Guid invoiceID);
		VInvoiceWithCurrentTransactionOrderStatusDTO GetInvoiceWithCurrentTransactionOrderStatusSync(Guid invoiceID);
		Task<InvoiceDTO> GetInvoiceForShoppingCartAsync(Guid shoppingCartId);
		InvoiceDTO GetInvoiceForShoppingCartSync(Guid shoppingCartId);
		Task<InvoiceDTO> CreateAndSaveInvoiceFromShoppingCartAsync(Guid cartID,String reference);
		InvoiceDTO CreateAndSaveInvoiceFromShoppingCartSync(Guid cartID,String reference);
		Task DeleteInvoiceAsync(Guid invoiceID);
		void DeleteInvoiceSync(Guid invoiceID);
		Task FreezeInvoiceAsync(Guid invoiceID);
		void FreezeInvoiceSync(Guid invoiceID);
		Task CloseInvoiceAsync(Guid invoiceID);
		void CloseInvoiceSync(Guid invoiceID);
		Task MarkInvoiceWithAccountingStatusAsync(Guid invoiceID,InvoiceAccountingStatusIDEnum value);
		void MarkInvoiceWithAccountingStatusSync(Guid invoiceID,InvoiceAccountingStatusIDEnum value);
		Task MarkInvoiceAsPaidAsync(Guid invoiceID);
		void MarkInvoiceAsPaidSync(Guid invoiceID);
		Task MarkInvoiceAsUnpaidAsync(Guid invoiceID);
		void MarkInvoiceAsUnpaidSync(Guid invoiceID);
		Task MarkInvoiceAsCancelledAsync(Guid invoiceID);
		void MarkInvoiceAsCancelledSync(Guid invoiceID);
		Task MarkInvoiceAsProcessingAsync(Guid invoiceID);
		void MarkInvoiceAsProcessingSync(Guid invoiceID);
		Task MarkInvoiceAsPaymentDueAsync(Guid invoiceID);
		void MarkInvoiceAsPaymentDueSync(Guid invoiceID);
		Task MarkInvoiceAsActiveAsync(Guid invoiceID);
		void MarkInvoiceAsActiveSync(Guid invoiceID);
		Task MarkInvoiceAsPaymentScheduledAsync(Guid invoiceID);
		void MarkInvoiceAsPaymentScheduledSync(Guid invoiceID);
	}
	 
	public partial interface IMiscLogicClient : IClientBase	{	
		Task<Guid> AddNewsArticleAsync(NewsArticleDTO dto);
		Guid AddNewsArticleSync(NewsArticleDTO dto);
	}
	 
	public partial interface INotificationLogicClient : IClientBase	{	
		Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);
		Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriodSync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);
		Task<IEnumerable<Guid>> GetNotificationOrganisationUaoIdsAsync(Guid orgID,String rolename);
		IEnumerable<Guid> GetNotificationOrganisationUaoIdsSync(Guid orgID,String rolename);
		Task SaveNotificationConversationAsync(Nullable<Guid> activityID,Nullable<ActivityType> activityType,String overrideSubject,Boolean isSystemMessage,NotificationDTO dto);
		void SaveNotificationConversationSync(Nullable<Guid> activityID,Nullable<ActivityType> activityType,String overrideSubject,Boolean isSystemMessage,NotificationDTO dto);
		Task<Guid> SaveNotificationAsync(NotificationDTO dto);
		Guid SaveNotificationSync(NotificationDTO dto);
		Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);
		List<VNotificationConstructGroupDTO> GetNotificationGroupConstructsSync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);
		Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber);
		NotificationConstructDTO GetNotificationConstructSync(Guid organisationNotificationConstructID,Int32 versionNumber);
		Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);
		List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedSync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);
		Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name);
		NotificationConstructDTO GetLatestNotificationConstructIdFromNameSync(String name);
		Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber);
		VNotificationConstructDTO GetNotificationConstructViewDataSync(Guid organisationNotificationConstructID,Int32 versionNumber);
		Task<IEnumerable<VDefaultEmailAddressDTO>> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);
		IEnumerable<VDefaultEmailAddressDTO> RecipientAddressDetailSync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);
		Task<List<ConversationDTO>> GetLatestUnreadConversationsAsync(Guid userAccountOrganisationId,Int32 count);
		List<ConversationDTO> GetLatestUnreadConversationsSync(Guid userAccountOrganisationId,Int32 count);
		Task<Int32> GetUnreadConversationsCountAsync(Guid userAccountOrganisationId);
		Int32 GetUnreadConversationsCountSync(Guid userAccountOrganisationId);
		Task<List<VNotificationViewOnlyUaoDTO>> GetInternalAsync(Guid userAccountOrganisationId);
		List<VNotificationViewOnlyUaoDTO> GetInternalSync(Guid userAccountOrganisationId);
		Task<NotificationContentDTO> GetNotificationContentAsync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat);
		NotificationContentDTO GetNotificationContentSync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat);
		Task<List<VNotificationInternalUnreadDTO>> GetUnreadNotificationsAsync(Guid userId,NotificationConstructEnum[] types);
		List<VNotificationInternalUnreadDTO> GetUnreadNotificationsSync(Guid userId,NotificationConstructEnum[] types);
		Task<NotificationResultDTO> GetTcAndCsTextAsync(Guid accountID);
		NotificationResultDTO GetTcAndCsTextSync(Guid accountID);
		Task<Byte[]> RetrieveNotificationConstructDataAsync(Guid notificationConstructID,Int32 versionNumber,DTOMap data);
		Byte[] RetrieveNotificationConstructDataSync(Guid notificationConstructID,Int32 versionNumber,DTOMap data);
		Task MarkAcceptedAsync(Guid notificationID,Guid userID);
		void MarkAcceptedSync(Guid notificationID,Guid userID);
		Task UpdateEventStatusAsync(Guid eventStatusID,String status,String recipients,String subject,String body);
		void UpdateEventStatusSync(Guid eventStatusID,String status,String recipients,String subject,String body);
		Task<List<EventStatusDTO>> GetEventStatusAsync(String eventName,String eventReference);
		List<EventStatusDTO> GetEventStatusSync(String eventName,String eventReference);
		Task PublishNewInternalMessagesNotificationEventAsync(IEnumerable<Guid> recipientUaoIds);
		void PublishNewInternalMessagesNotificationEventSync(IEnumerable<Guid> recipientUaoIds);
		Task<Guid> CreateConversationAsync(String fromHash,Guid uaoID,Guid attachmentsID,Nullable<ActivityType> activityTypeID,Nullable<Guid> activityID,String subject,String message,Boolean isSystemMessage,String[] participantHashes);
		Guid CreateConversationSync(String fromHash,Guid uaoID,Guid attachmentsID,Nullable<ActivityType> activityTypeID,Nullable<Guid> activityID,String subject,String message,Boolean isSystemMessage,String[] participantHashes);
		Task ReplyToConversationAsync(String fromHash,Guid uaoID,Guid conversationID,Guid attachmentsID,String message);
		void ReplyToConversationSync(String fromHash,Guid uaoID,Guid conversationID,Guid attachmentsID,String message);
		Task MarkAsReadAsync(Guid uaoID,Guid conversationID);
		void MarkAsReadSync(Guid uaoID,Guid conversationID);
		Task<List<VSafeSendRecipientDTO>> GetActivityRecipientsAsync(Guid senderUaoID,ActivityType activityTypeID,Guid activityID);
		List<VSafeSendRecipientDTO> GetActivityRecipientsSync(Guid senderUaoID,ActivityType activityTypeID,Guid activityID);
		Task<IEnumerable<MessageDTO>> GetMessagesAsync(Guid conversationId,Guid uaoId,Int32 page,Int32 pageSize);
		IEnumerable<MessageDTO> GetMessagesSync(Guid conversationId,Guid uaoId,Int32 page,Int32 pageSize);
		Task<Int32> GetConversationRankAsync(Guid uaoID,Guid convID);
		Int32 GetConversationRankSync(Guid uaoID,Guid convID);
		Task<ConversationResultDTO<VConversationDTO>> GetConversationsAsync(Guid uaoId,Nullable<ActivityType> activityType,Nullable<Guid> activityId,Int32 take,Int32 skip);
		ConversationResultDTO<VConversationDTO> GetConversationsSync(Guid uaoId,Nullable<ActivityType> activityType,Nullable<Guid> activityId,Int32 take,Int32 skip);
		Task<ConversationResultDTO<FnGetConversationActivityResultDTO>> GetConversationsActivityAsync(Guid uaoID,String userOrgTypeName,Guid orgID,ActivityType activityType,Guid activityId,Int32 take,Int32 skip);
		ConversationResultDTO<FnGetConversationActivityResultDTO> GetConversationsActivitySync(Guid uaoID,String userOrgTypeName,Guid orgID,ActivityType activityType,Guid activityId,Int32 take,Int32 skip);
		Task<List<CreateConversationRecipientDTO>> GetUserSafeSendGroupsAsync(Guid uaoId,Guid orgId);
		List<CreateConversationRecipientDTO> GetUserSafeSendGroupsSync(Guid uaoId,Guid orgId);
	}
	 
	public partial interface IOrganisationLogicClient : IClientBase	{	
		Task ExpireTemporaryLoginsAsync(Int32 days,Int32 hours,Int32 minutes);
		void ExpireTemporaryLoginsSync(Int32 days,Int32 hours,Int32 minutes);
		Task ExpireUserAccountOrganisationAsync(Guid uaoID);
		void ExpireUserAccountOrganisationSync(Guid uaoID);
		Task<Boolean> IsOrganisationInSystemAsync(Nullable<Guid> orgID,String regulatorNumber);
		Boolean IsOrganisationInSystemSync(Nullable<Guid> orgID,String regulatorNumber);
		Task RejectOrganisationAsync(RejectCompanyDTO dto);
		void RejectOrganisationSync(RejectCompanyDTO dto);
		Task UnverifyOrganisationAsync(RejectCompanyDTO dto);
		void UnverifyOrganisationSync(RejectCompanyDTO dto);
		Task ActivateOrganisationAsync(Guid organisationID);
		void ActivateOrganisationSync(Guid organisationID);
		Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus);
		List<VOrganisationWithStatusAndAdminDTO> GetCompaniesSync(ProfessionalOrganisationStatusEnum orgStatus);
		Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(AddCompanyDTO dto);
		Guid AddNewUnverifiedOrganisationAndAdministratorSync(AddCompanyDTO dto);
		Task<UserAccountOrganisationDTO> AddNewUserToOrganisationAsync(AddNewUserToOrganisationDTO dto);
		UserAccountOrganisationDTO AddNewUserToOrganisationSync(AddNewUserToOrganisationDTO dto);
		Task AddPersonalDetailsAsync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto);
		void AddPersonalDetailsSync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto);
		Task<Boolean> RequiresPersonalDetailsAsync(Guid uaoId);
		Boolean RequiresPersonalDetailsSync(Guid uaoId);
		Task CreateTsAndCsNotificationAsync(Guid userOrgID,NotificationConstructEnum type);
		void CreateTsAndCsNotificationSync(Guid userOrgID,NotificationConstructEnum type);
		Task<Nullable<Guid>> AddOrganisationAsync();
		Nullable<Guid> AddOrganisationSync();
		Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync();
		Nullable<Guid> GetTemporaryOrganisationBranchIDSync();
		Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id);
		VOrganisationDTO GetOrganisationDTOSync(Guid id);
		Task<VOrganisationWithStatusAndAdminDTO> GetOrganisationWithStatusAndAdminAsync(Guid id);
		VOrganisationWithStatusAndAdminDTO GetOrganisationWithStatusAndAdminSync(Guid id);
		Task AddOrganisationStatusAsync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes);
		void AddOrganisationStatusSync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes);
		Task UpdateOrganisationDetailsAsync(VerifyCompanyDTO dto);
		void UpdateOrganisationDetailsSync(VerifyCompanyDTO dto);
		Task AddNotesAsync(Guid orgID,Guid uaoID,String notes);
		void AddNotesSync(Guid orgID,Guid uaoID,String notes);
		Task<Boolean> IsSafeSendEnabledAsync(Guid organisationID);
		Boolean IsSafeSendEnabledSync(Guid organisationID);
		Task AddOrUpdateSafeSendEnabledAsync(Guid orgID,Boolean safeSendEnabled);
		void AddOrUpdateSafeSendEnabledSync(Guid orgID,Boolean safeSendEnabled);
		Task<Boolean> CanLenderNameBeUsedAsync(String lenderName);
		Boolean CanLenderNameBeUsedSync(String lenderName);
	}
	 
	public partial interface IPaymentLogicClient : IClientBase	{	
		Task<TransactionOrderPaymentDTO> GetTheSuccessfulOrderPaymentForTransactionOrderAsync(Guid transactionOrderId);
		TransactionOrderPaymentDTO GetTheSuccessfulOrderPaymentForTransactionOrderSync(Guid transactionOrderId);
		Task<Boolean> DoesASuccessfulOrderPaymentExistForTransactionOrderAsync(Guid transactionOrderId);
		Boolean DoesASuccessfulOrderPaymentExistForTransactionOrderSync(Guid transactionOrderId);
		Task<TransactionOrderPaymentDTO> ProcessPaymentTransactionAsync(OrderRequestDTO request);
		TransactionOrderPaymentDTO ProcessPaymentTransactionSync(OrderRequestDTO request);
	}
	 
	public partial interface IProductLogicClient : IClientBase	{	
		Task<ProductDTO> GetTopUpProductAsync();
		ProductDTO GetTopUpProductSync();
		Task<ProductDetailDTO> GetBankAccountCheckProductAsync();
		ProductDetailDTO GetBankAccountCheckProductSync();
	}
	 
	public partial interface IShoppingCartLogicClient : IClientBase	{	
		Task<ShoppingCartDTO> CreateShoppingCartAsync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode);
		ShoppingCartDTO CreateShoppingCartSync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode);
		Task AddProductToShoppingCartAsync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice);
		void AddProductToShoppingCartSync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice);
		Task RemoveProductFromShoppingCartAsync(Guid cartID,Guid itemID);
		void RemoveProductFromShoppingCartSync(Guid cartID,Guid itemID);
	}
	 
	public partial interface ISmsTransactionLogicClient : IClientBase	{	
		Task<Guid> AddSmsTransactionAsync(Guid orgID,Guid uaoID,AddSmsTransactionDTO dto);
		Guid AddSmsTransactionSync(Guid orgID,Guid uaoID,AddSmsTransactionDTO dto);
		Task EditSmsTransactionAsync(EditSmsTransactionDTO editSmsTransactionDto);
		void EditSmsTransactionSync(EditSmsTransactionDTO editSmsTransactionDto);
		Task AssignBuyerPartyToTransactionAsync(AssignBuyerPartyToTransactionDTO assignBuyerPartyToTransactionDTO);
		void AssignBuyerPartyToTransactionSync(AssignBuyerPartyToTransactionDTO assignBuyerPartyToTransactionDTO);
		Task EditBuyerPartyAsync(EditBuyerPartyDTO editBuyerPartyDto);
		void EditBuyerPartySync(EditBuyerPartyDTO editBuyerPartyDto);
		Task ReplaceSrcFundsBankAccountsAsync(Guid uaoTxID,IEnumerable<SmsSrcFundsBankAccountDTO> srcFundsBankAccounts);
		void ReplaceSrcFundsBankAccountsSync(Guid uaoTxID,IEnumerable<SmsSrcFundsBankAccountDTO> srcFundsBankAccounts);
		Task<Int32> GetSmsTransactionRankAsync(Guid orgID,Guid txID);
		Int32 GetSmsTransactionRankSync(Guid orgID,Guid txID);
		Task<TransactionOrderPaymentDTO> PurchaseSafeBuyerProductAsync(Guid smsTransactionID,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,Boolean free,OrderRequestDTO orderRequest);
		TransactionOrderPaymentDTO PurchaseSafeBuyerProductSync(Guid smsTransactionID,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,Boolean free,OrderRequestDTO orderRequest);
		Task<IEnumerable<SmsTransactionPendingUpdateCountDTO>> SmsTransactionPendingUpdateCountAsync(IEnumerable<Guid> ids);
		IEnumerable<SmsTransactionPendingUpdateCountDTO> SmsTransactionPendingUpdateCountSync(IEnumerable<Guid> ids);
		Task<IEnumerable<Guid>> GetSmsTransactionRelatedPartyUaoIdsAsync(Guid txID);
		IEnumerable<Guid> GetSmsTransactionRelatedPartyUaoIdsSync(Guid txID);
		Task<Boolean> CheckDuplicateUserSmsTransactionAsync(Guid orgID,String email,SmsTransactionDTO dto);
		Boolean CheckDuplicateUserSmsTransactionSync(Guid orgID,String email,SmsTransactionDTO dto);
		Task AdviseProductAsync(Guid txID,Guid orgID);
		void AdviseProductSync(Guid txID,Guid orgID);
		Task<SmsTransactionDTO> GetSmsTransactionWithPendingUpdatesAsync(Guid txID);
		SmsTransactionDTO GetSmsTransactionWithPendingUpdatesSync(Guid txID);
		Task ResolveSmsTransactionPendingUpdatesAsync(Guid txID,Guid uaoID,List<FieldUpdateDTO> updates);
		void ResolveSmsTransactionPendingUpdatesSync(Guid txID,Guid uaoID,List<FieldUpdateDTO> updates);
		Task<Boolean> IsSafeBuyerPotentiallyFreeAsync(Guid txID);
		Boolean IsSafeBuyerPotentiallyFreeSync(Guid txID);
		Task<Boolean> SmsTransactionQualifiesFreeAsync(Guid txID);
		Boolean SmsTransactionQualifiesFreeSync(Guid txID);
		Task<CartPricingDTO> EnsureCartAsync(Guid txID,Guid uaoID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum);
		CartPricingDTO EnsureCartSync(Guid txID,Guid uaoID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum);
	}
	 
	public partial interface ITFSettingsLogicClient : IClientBase	{	
		Task<Dictionary<String, String>> GetSettingsAsync();
		Dictionary<String, String> GetSettingsSync();
	}
	 
	public partial interface ITransactionOrderLogicClient : IClientBase	{	
		Task<TransactionOrderDTO> GetTransactionForInvoiceAsync(Guid invoiceId);
		TransactionOrderDTO GetTransactionForInvoiceSync(Guid invoiceId);
		Task<Boolean> DoesTransactionExistForInvoiceAsync(Guid invoiceId);
		Boolean DoesTransactionExistForInvoiceSync(Guid invoiceId);
		Task<TransactionOrderDTO> CreateAndSaveTransactionOrderFromShoppingCartDTOAsync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue);
		TransactionOrderDTO CreateAndSaveTransactionOrderFromShoppingCartDTOSync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue);
	}
	 
	public partial interface IUserAccountAuditLogicClient : IClientBase	{	
		Task CreateAndSaveAuditAsync(String requestData,WebUserObject wuo);
		void CreateAndSaveAuditSync(String requestData,WebUserObject wuo);
	}
	 
	public partial interface IUserLogicClient : IClientBase, BrockAllen.MembershipReboot.AccountService.IPartialUserLogicController	{	
		Task<UserLoginValidation> AuthenticateUserAsync(String username,String password);
		UserLoginValidation AuthenticateUserSync(String username,String password);
		Task<ContactDTO> AddUserAsync(ContactDTO dto);
		ContactDTO AddUserSync(ContactDTO dto);
		Task ResetUserPasswordAsync(Guid userID,String newPassword,Boolean doNotRequirePin,String pin);
		void ResetUserPasswordSync(Guid userID,String newPassword,Boolean doNotRequirePin,String pin);
		Task<Boolean> HasPasswordExpiredAsync(Guid userID);
		Boolean HasPasswordExpiredSync(Guid userID);
		Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser);
		void LockOrUnlockUserSync(Guid userId,Boolean lockUser);
		Task<Boolean> IsUserExistAsync(String userName);
		Boolean IsUserExistSync(String userName);
		Task<Boolean> IsEmailExistAsync(String email);
		Boolean IsEmailExistSync(String email);
		Task<Boolean> IsUserAccountRegisteredAsync(Guid uaoId);
		Boolean IsUserAccountRegisteredSync(Guid uaoId);
		Task<IEnumerable<AddressDTO>> GetUserAddressesAsync(Guid contactID);
		IEnumerable<AddressDTO> GetUserAddressesSync(Guid contactID);
		Task<List<UserAccount>> GetAllUserAccountAsync();
		List<UserAccount> GetAllUserAccountSync();
		Task<UserAccount> GetUserAccountAsync(Guid key);
		UserAccount GetUserAccountSync(Guid key);
		Task<UserAccount> GetBAUserAccountByEmailAsync(String email);
		UserAccount GetBAUserAccountByEmailSync(String email);
		Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id);
		UserAccount GetBAUserAccountByEmailAndNotIDSync(String email,Guid id);
		Task<UserAccount> GetBAUserAccountByUsernameAsync(String username);
		UserAccount GetBAUserAccountByUsernameSync(String username);
		Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly);
		List<UserAccountDTO> GetUserAccountByEmailSync(String email,Boolean permanentAccountonly);
		Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName);
		UserAccountDTO GetUserAccountByUsernameSync(String userName);
		Task<List<ContactDTO>> GetUserContactsAsync(Guid userId);
		List<ContactDTO> GetUserContactsSync(Guid userId);
		Task<List<UserAccount>> GetUserAccountsAsync(Guid key);
		List<UserAccount> GetUserAccountsSync(Guid key);
		Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID);
		List<UserAccountOrganisationDTO> GetUserAccountOrganisationSync(Guid accountID);
		Task AddUserAccountAsync(UserAccount user);
		void AddUserAccountSync(UserAccount user);
		Task RemoveUserAccountAsync(UserAccount user);
		void RemoveUserAccountSync(UserAccount user);
		Task UpdateUserAccountAsync(UserAccount user);
		void UpdateUserAccountSync(UserAccount user);
		Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID);
		List<UserClaimDTO> GetUserClaimsSync(Guid userId,Guid organisationID);
		Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID);
		ContactDTO GetUserAccountOrganisationPrimaryContactSync(Guid uaoID);
		Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg);
		VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationTypeSync(Guid accountID,Boolean personalOrg);
		Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID);
		List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgTypeSync(Guid accountID);
		Task<List<String>> UserLoginSessionsAsync(Guid userId);
		List<String> UserLoginSessionsSync(Guid userId);
		Task LogEveryoneElseOutAsync(Guid userId,String sessionId);
		void LogEveryoneElseOutSync(Guid userId,String sessionId);
		Task LogUserOutAsync(Guid userId,String sessionId);
		void LogUserOutSync(Guid userId,String sessionId);
		Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);
		void SaveUserAccountLoginSessionSync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);
		Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData);
		void SaveUserAccountLoginSessionDataSync(Guid userId,String sessionId,Dictionary<String, String> requestData);
		Task<Boolean> DoesUserExistAsync(Guid userID);
		Boolean DoesUserExistSync(Guid userID);
		Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID);
		UserAccountOrganisationDTO GetPermanentUAOSync(Guid userID);
		Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId);
		Guid GetPersonalUserAccountOrganisationSync(Guid userId);
		Task<UserAccount> CreateAccountAsync(String userName,String password,String email,String phoneNumber,Guid userId);
		UserAccount CreateAccountSync(String userName,String password,String email,String phoneNumber,Guid userId);
		Task CreateContactAsync(ContactDTO contactDTO);
		void CreateContactSync(ContactDTO contactDTO);
		Task<Boolean> ContactExistsAsync(Guid parentID);
		Boolean ContactExistsSync(Guid parentID);
		Task DeleteAccountAsync(Guid userID);
		void DeleteAccountSync(Guid userID);
		Task CloseAccountAsync(Guid userID);
		void CloseAccountSync(Guid userID);
		Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync();
		List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedInSync();
		Task SendUsernameReminderAsync(String email);
		void SendUsernameReminderSync(String email);
		Task CreatePasswordResetRequestAsync(String username);
		void CreatePasswordResetRequestSync(String username);
		Task SendTextMessageAsync(String phoneNumber,String message);
		void SendTextMessageSync(String phoneNumber,String message);
		Task GeneratePinAsync(Guid uaoID,Boolean blank,Boolean overwriteExisting,Boolean sendToMobilePhone);
		void GeneratePinSync(Guid uaoID,Boolean blank,Boolean overwriteExisting,Boolean sendToMobilePhone);
		Task<Boolean> IncrementInvalidPINAsync(Guid uaoID);
		Boolean IncrementInvalidPINSync(Guid uaoID);
		Task RegisterUserAsync(Guid uaoId,String phoneNumber,String password);
		void RegisterUserSync(Guid uaoId,String phoneNumber,String password);
		Task<List<UserAccountOrganisationRoleDTO>> GetRolesAsync(Guid uaoID,Int32 withRelatedLevel);
		List<UserAccountOrganisationRoleDTO> GetRolesSync(Guid uaoID,Int32 withRelatedLevel);
		Task<List<UserAccountOrganisationSafeSendGroupDTO>> GetSafeSendGroupsAsync(Guid uaoID);
		List<UserAccountOrganisationSafeSendGroupDTO> GetSafeSendGroupsSync(Guid uaoID);
		Task ChangeUsernameAndEmailAsync(Guid uaoId,String newUsername);
		void ChangeUsernameAndEmailSync(Guid uaoId,String newUsername);
		Task<Boolean> CanEmailBeUsedAsPersonalAsync(String email,Nullable<Guid> txId,Nullable<Guid> uaoID);
		Boolean CanEmailBeUsedAsPersonalSync(String email,Nullable<Guid> txId,Nullable<Guid> uaoID);
		Task<Boolean> CanEmailBeUsedAsProfessionalAsync(String email,Nullable<Guid> uaoID);
		Boolean CanEmailBeUsedAsProfessionalSync(String email,Nullable<Guid> uaoID);
	}
	 
}
#endregion

#region Clients
namespace Bec.TargetFramework.Business.Client.Clients
{
	public abstract partial class ClientBase : IDisposable
	{
		public HttpClient HttpClient { get; protected set; }

		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode) return;
													
			if (response.Content == null)
                throw new NullReferenceException("HttpResponseMessage Content is null");
            else
            {
                HttpError he;
                try
                {
                    he = await response.Content.ReadAsAsync<HttpError>();
                }
                catch (Exception ex)
                {
                    Task<string> incorrectMessageTask = Task.Run(() => response.Content.ReadAsStringAsync());
                    throw new Exception(incorrectMessageTask.Result, ex);
                }
				if (he.ContainsKey("ExceptionMessage"))
					throw new Exception(he["ExceptionMessage"].ToString());
				else if (he.ContainsKey("Message"))
					throw new Exception(he["Message"].ToString());
				else
				throw new Exception(he.Keys.Dump() + ": " + he.Values.Dump());
            }		
		}

		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		public void Dispose()
		{
			HttpClient.Dispose();
		}

        protected async Task DeleteAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Delete, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task DeleteAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Delete, user, null);
            await EnsureSuccessAsync(response);
        }

		protected async Task<Tret> PostAsync<Tbody, Tret>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            return await HandleResponse<Tret>(response);
        }

		protected async Task PostAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task<Tret> GetAsync<Tret>(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            return await HandleResponse<Tret>(response);
        }

		protected async Task GetAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            await EnsureSuccessAsync(response);
        }

		private async Task<T> HandleResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccessAsync(response);
            return await response.ReadContentAsAsync<T>();
        }

        private Task<HttpResponseMessage> SendAsync<T>(string requestUri, HttpMethod method, string user, T value)
        {
            var req = new HttpRequestMessage
            {
                RequestUri = new Uri(requestUri, UriKind.RelativeOrAbsolute),
                Method = method
            };
            if (value != null) req.Content = new ObjectContent<T>(value, new JsonMediaTypeFormatter(), (MediaTypeHeaderValue)null);
            if (user != null) req.Headers.Add("User", user);
            return HttpClient.SendAsync(req);
        }

        protected string getHttpContextUser()
        {
            if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null)
                return HttpContext.Current.User.Identity.Name;
            else
                return null;
        }

		protected string mapArray<T>(string name, T[] values)
        {
            return string.Concat(values.Select(v => "&" + name + "=" + v.ToString()));
        }
	}
	public partial class AddressLogicClient : ClientBase, Interfaces.IAddressLogicClient	{		

		public AddressLogicClient(string url) : base(url)
		{
		}

		public AddressLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber)
		{
			postCode = postCode.UrlEncode();
			buildingNameOrNumber = buildingNameOrNumber.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, List<PostCodeDTO>>("api/AddressLogic/FindAddressesByPostCodeAsync?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user);
		}

		public virtual List<PostCodeDTO> FindAddressesByPostCodeSync(String postCode,String buildingNameOrNumber)
		{
			postCode = postCode.UrlEncode();
			buildingNameOrNumber = buildingNameOrNumber.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<PostCodeDTO>>("api/AddressLogic/FindAddressesByPostCodeAsync?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user)).Result;
		}

		public virtual Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode)
		{
			postCode = postCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, GoogleGeoCodeResponse>("api/AddressLogic/GeoCodePostcodeAsync?postCode=" + postCode, null, _user);
		}

		public virtual GoogleGeoCodeResponse GeoCodePostcodeSync(String postCode)
		{
			postCode = postCode.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, GoogleGeoCodeResponse>("api/AddressLogic/GeoCodePostcodeAsync?postCode=" + postCode, null, _user)).Result;
		}

		#endregion
	}
	public partial class BankAccountLogicClient : ClientBase, Interfaces.IBankAccountLogicClient	{		

		public BankAccountLogicClient(string url) : base(url)
		{
		}

		public BankAccountLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Boolean> HasOrganisationAnySafeBankAccountAsync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/BankAccountLogic/HasOrganisationAnySafeBankAccount?organisationID=" + organisationID, null, _user);
		}

		public virtual Boolean HasOrganisationAnySafeBankAccountSync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/BankAccountLogic/HasOrganisationAnySafeBankAccount?organisationID=" + organisationID, null, _user)).Result;
		}

		public virtual Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOrganisationBankAccountsAsync(Guid orgID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/BankAccountLogic/GetOrganisationBankAccounts?orgID=" + orgID, _user);
		}

		public virtual List<VOrganisationBankAccountsWithStatusDTO> GetOrganisationBankAccountsSync(Guid orgID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/BankAccountLogic/GetOrganisationBankAccounts?orgID=" + orgID, _user)).Result;
		}

		public virtual Task<List<VOrganisationBankAccountsWithStatusDTO>> GetOutstandingBankAccountsAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/BankAccountLogic/GetOutstandingBankAccounts", _user);
		}

		public virtual List<VOrganisationBankAccountsWithStatusDTO> GetOutstandingBankAccountsSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationBankAccountsWithStatusDTO>>("api/BankAccountLogic/GetOutstandingBankAccounts", _user)).Result;
		}

		public virtual Task<Guid> AddBankAccountAsync(Guid orgID,OrganisationBankAccountDTO accountDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrganisationBankAccountDTO, Guid>("api/BankAccountLogic/AddBankAccount?orgID=" + orgID, accountDTO, _user);
		}

		public virtual Guid AddBankAccountSync(Guid orgID,OrganisationBankAccountDTO accountDTO)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<OrganisationBankAccountDTO, Guid>("api/BankAccountLogic/AddBankAccount?orgID=" + orgID, accountDTO, _user)).Result;
		}

		public virtual Task AddBankAccountStatusAsync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrganisationBankAccountStateChangeDTO>("api/BankAccountLogic/AddBankAccountStatusAsync", bankAccountStatusChangeRequest, _user);
		}

		public virtual void AddBankAccountStatusSync(OrganisationBankAccountStateChangeDTO bankAccountStatusChangeRequest)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<OrganisationBankAccountStateChangeDTO>("api/BankAccountLogic/AddBankAccountStatusAsync", bankAccountStatusChangeRequest, _user)).Wait();
		}

		public virtual Task<Boolean> CheckBankAccountAsync(Guid orgID,Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/BankAccountLogic/CheckBankAccount?orgID=" + orgID + "&uaoID=" + uaoID + "&smsUserAccountOrganisationTransactionId=" + smsUserAccountOrganisationTransactionId + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, null, _user);
		}

		public virtual Boolean CheckBankAccountSync(Guid orgID,Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/BankAccountLogic/CheckBankAccount?orgID=" + orgID + "&uaoID=" + uaoID + "&smsUserAccountOrganisationTransactionId=" + smsUserAccountOrganisationTransactionId + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, null, _user)).Result;
		}

		public virtual Task WriteCheckAuditAsync(Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode,Boolean isMatch)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/BankAccountLogic/WriteCheckAudit?uaoID=" + uaoID + "&smsUserAccountOrganisationTransactionId=" + smsUserAccountOrganisationTransactionId + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode + "&isMatch=" + isMatch, null, _user);
		}

		public virtual void WriteCheckAuditSync(Guid uaoID,Guid smsUserAccountOrganisationTransactionId,String accountNumber,String sortCode,Boolean isMatch)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/BankAccountLogic/WriteCheckAudit?uaoID=" + uaoID + "&smsUserAccountOrganisationTransactionId=" + smsUserAccountOrganisationTransactionId + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode + "&isMatch=" + isMatch, null, _user)).Wait();
		}

		public virtual Task ToggleBankAccountActiveAsync(Guid orgID,Guid baID,Boolean active,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/BankAccountLogic/ToggleBankAccountActive?orgID=" + orgID + "&baID=" + baID + "&active=" + active + "&notes=" + notes, null, _user);
		}

		public virtual void ToggleBankAccountActiveSync(Guid orgID,Guid baID,Boolean active,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/BankAccountLogic/ToggleBankAccountActive?orgID=" + orgID + "&baID=" + baID + "&active=" + active + "&notes=" + notes, null, _user)).Wait();
		}

		public virtual Task PublishCheckNoMatchNotificationAsync(Guid uaoID,Guid uaotxID,String accountNumber,String sortCode)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/BankAccountLogic/PublishCheckNoMatchNotification?uaoID=" + uaoID + "&uaotxID=" + uaotxID + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, null, _user);
		}

		public virtual void PublishCheckNoMatchNotificationSync(Guid uaoID,Guid uaotxID,String accountNumber,String sortCode)
		{
			accountNumber = accountNumber.UrlEncode();
			sortCode = sortCode.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/BankAccountLogic/PublishCheckNoMatchNotification?uaoID=" + uaoID + "&uaotxID=" + uaotxID + "&accountNumber=" + accountNumber + "&sortCode=" + sortCode, null, _user)).Wait();
		}

		#endregion
	}
	public partial class ClassificationDataLogicClient : ClientBase, Interfaces.IClassificationDataLogicClient	{		

		public ClassificationDataLogicClient(string url) : base(url)
		{
		}

		public ClassificationDataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<List<CountryCodeDTO>> GetCountriesAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user);
		}

		public virtual List<CountryCodeDTO> GetCountriesSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user)).Result;
		}

		public virtual Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName)
		{
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user);
		}

		public virtual List<ClassificationTypeDTO> GetRootClassificationDataForTypeNameSync(String typeName)
		{
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user)).Result;
		}

		public virtual Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user);
		}

		public virtual List<ClassificationTypeDTO> GetSubClassificationDataForParentIDSync(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user)).Result;
		}

		public virtual Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			categoryName = categoryName.UrlEncode();
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		public virtual Int32 GetClassificationDataForTypeNameSync(String categoryName,String typeName)
		{
			categoryName = categoryName.UrlEncode();
			typeName = typeName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}

		#endregion
	}
	public partial class FileLogicClient : ClientBase, Interfaces.IFileLogicClient	{		

		public FileLogicClient(string url) : base(url)
		{
		}

		public FileLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<ClamScanResult> UploadFileAsync(FileDTO file)
		{
			string _user = getHttpContextUser();
			return PostAsync<FileDTO, ClamScanResult>("api/FileLogic/UploadFileAsync", file, _user);
		}

		public virtual ClamScanResult UploadFileSync(FileDTO file)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<FileDTO, ClamScanResult>("api/FileLogic/UploadFileAsync", file, _user)).Result;
		}

		public virtual Task ClearUnusedFilesAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/FileLogic/ClearUnusedFilesAsync?uaoID=" + uaoID, null, _user);
		}

		public virtual void ClearUnusedFilesSync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/FileLogic/ClearUnusedFilesAsync?uaoID=" + uaoID, null, _user)).Wait();
		}

		public virtual Task<FileDTO> DownloadFileAsync(Guid fileID,Guid parentID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, FileDTO>("api/FileLogic/DownloadFile?fileID=" + fileID + "&parentID=" + parentID, null, _user);
		}

		public virtual FileDTO DownloadFileSync(Guid fileID,Guid parentID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, FileDTO>("api/FileLogic/DownloadFile?fileID=" + fileID + "&parentID=" + parentID, null, _user)).Result;
		}

		public virtual Task RemovePendingUploadAsync(Guid uaoID,Guid id,String filename)
		{
			filename = filename.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/FileLogic/RemovePendingUploadAsync?uaoID=" + uaoID + "&id=" + id + "&filename=" + filename, null, _user);
		}

		public virtual void RemovePendingUploadSync(Guid uaoID,Guid id,String filename)
		{
			filename = filename.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/FileLogic/RemovePendingUploadAsync?uaoID=" + uaoID + "&id=" + id + "&filename=" + filename, null, _user)).Wait();
		}

		public virtual Task<ClamScanResult> ScanForVirusAsync(ScanBytesDTO data)
		{
			string _user = getHttpContextUser();
			return PostAsync<ScanBytesDTO, ClamScanResult>("api/FileLogic/ScanForVirus", data, _user);
		}

		public virtual ClamScanResult ScanForVirusSync(ScanBytesDTO data)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<ScanBytesDTO, ClamScanResult>("api/FileLogic/ScanForVirus", data, _user)).Result;
		}

		#endregion
	}
	public partial class InvoiceLogicClient : ClientBase, Interfaces.IInvoiceLogicClient	{		

		public InvoiceLogicClient(string url) : base(url)
		{
		}

		public InvoiceLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Boolean> DoesInvoiceExistForShoppingCartAsync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/InvoiceLogic/DoesInvoiceExistForShoppingCart?shoppingCartId=" + shoppingCartId, null, _user);
		}

		public virtual Boolean DoesInvoiceExistForShoppingCartSync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/InvoiceLogic/DoesInvoiceExistForShoppingCart?shoppingCartId=" + shoppingCartId, null, _user)).Result;
		}

		public virtual Task<VOrganisationDetailDTO> GetPaymentProviderOrganisationDetailAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<VOrganisationDetailDTO>("api/InvoiceLogic/GetPaymentProviderOrganisationDetail", _user);
		}

		public virtual VOrganisationDetailDTO GetPaymentProviderOrganisationDetailSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationDetailDTO>("api/InvoiceLogic/GetPaymentProviderOrganisationDetail", _user)).Result;
		}

		public virtual Task<VInvoiceWithCurrentTransactionOrderStatusDTO> GetInvoiceWithCurrentTransactionOrderStatusAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return GetAsync<VInvoiceWithCurrentTransactionOrderStatusDTO>("api/InvoiceLogic/GetInvoiceWithCurrentTransactionOrderStatus?invoiceID=" + invoiceID, _user);
		}

		public virtual VInvoiceWithCurrentTransactionOrderStatusDTO GetInvoiceWithCurrentTransactionOrderStatusSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VInvoiceWithCurrentTransactionOrderStatusDTO>("api/InvoiceLogic/GetInvoiceWithCurrentTransactionOrderStatus?invoiceID=" + invoiceID, _user)).Result;
		}

		public virtual Task<InvoiceDTO> GetInvoiceForShoppingCartAsync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return GetAsync<InvoiceDTO>("api/InvoiceLogic/GetInvoiceForShoppingCart?shoppingCartId=" + shoppingCartId, _user);
		}

		public virtual InvoiceDTO GetInvoiceForShoppingCartSync(Guid shoppingCartId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<InvoiceDTO>("api/InvoiceLogic/GetInvoiceForShoppingCart?shoppingCartId=" + shoppingCartId, _user)).Result;
		}

		public virtual Task<InvoiceDTO> CreateAndSaveInvoiceFromShoppingCartAsync(Guid cartID,String reference)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, InvoiceDTO>("api/InvoiceLogic/CreateAndSaveInvoiceFromShoppingCartAsync?cartID=" + cartID + "&reference=" + reference, null, _user);
		}

		public virtual InvoiceDTO CreateAndSaveInvoiceFromShoppingCartSync(Guid cartID,String reference)
		{
			reference = reference.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, InvoiceDTO>("api/InvoiceLogic/CreateAndSaveInvoiceFromShoppingCartAsync?cartID=" + cartID + "&reference=" + reference, null, _user)).Result;
		}

		public virtual Task DeleteInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return DeleteAsync("api/InvoiceLogic/DeleteInvoiceAsync?invoiceID=" + invoiceID, _user);
		}

		public virtual void DeleteInvoiceSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/InvoiceLogic/DeleteInvoiceAsync?invoiceID=" + invoiceID, _user)).Wait();
		}

		public virtual Task FreezeInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/FreezeInvoiceAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void FreezeInvoiceSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/FreezeInvoiceAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task CloseInvoiceAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/CloseInvoiceAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void CloseInvoiceSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/CloseInvoiceAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceWithAccountingStatusAsync(Guid invoiceID,InvoiceAccountingStatusIDEnum value)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceWithAccountingStatusAsync?invoiceID=" + invoiceID + "&value=" + value, null, _user);
		}

		public virtual void MarkInvoiceWithAccountingStatusSync(Guid invoiceID,InvoiceAccountingStatusIDEnum value)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceWithAccountingStatusAsync?invoiceID=" + invoiceID + "&value=" + value, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsPaidAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaidAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsPaidSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaidAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsUnpaidAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsUnpaidAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsUnpaidSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsUnpaidAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsCancelledAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsCancelledAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsCancelledSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsCancelledAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsProcessingAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsProcessingAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsProcessingSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsProcessingAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsPaymentDueAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentDueAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsPaymentDueSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentDueAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsActiveAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsActiveAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsActiveSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsActiveAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		public virtual Task MarkInvoiceAsPaymentScheduledAsync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentScheduledAsync?invoiceID=" + invoiceID, null, _user);
		}

		public virtual void MarkInvoiceAsPaymentScheduledSync(Guid invoiceID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/InvoiceLogic/MarkInvoiceAsPaymentScheduledAsync?invoiceID=" + invoiceID, null, _user)).Wait();
		}

		#endregion
	}
	public partial class MiscLogicClient : ClientBase, Interfaces.IMiscLogicClient	{		

		public MiscLogicClient(string url) : base(url)
		{
		}

		public MiscLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Guid> AddNewsArticleAsync(NewsArticleDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<NewsArticleDTO, Guid>("api/MiscLogic/AddNewsArticle", dto, _user);
		}

		public virtual Guid AddNewsArticleSync(NewsArticleDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<NewsArticleDTO, Guid>("api/MiscLogic/AddNewsArticle", dto, _user)).Result;
		}

		#endregion
	}
	public partial class NotificationLogicClient : ClientBase, Interfaces.INotificationLogicClient	{		

		public NotificationLogicClient(string url) : base(url)
		{
		}

		public NotificationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user);
		}

		public virtual Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriodSync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user)).Result;
		}

		public virtual Task<IEnumerable<Guid>> GetNotificationOrganisationUaoIdsAsync(Guid orgID,String rolename)
		{
			rolename = rolename.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<IEnumerable<Guid>>("api/NotificationLogic/GetNotificationOrganisationUaoIds?orgID=" + orgID + "&rolename=" + rolename, _user);
		}

		public virtual IEnumerable<Guid> GetNotificationOrganisationUaoIdsSync(Guid orgID,String rolename)
		{
			rolename = rolename.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<IEnumerable<Guid>>("api/NotificationLogic/GetNotificationOrganisationUaoIds?orgID=" + orgID + "&rolename=" + rolename, _user)).Result;
		}

		public virtual Task SaveNotificationConversationAsync(Nullable<Guid> activityID,Nullable<ActivityType> activityType,String overrideSubject,Boolean isSystemMessage,NotificationDTO dto)
		{
			overrideSubject = overrideSubject.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<NotificationDTO>("api/NotificationLogic/SaveNotificationConversationAsync?activityID=" + activityID + "&activityType=" + activityType + "&overrideSubject=" + overrideSubject + "&isSystemMessage=" + isSystemMessage, dto, _user);
		}

		public virtual void SaveNotificationConversationSync(Nullable<Guid> activityID,Nullable<ActivityType> activityType,String overrideSubject,Boolean isSystemMessage,NotificationDTO dto)
		{
			overrideSubject = overrideSubject.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<NotificationDTO>("api/NotificationLogic/SaveNotificationConversationAsync?activityID=" + activityID + "&activityType=" + activityType + "&overrideSubject=" + overrideSubject + "&isSystemMessage=" + isSystemMessage, dto, _user)).Wait();
		}

		public virtual Task<Guid> SaveNotificationAsync(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<NotificationDTO, Guid>("api/NotificationLogic/SaveNotificationAsync", dto, _user);
		}

		public virtual Guid SaveNotificationSync(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<NotificationDTO, Guid>("api/NotificationLogic/SaveNotificationAsync", dto, _user)).Result;
		}

		public virtual Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user);
		}

		public virtual List<VNotificationConstructGroupDTO> GetNotificationGroupConstructsSync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user)).Result;
		}

		public virtual Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		public virtual NotificationConstructDTO GetNotificationConstructSync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		public virtual Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user);
		}

		public virtual List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedSync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user)).Result;
		}

		public virtual Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name)
		{
			name = name.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user);
		}

		public virtual NotificationConstructDTO GetLatestNotificationConstructIdFromNameSync(String name)
		{
			name = name.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user)).Result;
		}

		public virtual Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		public virtual VNotificationConstructDTO GetNotificationConstructViewDataSync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		public virtual Task<IEnumerable<VDefaultEmailAddressDTO>> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, IEnumerable<VDefaultEmailAddressDTO>>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user);
		}

		public virtual IEnumerable<VDefaultEmailAddressDTO> RecipientAddressDetailSync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<VDefaultEmailAddressDTO>>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user)).Result;
		}

		public virtual Task<List<ConversationDTO>> GetLatestUnreadConversationsAsync(Guid userAccountOrganisationId,Int32 count)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<ConversationDTO>>("api/NotificationLogic/GetLatestUnreadConversations?userAccountOrganisationId=" + userAccountOrganisationId + "&count=" + count, _user);
		}

		public virtual List<ConversationDTO> GetLatestUnreadConversationsSync(Guid userAccountOrganisationId,Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ConversationDTO>>("api/NotificationLogic/GetLatestUnreadConversations?userAccountOrganisationId=" + userAccountOrganisationId + "&count=" + count, _user)).Result;
		}

		public virtual Task<Int32> GetUnreadConversationsCountAsync(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return GetAsync<Int32>("api/NotificationLogic/GetUnreadConversationsCount?userAccountOrganisationId=" + userAccountOrganisationId, _user);
		}

		public virtual Int32 GetUnreadConversationsCountSync(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/NotificationLogic/GetUnreadConversationsCount?userAccountOrganisationId=" + userAccountOrganisationId, _user)).Result;
		}

		public virtual Task<List<VNotificationViewOnlyUaoDTO>> GetInternalAsync(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetInternal?userAccountOrganisationId=" + userAccountOrganisationId, _user);
		}

		public virtual List<VNotificationViewOnlyUaoDTO> GetInternalSync(Guid userAccountOrganisationId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationViewOnlyUaoDTO>>("api/NotificationLogic/GetInternal?userAccountOrganisationId=" + userAccountOrganisationId, _user)).Result;
		}

		public virtual Task<NotificationContentDTO> GetNotificationContentAsync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationContentDTO>("api/NotificationLogic/GetNotificationContent?notificationId=" + notificationId + "&userAccountOrganisationId=" + userAccountOrganisationId + "&notificationExportFormat=" + notificationExportFormat, _user);
		}

		public virtual NotificationContentDTO GetNotificationContentSync(Guid notificationId,Guid userAccountOrganisationId,NotificationExportFormatIDEnum notificationExportFormat)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationContentDTO>("api/NotificationLogic/GetNotificationContent?notificationId=" + notificationId + "&userAccountOrganisationId=" + userAccountOrganisationId + "&notificationExportFormat=" + notificationExportFormat, _user)).Result;
		}

		public virtual Task<List<VNotificationInternalUnreadDTO>> GetUnreadNotificationsAsync(Guid userId,NotificationConstructEnum[] types)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VNotificationInternalUnreadDTO>>("api/NotificationLogic/GetUnreadNotifications?userId=" + userId + mapArray("types", types), _user);
		}

		public virtual List<VNotificationInternalUnreadDTO> GetUnreadNotificationsSync(Guid userId,NotificationConstructEnum[] types)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationInternalUnreadDTO>>("api/NotificationLogic/GetUnreadNotifications?userId=" + userId + mapArray("types", types), _user)).Result;
		}

		public virtual Task<NotificationResultDTO> GetTcAndCsTextAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<NotificationResultDTO>("api/NotificationLogic/GetTcAndCsText?accountID=" + accountID, _user);
		}

		public virtual NotificationResultDTO GetTcAndCsTextSync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationResultDTO>("api/NotificationLogic/GetTcAndCsText?accountID=" + accountID, _user)).Result;
		}

		public virtual Task<Byte[]> RetrieveNotificationConstructDataAsync(Guid notificationConstructID,Int32 versionNumber,DTOMap data)
		{
			string _user = getHttpContextUser();
			return PostAsync<DTOMap, Byte[]>("api/NotificationLogic/RetrieveNotificationConstructData?notificationConstructID=" + notificationConstructID + "&versionNumber=" + versionNumber, data, _user);
		}

		public virtual Byte[] RetrieveNotificationConstructDataSync(Guid notificationConstructID,Int32 versionNumber,DTOMap data)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<DTOMap, Byte[]>("api/NotificationLogic/RetrieveNotificationConstructData?notificationConstructID=" + notificationConstructID + "&versionNumber=" + versionNumber, data, _user)).Result;
		}

		public virtual Task MarkAcceptedAsync(Guid notificationID,Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/MarkAcceptedAsync?notificationID=" + notificationID + "&userID=" + userID, null, _user);
		}

		public virtual void MarkAcceptedSync(Guid notificationID,Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/MarkAcceptedAsync?notificationID=" + notificationID + "&userID=" + userID, null, _user)).Wait();
		}

		public virtual Task UpdateEventStatusAsync(Guid eventStatusID,String status,String recipients,String subject,String body)
		{
			status = status.UrlEncode();
			recipients = recipients.UrlEncode();
			subject = subject.UrlEncode();
			body = body.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/UpdateEventStatusAsync?eventStatusID=" + eventStatusID + "&status=" + status + "&recipients=" + recipients + "&subject=" + subject + "&body=" + body, null, _user);
		}

		public virtual void UpdateEventStatusSync(Guid eventStatusID,String status,String recipients,String subject,String body)
		{
			status = status.UrlEncode();
			recipients = recipients.UrlEncode();
			subject = subject.UrlEncode();
			body = body.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/UpdateEventStatusAsync?eventStatusID=" + eventStatusID + "&status=" + status + "&recipients=" + recipients + "&subject=" + subject + "&body=" + body, null, _user)).Wait();
		}

		public virtual Task<List<EventStatusDTO>> GetEventStatusAsync(String eventName,String eventReference)
		{
			eventName = eventName.UrlEncode();
			eventReference = eventReference.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<EventStatusDTO>>("api/NotificationLogic/GetEventStatus?eventName=" + eventName + "&eventReference=" + eventReference, _user);
		}

		public virtual List<EventStatusDTO> GetEventStatusSync(String eventName,String eventReference)
		{
			eventName = eventName.UrlEncode();
			eventReference = eventReference.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<EventStatusDTO>>("api/NotificationLogic/GetEventStatus?eventName=" + eventName + "&eventReference=" + eventReference, _user)).Result;
		}

		public virtual Task PublishNewInternalMessagesNotificationEventAsync(IEnumerable<Guid> recipientUaoIds)
		{
			string _user = getHttpContextUser();
			return PostAsync<IEnumerable<Guid>>("api/NotificationLogic/PublishNewInternalMessagesNotificationEvent", recipientUaoIds, _user);
		}

		public virtual void PublishNewInternalMessagesNotificationEventSync(IEnumerable<Guid> recipientUaoIds)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<IEnumerable<Guid>>("api/NotificationLogic/PublishNewInternalMessagesNotificationEvent", recipientUaoIds, _user)).Wait();
		}

		public virtual Task<Guid> CreateConversationAsync(String fromHash,Guid uaoID,Guid attachmentsID,Nullable<ActivityType> activityTypeID,Nullable<Guid> activityID,String subject,String message,Boolean isSystemMessage,String[] participantHashes)
		{
			fromHash = fromHash.UrlEncode();
			subject = subject.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<String[], Guid>("api/NotificationLogic/CreateConversation?fromHash=" + fromHash + "&uaoID=" + uaoID + "&attachmentsID=" + attachmentsID + "&activityTypeID=" + activityTypeID + "&activityID=" + activityID + "&subject=" + subject + "&message=" + message + "&isSystemMessage=" + isSystemMessage + mapArray("participantHashes", participantHashes), participantHashes, _user);
		}

		public virtual Guid CreateConversationSync(String fromHash,Guid uaoID,Guid attachmentsID,Nullable<ActivityType> activityTypeID,Nullable<Guid> activityID,String subject,String message,Boolean isSystemMessage,String[] participantHashes)
		{
			fromHash = fromHash.UrlEncode();
			subject = subject.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<String[], Guid>("api/NotificationLogic/CreateConversation?fromHash=" + fromHash + "&uaoID=" + uaoID + "&attachmentsID=" + attachmentsID + "&activityTypeID=" + activityTypeID + "&activityID=" + activityID + "&subject=" + subject + "&message=" + message + "&isSystemMessage=" + isSystemMessage + mapArray("participantHashes", participantHashes), participantHashes, _user)).Result;
		}

		public virtual Task ReplyToConversationAsync(String fromHash,Guid uaoID,Guid conversationID,Guid attachmentsID,String message)
		{
			fromHash = fromHash.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/ReplyToConversation?fromHash=" + fromHash + "&uaoID=" + uaoID + "&conversationID=" + conversationID + "&attachmentsID=" + attachmentsID + "&message=" + message, null, _user);
		}

		public virtual void ReplyToConversationSync(String fromHash,Guid uaoID,Guid conversationID,Guid attachmentsID,String message)
		{
			fromHash = fromHash.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/ReplyToConversation?fromHash=" + fromHash + "&uaoID=" + uaoID + "&conversationID=" + conversationID + "&attachmentsID=" + attachmentsID + "&message=" + message, null, _user)).Wait();
		}

		public virtual Task MarkAsReadAsync(Guid uaoID,Guid conversationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/NotificationLogic/MarkAsRead?uaoID=" + uaoID + "&conversationID=" + conversationID, null, _user);
		}

		public virtual void MarkAsReadSync(Guid uaoID,Guid conversationID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/NotificationLogic/MarkAsRead?uaoID=" + uaoID + "&conversationID=" + conversationID, null, _user)).Wait();
		}

		public virtual Task<List<VSafeSendRecipientDTO>> GetActivityRecipientsAsync(Guid senderUaoID,ActivityType activityTypeID,Guid activityID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VSafeSendRecipientDTO>>("api/NotificationLogic/GetActivityRecipients?senderUaoID=" + senderUaoID + "&activityTypeID=" + activityTypeID + "&activityID=" + activityID, _user);
		}

		public virtual List<VSafeSendRecipientDTO> GetActivityRecipientsSync(Guid senderUaoID,ActivityType activityTypeID,Guid activityID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VSafeSendRecipientDTO>>("api/NotificationLogic/GetActivityRecipients?senderUaoID=" + senderUaoID + "&activityTypeID=" + activityTypeID + "&activityID=" + activityID, _user)).Result;
		}

		public virtual Task<IEnumerable<MessageDTO>> GetMessagesAsync(Guid conversationId,Guid uaoId,Int32 page,Int32 pageSize)
		{
			string _user = getHttpContextUser();
			return GetAsync<IEnumerable<MessageDTO>>("api/NotificationLogic/GetMessages?conversationId=" + conversationId + "&uaoId=" + uaoId + "&page=" + page + "&pageSize=" + pageSize, _user);
		}

		public virtual IEnumerable<MessageDTO> GetMessagesSync(Guid conversationId,Guid uaoId,Int32 page,Int32 pageSize)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<IEnumerable<MessageDTO>>("api/NotificationLogic/GetMessages?conversationId=" + conversationId + "&uaoId=" + uaoId + "&page=" + page + "&pageSize=" + pageSize, _user)).Result;
		}

		public virtual Task<Int32> GetConversationRankAsync(Guid uaoID,Guid convID)
		{
			string _user = getHttpContextUser();
			return GetAsync<Int32>("api/NotificationLogic/GetConversationRank?uaoID=" + uaoID + "&convID=" + convID, _user);
		}

		public virtual Int32 GetConversationRankSync(Guid uaoID,Guid convID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/NotificationLogic/GetConversationRank?uaoID=" + uaoID + "&convID=" + convID, _user)).Result;
		}

		public virtual Task<ConversationResultDTO<VConversationDTO>> GetConversationsAsync(Guid uaoId,Nullable<ActivityType> activityType,Nullable<Guid> activityId,Int32 take,Int32 skip)
		{
			string _user = getHttpContextUser();
			return GetAsync<ConversationResultDTO<VConversationDTO>>("api/NotificationLogic/GetConversations?uaoId=" + uaoId + "&activityType=" + activityType + "&activityId=" + activityId + "&take=" + take + "&skip=" + skip, _user);
		}

		public virtual ConversationResultDTO<VConversationDTO> GetConversationsSync(Guid uaoId,Nullable<ActivityType> activityType,Nullable<Guid> activityId,Int32 take,Int32 skip)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ConversationResultDTO<VConversationDTO>>("api/NotificationLogic/GetConversations?uaoId=" + uaoId + "&activityType=" + activityType + "&activityId=" + activityId + "&take=" + take + "&skip=" + skip, _user)).Result;
		}

		public virtual Task<ConversationResultDTO<FnGetConversationActivityResultDTO>> GetConversationsActivityAsync(Guid uaoID,String userOrgTypeName,Guid orgID,ActivityType activityType,Guid activityId,Int32 take,Int32 skip)
		{
			userOrgTypeName = userOrgTypeName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<ConversationResultDTO<FnGetConversationActivityResultDTO>>("api/NotificationLogic/GetConversationsActivity?uaoID=" + uaoID + "&userOrgTypeName=" + userOrgTypeName + "&orgID=" + orgID + "&activityType=" + activityType + "&activityId=" + activityId + "&take=" + take + "&skip=" + skip, _user);
		}

		public virtual ConversationResultDTO<FnGetConversationActivityResultDTO> GetConversationsActivitySync(Guid uaoID,String userOrgTypeName,Guid orgID,ActivityType activityType,Guid activityId,Int32 take,Int32 skip)
		{
			userOrgTypeName = userOrgTypeName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ConversationResultDTO<FnGetConversationActivityResultDTO>>("api/NotificationLogic/GetConversationsActivity?uaoID=" + uaoID + "&userOrgTypeName=" + userOrgTypeName + "&orgID=" + orgID + "&activityType=" + activityType + "&activityId=" + activityId + "&take=" + take + "&skip=" + skip, _user)).Result;
		}

		public virtual Task<List<CreateConversationRecipientDTO>> GetUserSafeSendGroupsAsync(Guid uaoId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<CreateConversationRecipientDTO>>("api/NotificationLogic/GetUserSafeSendGroups?uaoId=" + uaoId + "&orgId=" + orgId, _user);
		}

		public virtual List<CreateConversationRecipientDTO> GetUserSafeSendGroupsSync(Guid uaoId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<CreateConversationRecipientDTO>>("api/NotificationLogic/GetUserSafeSendGroups?uaoId=" + uaoId + "&orgId=" + orgId, _user)).Result;
		}

		#endregion
	}
	public partial class OrganisationLogicClient : ClientBase, Interfaces.IOrganisationLogicClient	{		

		public OrganisationLogicClient(string url) : base(url)
		{
		}

		public OrganisationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task ExpireTemporaryLoginsAsync(Int32 days,Int32 hours,Int32 minutes)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ExpireTemporaryLoginsAsync?days=" + days + "&hours=" + hours + "&minutes=" + minutes, null, _user);
		}

		public virtual void ExpireTemporaryLoginsSync(Int32 days,Int32 hours,Int32 minutes)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ExpireTemporaryLoginsAsync?days=" + days + "&hours=" + hours + "&minutes=" + minutes, null, _user)).Wait();
		}

		public virtual Task ExpireUserAccountOrganisationAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ExpireUserAccountOrganisationAsync?uaoID=" + uaoID, null, _user);
		}

		public virtual void ExpireUserAccountOrganisationSync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ExpireUserAccountOrganisationAsync?uaoID=" + uaoID, null, _user)).Wait();
		}

		public virtual Task<Boolean> IsOrganisationInSystemAsync(Nullable<Guid> orgID,String regulatorNumber)
		{
			regulatorNumber = regulatorNumber.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/IsOrganisationInSystem?orgID=" + orgID + "&regulatorNumber=" + regulatorNumber, null, _user);
		}

		public virtual Boolean IsOrganisationInSystemSync(Nullable<Guid> orgID,String regulatorNumber)
		{
			regulatorNumber = regulatorNumber.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/IsOrganisationInSystem?orgID=" + orgID + "&regulatorNumber=" + regulatorNumber, null, _user)).Result;
		}

		public virtual Task RejectOrganisationAsync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisationAsync", dto, _user);
		}

		public virtual void RejectOrganisationSync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisationAsync", dto, _user)).Wait();
		}

		public virtual Task UnverifyOrganisationAsync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<RejectCompanyDTO>("api/OrganisationLogic/UnverifyOrganisationAsync", dto, _user);
		}

		public virtual void UnverifyOrganisationSync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<RejectCompanyDTO>("api/OrganisationLogic/UnverifyOrganisationAsync", dto, _user)).Wait();
		}

		public virtual Task ActivateOrganisationAsync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/ActivateOrganisationAsync?organisationID=" + organisationID, null, _user);
		}

		public virtual void ActivateOrganisationSync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ActivateOrganisationAsync?organisationID=" + organisationID, null, _user)).Wait();
		}

		public virtual Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user);
		}

		public virtual List<VOrganisationWithStatusAndAdminDTO> GetCompaniesSync(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user)).Result;
		}

		public virtual Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministratorAsync", dto, _user);
		}

		public virtual Guid AddNewUnverifiedOrganisationAndAdministratorSync(AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministratorAsync", dto, _user)).Result;
		}

		public virtual Task<UserAccountOrganisationDTO> AddNewUserToOrganisationAsync(AddNewUserToOrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddNewUserToOrganisationDTO, UserAccountOrganisationDTO>("api/OrganisationLogic/AddNewUserToOrganisationAsync", dto, _user);
		}

		public virtual UserAccountOrganisationDTO AddNewUserToOrganisationSync(AddNewUserToOrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<AddNewUserToOrganisationDTO, UserAccountOrganisationDTO>("api/OrganisationLogic/AddNewUserToOrganisationAsync", dto, _user)).Result;
		}

		public virtual Task AddPersonalDetailsAsync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddPersonalDetailsDTO>("api/OrganisationLogic/AddPersonalDetails?uaoId=" + uaoId, addPersonalDetailsDto, _user);
		}

		public virtual void AddPersonalDetailsSync(Guid uaoId,AddPersonalDetailsDTO addPersonalDetailsDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<AddPersonalDetailsDTO>("api/OrganisationLogic/AddPersonalDetails?uaoId=" + uaoId, addPersonalDetailsDto, _user)).Wait();
		}

		public virtual Task<Boolean> RequiresPersonalDetailsAsync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/RequiresPersonalDetails?uaoId=" + uaoId, null, _user);
		}

		public virtual Boolean RequiresPersonalDetailsSync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/RequiresPersonalDetails?uaoId=" + uaoId, null, _user)).Result;
		}

		public virtual Task CreateTsAndCsNotificationAsync(Guid userOrgID,NotificationConstructEnum type)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/CreateTsAndCsNotificationAsync?userOrgID=" + userOrgID + "&type=" + type, null, _user);
		}

		public virtual void CreateTsAndCsNotificationSync(Guid userOrgID,NotificationConstructEnum type)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/CreateTsAndCsNotificationAsync?userOrgID=" + userOrgID + "&type=" + type, null, _user)).Wait();
		}

		public virtual Task<Nullable<Guid>> AddOrganisationAsync()
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Nullable<Guid>>("api/OrganisationLogic/AddOrganisationAsync", null, _user);
		}

		public virtual Nullable<Guid> AddOrganisationSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Nullable<Guid>>("api/OrganisationLogic/AddOrganisationAsync", null, _user)).Result;
		}

		public virtual Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user);
		}

		public virtual Nullable<Guid> GetTemporaryOrganisationBranchIDSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user)).Result;
		}

		public virtual Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id)
		{
			string _user = getHttpContextUser();
			return GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO?id=" + id, _user);
		}

		public virtual VOrganisationDTO GetOrganisationDTOSync(Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO?id=" + id, _user)).Result;
		}

		public virtual Task<VOrganisationWithStatusAndAdminDTO> GetOrganisationWithStatusAndAdminAsync(Guid id)
		{
			string _user = getHttpContextUser();
			return GetAsync<VOrganisationWithStatusAndAdminDTO>("api/OrganisationLogic/GetOrganisationWithStatusAndAdmin?id=" + id, _user);
		}

		public virtual VOrganisationWithStatusAndAdminDTO GetOrganisationWithStatusAndAdminSync(Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationWithStatusAndAdminDTO>("api/OrganisationLogic/GetOrganisationWithStatusAndAdmin?id=" + id, _user)).Result;
		}

		public virtual Task AddOrganisationStatusAsync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/AddOrganisationStatusAsync?orgID=" + orgID + "&enumType=" + enumType + "&status=" + status + "&reason=" + reason + "&notes=" + notes, null, _user);
		}

		public virtual void AddOrganisationStatusSync(Guid orgID,StatusTypeEnum enumType,ProfessionalOrganisationStatusEnum status,Nullable<Int32> reason,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/AddOrganisationStatusAsync?orgID=" + orgID + "&enumType=" + enumType + "&status=" + status + "&reason=" + reason + "&notes=" + notes, null, _user)).Wait();
		}

		public virtual Task UpdateOrganisationDetailsAsync(VerifyCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<VerifyCompanyDTO>("api/OrganisationLogic/UpdateOrganisationDetails", dto, _user);
		}

		public virtual void UpdateOrganisationDetailsSync(VerifyCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<VerifyCompanyDTO>("api/OrganisationLogic/UpdateOrganisationDetails", dto, _user)).Wait();
		}

		public virtual Task AddNotesAsync(Guid orgID,Guid uaoID,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/AddNotes?orgID=" + orgID + "&uaoID=" + uaoID + "&notes=" + notes, null, _user);
		}

		public virtual void AddNotesSync(Guid orgID,Guid uaoID,String notes)
		{
			notes = notes.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/AddNotes?orgID=" + orgID + "&uaoID=" + uaoID + "&notes=" + notes, null, _user)).Wait();
		}

		public virtual Task<Boolean> IsSafeSendEnabledAsync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/IsSafeSendEnabled?organisationID=" + organisationID, null, _user);
		}

		public virtual Boolean IsSafeSendEnabledSync(Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/IsSafeSendEnabled?organisationID=" + organisationID, null, _user)).Result;
		}

		public virtual Task AddOrUpdateSafeSendEnabledAsync(Guid orgID,Boolean safeSendEnabled)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/OrganisationLogic/AddOrUpdateSafeSendEnabled?orgID=" + orgID + "&safeSendEnabled=" + safeSendEnabled, null, _user);
		}

		public virtual void AddOrUpdateSafeSendEnabledSync(Guid orgID,Boolean safeSendEnabled)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/AddOrUpdateSafeSendEnabled?orgID=" + orgID + "&safeSendEnabled=" + safeSendEnabled, null, _user)).Wait();
		}

		public virtual Task<Boolean> CanLenderNameBeUsedAsync(String lenderName)
		{
			lenderName = lenderName.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/OrganisationLogic/CanLenderNameBeUsed?lenderName=" + lenderName, null, _user);
		}

		public virtual Boolean CanLenderNameBeUsedSync(String lenderName)
		{
			lenderName = lenderName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/CanLenderNameBeUsed?lenderName=" + lenderName, null, _user)).Result;
		}

		#endregion
	}
	public partial class PaymentLogicClient : ClientBase, Interfaces.IPaymentLogicClient	{		

		public PaymentLogicClient(string url) : base(url)
		{
		}

		public PaymentLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<TransactionOrderPaymentDTO> GetTheSuccessfulOrderPaymentForTransactionOrderAsync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return GetAsync<TransactionOrderPaymentDTO>("api/PaymentLogic/GetTheSuccessfulOrderPaymentForTransactionOrder?transactionOrderId=" + transactionOrderId, _user);
		}

		public virtual TransactionOrderPaymentDTO GetTheSuccessfulOrderPaymentForTransactionOrderSync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<TransactionOrderPaymentDTO>("api/PaymentLogic/GetTheSuccessfulOrderPaymentForTransactionOrder?transactionOrderId=" + transactionOrderId, _user)).Result;
		}

		public virtual Task<Boolean> DoesASuccessfulOrderPaymentExistForTransactionOrderAsync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/PaymentLogic/DoesASuccessfulOrderPaymentExistForTransactionOrder?transactionOrderId=" + transactionOrderId, null, _user);
		}

		public virtual Boolean DoesASuccessfulOrderPaymentExistForTransactionOrderSync(Guid transactionOrderId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/PaymentLogic/DoesASuccessfulOrderPaymentExistForTransactionOrder?transactionOrderId=" + transactionOrderId, null, _user)).Result;
		}

		public virtual Task<TransactionOrderPaymentDTO> ProcessPaymentTransactionAsync(OrderRequestDTO request)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/PaymentLogic/ProcessPaymentTransaction", request, _user);
		}

		public virtual TransactionOrderPaymentDTO ProcessPaymentTransactionSync(OrderRequestDTO request)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/PaymentLogic/ProcessPaymentTransaction", request, _user)).Result;
		}

		#endregion
	}
	public partial class ProductLogicClient : ClientBase, Interfaces.IProductLogicClient	{		

		public ProductLogicClient(string url) : base(url)
		{
		}

		public ProductLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<ProductDTO> GetTopUpProductAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<ProductDTO>("api/ProductLogic/GetTopUpProduct", _user);
		}

		public virtual ProductDTO GetTopUpProductSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ProductDTO>("api/ProductLogic/GetTopUpProduct", _user)).Result;
		}

		public virtual Task<ProductDetailDTO> GetBankAccountCheckProductAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<ProductDetailDTO>("api/ProductLogic/GetBankAccountCheckProduct", _user);
		}

		public virtual ProductDetailDTO GetBankAccountCheckProductSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ProductDetailDTO>("api/ProductLogic/GetBankAccountCheckProduct", _user)).Result;
		}

		#endregion
	}
	public partial class ShoppingCartLogicClient : ClientBase, Interfaces.IShoppingCartLogicClient	{		

		public ShoppingCartLogicClient(string url) : base(url)
		{
		}

		public ShoppingCartLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<ShoppingCartDTO> CreateShoppingCartAsync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode)
		{
			countryCode = countryCode.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, ShoppingCartDTO>("api/ShoppingCartLogic/CreateShoppingCartAsync?userAccountOrganisationID=" + userAccountOrganisationID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum + "&countryCode=" + countryCode, null, _user);
		}

		public virtual ShoppingCartDTO CreateShoppingCartSync(Guid userAccountOrganisationID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum,String countryCode)
		{
			countryCode = countryCode.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, ShoppingCartDTO>("api/ShoppingCartLogic/CreateShoppingCartAsync?userAccountOrganisationID=" + userAccountOrganisationID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum + "&countryCode=" + countryCode, null, _user)).Result;
		}

		public virtual Task AddProductToShoppingCartAsync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/ShoppingCartLogic/AddProductToShoppingCartAsync?cartID=" + cartID + "&productID=" + productID + "&versionNumber=" + versionNumber + "&quantity=" + quantity + "&customerPrice=" + customerPrice, null, _user);
		}

		public virtual void AddProductToShoppingCartSync(Guid cartID,Guid productID,Int32 versionNumber,Int32 quantity,Nullable<Decimal> customerPrice)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/ShoppingCartLogic/AddProductToShoppingCartAsync?cartID=" + cartID + "&productID=" + productID + "&versionNumber=" + versionNumber + "&quantity=" + quantity + "&customerPrice=" + customerPrice, null, _user)).Wait();
		}

		public virtual Task RemoveProductFromShoppingCartAsync(Guid cartID,Guid itemID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/ShoppingCartLogic/RemoveProductFromShoppingCart?cartID=" + cartID + "&itemID=" + itemID, null, _user);
		}

		public virtual void RemoveProductFromShoppingCartSync(Guid cartID,Guid itemID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/ShoppingCartLogic/RemoveProductFromShoppingCart?cartID=" + cartID + "&itemID=" + itemID, null, _user)).Wait();
		}

		#endregion
	}
	public partial class SmsTransactionLogicClient : ClientBase, Interfaces.ISmsTransactionLogicClient	{		

		public SmsTransactionLogicClient(string url) : base(url)
		{
		}

		public SmsTransactionLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Guid> AddSmsTransactionAsync(Guid orgID,Guid uaoID,AddSmsTransactionDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<AddSmsTransactionDTO, Guid>("api/SmsTransactionLogic/AddSmsTransaction?orgID=" + orgID + "&uaoID=" + uaoID, dto, _user);
		}

		public virtual Guid AddSmsTransactionSync(Guid orgID,Guid uaoID,AddSmsTransactionDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<AddSmsTransactionDTO, Guid>("api/SmsTransactionLogic/AddSmsTransaction?orgID=" + orgID + "&uaoID=" + uaoID, dto, _user)).Result;
		}

		public virtual Task EditSmsTransactionAsync(EditSmsTransactionDTO editSmsTransactionDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<EditSmsTransactionDTO>("api/SmsTransactionLogic/EditSmsTransaction", editSmsTransactionDto, _user);
		}

		public virtual void EditSmsTransactionSync(EditSmsTransactionDTO editSmsTransactionDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<EditSmsTransactionDTO>("api/SmsTransactionLogic/EditSmsTransaction", editSmsTransactionDto, _user)).Wait();
		}

		public virtual Task AssignBuyerPartyToTransactionAsync(AssignBuyerPartyToTransactionDTO assignBuyerPartyToTransactionDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<AssignBuyerPartyToTransactionDTO>("api/SmsTransactionLogic/AssignBuyerPartyToTransaction", assignBuyerPartyToTransactionDTO, _user);
		}

		public virtual void AssignBuyerPartyToTransactionSync(AssignBuyerPartyToTransactionDTO assignBuyerPartyToTransactionDTO)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<AssignBuyerPartyToTransactionDTO>("api/SmsTransactionLogic/AssignBuyerPartyToTransaction", assignBuyerPartyToTransactionDTO, _user)).Wait();
		}

		public virtual Task EditBuyerPartyAsync(EditBuyerPartyDTO editBuyerPartyDto)
		{
			string _user = getHttpContextUser();
			return PostAsync<EditBuyerPartyDTO>("api/SmsTransactionLogic/EditBuyerParty", editBuyerPartyDto, _user);
		}

		public virtual void EditBuyerPartySync(EditBuyerPartyDTO editBuyerPartyDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<EditBuyerPartyDTO>("api/SmsTransactionLogic/EditBuyerParty", editBuyerPartyDto, _user)).Wait();
		}

		public virtual Task ReplaceSrcFundsBankAccountsAsync(Guid uaoTxID,IEnumerable<SmsSrcFundsBankAccountDTO> srcFundsBankAccounts)
		{
			string _user = getHttpContextUser();
			return PostAsync<IEnumerable<SmsSrcFundsBankAccountDTO>>("api/SmsTransactionLogic/ReplaceSrcFundsBankAccounts?uaoTxID=" + uaoTxID, srcFundsBankAccounts, _user);
		}

		public virtual void ReplaceSrcFundsBankAccountsSync(Guid uaoTxID,IEnumerable<SmsSrcFundsBankAccountDTO> srcFundsBankAccounts)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<IEnumerable<SmsSrcFundsBankAccountDTO>>("api/SmsTransactionLogic/ReplaceSrcFundsBankAccounts?uaoTxID=" + uaoTxID, srcFundsBankAccounts, _user)).Wait();
		}

		public virtual Task<Int32> GetSmsTransactionRankAsync(Guid orgID,Guid txID)
		{
			string _user = getHttpContextUser();
			return GetAsync<Int32>("api/SmsTransactionLogic/GetSmsTransactionRank?orgID=" + orgID + "&txID=" + txID, _user);
		}

		public virtual Int32 GetSmsTransactionRankSync(Guid orgID,Guid txID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/SmsTransactionLogic/GetSmsTransactionRank?orgID=" + orgID + "&txID=" + txID, _user)).Result;
		}

		public virtual Task<TransactionOrderPaymentDTO> PurchaseSafeBuyerProductAsync(Guid smsTransactionID,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,Boolean free,OrderRequestDTO orderRequest)
		{
			string _user = getHttpContextUser();
			return PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/SmsTransactionLogic/PurchaseSafeBuyerProduct?smsTransactionID=" + smsTransactionID + "&cardType=" + cardType + "&methodType=" + methodType + "&free=" + free, orderRequest, _user);
		}

		public virtual TransactionOrderPaymentDTO PurchaseSafeBuyerProductSync(Guid smsTransactionID,PaymentCardTypeIDEnum cardType,PaymentMethodTypeIDEnum methodType,Boolean free,OrderRequestDTO orderRequest)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<OrderRequestDTO, TransactionOrderPaymentDTO>("api/SmsTransactionLogic/PurchaseSafeBuyerProduct?smsTransactionID=" + smsTransactionID + "&cardType=" + cardType + "&methodType=" + methodType + "&free=" + free, orderRequest, _user)).Result;
		}

		public virtual Task<IEnumerable<SmsTransactionPendingUpdateCountDTO>> SmsTransactionPendingUpdateCountAsync(IEnumerable<Guid> ids)
		{
			string _user = getHttpContextUser();
			return PostAsync<IEnumerable<Guid>, IEnumerable<SmsTransactionPendingUpdateCountDTO>>("api/SmsTransactionLogic/SmsTransactionPendingUpdateCount", ids, _user);
		}

		public virtual IEnumerable<SmsTransactionPendingUpdateCountDTO> SmsTransactionPendingUpdateCountSync(IEnumerable<Guid> ids)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<IEnumerable<Guid>, IEnumerable<SmsTransactionPendingUpdateCountDTO>>("api/SmsTransactionLogic/SmsTransactionPendingUpdateCount", ids, _user)).Result;
		}

		public virtual Task<IEnumerable<Guid>> GetSmsTransactionRelatedPartyUaoIdsAsync(Guid txID)
		{
			string _user = getHttpContextUser();
			return GetAsync<IEnumerable<Guid>>("api/SmsTransactionLogic/GetSmsTransactionRelatedPartyUaoIds?txID=" + txID, _user);
		}

		public virtual IEnumerable<Guid> GetSmsTransactionRelatedPartyUaoIdsSync(Guid txID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<IEnumerable<Guid>>("api/SmsTransactionLogic/GetSmsTransactionRelatedPartyUaoIds?txID=" + txID, _user)).Result;
		}

		public virtual Task<Boolean> CheckDuplicateUserSmsTransactionAsync(Guid orgID,String email,SmsTransactionDTO dto)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<SmsTransactionDTO, Boolean>("api/SmsTransactionLogic/CheckDuplicateUserSmsTransaction?orgID=" + orgID + "&email=" + email, dto, _user);
		}

		public virtual Boolean CheckDuplicateUserSmsTransactionSync(Guid orgID,String email,SmsTransactionDTO dto)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<SmsTransactionDTO, Boolean>("api/SmsTransactionLogic/CheckDuplicateUserSmsTransaction?orgID=" + orgID + "&email=" + email, dto, _user)).Result;
		}

		public virtual Task AdviseProductAsync(Guid txID,Guid orgID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/SmsTransactionLogic/AdviseProduct?txID=" + txID + "&orgID=" + orgID, null, _user);
		}

		public virtual void AdviseProductSync(Guid txID,Guid orgID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/SmsTransactionLogic/AdviseProduct?txID=" + txID + "&orgID=" + orgID, null, _user)).Wait();
		}

		public virtual Task<SmsTransactionDTO> GetSmsTransactionWithPendingUpdatesAsync(Guid txID)
		{
			string _user = getHttpContextUser();
			return GetAsync<SmsTransactionDTO>("api/SmsTransactionLogic/GetSmsTransactionWithPendingUpdates?txID=" + txID, _user);
		}

		public virtual SmsTransactionDTO GetSmsTransactionWithPendingUpdatesSync(Guid txID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<SmsTransactionDTO>("api/SmsTransactionLogic/GetSmsTransactionWithPendingUpdates?txID=" + txID, _user)).Result;
		}

		public virtual Task ResolveSmsTransactionPendingUpdatesAsync(Guid txID,Guid uaoID,List<FieldUpdateDTO> updates)
		{
			string _user = getHttpContextUser();
			return PostAsync<List<FieldUpdateDTO>>("api/SmsTransactionLogic/ResolveSmsTransactionPendingUpdates?txID=" + txID + "&uaoID=" + uaoID, updates, _user);
		}

		public virtual void ResolveSmsTransactionPendingUpdatesSync(Guid txID,Guid uaoID,List<FieldUpdateDTO> updates)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<List<FieldUpdateDTO>>("api/SmsTransactionLogic/ResolveSmsTransactionPendingUpdates?txID=" + txID + "&uaoID=" + uaoID, updates, _user)).Wait();
		}

		public virtual Task<Boolean> IsSafeBuyerPotentiallyFreeAsync(Guid txID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/SmsTransactionLogic/IsSafeBuyerPotentiallyFree?txID=" + txID, null, _user);
		}

		public virtual Boolean IsSafeBuyerPotentiallyFreeSync(Guid txID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/SmsTransactionLogic/IsSafeBuyerPotentiallyFree?txID=" + txID, null, _user)).Result;
		}

		public virtual Task<Boolean> SmsTransactionQualifiesFreeAsync(Guid txID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/SmsTransactionLogic/SmsTransactionQualifiesFree?txID=" + txID, null, _user);
		}

		public virtual Boolean SmsTransactionQualifiesFreeSync(Guid txID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/SmsTransactionLogic/SmsTransactionQualifiesFree?txID=" + txID, null, _user)).Result;
		}

		public virtual Task<CartPricingDTO> EnsureCartAsync(Guid txID,Guid uaoID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, CartPricingDTO>("api/SmsTransactionLogic/EnsureCart?txID=" + txID + "&uaoID=" + uaoID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum, null, _user);
		}

		public virtual CartPricingDTO EnsureCartSync(Guid txID,Guid uaoID,PaymentCardTypeIDEnum cardTypeEnum,PaymentMethodTypeIDEnum paymentTypeEnum)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, CartPricingDTO>("api/SmsTransactionLogic/EnsureCart?txID=" + txID + "&uaoID=" + uaoID + "&cardTypeEnum=" + cardTypeEnum + "&paymentTypeEnum=" + paymentTypeEnum, null, _user)).Result;
		}

		#endregion
	}
	public partial class TFSettingsLogicClient : ClientBase, Interfaces.ITFSettingsLogicClient	{		

		public TFSettingsLogicClient(string url) : base(url)
		{
		}

		public TFSettingsLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<Dictionary<String, String>> GetSettingsAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<Dictionary<String, String>>("api/TFSettingsLogic/GetSettings", _user);
		}

		public virtual Dictionary<String, String> GetSettingsSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Dictionary<String, String>>("api/TFSettingsLogic/GetSettings", _user)).Result;
		}

		#endregion
	}
	public partial class TransactionOrderLogicClient : ClientBase, Interfaces.ITransactionOrderLogicClient	{		

		public TransactionOrderLogicClient(string url) : base(url)
		{
		}

		public TransactionOrderLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<TransactionOrderDTO> GetTransactionForInvoiceAsync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return GetAsync<TransactionOrderDTO>("api/TransactionOrderLogic/GetTransactionForInvoice?invoiceId=" + invoiceId, _user);
		}

		public virtual TransactionOrderDTO GetTransactionForInvoiceSync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<TransactionOrderDTO>("api/TransactionOrderLogic/GetTransactionForInvoice?invoiceId=" + invoiceId, _user)).Result;
		}

		public virtual Task<Boolean> DoesTransactionExistForInvoiceAsync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/TransactionOrderLogic/DoesTransactionExistForInvoice?invoiceId=" + invoiceId, null, _user);
		}

		public virtual Boolean DoesTransactionExistForInvoiceSync(Guid invoiceId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/TransactionOrderLogic/DoesTransactionExistForInvoice?invoiceId=" + invoiceId, null, _user)).Result;
		}

		public virtual Task<TransactionOrderDTO> CreateAndSaveTransactionOrderFromShoppingCartDTOAsync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, TransactionOrderDTO>("api/TransactionOrderLogic/CreateAndSaveTransactionOrderFromShoppingCartDTO?invoiceID=" + invoiceID + "&typeEnumValue=" + typeEnumValue, null, _user);
		}

		public virtual TransactionOrderDTO CreateAndSaveTransactionOrderFromShoppingCartDTOSync(Guid invoiceID,TransactionTypeIDEnum typeEnumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, TransactionOrderDTO>("api/TransactionOrderLogic/CreateAndSaveTransactionOrderFromShoppingCartDTO?invoiceID=" + invoiceID + "&typeEnumValue=" + typeEnumValue, null, _user)).Result;
		}

		#endregion
	}
	public partial class UserAccountAuditLogicClient : ClientBase, Interfaces.IUserAccountAuditLogicClient	{		

		public UserAccountAuditLogicClient(string url) : base(url)
		{
		}

		public UserAccountAuditLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task CreateAndSaveAuditAsync(String requestData,WebUserObject wuo)
		{
			requestData = requestData.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<WebUserObject>("api/UserAccountAuditLogic/CreateAndSaveAudit?requestData=" + requestData, wuo, _user);
		}

		public virtual void CreateAndSaveAuditSync(String requestData,WebUserObject wuo)
		{
			requestData = requestData.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<WebUserObject>("api/UserAccountAuditLogic/CreateAndSaveAudit?requestData=" + requestData, wuo, _user)).Wait();
		}

		#endregion
	}
	public partial class UserLogicClient : ClientBase, Interfaces.IUserLogicClient, BrockAllen.MembershipReboot.AccountService.IPartialUserLogicController	{		

		public UserLogicClient(string url) : base(url)
		{
		}

		public UserLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		public virtual Task<UserLoginValidation> AuthenticateUserAsync(String username,String password)
		{
			username = username.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUserAsync?username=" + username + "&password=" + password, null, _user);
		}

		public virtual UserLoginValidation AuthenticateUserSync(String username,String password)
		{
			username = username.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUserAsync?username=" + username + "&password=" + password, null, _user)).Result;
		}

		public virtual Task<ContactDTO> AddUserAsync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUserAsync", dto, _user);
		}

		public virtual ContactDTO AddUserSync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUserAsync", dto, _user)).Result;
		}

		public virtual Task ResetUserPasswordAsync(Guid userID,String newPassword,Boolean doNotRequirePin,String pin)
		{
			newPassword = newPassword.UrlEncode();
			pin = pin.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/ResetUserPasswordAsync?userID=" + userID + "&newPassword=" + newPassword + "&doNotRequirePin=" + doNotRequirePin + "&pin=" + pin, null, _user);
		}

		public virtual void ResetUserPasswordSync(Guid userID,String newPassword,Boolean doNotRequirePin,String pin)
		{
			newPassword = newPassword.UrlEncode();
			pin = pin.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ResetUserPasswordAsync?userID=" + userID + "&newPassword=" + newPassword + "&doNotRequirePin=" + doNotRequirePin + "&pin=" + pin, null, _user)).Wait();
		}

		public virtual Task<Boolean> HasPasswordExpiredAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user);
		}

		public virtual Boolean HasPasswordExpiredSync(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user)).Result;
		}

		public virtual Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/LockOrUnlockUserAsync?userId=" + userId + "&lockUser=" + lockUser, null, _user);
		}

		public virtual void LockOrUnlockUserSync(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LockOrUnlockUserAsync?userId=" + userId + "&lockUser=" + lockUser, null, _user)).Wait();
		}

		public virtual Task<Boolean> IsUserExistAsync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user);
		}

		public virtual Boolean IsUserExistSync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user)).Result;
		}

		public virtual Task<Boolean> IsEmailExistAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user);
		}

		public virtual Boolean IsEmailExistSync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user)).Result;
		}

		public virtual Task<Boolean> IsUserAccountRegisteredAsync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IsUserAccountRegistered?uaoId=" + uaoId, null, _user);
		}

		public virtual Boolean IsUserAccountRegisteredSync(Guid uaoId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsUserAccountRegistered?uaoId=" + uaoId, null, _user)).Result;
		}

		public virtual Task<IEnumerable<AddressDTO>> GetUserAddressesAsync(Guid contactID)
		{
			string _user = getHttpContextUser();
			return GetAsync<IEnumerable<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user);
		}

		public virtual IEnumerable<AddressDTO> GetUserAddressesSync(Guid contactID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<IEnumerable<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user)).Result;
		}

		public virtual Task<List<UserAccount>> GetAllUserAccountAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccountAsync", _user);
		}

		public virtual List<UserAccount> GetAllUserAccountSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccountAsync", _user)).Result;
		}

		public virtual Task<UserAccount> GetUserAccountAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetUserAccountAsync?key=" + key, _user);
		}

		public virtual UserAccount GetUserAccountSync(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetUserAccountAsync?key=" + key, _user)).Result;
		}

		public virtual Task<UserAccount> GetBAUserAccountByEmailAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAsync?email=" + email, _user);
		}

		public virtual UserAccount GetBAUserAccountByEmailSync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAsync?email=" + email, _user)).Result;
		}

		public virtual Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotIDAsync?email=" + email + "&id=" + id, _user);
		}

		public virtual UserAccount GetBAUserAccountByEmailAndNotIDSync(String email,Guid id)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotIDAsync?email=" + email + "&id=" + id, _user)).Result;
		}

		public virtual Task<UserAccount> GetBAUserAccountByUsernameAsync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsernameAsync?username=" + username, _user);
		}

		public virtual UserAccount GetBAUserAccountByUsernameSync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsernameAsync?username=" + username, _user)).Result;
		}

		public virtual Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user);
		}

		public virtual List<UserAccountDTO> GetUserAccountByEmailSync(String email,Boolean permanentAccountonly)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user)).Result;
		}

		public virtual Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user);
		}

		public virtual UserAccountDTO GetUserAccountByUsernameSync(String userName)
		{
			userName = userName.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user)).Result;
		}

		public virtual Task<List<ContactDTO>> GetUserContactsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user);
		}

		public virtual List<ContactDTO> GetUserContactsSync(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user)).Result;
		}

		public virtual Task<List<UserAccount>> GetUserAccountsAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user);
		}

		public virtual List<UserAccount> GetUserAccountsSync(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user)).Result;
		}

		public virtual Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user);
		}

		public virtual List<UserAccountOrganisationDTO> GetUserAccountOrganisationSync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user)).Result;
		}

		public virtual Task AddUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/AddUserAccountAsync", user, _user);
		}

		public virtual void AddUserAccountSync(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/AddUserAccountAsync", user, _user)).Wait();
		}

		public virtual Task RemoveUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/RemoveUserAccountAsync", user, _user);
		}

		public virtual void RemoveUserAccountSync(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/RemoveUserAccountAsync", user, _user)).Wait();
		}

		public virtual Task UpdateUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			return PostAsync<UserAccount>("api/UserLogic/UpdateUserAccountAsync", user, _user);
		}

		public virtual void UpdateUserAccountSync(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/UpdateUserAccountAsync", user, _user)).Wait();
		}

		public virtual Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user);
		}

		public virtual List<UserClaimDTO> GetUserClaimsSync(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user)).Result;
		}

		public virtual Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user);
		}

		public virtual ContactDTO GetUserAccountOrganisationPrimaryContactSync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user)).Result;
		}

		public virtual Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user);
		}

		public virtual VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationTypeSync(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user)).Result;
		}

		public virtual Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user);
		}

		public virtual List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgTypeSync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user)).Result;
		}

		public virtual Task<List<String>> UserLoginSessionsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user);
		}

		public virtual List<String> UserLoginSessionsSync(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user)).Result;
		}

		public virtual Task LogEveryoneElseOutAsync(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/LogEveryoneElseOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user);
		}

		public virtual void LogEveryoneElseOutSync(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LogEveryoneElseOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user)).Wait();
		}

		public virtual Task LogUserOutAsync(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/LogUserOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user);
		}

		public virtual void LogUserOutSync(Guid userId,String sessionId)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LogUserOutAsync?userId=" + userId + "&sessionId=" + sessionId, null, _user)).Wait();
		}

		public virtual Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			sessionId = sessionId.UrlEncode();
			userHostAddress = userHostAddress.UrlEncode();
			userIdAddress = userIdAddress.UrlEncode();
			userLocation = userLocation.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/SaveUserAccountLoginSessionAsync?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user);
		}

		public virtual void SaveUserAccountLoginSessionSync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			sessionId = sessionId.UrlEncode();
			userHostAddress = userHostAddress.UrlEncode();
			userIdAddress = userIdAddress.UrlEncode();
			userLocation = userLocation.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SaveUserAccountLoginSessionAsync?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user)).Wait();
		}

		public virtual Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionDataAsync?userId=" + userId + "&sessionId=" + sessionId, requestData, _user);
		}

		public virtual void SaveUserAccountLoginSessionDataSync(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			sessionId = sessionId.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionDataAsync?userId=" + userId + "&sessionId=" + sessionId, requestData, _user)).Wait();
		}

		public virtual Task<Boolean> DoesUserExistAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID, null, _user);
		}

		public virtual Boolean DoesUserExistSync(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID, null, _user)).Result;
		}

		public virtual Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user);
		}

		public virtual UserAccountOrganisationDTO GetPermanentUAOSync(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user)).Result;
		}

		public virtual Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user);
		}

		public virtual Guid GetPersonalUserAccountOrganisationSync(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user)).Result;
		}

		public virtual Task<UserAccount> CreateAccountAsync(String userName,String password,String email,String phoneNumber,Guid userId)
		{
			userName = userName.UrlEncode();
			password = password.UrlEncode();
			email = email.UrlEncode();
			phoneNumber = phoneNumber.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, UserAccount>("api/UserLogic/CreateAccountAsync?userName=" + userName + "&password=" + password + "&email=" + email + "&phoneNumber=" + phoneNumber + "&userId=" + userId, null, _user);
		}

		public virtual UserAccount CreateAccountSync(String userName,String password,String email,String phoneNumber,Guid userId)
		{
			userName = userName.UrlEncode();
			password = password.UrlEncode();
			email = email.UrlEncode();
			phoneNumber = phoneNumber.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateAccountAsync?userName=" + userName + "&password=" + password + "&email=" + email + "&phoneNumber=" + phoneNumber + "&userId=" + userId, null, _user)).Result;
		}

		public virtual Task CreateContactAsync(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			return PostAsync<ContactDTO>("api/UserLogic/CreateContactAsync", contactDTO, _user);
		}

		public virtual void CreateContactSync(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/UserLogic/CreateContactAsync", contactDTO, _user)).Wait();
		}

		public virtual Task<Boolean> ContactExistsAsync(Guid parentID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user);
		}

		public virtual Boolean ContactExistsSync(Guid parentID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user)).Result;
		}

		public virtual Task DeleteAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return DeleteAsync("api/UserLogic/DeleteAccountAsync?userID=" + userID, _user);
		}

		public virtual void DeleteAccountSync(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/UserLogic/DeleteAccountAsync?userID=" + userID, _user)).Wait();
		}

		public virtual Task CloseAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/CloseAccountAsync?userID=" + userID, null, _user);
		}

		public virtual void CloseAccountSync(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/CloseAccountAsync?userID=" + userID, null, _user)).Wait();
		}

		public virtual Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync()
		{
			string _user = getHttpContextUser();
			return GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user);
		}

		public virtual List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedInSync()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user)).Result;
		}

		public virtual Task SendUsernameReminderAsync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/SendUsernameReminderAsync?email=" + email, null, _user);
		}

		public virtual void SendUsernameReminderSync(String email)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SendUsernameReminderAsync?email=" + email, null, _user)).Wait();
		}

		public virtual Task CreatePasswordResetRequestAsync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/CreatePasswordResetRequestAsync?username=" + username, null, _user);
		}

		public virtual void CreatePasswordResetRequestSync(String username)
		{
			username = username.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/CreatePasswordResetRequestAsync?username=" + username, null, _user)).Wait();
		}

		public virtual Task SendTextMessageAsync(String phoneNumber,String message)
		{
			phoneNumber = phoneNumber.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/SendTextMessage?phoneNumber=" + phoneNumber + "&message=" + message, null, _user);
		}

		public virtual void SendTextMessageSync(String phoneNumber,String message)
		{
			phoneNumber = phoneNumber.UrlEncode();
			message = message.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SendTextMessage?phoneNumber=" + phoneNumber + "&message=" + message, null, _user)).Wait();
		}

		public virtual Task GeneratePinAsync(Guid uaoID,Boolean blank,Boolean overwriteExisting,Boolean sendToMobilePhone)
		{
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/GeneratePinAsync?uaoID=" + uaoID + "&blank=" + blank + "&overwriteExisting=" + overwriteExisting + "&sendToMobilePhone=" + sendToMobilePhone, null, _user);
		}

		public virtual void GeneratePinSync(Guid uaoID,Boolean blank,Boolean overwriteExisting,Boolean sendToMobilePhone)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/GeneratePinAsync?uaoID=" + uaoID + "&blank=" + blank + "&overwriteExisting=" + overwriteExisting + "&sendToMobilePhone=" + sendToMobilePhone, null, _user)).Wait();
		}

		public virtual Task<Boolean> IncrementInvalidPINAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/IncrementInvalidPINAsync?uaoID=" + uaoID, null, _user);
		}

		public virtual Boolean IncrementInvalidPINSync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IncrementInvalidPINAsync?uaoID=" + uaoID, null, _user)).Result;
		}

		public virtual Task RegisterUserAsync(Guid uaoId,String phoneNumber,String password)
		{
			phoneNumber = phoneNumber.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/RegisterUserAsync?uaoId=" + uaoId + "&phoneNumber=" + phoneNumber + "&password=" + password, null, _user);
		}

		public virtual void RegisterUserSync(Guid uaoId,String phoneNumber,String password)
		{
			phoneNumber = phoneNumber.UrlEncode();
			password = password.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/RegisterUserAsync?uaoId=" + uaoId + "&phoneNumber=" + phoneNumber + "&password=" + password, null, _user)).Wait();
		}

		public virtual Task<List<UserAccountOrganisationRoleDTO>> GetRolesAsync(Guid uaoID,Int32 withRelatedLevel)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountOrganisationRoleDTO>>("api/UserLogic/GetRoles?uaoID=" + uaoID + "&withRelatedLevel=" + withRelatedLevel, _user);
		}

		public virtual List<UserAccountOrganisationRoleDTO> GetRolesSync(Guid uaoID,Int32 withRelatedLevel)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationRoleDTO>>("api/UserLogic/GetRoles?uaoID=" + uaoID + "&withRelatedLevel=" + withRelatedLevel, _user)).Result;
		}

		public virtual Task<List<UserAccountOrganisationSafeSendGroupDTO>> GetSafeSendGroupsAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return GetAsync<List<UserAccountOrganisationSafeSendGroupDTO>>("api/UserLogic/GetSafeSendGroups?uaoID=" + uaoID, _user);
		}

		public virtual List<UserAccountOrganisationSafeSendGroupDTO> GetSafeSendGroupsSync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationSafeSendGroupDTO>>("api/UserLogic/GetSafeSendGroups?uaoID=" + uaoID, _user)).Result;
		}

		public virtual Task ChangeUsernameAndEmailAsync(Guid uaoId,String newUsername)
		{
			newUsername = newUsername.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object>("api/UserLogic/ChangeUsernameAndEmail?uaoId=" + uaoId + "&newUsername=" + newUsername, null, _user);
		}

		public virtual void ChangeUsernameAndEmailSync(Guid uaoId,String newUsername)
		{
			newUsername = newUsername.UrlEncode();
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ChangeUsernameAndEmail?uaoId=" + uaoId + "&newUsername=" + newUsername, null, _user)).Wait();
		}

		public virtual Task<Boolean> CanEmailBeUsedAsPersonalAsync(String email,Nullable<Guid> txId,Nullable<Guid> uaoID)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/CanEmailBeUsedAsPersonal?email=" + email + "&txId=" + txId + "&uaoID=" + uaoID, null, _user);
		}

		public virtual Boolean CanEmailBeUsedAsPersonalSync(String email,Nullable<Guid> txId,Nullable<Guid> uaoID)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/CanEmailBeUsedAsPersonal?email=" + email + "&txId=" + txId + "&uaoID=" + uaoID, null, _user)).Result;
		}

		public virtual Task<Boolean> CanEmailBeUsedAsProfessionalAsync(String email,Nullable<Guid> uaoID)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return PostAsync<object, Boolean>("api/UserLogic/CanEmailBeUsedAsProfessional?email=" + email + "&uaoID=" + uaoID, null, _user);
		}

		public virtual Boolean CanEmailBeUsedAsProfessionalSync(String email,Nullable<Guid> uaoID)
		{
			email = email.UrlEncode();
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/CanEmailBeUsedAsProfessional?email=" + email + "&uaoID=" + uaoID, null, _user)).Result;
		}

		#endregion
	}
}
#endregion

