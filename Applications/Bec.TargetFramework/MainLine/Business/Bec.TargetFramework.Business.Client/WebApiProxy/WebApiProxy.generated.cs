//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.Business.Client.Models;
using Bec.TargetFramework.Entities;
using Bec.TargetFramework.Entities.Enums;
using System.Web.Http;
using BrockAllen.MembershipReboot;

#region Proxies
namespace Bec.TargetFramework.Business.Client
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string WebApiProxyBaseAddress = "http://localhost:9000";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.Business.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace Bec.TargetFramework.Business.Client.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}
	
	public partial interface IClassificationDataLogicClient : IClientBase
	{	

		/// <returns></returns>
		Task<List<CountryCodeDTO>> GetCountriesAsync();

		/// <returns></returns>
		List<CountryCodeDTO> GetCountries();


		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName);

		/// <param name="typeName"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName);


		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID);

		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID);


		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName);

		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		Int32 GetClassificationDataForTypeName(String categoryName,String typeName);

				
	}
	
	public partial interface IDataLogicClient : IClientBase
	{	

		/// <param name="eventName"></param>
		/// <returns></returns>
		Task<TFEventDTO> GetTFEventByNameAsync(String eventName);

		/// <param name="eventName"></param>
		/// <returns></returns>
		TFEventDTO GetTFEventByName(String eventName);


		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		Task<List<VWorkflowTreeDTO>> GetWorkflowTreeAsync(Guid workflowID,Int32 workflowVersionNumber);

		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		List<VWorkflowTreeDTO> GetWorkflowTree(Guid workflowID,Int32 workflowVersionNumber);


		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		Task<List<VStatusTypeDTO>> GetStatusTypeAsync(String statusTypeEnum);

		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		List<VStatusTypeDTO> GetStatusType(String statusTypeEnum);


		/// <returns></returns>
		Task<String> GenerateRandomFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomFirstAndLastName();


		/// <returns></returns>
		Task<String> GenerateRandomNameAsync();

		/// <returns></returns>
		String GenerateRandomName();


		/// <returns></returns>
		Task<String> GenerateRandomLastNameAsync();

		/// <returns></returns>
		String GenerateRandomLastName();


		/// <returns></returns>
		Task<String> GenerateRandomFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomFirstName();


		/// <returns></returns>
		Task<String> GenerateRandomFemaleFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomFemaleFirstName();


		/// <returns></returns>
		Task<String> GenerateRandomMaleFirstNameAsync();

		/// <returns></returns>
		String GenerateRandomMaleFirstName();


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFirstAndLastNames(Int32 count);


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleLastNames(Int32 count);


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleFemaleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFemaleFirstAndLastNames(Int32 count);


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleMaleFirstAndLastNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleMaleFirstAndLastNames(Int32 count);


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleFemaleFirstNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleFemaleFirstNames(Int32 count);


		/// <param name="count"></param>
		/// <returns></returns>
		Task<IEnumerable<String>> GenerateMultipleMaleFirstNamesAsync(Int32 count);

		/// <param name="count"></param>
		/// <returns></returns>
		IEnumerable<String> GenerateMultipleMaleFirstNames(Int32 count);


		/// <returns></returns>
		Task<String> GenerateRandomFemaleFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomFemaleFirstAndLastName();


		/// <returns></returns>
		Task<String> GenerateRandomMaleFirstAndLastNameAsync();

		/// <returns></returns>
		String GenerateRandomMaleFirstAndLastName();


		/// <param name="name"></param>
		/// <returns></returns>
		Task<ServiceDefinitionDTO> GetServiceDefinitionWithDetailAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		ServiceDefinitionDTO GetServiceDefinitionWithDetail(String name);


		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task MarkServiceInterfaceAsPendingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsPending(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);


		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task MarkServiceInterfaceAsProcessingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsProcessing(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);


		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task MarkServiceInterfaceAsFailedAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsFailed(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);


		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		Task MarkServiceInterfaceAsSuccessfulAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		void MarkServiceInterfaceAsSuccessful(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data);

				
	}
	
	public partial interface INotificationLogicClient : IClientBase
	{	

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);

		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast);


		/// <returns></returns>
		Task<Boolean> SaveNotificationAsync(NotificationDTO dto);

		/// <returns></returns>
		Boolean SaveNotification(NotificationDTO dto);


		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);

		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue);


		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber);


		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);

		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue);


		/// <param name="name"></param>
		/// <returns></returns>
		Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name);


		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber);

		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber);


		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		Task<VDefaultEmailAddressDTO> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);

		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		VDefaultEmailAddressDTO RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID);

				
	}
	
	public partial interface IOrganisationLogicClient : IClientBase
	{
        /// <returns></returns>
        Task ExpireOrganisationsAsync();

        /// <returns></returns>
        void ExpireOrganisations();


		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber);

		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber);


		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		Task<List<VOrganisationWithStatusAndAdminDTO>> FindDuplicateOrganisationsAsync(Boolean manual,String line1,String line2,String town,String county,String postalCode);

		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		List<VOrganisationWithStatusAndAdminDTO> FindDuplicateOrganisations(Boolean manual,String line1,String line2,String town,String county,String postalCode);


		/// <returns></returns>
		Task RejectOrganisationAsync(RejectCompanyDTO dto);

		/// <returns></returns>
		void RejectOrganisation(RejectCompanyDTO dto);


		/// <returns></returns>
		Task GeneratePinAsync(GeneratePinDTO dto);

		/// <returns></returns>
		void GeneratePin(GeneratePinDTO dto);


		/// <param name="postCode"></param>
		/// <returns></returns>
		Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode);

		/// <param name="postCode"></param>
		/// <returns></returns>
		GoogleGeoCodeResponse GeoCodePostcode(String postCode);


		/// <param name="orgStatus"></param>
		/// <returns></returns>
		Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus);

		/// <param name="orgStatus"></param>
		/// <returns></returns>
		List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus);


		/// <param name="organisationType"></param>
		/// <returns></returns>
		Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto);

		/// <param name="organisationType"></param>
		/// <returns></returns>
		Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto);


		/// <returns></returns>
		Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync();

		/// <returns></returns>
		Nullable<Guid> GetTemporaryOrganisationBranchID();


		/// <param name="searchText"></param>
		/// <returns></returns>
		Task<List<vOrganisationDTO>> GetAllOrganisationDetailDTOAsync(String searchText);

		/// <param name="searchText"></param>
		/// <returns></returns>
		List<vOrganisationDTO> GetAllOrganisationDetailDTO(String searchText);


		/// <param name="id"></param>
		/// <returns></returns>
		Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		VOrganisationDTO GetOrganisationDTO(Guid id);


		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		Task ActivateDeactivateOrDeleteOrganisationAsync(Guid id,Boolean delete);

		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		void ActivateDeactivateOrDeleteOrganisation(Guid id,Boolean delete);


		/// <returns></returns>
		Task AddNewOrganisationFromWizardAsync(OrganisationDTO dto);

		/// <returns></returns>
		void AddNewOrganisationFromWizard(OrganisationDTO dto);


		/// <returns></returns>
		Task SaveOrganisationDetailAsync(OrganisationDTO dto);

		/// <returns></returns>
		void SaveOrganisationDetail(OrganisationDTO dto);


		/// <param name="Name"></param>
		/// <returns></returns>
		Task<Boolean> DoesOrganisationNameExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationNameExist(String Name);


		/// <param name="name"></param>
		/// <returns></returns>
		Task<Boolean> DoesOrganisationBranchExistAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationBranchExist(String name);


		/// <param name="Name"></param>
		/// <returns></returns>
		Task<Boolean> DoesOrganisationLogoExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationLogoExist(String Name);


		/// <param name="Name"></param>
		/// <returns></returns>
		Task<Boolean> DoesOrganisationUnitExistAsync(String Name);

		/// <param name="Name"></param>
		/// <returns></returns>
		Boolean DoesOrganisationUnitExist(String Name);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<RoleDTO>> GetOrgRolesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<RoleDTO> GetOrgRoles(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<GroupDTO>> GetOrgGroupsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<GroupDTO> GetOrgGroups(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<RoleDTO>> GetOrgRolesforOrgIdAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<RoleDTO> GetOrgRolesforOrgId(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<GroupDTO>> GetOrgGroupsforOrgIdAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<GroupDTO> GetOrgGroupsforOrgId(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<vAttachmentDTO>> GetOrganisationLogosAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<vAttachmentDTO> GetOrganisationLogos(Guid orgId);


		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task<vAttachmentDTO> GetOrganisationLogoAsync(Guid attachmentDetailID);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		vAttachmentDTO GetOrganisationLogo(Guid attachmentDetailID);


		/// <returns></returns>
		Task SaveOrganisationLogoAsync(vAttachmentDTO dto);

		/// <returns></returns>
		void SaveOrganisationLogo(vAttachmentDTO dto);


		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task ActivateOrDeactivateOrganisationLogoAsync(Guid attachmentDetailID);

		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		void ActivateOrDeactivateOrganisationLogo(Guid attachmentDetailID);


		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		Task DefaultOrganisationLogoAsync(Guid organisationID,Guid attachmentDetailID);

		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		void DefaultOrganisationLogo(Guid organisationID,Guid attachmentDetailID);


		/// <returns></returns>
		Task SaveOrganisationUnitAsync(OrganisationUnitDTO dto);

		/// <returns></returns>
		void SaveOrganisationUnit(OrganisationUnitDTO dto);


		/// <param name="unitID"></param>
		/// <returns></returns>
		Task<OrganisationUnitDTO> GetOrganisationUnitAsync(Int32 unitID);

		/// <param name="unitID"></param>
		/// <returns></returns>
		OrganisationUnitDTO GetOrganisationUnit(Int32 unitID);


		/// <param name="unitID"></param>
		/// <returns></returns>
		Task DeleteOrganisationUnitAsync(Int32 unitID);

		/// <param name="unitID"></param>
		/// <returns></returns>
		void DeleteOrganisationUnit(Int32 unitID);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationDTO>> GetOrgansationBranchDTOsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationDTO> GetOrgansationBranchDTOs(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<vBranchDTO>> GetOrganisationBranchesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<vBranchDTO> GetOrganisationBranches(Guid orgId);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<ContactDTO>> GetAllBranchesAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<ContactDTO> GetAllBranches(Guid orgId);


		/// <returns></returns>
		Task SaveOrganisationBranchAsync(ContactDTO dto);

		/// <returns></returns>
		void SaveOrganisationBranch(ContactDTO dto);


		/// <param name="branchID"></param>
		/// <returns></returns>
		Task<vBranchDTO> GetOrganisationBranchAsync(Int32 branchID);

		/// <param name="branchID"></param>
		/// <returns></returns>
		vBranchDTO GetOrganisationBranch(Int32 branchID);


		/// <param name="contactID"></param>
		/// <returns></returns>
		Task DeleteOrganisationBranchAsync(Guid contactID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		void DeleteOrganisationBranch(Guid contactID);


		/// <param name="id"></param>
		/// <returns></returns>
		Task<List<AddressDTO>> GetAllBranchAddressesAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<AddressDTO> GetAllBranchAddresses(Guid id);


		/// <returns></returns>
		Task<List<OrganisationDetailDTO>> GetOrganisationDetailsAsync();

		/// <returns></returns>
		List<OrganisationDetailDTO> GetOrganisationDetails();


		/// <param name="id"></param>
		/// <returns></returns>
		Task<List<OrganisationDetailDTO>> GetOrganisationDetailsIncludingBranchesAsync(String id);

		/// <param name="id"></param>
		/// <returns></returns>
		List<OrganisationDetailDTO> GetOrganisationDetailsIncludingBranches(String id);


		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationUnitDTO>> GetOrganisationUnitsAsync(Guid orgId);

		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationUnitDTO> GetOrganisationUnits(Guid orgId);


		/// <param name="typeId"></param>
		/// <returns></returns>
		Task<List<VOrganisationTemplateDTO>> GetOrganisationTemplatesforOrganisationTypeAsync(Int32 typeId);

		/// <param name="typeId"></param>
		/// <returns></returns>
		List<VOrganisationTemplateDTO> GetOrganisationTemplatesforOrganisationType(Int32 typeId);

				
	}
	
	public partial interface ISettingsLogicClient : IClientBase
	{	

		/// <returns></returns>
		Task<Dictionary<String, SettingDTO>> GetAllSettingsAsync();

		/// <returns></returns>
		Dictionary<String, SettingDTO> GetAllSettings();


		/// <returns></returns>
		Task<SettingDTO> GetSettingAsync(SettingDTO setting);

		/// <returns></returns>
		SettingDTO GetSetting(SettingDTO setting);


		/// <returns></returns>
		Task InsertSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void InsertSetting(SettingDTO dto);


		/// <returns></returns>
		Task UpdateSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void UpdateSetting(SettingDTO dto);


		/// <returns></returns>
		Task DeleteSettingAsync(SettingDTO dto);

		/// <returns></returns>
		void DeleteSetting(SettingDTO dto);


		/// <param name="settingId"></param>
		/// <returns></returns>
		Task<SettingDTO> GetSettingByIdAsync(Int32 settingId);

		/// <param name="settingId"></param>
		/// <returns></returns>
		SettingDTO GetSettingById(Int32 settingId);


		/// <param name="name"></param>
		/// <returns></returns>
		Task<SettingDTO> GetSettingByNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		SettingDTO GetSettingByName(String name);

				
	}
	
	public partial interface IUserLogicClient : IClientBase
	{	

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		Task<UserLoginValidation> AuthenticateUserAsync(String username,String password);

		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		UserLoginValidation AuthenticateUser(String username,String password);


		/// <returns></returns>
		Task<List<UserDetailDTO>> GetAllUserDetailDTOAsync();

		/// <returns></returns>
		List<UserDetailDTO> GetAllUserDetailDTO();


		/// <returns></returns>
		Task<List<vUserManagementDTO>> GetAllUserManagementDTOAsync();

		/// <returns></returns>
		List<vUserManagementDTO> GetAllUserManagementDTO();


		/// <returns></returns>
		Task<Int32> GetAllUserManagementDTOCountAsync();

		/// <returns></returns>
		Int32 GetAllUserManagementDTOCount();


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<vUserManagementDTO> GerUserManagementDTOAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		vUserManagementDTO GerUserManagementDTO(Guid userId);


		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationRoleDTO>> GetUserRolesAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationRoleDTO> GetUserRoles(Guid userId,Guid orgId);


		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationRoleDTO>> GetOrganisationRolesAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationRoleDTO> GetOrganisationRoles(Guid userId,Guid orgId);


		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationGroupDTO>> GetUserGroupsAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationGroupDTO> GetUserGroups(Guid userId,Guid orgId);


		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		Task<List<OrganisationGroupDTO>> GetOrganisationGroupsAsync(Guid userId,Guid orgId);

		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		List<OrganisationGroupDTO> GetOrganisationGroups(Guid userId,Guid orgId);


		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		Task UpdateUserStatusAsync(Guid userId,Boolean delete);

		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		void UpdateUserStatus(Guid userId,Boolean delete);


		/// <returns></returns>
		Task<ContactDTO> AddUserAsync(ContactDTO dto);

		/// <returns></returns>
		ContactDTO AddUser(ContactDTO dto);


		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		Task AddUserDetailsAsync(String userType,String userCategory,ContactDTO dto);

		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		void AddUserDetails(String userType,String userCategory,ContactDTO dto);


		/// <returns></returns>
		Task UpdateUserAsync(ContactDTO dto);

		/// <returns></returns>
		void UpdateUser(ContactDTO dto);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<ContactDTO> EditUserAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		ContactDTO EditUser(Guid userId);


		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		Task ResetUserPasswordAsync(Guid userID,String newPassword);

		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		void ResetUserPassword(Guid userID,String newPassword);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task<Boolean> HasPasswordExpiredAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean HasPasswordExpired(Guid userID);


		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser);

		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		void LockOrUnlockUser(Guid userId,Boolean lockUser);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<String> ResetPasswordAndSetVerificationKeyAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		String ResetPasswordAndSetVerificationKey(Guid userId);


		/// <param name="email"></param>
		/// <returns></returns>
		Task ResetPasswordAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		void ResetPassword(String email);


		/// <param name="userName"></param>
		/// <returns></returns>
		Task<Boolean> IsUserExistAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		Boolean IsUserExist(String userName);


		/// <param name="email"></param>
		/// <returns></returns>
		Task<Boolean> IsEmailExistAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		Boolean IsEmailExist(String email);


		/// <param name="contactID"></param>
		/// <returns></returns>
		Task<List<AddressDTO>> GetUserAddressesAsync(Guid contactID);

		/// <param name="contactID"></param>
		/// <returns></returns>
		List<AddressDTO> GetUserAddresses(Guid contactID);


		/// <param name="id"></param>
		/// <returns></returns>
		Task DeleteAddressToContactAsync(Guid id);

		/// <param name="id"></param>
		/// <returns></returns>
		void DeleteAddressToContact(Guid id);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task SaveUserRolesAsync(Guid userId,List<OrganisationRoleDTO> selectedRoles);

		/// <param name="userId"></param>
		/// <returns></returns>
		void SaveUserRoles(Guid userId,List<OrganisationRoleDTO> selectedRoles);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task SaveUserGroupsAsync(Guid userId,List<OrganisationGroupDTO> selectedGroups);

		/// <param name="userId"></param>
		/// <returns></returns>
		void SaveUserGroups(Guid userId,List<OrganisationGroupDTO> selectedGroups);


		/// <returns></returns>
		Task<List<UserAccount>> GetAllUserAccountAsync();

		/// <returns></returns>
		List<UserAccount> GetAllUserAccount();


		/// <param name="key"></param>
		/// <returns></returns>
		Task<UserAccount> GetUserAccountAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		UserAccount GetUserAccount(Guid key);


		/// <param name="email"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByEmailAsync(String email);

		/// <param name="email"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmail(String email);


		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id);

		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id);


		/// <param name="key"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByVerificationKeyAsync(String key);

		/// <param name="key"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByVerificationKey(String key);


		/// <param name="username"></param>
		/// <returns></returns>
		Task<UserAccount> GetBAUserAccountByUsernameAsync(String username);

		/// <param name="username"></param>
		/// <returns></returns>
		UserAccount GetBAUserAccountByUsername(String username);


		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly);

		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly);


		/// <param name="userName"></param>
		/// <returns></returns>
		Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName);

		/// <param name="userName"></param>
		/// <returns></returns>
		UserAccountDTO GetUserAccountByUsername(String userName);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<List<ContactDTO>> GetUserContactsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<ContactDTO> GetUserContacts(Guid userId);


		/// <param name="key"></param>
		/// <returns></returns>
		Task<List<UserAccount>> GetUserAccountsAsync(Guid key);

		/// <param name="key"></param>
		/// <returns></returns>
		List<UserAccount> GetUserAccounts(Guid key);


		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID);


		/// <param name="uaoID"></param>
		/// <returns></returns>
		Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID);

		/// <param name="uaoID"></param>
		/// <returns></returns>
		ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID);


		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg);

		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg);


		/// <param name="accountID"></param>
		/// <returns></returns>
		Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID);

		/// <param name="accountID"></param>
		/// <returns></returns>
		List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID);


		/// <returns></returns>
		Task<UserAccount> CreateUserAccountAsync();

		/// <returns></returns>
		UserAccount CreateUserAccount();


		/// <returns></returns>
		Task AddUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void AddUserAccount(UserAccount user);


		/// <returns></returns>
		Task RemoveUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void RemoveUserAccount(UserAccount user);


		/// <returns></returns>
		Task UpdateUserAccountAsync(UserAccount user);

		/// <returns></returns>
		void UpdateUserAccount(UserAccount user);


		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID);

		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<List<String>> UserLoginSessionsAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		List<String> UserLoginSessions(Guid userId);


		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task LogEveryoneElseOutAsync(Guid userId,String sessionId);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void LogEveryoneElseOut(Guid userId,String sessionId);


		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation);


		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData);

		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData);


		/// <param name="tempUserId"></param>
		/// <returns></returns>
		Task LockUserTemporaryAccountAsync(Guid tempUserId);

		/// <param name="tempUserId"></param>
		/// <returns></returns>
		void LockUserTemporaryAccount(Guid tempUserId);


		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		Task<Boolean> DoesUserExistAsync(Guid userID,Boolean isTemporary);

		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		Boolean DoesUserExist(Guid userID,Boolean isTemporary);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		UserAccountOrganisationDTO GetPermanentUAO(Guid userID);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task<Boolean> DoesPermanentUserHavePersonalOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Boolean DoesPermanentUserHavePersonalOrganisation(Guid userID);


		/// <param name="userId"></param>
		/// <returns></returns>
		Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId);

		/// <param name="userId"></param>
		/// <returns></returns>
		Guid GetPersonalUserAccountOrganisation(Guid userId);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task<Nullable<Guid>> AddUserToTemporaryOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		Nullable<Guid> AddUserToTemporaryOrganisation(Guid userID);


		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		Task<UserAccount> CreateTemporaryAccountAsync(String email,String password,Boolean temporaryAccount,Guid userId);

		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UserAccount CreateTemporaryAccount(String email,String password,Boolean temporaryAccount,Guid userId);


		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		Task<UserAccount> CreateAccountAsync(String userName,String password,String email,Boolean temporaryAccount,Guid userId);

		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		UserAccount CreateAccount(String userName,String password,String email,Boolean temporaryAccount,Guid userId);


		/// <returns></returns>
		Task CreateContactAsync(ContactDTO contactDTO);

		/// <returns></returns>
		void CreateContact(ContactDTO contactDTO);


		/// <param name="parentID"></param>
		/// <returns></returns>
		Task<Boolean> ContactExistsAsync(Guid parentID);

		/// <param name="parentID"></param>
		/// <returns></returns>
		Boolean ContactExists(Guid parentID);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task DeleteAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void DeleteAccount(Guid userID);


		/// <param name="userID"></param>
		/// <returns></returns>
		Task CloseAccountAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		void CloseAccount(Guid userID);


		/// <returns></returns>
		Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync();

		/// <returns></returns>
		List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn();


		/// <param name="userID"></param>
		/// <returns></returns>
		Task<VUserAccountOrganisationDTO> GetVUserAccountOrganisationAsync(Guid userID);

		/// <param name="userID"></param>
		/// <returns></returns>
		VUserAccountOrganisationDTO GetVUserAccountOrganisation(Guid userID);


		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		Task RemovePasswordResetSecretAsync(Guid accountID,Guid PasswordResetSecretID);

		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		void RemovePasswordResetSecret(Guid accountID,Guid PasswordResetSecretID);


		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		Task AddPasswordResetSecretAsync(Guid accountID,String password,String question,String answer);

		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		void AddPasswordResetSecret(Guid accountID,String password,String question,String answer);

				
	}
	
	public partial interface IValidationLogicClient : IClientBase
	{	

		/// <param name="strSRAID"></param>
		/// <returns></returns>
		Task<EmployeeDTO> GetEmployeeByIdAsync(String strSRAID);

		/// <param name="strSRAID"></param>
		/// <returns></returns>
		EmployeeDTO GetEmployeeById(String strSRAID);


		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		Task<CompanyDTO> GetCompanyDetailsByNameAsync(String strCopmanyName);

		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		CompanyDTO GetCompanyDetailsByName(String strCopmanyName);


		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		Task<Boolean> IsInvalidBranchAsync(String strBranchSraId,String strCompanyName,String strPostCode);

		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		Boolean IsInvalidBranch(String strBranchSraId,String strCompanyName,String strPostCode);


		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		Task<Boolean> IsInvalidEmployeeAsync(String strSraId,String strLastName,String strCompanyName,Boolean IsColp);

		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		Boolean IsInvalidEmployee(String strSraId,String strLastName,String strCompanyName,Boolean IsColp);


		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<RegistrationValidationErrorDTO> DuplicateComplianceOfficerAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO DuplicateComplianceOfficer(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);


		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<RegistrationValidationErrorDTO> DuplicateCompanyAsync(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail);

		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO DuplicateCompany(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail);


		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		Task<RegistrationValidationErrorDTO> COwithAnotherFirmAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		RegistrationValidationErrorDTO COwithAnotherFirm(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail);

				
	}

}
#endregion

#region Clients
namespace Bec.TargetFramework.Business.Client.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode) return;

			var content = await response.Content.ReadAsAsync<HttpError>();
            throw new Exception(content["ExceptionMessage"].ToString());
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}

        protected async Task DeleteAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Delete, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task DeleteAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Delete, user, null);
            await EnsureSuccessAsync(response);
        }

		protected async Task<Tret> PostAsync<Tbody, Tret>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            return await HandleResponse<Tret>(response);
        }

		protected async Task PostAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task<Tret> GetAsync<Tret>(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            return await HandleResponse<Tret>(response);
        }

		protected async Task GetAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            await EnsureSuccessAsync(response);
        }

		private async Task<T> HandleResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccessAsync(response);
            return await response.ReadContentAsAsync<T>();
        }

        private async Task<HttpResponseMessage> SendAsync<T>(string requestUri, HttpMethod method, string user, T value)
        {
            var req = new HttpRequestMessage
            {
                RequestUri = new Uri(requestUri, UriKind.RelativeOrAbsolute),
                Method = method
            };
            if (value != null) req.Content = new ObjectContent<T>(value, new JsonMediaTypeFormatter(), (MediaTypeHeaderValue)null);
            if (user !=null) req.Headers.Add("User", user);
            return await HttpClient.SendAsync(req);
        }

        protected string getHttpContextUser()
        {
            if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null)
                return HttpContext.Current.User.Identity.Name;
            else
                return null;
        }
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ClassificationDataLogicClient : ClientBase, Interfaces.IClassificationDataLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ClassificationDataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<CountryCodeDTO>> GetCountriesAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<CountryCodeDTO> GetCountries()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<CountryCodeDTO>>("api/ClassificationDataLogic/GetCountries", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<List<ClassificationTypeDTO>> GetRootClassificationDataForTypeNameAsync(String typeName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeName"></param>
		public virtual List<ClassificationTypeDTO> GetRootClassificationDataForTypeName(String typeName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetRootClassificationDataForTypeName?typeName=" + typeName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		/// <returns></returns>
		public virtual async Task<List<ClassificationTypeDTO>> GetSubClassificationDataForParentIDAsync(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="classificationTypeID"></param>
		public virtual List<ClassificationTypeDTO> GetSubClassificationDataForParentID(Int32 classificationTypeID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ClassificationTypeDTO>>("api/ClassificationDataLogic/GetSubClassificationDataForParentID?classificationTypeID=" + classificationTypeID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/ClassificationDataLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class DataLogicClient : ClientBase, Interfaces.IDataLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public DataLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public DataLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <returns></returns>
		public virtual async Task<TFEventDTO> GetTFEventByNameAsync(String eventName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<TFEventDTO>("api/DataLogic/GetTFEventByName?eventName=" + eventName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		public virtual TFEventDTO GetTFEventByName(String eventName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<TFEventDTO>("api/DataLogic/GetTFEventByName?eventName=" + eventName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		/// <returns></returns>
		public virtual async Task<List<VWorkflowTreeDTO>> GetWorkflowTreeAsync(Guid workflowID,Int32 workflowVersionNumber)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VWorkflowTreeDTO>>("api/DataLogic/GetWorkflowTree?workflowID=" + workflowID + "&workflowVersionNumber=" + workflowVersionNumber, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="workflowID"></param>
		/// <param name="workflowVersionNumber"></param>
		public virtual List<VWorkflowTreeDTO> GetWorkflowTree(Guid workflowID,Int32 workflowVersionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VWorkflowTreeDTO>>("api/DataLogic/GetWorkflowTree?workflowID=" + workflowID + "&workflowVersionNumber=" + workflowVersionNumber, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="statusTypeEnum"></param>
		/// <returns></returns>
		public virtual async Task<List<VStatusTypeDTO>> GetStatusTypeAsync(String statusTypeEnum)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VStatusTypeDTO>>("api/DataLogic/GetStatusType?statusTypeEnum=" + statusTypeEnum, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="statusTypeEnum"></param>
		public virtual List<VStatusTypeDTO> GetStatusType(String statusTypeEnum)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VStatusTypeDTO>>("api/DataLogic/GetStatusType?statusTypeEnum=" + statusTypeEnum, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomFirstAndLastNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomFirstAndLastName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFirstAndLastName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomFirstAndLastName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomLastNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomLastName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomLastName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomLastName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomFirstNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomFirstName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFirstName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomFirstName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomFemaleFirstNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomFemaleFirstName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFemaleFirstName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomFemaleFirstName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomMaleFirstNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomMaleFirstName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomMaleFirstName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomMaleFirstName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleFirstAndLastNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFirstAndLastNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFirstAndLastNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFirstAndLastNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleLastNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleLastNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleLastNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleLastNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleFemaleFirstAndLastNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFemaleFirstAndLastNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFemaleFirstAndLastNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFemaleFirstAndLastNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleMaleFirstAndLastNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleMaleFirstAndLastNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleMaleFirstAndLastNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleMaleFirstAndLastNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleFemaleFirstNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFemaleFirstNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleFemaleFirstNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleFemaleFirstNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		/// <returns></returns>
		public virtual async Task<IEnumerable<String>> GenerateMultipleMaleFirstNamesAsync(Int32 count)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleMaleFirstNames?count=" + count, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="count"></param>
		public virtual IEnumerable<String> GenerateMultipleMaleFirstNames(Int32 count)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, IEnumerable<String>>("api/DataLogic/GenerateMultipleMaleFirstNames?count=" + count, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomFemaleFirstAndLastNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomFemaleFirstAndLastName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomFemaleFirstAndLastName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomFemaleFirstAndLastName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<String> GenerateRandomMaleFirstAndLastNameAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/DataLogic/GenerateRandomMaleFirstAndLastName", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual String GenerateRandomMaleFirstAndLastName()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/DataLogic/GenerateRandomMaleFirstAndLastName", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<ServiceDefinitionDTO> GetServiceDefinitionWithDetailAsync(String name)
		{
			string _user = getHttpContextUser();
			return await GetAsync<ServiceDefinitionDTO>("api/DataLogic/GetServiceDefinitionWithDetail?name=" + name, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual ServiceDefinitionDTO GetServiceDefinitionWithDetail(String name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ServiceDefinitionDTO>("api/DataLogic/GetServiceDefinitionWithDetail?name=" + name, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task MarkServiceInterfaceAsPendingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsPending?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsPending(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsPending?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task MarkServiceInterfaceAsProcessingAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsProcessing?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsProcessing(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsProcessing?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task MarkServiceInterfaceAsFailedAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsFailed?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsFailed(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsFailed?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		/// <returns></returns>
		public virtual async Task MarkServiceInterfaceAsSuccessfulAsync(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsSuccessful?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="serviceDefinitionID"></param>
		/// <param name="productPurchaseProductTaskID"></param>
		/// <param name="parentID"></param>
		/// <param name="data"></param>
		public virtual void MarkServiceInterfaceAsSuccessful(Guid serviceDefinitionID,Nullable<Guid> productPurchaseProductTaskID,Nullable<Guid> parentID,String data)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/DataLogic/MarkServiceInterfaceAsSuccessful?serviceDefinitionID=" + serviceDefinitionID + "&productPurchaseProductTaskID=" + productPurchaseProductTaskID + "&parentID=" + parentID + "&data=" + data, null, _user));
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class NotificationLogicClient : ClientBase, Interfaces.INotificationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public NotificationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> HasNotificationAlreadyBeenSentInTheLastTimePeriodAsync(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <param name="organisationId"></param>
		/// <param name="notifcationConstructID"></param>
		/// <param name="notificationConstructVersion"></param>
		/// <param name="notificationParentID"></param>
		/// <param name="isRead"></param>
		/// <param name="sentInLast"></param>
		public virtual Boolean HasNotificationAlreadyBeenSentInTheLastTimePeriod(Nullable<Guid> uaoID,Nullable<Guid> organisationId,Guid notifcationConstructID,Int32 notificationConstructVersion,Nullable<Guid> notificationParentID,Boolean isRead,TimeSpan sentInLast)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/NotificationLogic/HasNotificationAlreadyBeenSentInTheLastTimePeriod?uaoID=" + uaoID + "&organisationId=" + organisationId + "&notifcationConstructID=" + notifcationConstructID + "&notificationConstructVersion=" + notificationConstructVersion + "&notificationParentID=" + notificationParentID + "&isRead=" + isRead + "&sentInLast=" + sentInLast, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<Boolean> SaveNotificationAsync(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<NotificationDTO, Boolean>("api/NotificationLogic/SaveNotification", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean SaveNotification(NotificationDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<NotificationDTO, Boolean>("api/NotificationLogic/SaveNotification", dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		/// <returns></returns>
		public virtual async Task<List<VNotificationConstructGroupDTO>> GetNotificationGroupConstructsAsync(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeID"></param>
		/// <param name="enumValue"></param>
		public virtual List<VNotificationConstructGroupDTO> GetNotificationGroupConstructs(Guid userTypeID,Int32 organisationTypeID,NotificationGroupTypeIDEnum enumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationConstructGroupDTO>>("api/NotificationLogic/GetNotificationGroupConstructs?userTypeID=" + userTypeID + "&organisationTypeID=" + organisationTypeID + "&enumValue=" + enumValue, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual async Task<NotificationConstructDTO> GetNotificationConstructAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return await GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual NotificationConstructDTO GetNotificationConstruct(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetNotificationConstruct?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		/// <returns></returns>
		public virtual async Task<List<VNotificationWithUAOVerificationCodeDTO>> GetAllUserNotificationsForUserWithNotificationGroupNotAcceptedAsync(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userAccountOrganisationID"></param>
		/// <param name="userTypeID"></param>
		/// <param name="organisationTypeId"></param>
		/// <param name="groupEnumValue"></param>
		public virtual List<VNotificationWithUAOVerificationCodeDTO> GetAllUserNotificationsForUserWithNotificationGroupNotAccepted(Guid userAccountOrganisationID,Guid userTypeID,Int32 organisationTypeId,NotificationGroupTypeIDEnum groupEnumValue)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VNotificationWithUAOVerificationCodeDTO>>("api/NotificationLogic/GetAllUserNotificationsForUserWithNotificationGroupNotAccepted?userAccountOrganisationID=" + userAccountOrganisationID + "&userTypeID=" + userTypeID + "&organisationTypeId=" + organisationTypeId + "&groupEnumValue=" + groupEnumValue, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<NotificationConstructDTO> GetLatestNotificationConstructIdFromNameAsync(String name)
		{
			string _user = getHttpContextUser();
			return await GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual NotificationConstructDTO GetLatestNotificationConstructIdFromName(String name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<NotificationConstructDTO>("api/NotificationLogic/GetLatestNotificationConstructIdFromName?name=" + name, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		/// <returns></returns>
		public virtual async Task<VNotificationConstructDTO> GetNotificationConstructViewDataAsync(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return await GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationNotificationConstructID"></param>
		/// <param name="versionNumber"></param>
		public virtual VNotificationConstructDTO GetNotificationConstructViewData(Guid organisationNotificationConstructID,Int32 versionNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VNotificationConstructDTO>("api/NotificationLogic/GetNotificationConstructViewData?organisationNotificationConstructID=" + organisationNotificationConstructID + "&versionNumber=" + versionNumber, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		/// <returns></returns>
		public virtual async Task<VDefaultEmailAddressDTO> RecipientAddressDetailAsync(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, VDefaultEmailAddressDTO>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="userAccountOrganisationID"></param>
		public virtual VDefaultEmailAddressDTO RecipientAddressDetail(Nullable<Guid> organisationID,Nullable<Guid> userAccountOrganisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, VDefaultEmailAddressDTO>("api/NotificationLogic/RecipientAddressDetail?organisationID=" + organisationID + "&userAccountOrganisationID=" + userAccountOrganisationID, null, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class OrganisationLogicClient : ClientBase, Interfaces.IOrganisationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public OrganisationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual async Task ExpireOrganisationsAsync()
        {
            string _user = getHttpContextUser();
            await PostAsync<object>("api/OrganisationLogic/ExpireOrganisations", null, _user);
        }

        /// <summary>
        /// 
        /// </summary>
        public virtual void ExpireOrganisations()
        {
            string _user = getHttpContextUser();
            Task.Run(() => PostAsync<object>("api/OrganisationLogic/ExpireOrganisations", null, _user));
        }

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		/// <returns></returns>
		public virtual async Task<List<PostCodeDTO>> FindAddressesByPostCodeAsync(String postCode,String buildingNameOrNumber)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, List<PostCodeDTO>>("api/OrganisationLogic/FindAddressesByPostCode?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <param name="buildingNameOrNumber"></param>
		public virtual List<PostCodeDTO> FindAddressesByPostCode(String postCode,String buildingNameOrNumber)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<PostCodeDTO>>("api/OrganisationLogic/FindAddressesByPostCode?postCode=" + postCode + "&buildingNameOrNumber=" + buildingNameOrNumber, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		/// <returns></returns>
		public virtual async Task<List<VOrganisationWithStatusAndAdminDTO>> FindDuplicateOrganisationsAsync(Boolean manual,String line1,String line2,String town,String county,String postalCode)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/FindDuplicateOrganisations?manual=" + manual + "&line1=" + line1 + "&line2=" + line2 + "&town=" + town + "&county=" + county + "&postalCode=" + postalCode, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="manual"></param>
		/// <param name="line1"></param>
		/// <param name="line2"></param>
		/// <param name="town"></param>
		/// <param name="county"></param>
		/// <param name="postalCode"></param>
		public virtual List<VOrganisationWithStatusAndAdminDTO> FindDuplicateOrganisations(Boolean manual,String line1,String line2,String town,String county,String postalCode)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/FindDuplicateOrganisations?manual=" + manual + "&line1=" + line1 + "&line2=" + line2 + "&town=" + town + "&county=" + county + "&postalCode=" + postalCode, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task RejectOrganisationAsync(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisation", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void RejectOrganisation(RejectCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<RejectCompanyDTO>("api/OrganisationLogic/RejectOrganisation", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task GeneratePinAsync(GeneratePinDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<GeneratePinDTO>("api/OrganisationLogic/GeneratePin", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void GeneratePin(GeneratePinDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<GeneratePinDTO>("api/OrganisationLogic/GeneratePin", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		/// <returns></returns>
		public virtual async Task<GoogleGeoCodeResponse> GeoCodePostcodeAsync(String postCode)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, GoogleGeoCodeResponse>("api/OrganisationLogic/GeoCodePostcode?postCode=" + postCode, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="postCode"></param>
		public virtual GoogleGeoCodeResponse GeoCodePostcode(String postCode)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, GoogleGeoCodeResponse>("api/OrganisationLogic/GeoCodePostcode?postCode=" + postCode, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		/// <returns></returns>
		public virtual async Task<List<VOrganisationWithStatusAndAdminDTO>> GetCompaniesAsync(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgStatus"></param>
		public virtual List<VOrganisationWithStatusAndAdminDTO> GetCompanies(ProfessionalOrganisationStatusEnum orgStatus)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationWithStatusAndAdminDTO>>("api/OrganisationLogic/GetCompanies?orgStatus=" + orgStatus, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		/// <returns></returns>
		public virtual async Task<Guid> AddNewUnverifiedOrganisationAndAdministratorAsync(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministrator?organisationType=" + organisationType, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationType"></param>
		public virtual Guid AddNewUnverifiedOrganisationAndAdministrator(OrganisationTypeEnum organisationType,AddCompanyDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<AddCompanyDTO, Guid>("api/OrganisationLogic/AddNewUnverifiedOrganisationAndAdministrator?organisationType=" + organisationType, dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<Nullable<Guid>> GetTemporaryOrganisationBranchIDAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Guid> GetTemporaryOrganisationBranchID()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Nullable<Guid>>("api/OrganisationLogic/GetTemporaryOrganisationBranchID", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="searchText"></param>
		/// <returns></returns>
		public virtual async Task<List<vOrganisationDTO>> GetAllOrganisationDetailDTOAsync(String searchText)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<vOrganisationDTO>>("api/OrganisationLogic/GetAllOrganisationDetailDTO?searchText=" + searchText, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="searchText"></param>
		public virtual List<vOrganisationDTO> GetAllOrganisationDetailDTO(String searchText)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<vOrganisationDTO>>("api/OrganisationLogic/GetAllOrganisationDetailDTO?searchText=" + searchText, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<VOrganisationDTO> GetOrganisationDTOAsync(Guid id)
		{
			string _user = getHttpContextUser();
			return await GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO/" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual VOrganisationDTO GetOrganisationDTO(Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VOrganisationDTO>("api/OrganisationLogic/GetOrganisationDTO/" + id, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		public virtual async Task ActivateDeactivateOrDeleteOrganisationAsync(Guid id,Boolean delete)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/OrganisationLogic/ActivateDeactivateOrDeleteOrganisation/" + id + "?delete=" + delete, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="delete"></param>
		public virtual void ActivateDeactivateOrDeleteOrganisation(Guid id,Boolean delete)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ActivateDeactivateOrDeleteOrganisation/" + id + "?delete=" + delete, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task AddNewOrganisationFromWizardAsync(OrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<OrganisationDTO>("api/OrganisationLogic/AddNewOrganisationFromWizard", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddNewOrganisationFromWizard(OrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<OrganisationDTO>("api/OrganisationLogic/AddNewOrganisationFromWizard", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task SaveOrganisationDetailAsync(OrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<OrganisationDTO>("api/OrganisationLogic/SaveOrganisationDetail", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationDetail(OrganisationDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<OrganisationDTO>("api/OrganisationLogic/SaveOrganisationDetail", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesOrganisationNameExistAsync(String Name)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationNameExist?Name=" + Name, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationNameExist(String Name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationNameExist?Name=" + Name, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesOrganisationBranchExistAsync(String name)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationBranchExist?name=" + name, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual Boolean DoesOrganisationBranchExist(String name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationBranchExist?name=" + name, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesOrganisationLogoExistAsync(String Name)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationLogoExist?Name=" + Name, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationLogoExist(String Name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationLogoExist?Name=" + Name, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesOrganisationUnitExistAsync(String Name)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationUnitExist?Name=" + Name, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="Name"></param>
		public virtual Boolean DoesOrganisationUnitExist(String Name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/OrganisationLogic/DoesOrganisationUnitExist?Name=" + Name, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<RoleDTO>> GetOrgRolesAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<RoleDTO>>("api/OrganisationLogic/GetOrgRoles?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<RoleDTO> GetOrgRoles(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<RoleDTO>>("api/OrganisationLogic/GetOrgRoles?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<GroupDTO>> GetOrgGroupsAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<GroupDTO>>("api/OrganisationLogic/GetOrgGroups?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<GroupDTO> GetOrgGroups(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<GroupDTO>>("api/OrganisationLogic/GetOrgGroups?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<RoleDTO>> GetOrgRolesforOrgIdAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<RoleDTO>>("api/OrganisationLogic/GetOrgRolesforOrgId?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<RoleDTO> GetOrgRolesforOrgId(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<RoleDTO>>("api/OrganisationLogic/GetOrgRolesforOrgId?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<GroupDTO>> GetOrgGroupsforOrgIdAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<GroupDTO>>("api/OrganisationLogic/GetOrgGroupsforOrgId?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<GroupDTO> GetOrgGroupsforOrgId(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<GroupDTO>>("api/OrganisationLogic/GetOrgGroupsforOrgId?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<vAttachmentDTO>> GetOrganisationLogosAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<vAttachmentDTO>>("api/OrganisationLogic/GetOrganisationLogos?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<vAttachmentDTO> GetOrganisationLogos(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<vAttachmentDTO>>("api/OrganisationLogic/GetOrganisationLogos?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task<vAttachmentDTO> GetOrganisationLogoAsync(Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<vAttachmentDTO>("api/OrganisationLogic/GetOrganisationLogo?attachmentDetailID=" + attachmentDetailID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		public virtual vAttachmentDTO GetOrganisationLogo(Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<vAttachmentDTO>("api/OrganisationLogic/GetOrganisationLogo?attachmentDetailID=" + attachmentDetailID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task SaveOrganisationLogoAsync(vAttachmentDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<vAttachmentDTO>("api/OrganisationLogic/SaveOrganisationLogo", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationLogo(vAttachmentDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<vAttachmentDTO>("api/OrganisationLogic/SaveOrganisationLogo", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task ActivateOrDeactivateOrganisationLogoAsync(Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/OrganisationLogic/ActivateOrDeactivateOrganisationLogo?attachmentDetailID=" + attachmentDetailID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="attachmentDetailID"></param>
		public virtual void ActivateOrDeactivateOrganisationLogo(Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/ActivateOrDeactivateOrganisationLogo?attachmentDetailID=" + attachmentDetailID, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		/// <returns></returns>
		public virtual async Task DefaultOrganisationLogoAsync(Guid organisationID,Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/OrganisationLogic/DefaultOrganisationLogo?organisationID=" + organisationID + "&attachmentDetailID=" + attachmentDetailID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="organisationID"></param>
		/// <param name="attachmentDetailID"></param>
		public virtual void DefaultOrganisationLogo(Guid organisationID,Guid attachmentDetailID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/OrganisationLogic/DefaultOrganisationLogo?organisationID=" + organisationID + "&attachmentDetailID=" + attachmentDetailID, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task SaveOrganisationUnitAsync(OrganisationUnitDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<OrganisationUnitDTO>("api/OrganisationLogic/SaveOrganisationUnit", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationUnit(OrganisationUnitDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<OrganisationUnitDTO>("api/OrganisationLogic/SaveOrganisationUnit", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		/// <returns></returns>
		public virtual async Task<OrganisationUnitDTO> GetOrganisationUnitAsync(Int32 unitID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<OrganisationUnitDTO>("api/OrganisationLogic/GetOrganisationUnit?unitID=" + unitID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		public virtual OrganisationUnitDTO GetOrganisationUnit(Int32 unitID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<OrganisationUnitDTO>("api/OrganisationLogic/GetOrganisationUnit?unitID=" + unitID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		/// <returns></returns>
		public virtual async Task DeleteOrganisationUnitAsync(Int32 unitID)
		{
			string _user = getHttpContextUser();
			await DeleteAsync("api/OrganisationLogic/DeleteOrganisationUnit?unitID=" + unitID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="unitID"></param>
		public virtual void DeleteOrganisationUnit(Int32 unitID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/OrganisationLogic/DeleteOrganisationUnit?unitID=" + unitID, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationDTO>> GetOrgansationBranchDTOsAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationDTO>>("api/OrganisationLogic/GetOrgansationBranchDTOs?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<OrganisationDTO> GetOrgansationBranchDTOs(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationDTO>>("api/OrganisationLogic/GetOrgansationBranchDTOs?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<vBranchDTO>> GetOrganisationBranchesAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<vBranchDTO>>("api/OrganisationLogic/GetOrganisationBranches?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<vBranchDTO> GetOrganisationBranches(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<vBranchDTO>>("api/OrganisationLogic/GetOrganisationBranches?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<ContactDTO>> GetAllBranchesAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<ContactDTO>>("api/OrganisationLogic/GetAllBranches?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<ContactDTO> GetAllBranches(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ContactDTO>>("api/OrganisationLogic/GetAllBranches?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task SaveOrganisationBranchAsync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<ContactDTO>("api/OrganisationLogic/SaveOrganisationBranch", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveOrganisationBranch(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/OrganisationLogic/SaveOrganisationBranch", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="branchID"></param>
		/// <returns></returns>
		public virtual async Task<vBranchDTO> GetOrganisationBranchAsync(Int32 branchID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<vBranchDTO>("api/OrganisationLogic/GetOrganisationBranch?branchID=" + branchID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="branchID"></param>
		public virtual vBranchDTO GetOrganisationBranch(Int32 branchID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<vBranchDTO>("api/OrganisationLogic/GetOrganisationBranch?branchID=" + branchID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		/// <returns></returns>
		public virtual async Task DeleteOrganisationBranchAsync(Guid contactID)
		{
			string _user = getHttpContextUser();
			await DeleteAsync("api/OrganisationLogic/DeleteOrganisationBranch?contactID=" + contactID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		public virtual void DeleteOrganisationBranch(Guid contactID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/OrganisationLogic/DeleteOrganisationBranch?contactID=" + contactID, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<List<AddressDTO>> GetAllBranchAddressesAsync(Guid id)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<AddressDTO>>("api/OrganisationLogic/GetAllBranchAddresses/" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<AddressDTO> GetAllBranchAddresses(Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<AddressDTO>>("api/OrganisationLogic/GetAllBranchAddresses/" + id, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<OrganisationDetailDTO>> GetOrganisationDetailsAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationDetailDTO>>("api/OrganisationLogic/GetOrganisationDetails", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<OrganisationDetailDTO> GetOrganisationDetails()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationDetailDTO>>("api/OrganisationLogic/GetOrganisationDetails", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationDetailDTO>> GetOrganisationDetailsIncludingBranchesAsync(String id)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationDetailDTO>>("api/OrganisationLogic/GetOrganisationDetailsIncludingBranches/" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual List<OrganisationDetailDTO> GetOrganisationDetailsIncludingBranches(String id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationDetailDTO>>("api/OrganisationLogic/GetOrganisationDetailsIncludingBranches/" + id, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationUnitDTO>> GetOrganisationUnitsAsync(Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationUnitDTO>>("api/OrganisationLogic/GetOrganisationUnits?orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orgId"></param>
		public virtual List<OrganisationUnitDTO> GetOrganisationUnits(Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationUnitDTO>>("api/OrganisationLogic/GetOrganisationUnits?orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeId"></param>
		/// <returns></returns>
		public virtual async Task<List<VOrganisationTemplateDTO>> GetOrganisationTemplatesforOrganisationTypeAsync(Int32 typeId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VOrganisationTemplateDTO>>("api/OrganisationLogic/GetOrganisationTemplatesforOrganisationType?typeId=" + typeId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="typeId"></param>
		public virtual List<VOrganisationTemplateDTO> GetOrganisationTemplatesforOrganisationType(Int32 typeId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VOrganisationTemplateDTO>>("api/OrganisationLogic/GetOrganisationTemplatesforOrganisationType?typeId=" + typeId, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class SettingsLogicClient : ClientBase, Interfaces.ISettingsLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public SettingsLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public SettingsLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<Dictionary<String, SettingDTO>> GetAllSettingsAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<Dictionary<String, SettingDTO>>("api/SettingsLogic/GetAllSettings", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Dictionary<String, SettingDTO> GetAllSettings()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Dictionary<String, SettingDTO>>("api/SettingsLogic/GetAllSettings", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<SettingDTO> GetSettingAsync(SettingDTO setting)
		{
			string _user = getHttpContextUser();
			return await PostAsync<SettingDTO, SettingDTO>("api/SettingsLogic/GetSetting", setting, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual SettingDTO GetSetting(SettingDTO setting)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<SettingDTO, SettingDTO>("api/SettingsLogic/GetSetting", setting, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task InsertSettingAsync(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<SettingDTO>("api/SettingsLogic/InsertSetting", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void InsertSetting(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<SettingDTO>("api/SettingsLogic/InsertSetting", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task UpdateSettingAsync(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<SettingDTO>("api/SettingsLogic/UpdateSetting", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateSetting(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<SettingDTO>("api/SettingsLogic/UpdateSetting", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task DeleteSettingAsync(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			await DeleteAsync<SettingDTO>("api/SettingsLogic/DeleteSetting", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void DeleteSetting(SettingDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync<SettingDTO>("api/SettingsLogic/DeleteSetting", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="settingId"></param>
		/// <returns></returns>
		public virtual async Task<SettingDTO> GetSettingByIdAsync(Int32 settingId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<SettingDTO>("api/SettingsLogic/GetSettingById?settingId=" + settingId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="settingId"></param>
		public virtual SettingDTO GetSettingById(Int32 settingId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<SettingDTO>("api/SettingsLogic/GetSettingById?settingId=" + settingId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<SettingDTO> GetSettingByNameAsync(String name)
		{
			string _user = getHttpContextUser();
			return await GetAsync<SettingDTO>("api/SettingsLogic/GetSettingByName?name=" + name, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual SettingDTO GetSettingByName(String name)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<SettingDTO>("api/SettingsLogic/GetSettingByName?name=" + name, _user)).Result;
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class UserLogicClient : ClientBase, Interfaces.IUserLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public UserLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		public virtual async Task<UserLoginValidation> AuthenticateUserAsync(String username,String password)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUser?username=" + username + "&password=" + password, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <param name="password"></param>
		public virtual UserLoginValidation AuthenticateUser(String username,String password)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserLoginValidation>("api/UserLogic/AuthenticateUser?username=" + username + "&password=" + password, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<UserDetailDTO>> GetAllUserDetailDTOAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserDetailDTO>>("api/UserLogic/GetAllUserDetailDTO", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserDetailDTO> GetAllUserDetailDTO()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserDetailDTO>>("api/UserLogic/GetAllUserDetailDTO", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<vUserManagementDTO>> GetAllUserManagementDTOAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<vUserManagementDTO>>("api/UserLogic/GetAllUserManagementDTO", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<vUserManagementDTO> GetAllUserManagementDTO()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<vUserManagementDTO>>("api/UserLogic/GetAllUserManagementDTO", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<Int32> GetAllUserManagementDTOCountAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<Int32>("api/UserLogic/GetAllUserManagementDTOCount", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 GetAllUserManagementDTOCount()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/UserLogic/GetAllUserManagementDTOCount", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<vUserManagementDTO> GerUserManagementDTOAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, vUserManagementDTO>("api/UserLogic/GerUserManagementDTO?userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual vUserManagementDTO GerUserManagementDTO(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, vUserManagementDTO>("api/UserLogic/GerUserManagementDTO?userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationRoleDTO>> GetUserRolesAsync(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationRoleDTO>>("api/UserLogic/GetUserRoles?userId=" + userId + "&orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationRoleDTO> GetUserRoles(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationRoleDTO>>("api/UserLogic/GetUserRoles?userId=" + userId + "&orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationRoleDTO>> GetOrganisationRolesAsync(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationRoleDTO>>("api/UserLogic/GetOrganisationRoles?userId=" + userId + "&orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationRoleDTO> GetOrganisationRoles(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationRoleDTO>>("api/UserLogic/GetOrganisationRoles?userId=" + userId + "&orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationGroupDTO>> GetUserGroupsAsync(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationGroupDTO>>("api/UserLogic/GetUserGroups?userId=" + userId + "&orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationGroupDTO> GetUserGroups(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationGroupDTO>>("api/UserLogic/GetUserGroups?userId=" + userId + "&orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		/// <returns></returns>
		public virtual async Task<List<OrganisationGroupDTO>> GetOrganisationGroupsAsync(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<OrganisationGroupDTO>>("api/UserLogic/GetOrganisationGroups?userId=" + userId + "&orgId=" + orgId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="orgId"></param>
		public virtual List<OrganisationGroupDTO> GetOrganisationGroups(Guid userId,Guid orgId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<OrganisationGroupDTO>>("api/UserLogic/GetOrganisationGroups?userId=" + userId + "&orgId=" + orgId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="delete"></param>
		/// <returns></returns>
		public virtual async Task UpdateUserStatusAsync(Guid userId,Boolean delete)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/UpdateUserStatus?userId=" + userId + "&delete=" + delete, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="delete"></param>
		public virtual void UpdateUserStatus(Guid userId,Boolean delete)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/UpdateUserStatus?userId=" + userId + "&delete=" + delete, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<ContactDTO> AddUserAsync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUser", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual ContactDTO AddUser(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<ContactDTO, ContactDTO>("api/UserLogic/AddUser", dto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		/// <returns></returns>
		public virtual async Task AddUserDetailsAsync(String userType,String userCategory,ContactDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<ContactDTO>("api/UserLogic/AddUserDetails?userType=" + userType + "&userCategory=" + userCategory, dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userType"></param>
		/// <param name="userCategory"></param>
		public virtual void AddUserDetails(String userType,String userCategory,ContactDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/UserLogic/AddUserDetails?userType=" + userType + "&userCategory=" + userCategory, dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task UpdateUserAsync(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			await PostAsync<ContactDTO>("api/UserLogic/UpdateUser", dto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateUser(ContactDTO dto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/UserLogic/UpdateUser", dto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<ContactDTO> EditUserAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, ContactDTO>("api/UserLogic/EditUser?userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual ContactDTO EditUser(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, ContactDTO>("api/UserLogic/EditUser?userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		/// <returns></returns>
		public virtual async Task ResetUserPasswordAsync(Guid userID,String newPassword)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/ResetUserPassword?userID=" + userID + "&newPassword=" + newPassword, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="newPassword"></param>
		public virtual void ResetUserPassword(Guid userID,String newPassword)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ResetUserPassword?userID=" + userID + "&newPassword=" + newPassword, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> HasPasswordExpiredAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean HasPasswordExpired(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/HasPasswordExpired?userID=" + userID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		/// <returns></returns>
		public virtual async Task LockOrUnlockUserAsync(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/LockOrUnlockUser?userId=" + userId + "&lockUser=" + lockUser, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="lockUser"></param>
		public virtual void LockOrUnlockUser(Guid userId,Boolean lockUser)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LockOrUnlockUser?userId=" + userId + "&lockUser=" + lockUser, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<String> ResetPasswordAndSetVerificationKeyAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, String>("api/UserLogic/ResetPasswordAndSetVerificationKey?userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual String ResetPasswordAndSetVerificationKey(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, String>("api/UserLogic/ResetPasswordAndSetVerificationKey?userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task ResetPasswordAsync(String email)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/ResetPassword?email=" + email, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual void ResetPassword(String email)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/ResetPassword?email=" + email, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> IsUserExistAsync(String userName)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual Boolean IsUserExist(String userName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsUserExist?userName=" + userName, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> IsEmailExistAsync(String email)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual Boolean IsEmailExist(String email)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/IsEmailExist?email=" + email, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		/// <returns></returns>
		public virtual async Task<List<AddressDTO>> GetUserAddressesAsync(Guid contactID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="contactID"></param>
		public virtual List<AddressDTO> GetUserAddresses(Guid contactID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<AddressDTO>>("api/UserLogic/GetUserAddresses?contactID=" + contactID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task DeleteAddressToContactAsync(Guid id)
		{
			string _user = getHttpContextUser();
			await DeleteAsync("api/UserLogic/DeleteAddressToContact/" + id, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="id"></param>
		public virtual void DeleteAddressToContact(Guid id)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/UserLogic/DeleteAddressToContact/" + id, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task SaveUserRolesAsync(Guid userId,List<OrganisationRoleDTO> selectedRoles)
		{
			string _user = getHttpContextUser();
			await PostAsync<List<OrganisationRoleDTO>>("api/UserLogic/SaveUserRoles?userId=" + userId, selectedRoles, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual void SaveUserRoles(Guid userId,List<OrganisationRoleDTO> selectedRoles)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<List<OrganisationRoleDTO>>("api/UserLogic/SaveUserRoles?userId=" + userId, selectedRoles, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task SaveUserGroupsAsync(Guid userId,List<OrganisationGroupDTO> selectedGroups)
		{
			string _user = getHttpContextUser();
			await PostAsync<List<OrganisationGroupDTO>>("api/UserLogic/SaveUserGroups?userId=" + userId, selectedGroups, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual void SaveUserGroups(Guid userId,List<OrganisationGroupDTO> selectedGroups)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<List<OrganisationGroupDTO>>("api/UserLogic/SaveUserGroups?userId=" + userId, selectedGroups, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<UserAccount>> GetAllUserAccountAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccount", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<UserAccount> GetAllUserAccount()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetAllUserAccount", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> GetUserAccountAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccount>("api/UserLogic/GetUserAccount?key=" + key, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual UserAccount GetUserAccount(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetUserAccount?key=" + key, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> GetBAUserAccountByEmailAsync(String email)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmail?email=" + email, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		public virtual UserAccount GetBAUserAccountByEmail(String email)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmail?email=" + email, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> GetBAUserAccountByEmailAndNotIDAsync(String email,Guid id)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotID/" + id + "?email=" + email, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="id"></param>
		public virtual UserAccount GetBAUserAccountByEmailAndNotID(String email,Guid id)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByEmailAndNotID/" + id + "?email=" + email, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> GetBAUserAccountByVerificationKeyAsync(String key)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByVerificationKey?key=" + key, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual UserAccount GetBAUserAccountByVerificationKey(String key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByVerificationKey?key=" + key, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> GetBAUserAccountByUsernameAsync(String username)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsername?username=" + username, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="username"></param>
		public virtual UserAccount GetBAUserAccountByUsername(String username)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccount>("api/UserLogic/GetBAUserAccountByUsername?username=" + username, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		/// <returns></returns>
		public virtual async Task<List<UserAccountDTO>> GetUserAccountByEmailAsync(String email,Boolean permanentAccountonly)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="permanentAccountonly"></param>
		public virtual List<UserAccountDTO> GetUserAccountByEmail(String email,Boolean permanentAccountonly)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountDTO>>("api/UserLogic/GetUserAccountByEmail?email=" + email + "&permanentAccountonly=" + permanentAccountonly, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <returns></returns>
		public virtual async Task<UserAccountDTO> GetUserAccountByUsernameAsync(String userName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		public virtual UserAccountDTO GetUserAccountByUsername(String userName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountDTO>("api/UserLogic/GetUserAccountByUsername?userName=" + userName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<List<ContactDTO>> GetUserContactsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<ContactDTO> GetUserContacts(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<ContactDTO>>("api/UserLogic/GetUserContacts?userId=" + userId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		/// <returns></returns>
		public virtual async Task<List<UserAccount>> GetUserAccountsAsync(Guid key)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="key"></param>
		public virtual List<UserAccount> GetUserAccounts(Guid key)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccount>>("api/UserLogic/GetUserAccounts?key=" + key, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual async Task<List<UserAccountOrganisationDTO>> GetUserAccountOrganisationAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<UserAccountOrganisationDTO> GetUserAccountOrganisation(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserAccountOrganisationDTO>>("api/UserLogic/GetUserAccountOrganisation?accountID=" + accountID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		/// <returns></returns>
		public virtual async Task<ContactDTO> GetUserAccountOrganisationPrimaryContactAsync(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="uaoID"></param>
		public virtual ContactDTO GetUserAccountOrganisationPrimaryContact(Guid uaoID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<ContactDTO>("api/UserLogic/GetUserAccountOrganisationPrimaryContact?uaoID=" + uaoID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		/// <returns></returns>
		public virtual async Task<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationUserTypeOrganisationTypeAsync(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return await GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="personalOrg"></param>
		public virtual VUserAccountOrganisationUserTypeOrganisationTypeDTO GetUserAccountOrganisationUserTypeOrganisationType(Guid accountID,Boolean personalOrg)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VUserAccountOrganisationUserTypeOrganisationTypeDTO>("api/UserLogic/GetUserAccountOrganisationUserTypeOrganisationType?accountID=" + accountID + "&personalOrg=" + personalOrg, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <returns></returns>
		public virtual async Task<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>> GetUserAccountOrganisationWithUserTypeAndOrgTypeAsync(Guid accountID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		public virtual List<VUserAccountOrganisationUserTypeOrganisationTypeDTO> GetUserAccountOrganisationWithUserTypeAndOrgType(Guid accountID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountOrganisationUserTypeOrganisationTypeDTO>>("api/UserLogic/GetUserAccountOrganisationWithUserTypeAndOrgType?accountID=" + accountID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<UserAccount> CreateUserAccountAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, UserAccount>("api/UserLogic/CreateUserAccount", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual UserAccount CreateUserAccount()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateUserAccount", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task AddUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			await PostAsync<UserAccount>("api/UserLogic/AddUserAccount", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void AddUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/AddUserAccount", user, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task RemoveUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			await PostAsync<UserAccount>("api/UserLogic/RemoveUserAccount", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void RemoveUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/RemoveUserAccount", user, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task UpdateUserAccountAsync(UserAccount user)
		{
			string _user = getHttpContextUser();
			await PostAsync<UserAccount>("api/UserLogic/UpdateUserAccount", user, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void UpdateUserAccount(UserAccount user)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<UserAccount>("api/UserLogic/UpdateUserAccount", user, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		/// <returns></returns>
		public virtual async Task<List<UserClaimDTO>> GetUserClaimsAsync(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="organisationID"></param>
		public virtual List<UserClaimDTO> GetUserClaims(Guid userId,Guid organisationID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<UserClaimDTO>>("api/UserLogic/GetUserClaims?userId=" + userId + "&organisationID=" + organisationID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<List<String>> UserLoginSessionsAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual List<String> UserLoginSessions(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<String>>("api/UserLogic/UserLoginSessions?userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual async Task LogEveryoneElseOutAsync(Guid userId,String sessionId)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/LogEveryoneElseOut?userId=" + userId + "&sessionId=" + sessionId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void LogEveryoneElseOut(Guid userId,String sessionId)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LogEveryoneElseOut?userId=" + userId + "&sessionId=" + sessionId, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		/// <returns></returns>
		public virtual async Task SaveUserAccountLoginSessionAsync(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/SaveUserAccountLoginSession?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <param name="userHostAddress"></param>
		/// <param name="userIdAddress"></param>
		/// <param name="userLocation"></param>
		public virtual void SaveUserAccountLoginSession(Guid userId,String sessionId,String userHostAddress,String userIdAddress,String userLocation)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/SaveUserAccountLoginSession?userId=" + userId + "&sessionId=" + sessionId + "&userHostAddress=" + userHostAddress + "&userIdAddress=" + userIdAddress + "&userLocation=" + userLocation, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		/// <returns></returns>
		public virtual async Task SaveUserAccountLoginSessionDataAsync(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			string _user = getHttpContextUser();
			await PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionData?userId=" + userId + "&sessionId=" + sessionId, requestData, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="sessionId"></param>
		public virtual void SaveUserAccountLoginSessionData(Guid userId,String sessionId,Dictionary<String, String> requestData)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<Dictionary<String, String>>("api/UserLogic/SaveUserAccountLoginSessionData?userId=" + userId + "&sessionId=" + sessionId, requestData, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="tempUserId"></param>
		/// <returns></returns>
		public virtual async Task LockUserTemporaryAccountAsync(Guid tempUserId)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/LockUserTemporaryAccount?tempUserId=" + tempUserId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="tempUserId"></param>
		public virtual void LockUserTemporaryAccount(Guid tempUserId)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/LockUserTemporaryAccount?tempUserId=" + tempUserId, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesUserExistAsync(Guid userID,Boolean isTemporary)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID + "&isTemporary=" + isTemporary, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <param name="isTemporary"></param>
		public virtual Boolean DoesUserExist(Guid userID,Boolean isTemporary)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/DoesUserExist?userID=" + userID + "&isTemporary=" + isTemporary, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<UserAccountOrganisationDTO> GetPermanentUAOAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual UserAccountOrganisationDTO GetPermanentUAO(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<UserAccountOrganisationDTO>("api/UserLogic/GetPermanentUAO?userID=" + userID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> DoesPermanentUserHavePersonalOrganisationAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/DoesPermanentUserHavePersonalOrganisation?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Boolean DoesPermanentUserHavePersonalOrganisation(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/DoesPermanentUserHavePersonalOrganisation?userID=" + userID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<Guid> GetPersonalUserAccountOrganisationAsync(Guid userId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		public virtual Guid GetPersonalUserAccountOrganisation(Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Guid>("api/UserLogic/GetPersonalUserAccountOrganisation?userId=" + userId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<Nullable<Guid>> AddUserToTemporaryOrganisationAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Nullable<Guid>>("api/UserLogic/AddUserToTemporaryOrganisation?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual Nullable<Guid> AddUserToTemporaryOrganisation(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Nullable<Guid>>("api/UserLogic/AddUserToTemporaryOrganisation?userID=" + userID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> CreateTemporaryAccountAsync(String email,String password,Boolean temporaryAccount,Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, UserAccount>("api/UserLogic/CreateTemporaryAccount?email=" + email + "&password=" + password + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		public virtual UserAccount CreateTemporaryAccount(String email,String password,Boolean temporaryAccount,Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateTemporaryAccount?email=" + email + "&password=" + password + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		/// <returns></returns>
		public virtual async Task<UserAccount> CreateAccountAsync(String userName,String password,String email,Boolean temporaryAccount,Guid userId)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, UserAccount>("api/UserLogic/CreateAccount?userName=" + userName + "&password=" + password + "&email=" + email + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="password"></param>
		/// <param name="email"></param>
		/// <param name="temporaryAccount"></param>
		/// <param name="userId"></param>
		public virtual UserAccount CreateAccount(String userName,String password,String email,Boolean temporaryAccount,Guid userId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, UserAccount>("api/UserLogic/CreateAccount?userName=" + userName + "&password=" + password + "&email=" + email + "&temporaryAccount=" + temporaryAccount + "&userId=" + userId, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task CreateContactAsync(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			await PostAsync<ContactDTO>("api/UserLogic/CreateContact", contactDTO, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void CreateContact(ContactDTO contactDTO)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ContactDTO>("api/UserLogic/CreateContact", contactDTO, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> ContactExistsAsync(Guid parentID)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="parentID"></param>
		public virtual Boolean ContactExists(Guid parentID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/UserLogic/ContactExists?parentID=" + parentID, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task DeleteAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			await DeleteAsync("api/UserLogic/DeleteAccount?userID=" + userID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void DeleteAccount(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => DeleteAsync("api/UserLogic/DeleteAccount?userID=" + userID, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task CloseAccountAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/CloseAccount?userID=" + userID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual void CloseAccount(Guid userID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/CloseAccount?userID=" + userID, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<VUserAccountNotLoggedInDTO>> GetUserAccountsNotLoggedInAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VUserAccountNotLoggedInDTO> GetUserAccountsNotLoggedIn()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VUserAccountNotLoggedInDTO>>("api/UserLogic/GetUserAccountsNotLoggedIn", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		/// <returns></returns>
		public virtual async Task<VUserAccountOrganisationDTO> GetVUserAccountOrganisationAsync(Guid userID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<VUserAccountOrganisationDTO>("api/UserLogic/GetVUserAccountOrganisation?userID=" + userID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userID"></param>
		public virtual VUserAccountOrganisationDTO GetVUserAccountOrganisation(Guid userID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<VUserAccountOrganisationDTO>("api/UserLogic/GetVUserAccountOrganisation?userID=" + userID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		/// <returns></returns>
		public virtual async Task RemovePasswordResetSecretAsync(Guid accountID,Guid PasswordResetSecretID)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/RemovePasswordResetSecret?accountID=" + accountID + "&PasswordResetSecretID=" + PasswordResetSecretID, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="PasswordResetSecretID"></param>
		public virtual void RemovePasswordResetSecret(Guid accountID,Guid PasswordResetSecretID)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/RemovePasswordResetSecret?accountID=" + accountID + "&PasswordResetSecretID=" + PasswordResetSecretID, null, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		/// <returns></returns>
		public virtual async Task AddPasswordResetSecretAsync(Guid accountID,String password,String question,String answer)
		{
			string _user = getHttpContextUser();
			await PostAsync<object>("api/UserLogic/AddPasswordResetSecret?accountID=" + accountID + "&password=" + password + "&question=" + question + "&answer=" + answer, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountID"></param>
		/// <param name="password"></param>
		/// <param name="question"></param>
		/// <param name="answer"></param>
		public virtual void AddPasswordResetSecret(Guid accountID,String password,String question,String answer)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<object>("api/UserLogic/AddPasswordResetSecret?accountID=" + accountID + "&password=" + password + "&question=" + question + "&answer=" + answer, null, _user));
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class ValidationLogicClient : ClientBase, Interfaces.IValidationLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public ValidationLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public ValidationLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSRAID"></param>
		/// <returns></returns>
		public virtual async Task<EmployeeDTO> GetEmployeeByIdAsync(String strSRAID)
		{
			string _user = getHttpContextUser();
			return await GetAsync<EmployeeDTO>("api/ValidationLogic/GetEmployeeById?strSRAID=" + strSRAID, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSRAID"></param>
		public virtual EmployeeDTO GetEmployeeById(String strSRAID)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<EmployeeDTO>("api/ValidationLogic/GetEmployeeById?strSRAID=" + strSRAID, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strCopmanyName"></param>
		/// <returns></returns>
		public virtual async Task<CompanyDTO> GetCompanyDetailsByNameAsync(String strCopmanyName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<CompanyDTO>("api/ValidationLogic/GetCompanyDetailsByName?strCopmanyName=" + strCopmanyName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strCopmanyName"></param>
		public virtual CompanyDTO GetCompanyDetailsByName(String strCopmanyName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<CompanyDTO>("api/ValidationLogic/GetCompanyDetailsByName?strCopmanyName=" + strCopmanyName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> IsInvalidBranchAsync(String strBranchSraId,String strCompanyName,String strPostCode)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/ValidationLogic/IsInvalidBranch?strBranchSraId=" + strBranchSraId + "&strCompanyName=" + strCompanyName + "&strPostCode=" + strPostCode, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strBranchSraId"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="strPostCode"></param>
		public virtual Boolean IsInvalidBranch(String strBranchSraId,String strCompanyName,String strPostCode)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/ValidationLogic/IsInvalidBranch?strBranchSraId=" + strBranchSraId + "&strCompanyName=" + strCompanyName + "&strPostCode=" + strPostCode, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> IsInvalidEmployeeAsync(String strSraId,String strLastName,String strCompanyName,Boolean IsColp)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, Boolean>("api/ValidationLogic/IsInvalidEmployee?strSraId=" + strSraId + "&strLastName=" + strLastName + "&strCompanyName=" + strCompanyName + "&IsColp=" + IsColp, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="strSraId"></param>
		/// <param name="strLastName"></param>
		/// <param name="strCompanyName"></param>
		/// <param name="IsColp"></param>
		public virtual Boolean IsInvalidEmployee(String strSraId,String strLastName,String strCompanyName,Boolean IsColp)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, Boolean>("api/ValidationLogic/IsInvalidEmployee?strSraId=" + strSraId + "&strLastName=" + strLastName + "&strCompanyName=" + strCompanyName + "&IsColp=" + IsColp, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<RegistrationValidationErrorDTO> DuplicateComplianceOfficerAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/DuplicateComplianceOfficer?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO DuplicateComplianceOfficer(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/DuplicateComplianceOfficer?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<RegistrationValidationErrorDTO> DuplicateCompanyAsync(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/DuplicateCompany?FirmRegulator=" + FirmRegulator + "&BranchRegulatorNumber=" + BranchRegulatorNumber + "&FirmName=" + FirmName + "&FirmTradingName=" + FirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="FirmRegulator"></param>
		/// <param name="BranchRegulatorNumber"></param>
		/// <param name="FirmName"></param>
		/// <param name="FirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO DuplicateCompany(String FirmRegulator,String BranchRegulatorNumber,String FirmName,String FirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/DuplicateCompany?FirmRegulator=" + FirmRegulator + "&BranchRegulatorNumber=" + BranchRegulatorNumber + "&FirmName=" + FirmName + "&FirmTradingName=" + FirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		/// <returns></returns>
		public virtual async Task<RegistrationValidationErrorDTO> COwithAnotherFirmAsync(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/COwithAnotherFirm?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="CORegulator"></param>
		/// <param name="CORegulatorNumber"></param>
		/// <param name="COFirmName"></param>
		/// <param name="COFirmTradingName"></param>
		/// <param name="COLastName"></param>
		/// <param name="COEmail"></param>
		public virtual RegistrationValidationErrorDTO COwithAnotherFirm(String CORegulator,String CORegulatorNumber,String COFirmName,String COFirmTradingName,String COLastName,String COEmail)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, RegistrationValidationErrorDTO>("api/ValidationLogic/COwithAnotherFirm?CORegulator=" + CORegulator + "&CORegulatorNumber=" + CORegulatorNumber + "&COFirmName=" + COFirmName + "&COFirmTradingName=" + COFirmTradingName + "&COLastName=" + COLastName + "&COEmail=" + COEmail, null, _user)).Result;
		}

		#endregion
	}
}
#endregion

