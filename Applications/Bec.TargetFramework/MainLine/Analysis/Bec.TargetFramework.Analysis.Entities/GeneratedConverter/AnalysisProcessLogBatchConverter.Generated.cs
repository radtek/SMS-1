//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 24/03/2015 09:58:29
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Analysis.Entities
{

    public static partial class AnalysisProcessLogBatchConverter
    {

        public static AnalysisProcessLogBatchDTO ToDto(this Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AnalysisProcessLogBatchDTO ToDtoWithRelated(this Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch source, int level)
        {
            if (source == null)
              return null;

            var target = new AnalysisProcessLogBatchDTO();

            // Properties
            target.AnalysisProcessLogBatchID = source.AnalysisProcessLogBatchID;
            target.AnalysisProcessLogID = source.AnalysisProcessLogID;
            target.CreatedOn = source.CreatedOn;
            target.SentOn = source.SentOn;
            target.FileName = source.FileName;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.SourceID = source.SourceID;
            target.SourceVersionNumber = source.SourceVersionNumber;

            // Navigation Properties
            if (level > 0) {
              target.StatusTypeValue = source.StatusTypeValue.ToDtoWithRelated(level - 1);
              target.AnalysisProcessLog = source.AnalysisProcessLog.ToDtoWithRelated(level - 1);
              target.StatusType = source.StatusType.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch ToEntity(this AnalysisProcessLogBatchDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch();

            // Properties
            target.AnalysisProcessLogBatchID = source.AnalysisProcessLogBatchID;
            target.AnalysisProcessLogID = source.AnalysisProcessLogID;
            target.CreatedOn = source.CreatedOn;
            target.SentOn = source.SentOn;
            target.FileName = source.FileName;
            target.StatusTypeID = source.StatusTypeID;
            target.StatusTypeVersionNumber = source.StatusTypeVersionNumber;
            target.StatusTypeValueID = source.StatusTypeValueID;
            target.SourceID = source.SourceID;
            target.SourceVersionNumber = source.SourceVersionNumber;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AnalysisProcessLogBatchDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AnalysisProcessLogBatchDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch> ToEntities(this IEnumerable<AnalysisProcessLogBatchDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch source, AnalysisProcessLogBatchDTO target);

        static partial void OnEntityCreating(AnalysisProcessLogBatchDTO source, Bec.TargetFramework.Data.Analysis.AnalysisProcessLogBatch target);

    }

}
