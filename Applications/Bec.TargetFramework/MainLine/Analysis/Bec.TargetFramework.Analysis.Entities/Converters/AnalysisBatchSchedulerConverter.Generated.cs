//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 2/5/2015 2:37:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Bec.TargetFramework.Analysis
{

    public static partial class AnalysisBatchSchedulerConverter
    {

        public static AnalysisBatchSchedulerDTO ToDto(this Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static AnalysisBatchSchedulerDTO ToDtoWithRelated(this Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler source, int level)
        {
            if (source == null)
              return null;

            var target = new AnalysisBatchSchedulerDTO();

            // Properties
            target.AnalysisBatchSchedulerID = source.AnalysisBatchSchedulerID;
            target.AnalysisBatchSchedulerVersionNumber = source.AnalysisBatchSchedulerVersionNumber;
            target.Name = source.Name;
            target.Description = source.Description;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.AnalysisBatchSchedulerTypeID = source.AnalysisBatchSchedulerTypeID;
            target.AnalysisBatchSchedulerCategoryID = source.AnalysisBatchSchedulerCategoryID;
            target.ObjectName = source.ObjectName;
            target.ObjectAssembly = source.ObjectAssembly;

            // Navigation Properties
            if (level > 0) {
              target.AnalysisInterfaces = source.AnalysisInterfaces.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler ToEntity(this AnalysisBatchSchedulerDTO source)
        {
            if (source == null)
              return null;

            var target = new Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler();

            // Properties
            target.AnalysisBatchSchedulerID = source.AnalysisBatchSchedulerID;
            target.AnalysisBatchSchedulerVersionNumber = source.AnalysisBatchSchedulerVersionNumber;
            target.Name = source.Name;
            target.Description = source.Description;
            target.IsActive = source.IsActive;
            target.IsDeleted = source.IsDeleted;
            target.AnalysisBatchSchedulerTypeID = source.AnalysisBatchSchedulerTypeID;
            target.AnalysisBatchSchedulerCategoryID = source.AnalysisBatchSchedulerCategoryID;
            target.ObjectName = source.ObjectName;
            target.ObjectAssembly = source.ObjectAssembly;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<AnalysisBatchSchedulerDTO> ToDtos(this IEnumerable<Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<AnalysisBatchSchedulerDTO> ToDtosWithRelated(this IEnumerable<Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler> ToEntities(this IEnumerable<AnalysisBatchSchedulerDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler source, AnalysisBatchSchedulerDTO target);

        static partial void OnEntityCreating(AnalysisBatchSchedulerDTO source, Bec.TargetFramework.Data.Analysis.AnalysisBatchScheduler target);

    }

}
