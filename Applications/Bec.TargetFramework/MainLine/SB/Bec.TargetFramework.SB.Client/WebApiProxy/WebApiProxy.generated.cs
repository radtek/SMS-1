//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.SB.Client.Models;
using Bec.TargetFramework.SB.Entities;
using Bec.TargetFramework.SB.Entities.Enums;
using Bec.TargetFramework.SB.Interfaces;

#region Proxies
namespace Bec.TargetFramework.SB.Client
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string WebApiProxyBaseAddress = "http://localhost:9002";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.SB.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces
namespace Bec.TargetFramework.SB.Client.Interfaces
{
	
	
	

}
#endregion

#region Clients
namespace Bec.TargetFramework.SB.Client.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class BusLogicClient : ClientBase, IBusLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BusLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BusLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler, url,disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="BusEventId"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBusEventSubscribersAsync(Guid BusEventId)
		{
			return await HttpClient.GetAsync("api/BusLogic/GetBusEventSubscribers?BusEventId=" + BusEventId);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="BusEventId"></param>
		public virtual List<BusEventMessageSubscriberDTO> GetBusEventSubscribers(Guid BusEventId)
		{
						 var result = Task.Run(() => GetBusEventSubscribersAsync(BusEventId)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<BusEventMessageSubscriberDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBusEventByNameAsync(String eventName)
		{
			return await HttpClient.GetAsync("api/BusLogic/GetBusEventByName?eventName=" + eventName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		public virtual BusEventDTO GetBusEventByName(String eventName)
		{
						 var result = Task.Run(() => GetBusEventByNameAsync(eventName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<BusEventDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBusTaskSchedulesAsync()
		{
			return await HttpClient.GetAsync("api/BusLogic/GetBusTaskSchedules");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VBusTaskScheduleDTO> GetBusTaskSchedules()
		{
						 var result = Task.Run(() => GetBusTaskSchedulesAsync()).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<List<VBusTaskScheduleDTO>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="busTaskName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetBusTaskScheduleAsync(String busTaskName)
		{
			return await HttpClient.GetAsync("api/BusLogic/GetBusTaskSchedule?busTaskName=" + busTaskName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="busTaskName"></param>
		public virtual VBusTaskScheduleDTO GetBusTaskSchedule(String busTaskName)
		{
						 var result = Task.Run(() => GetBusTaskScheduleAsync(busTaskName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<VBusTaskScheduleDTO>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="status"></param>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <param name="isScheduledTask"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SaveBusMessageAsync(BusMessageStatusEnum status,String subscriber,String handler,Boolean isScheduledTask,BusMessageDTO messageDto)
		{
			return await HttpClient.PostAsJsonAsync<BusMessageDTO>("api/BusLogic/SaveBusMessage?status=" + status + "&subscriber=" + subscriber + "&handler=" + handler + "&isScheduledTask=" + isScheduledTask, messageDto);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="status"></param>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <param name="isScheduledTask"></param>
		public virtual Boolean SaveBusMessage(BusMessageStatusEnum status,String subscriber,String handler,Boolean isScheduledTask,BusMessageDTO messageDto)
		{
						 var result = Task.Run(() => SaveBusMessageAsync(status, subscriber, handler, isScheduledTask, messageDto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> HasMessageAlreadyBeenProcessedAsync(String subscriber,String handler,BusMessageDTO messageDto)
		{
			return await HttpClient.PostAsJsonAsync<BusMessageDTO>("api/BusLogic/HasMessageAlreadyBeenProcessed?subscriber=" + subscriber + "&handler=" + handler, messageDto);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		public virtual Boolean HasMessageAlreadyBeenProcessed(String subscriber,String handler,BusMessageDTO messageDto)
		{
						 var result = Task.Run(() => HasMessageAlreadyBeenProcessedAsync(subscriber, handler, messageDto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			return await HttpClient.GetAsync("api/BusLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
						 var result = Task.Run(() => GetClassificationDataForTypeNameAsync(categoryName, typeName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Int32>().Result;
			 		}


		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class EventPublishClient : ClientBase, IEventPublishClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public EventPublishClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public EventPublishClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <param name="eventSource"></param>
		/// <param name="eventReference"></param>
		/// <returns></returns>
        public virtual async Task<HttpResponseMessage> PublishEventAsync(EventPayloadDTO dto)
		{
            return await HttpClient.PostAsJsonAsync<EventPayloadDTO>("api/EventPublish/PublishEvent", dto);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <param name="eventSource"></param>
		/// <param name="eventReference"></param>
        public virtual Boolean PublishEvent(EventPayloadDTO dto)
		{
            var result = Task.Run(() => PublishEventAsync(dto)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Boolean>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			return await HttpClient.GetAsync("api/EventPublish/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
						 var result = Task.Run(() => GetClassificationDataForTypeNameAsync(categoryName, typeName)).Result;		 
			 
			EnsureSuccess(result);
				 
			 			 			 
			 return result.Content.ReadAsAsync<Int32>().Result;
			 		}



		#endregion
	}
}
#endregion

