//This file is auto-generated by WebApiProxy
//Any changes to this file will be overwritten
//Project site: http://github.com/faniereynders/webapiproxy

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Bec.TargetFramework.SB.Client.Models;
using Bec.TargetFramework.SB.Entities;
using Bec.TargetFramework.SB.Entities.Enums;
using Bec.TargetFramework.SB.Interfaces;
using System.Web.Http;

#region Proxies
namespace Bec.TargetFramework.SB.Client
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string WebApiProxyBaseAddress = "http://localhost:9002";
		
	}
}
#endregion

#region Models
namespace Bec.TargetFramework.SB.Client.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}
}
#endregion

#region Interfaces

#endregion

#region Clients
namespace Bec.TargetFramework.SB.Client.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase(string url)
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(url)
			};
		}

		public virtual async Task EnsureSuccessAsync(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode) return;

            var content = await response.Content.ReadAsAsync<HttpError>();
            throw new Exception(content["ExceptionMessage"].ToString());		
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler,string url, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(url)
			};
		}

		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			HttpClient.Dispose();
		}

        protected async Task DeleteAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Delete, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task DeleteAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Delete, user, null);
            await EnsureSuccessAsync(response);
        }

		protected async Task<Tret> PostAsync<Tbody, Tret>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            return await HandleResponse<Tret>(response);
        }

		protected async Task PostAsync<Tbody>(string requestUri, Tbody value, string user)
        {
            var response = await SendAsync(requestUri, HttpMethod.Post, user, value);
            await EnsureSuccessAsync(response);
        }

        protected async Task<Tret> GetAsync<Tret>(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            return await HandleResponse<Tret>(response);
        }

		protected async Task GetAsync(string requestUri, string user)
        {
            var response = await SendAsync<object>(requestUri, HttpMethod.Get, user, null);
            await EnsureSuccessAsync(response);
        }

		private async Task<T> HandleResponse<T>(HttpResponseMessage response)
        {
            await EnsureSuccessAsync(response);
            return await response.ReadContentAsAsync<T>();
        }

        private async Task<HttpResponseMessage> SendAsync<T>(string requestUri,HttpMethod method, string user, T value)
        {
            var req = new HttpRequestMessage
            {
                RequestUri = new Uri(requestUri, UriKind.RelativeOrAbsolute),
                Method = method
            };
            if (value != null) req.Content = new ObjectContent<T>(value, new JsonMediaTypeFormatter(), (MediaTypeHeaderValue)null);
            if (user !=null) req.Headers.Add("User", user);

            return await HttpClient.SendAsync(req);
        }

        protected string getHttpContextUser()
        {
            if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null)
                return HttpContext.Current.User.Identity.Name;
            else
                return null;
        }
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class BusLogicClient : ClientBase, IBusLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BusLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BusLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <param name="BusEventId"></param>
		/// <returns></returns>
		public virtual async Task<List<BusEventMessageSubscriberDTO>> GetBusEventSubscribersAsync(Guid BusEventId)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<BusEventMessageSubscriberDTO>>("api/BusLogic/GetBusEventSubscribers?BusEventId=" + BusEventId, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="BusEventId"></param>
		public virtual List<BusEventMessageSubscriberDTO> GetBusEventSubscribers(Guid BusEventId)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<BusEventMessageSubscriberDTO>>("api/BusLogic/GetBusEventSubscribers?BusEventId=" + BusEventId, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		/// <returns></returns>
		public virtual async Task<BusEventDTO> GetBusEventByNameAsync(String eventName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<BusEventDTO>("api/BusLogic/GetBusEventByName?eventName=" + eventName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="eventName"></param>
		public virtual BusEventDTO GetBusEventByName(String eventName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<BusEventDTO>("api/BusLogic/GetBusEventByName?eventName=" + eventName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="status"></param>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <param name="isScheduledTask"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> SaveBusMessageAsync(BusMessageStatusEnum status,String subscriber,String handler,Boolean isScheduledTask,BusMessageDTO messageDto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<BusMessageDTO, Boolean>("api/BusLogic/SaveBusMessage?status=" + status + "&subscriber=" + subscriber + "&handler=" + handler + "&isScheduledTask=" + isScheduledTask, messageDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="status"></param>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <param name="isScheduledTask"></param>
		public virtual Boolean SaveBusMessage(BusMessageStatusEnum status,String subscriber,String handler,Boolean isScheduledTask,BusMessageDTO messageDto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<BusMessageDTO, Boolean>("api/BusLogic/SaveBusMessage?status=" + status + "&subscriber=" + subscriber + "&handler=" + handler + "&isScheduledTask=" + isScheduledTask, messageDto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		/// <returns></returns>
		public virtual async Task<Boolean> HasMessageAlreadyBeenProcessedAsync(String subscriber,String handler,BusMessageDTO messageDto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<BusMessageDTO, Boolean>("api/BusLogic/HasMessageAlreadyBeenProcessed?subscriber=" + subscriber + "&handler=" + handler, messageDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="subscriber"></param>
		/// <param name="handler"></param>
		public virtual Boolean HasMessageAlreadyBeenProcessed(String subscriber,String handler,BusMessageDTO messageDto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<BusMessageDTO, Boolean>("api/BusLogic/HasMessageAlreadyBeenProcessed?subscriber=" + subscriber + "&handler=" + handler, messageDto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<Int32>("api/BusLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/BusLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}



		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class BusTaskLogicClient : ClientBase, IBusTaskLogicClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public BusTaskLogicClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public BusTaskLogicClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<VBusTaskScheduleDTO>> GetAllBusTaskSchedulesAsync()
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VBusTaskScheduleDTO>>("api/BusTaskLogic/GetAllBusTaskSchedules", _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VBusTaskScheduleDTO> GetAllBusTaskSchedules()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VBusTaskScheduleDTO>>("api/BusTaskLogic/GetAllBusTaskSchedules", _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationName"></param>
		/// <param name="applicationEnvironmentName"></param>
		/// <returns></returns>
		public virtual async Task<List<VBusTaskScheduleDTO>> GetAllBusTaskSchedulesByApplicationNameAndEnvironmentAsync(String applicationName,String applicationEnvironmentName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<List<VBusTaskScheduleDTO>>("api/BusTaskLogic/GetAllBusTaskSchedulesByApplicationNameAndEnvironment?applicationName=" + applicationName + "&applicationEnvironmentName=" + applicationEnvironmentName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationName"></param>
		/// <param name="applicationEnvironmentName"></param>
		public virtual List<VBusTaskScheduleDTO> GetAllBusTaskSchedulesByApplicationNameAndEnvironment(String applicationName,String applicationEnvironmentName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<List<VBusTaskScheduleDTO>>("api/BusTaskLogic/GetAllBusTaskSchedulesByApplicationNameAndEnvironment?applicationName=" + applicationName + "&applicationEnvironmentName=" + applicationEnvironmentName, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<List<VBusTaskScheduleDTO>> AllBusTaskSchedulesAsync()
		{
			string _user = getHttpContextUser();
			return await PostAsync<object, List<VBusTaskScheduleDTO>>("api/BusTaskLogic/AllBusTaskSchedules", null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual List<VBusTaskScheduleDTO> AllBusTaskSchedules()
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<object, List<VBusTaskScheduleDTO>>("api/BusTaskLogic/AllBusTaskSchedules", null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationName"></param>
		/// <param name="applicationEnvironmentName"></param>
		/// <returns></returns>
        public virtual async Task<List<VBusTaskScheduleDTO>> AllBusTaskSchedulesByAppNameAndEnvAsync(String appName, String env)
		{
			string _user = getHttpContextUser();
            return await PostAsync<object, List<VBusTaskScheduleDTO>>("api/BusTaskLogic/AllBusTaskSchedulesByAppNameAndEnv?appName=" + appName + "&env=" + env, null, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationName"></param>
		/// <param name="applicationEnvironmentName"></param>
        public virtual List<VBusTaskScheduleDTO> AllBusTaskSchedulesByAppNameAndEnv(String appName, String env)
		{
			string _user = getHttpContextUser();
            return Task.Run(() => PostAsync<object, List<VBusTaskScheduleDTO>>("api/BusTaskLogic/AllBusTaskSchedulesByAppNameAndEnv?appName=" + appName + "&env=" + env, null, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task SaveBusTaskScheduleProcessLogAsync(ProcessLogDTO logDto)
		{
			string _user = getHttpContextUser();
			await PostAsync<ProcessLogDTO>("api/BusTaskLogic/SaveBusTaskScheduleProcessLog", logDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual void SaveBusTaskScheduleProcessLog(ProcessLogDTO logDto)
		{
			string _user = getHttpContextUser();
			Task.Run(() => PostAsync<ProcessLogDTO>("api/BusTaskLogic/SaveBusTaskScheduleProcessLog", logDto, _user));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<Int32>("api/BusTaskLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/BusTaskLogic/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}


		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class EventPublishClient : ClientBase, IEventPublishClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public EventPublishClient(string url) : base(url)
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public EventPublishClient(HttpMessageHandler handler,string url, bool disposeHandler = true) : base(handler,url, disposeHandler)
		{
		}

		#region Methods
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<Boolean> PublishEventAsync(EventPayloadDTO pDto)
		{
			string _user = getHttpContextUser();
			return await PostAsync<EventPayloadDTO, Boolean>("api/EventPublish/PublishEvent", pDto, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean PublishEvent(EventPayloadDTO pDto)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => PostAsync<EventPayloadDTO, Boolean>("api/EventPublish/PublishEvent", pDto, _user)).Result;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		/// <returns></returns>
		public virtual async Task<Int32> GetClassificationDataForTypeNameAsync(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return await GetAsync<Int32>("api/EventPublish/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="categoryName"></param>
		/// <param name="typeName"></param>
		public virtual Int32 GetClassificationDataForTypeName(String categoryName,String typeName)
		{
			string _user = getHttpContextUser();
			return Task.Run(() => GetAsync<Int32>("api/EventPublish/GetClassificationDataForTypeName?categoryName=" + categoryName + "&typeName=" + typeName, _user)).Result;
		}

		#endregion
	}
}
#endregion

