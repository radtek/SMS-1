@using Ext.Net
@using Ext.Net.MVC
@model  Ext.Net.NodeCollection
@{
    ViewBag.Title = "Dynamic Form Questions";
    Layout = "~/Views/Shared/_LayoutBase.cshtml";
    var X = Html.X();
}

@section headtag
{
    <style>
        .tree {
            float: left;
            margin: 20px;
            border: 1px solid #c3daf9;
        }
    </style>

    <script>
        var addRecord = function (form, grid) {
            if (!form.getForm().isValid()) {
                Ext.net.Notification.show({
                    iconCls: "icon-exclamation",
                    html: "Form is invalid",
                    title: "Error"
                });

                return false;
            }

            grid.store.insert(0, new Person(form.getForm().getValues()));
            form.getForm().reset();
        };

    </script>



}
@section body
{



@(
 X.TreePanel()
            .Title("Core Team Projects")
            .Width(500)
            .Height(300)
            .Collapsible(true)
            .UseArrows(true)
            .RootVisible(false)
            .MultiSelect(true)
            .SingleExpand(true)
            .FolderSort(true)
            .Fields(
                X.ModelField().Name("task"),
                X.ModelField().Name("user"),
                X.ModelField().Name("duration"),
                X.ModelField().Name("done").Type(ModelFieldType.Boolean)
            )
            .ColumnModel(
                X.TreeColumn()
                    .Text("Task")
                    .Flex(2)
                    .DataIndex("task"),

                X.TemplateColumn()
                    .Text("Duration")
                    .Flex(1)
                    .DataIndex("duration")
                    .Align(Alignment.Center)
                    .Template(t =>
                    {
                        t.Html = "{duration:this.formatHours}";
                        t.Functions.Add(new JFunction { Name = "formatHours", Fn = "formatHours" });
                    }),

                X.Column()
                    .Text("Assigned To")
                    .Flex(1)
                    .DataIndex("user"),

                X.CheckColumn()
                    .Text("Done")
                    .DataIndex("done")
                    .Width(40)
                    .Editable(true)
                    .StopSelection(false),

                X.ActionColumn()
                    .Text("Edit")
                    .Width(40)
                    .MenuDisabled(true)
                    .Align(Alignment.Center)
                    .Items(
                        X.ActionItem()
                            .Tooltip("Edit task")
                            .Icon(Icon.PageWhiteEdit)
                            .Handler("handler")
                            .IsDisabled(func => {
                                func.Handler = "return !record.data.leaf;";
                            })
                    )
            )
            .Root(Model)
            )



    @(Html.X().GridPanel()
        .Title("Icons with text")
        .Width(600)
        .Height(300)


        .ColumnModel(
            Html.X().Column()
                .Text("FormSectionId")
                        .DataIndex("FormSectionId")
                .Flex(1),
            Html.X().Column()
                .Text("SectionName")
                        .DataIndex("SectionName")
                .Width(75),
                 Html.X()
                       .CommandColumn()
                       .Commands(
                                Html.X()
                                .GridCommand()
                                .CommandName("AddQuestion")
                                .Text("Add Question")
                                .Icon(Icon.None)
                                .ToolTip(tt => tt.Text = "Add Question")
                               )
                               .DirectEvents(de =>
                               {
                                   de.Command.Method = HttpMethod.GET;
                                   de.Command.Url = Url.Action("ViewQuestionGrid", "ConfigureDynamicForm");
                                   de.Command.ExtraParams.Add(new Parameter("formSectionid", "record.data.FormSectionId", ParameterMode.Raw));

                               }
                       ),
                        Html.X()
                       .CommandColumn()
                       .Commands(
                                Html.X()
                                .GridCommand()
                                .CommandName("AddSection")
                                .Text("Add Sub Section")
                                .Icon(Icon.None)
                                .ToolTip(tt => tt.Text = "Add Sub Section")
                               )
                               .DirectEvents(de =>
                               {
                                   de.Command.Method = HttpMethod.GET;
                                   de.Command.Url = Url.Action("addSubSection", "ConfigureDynamicForm");
                                   de.Command.ExtraParams.Add(new Parameter("formSectionid", "record.data.FormSectionId", ParameterMode.Raw));

                               }
                       ),
            Html.X().CommandColumn()
                .Width(110)
                .Commands(
                    Html.X().GridCommand()
                        .CommandName("Delete")
                        .Icon(Icon.Delete)
                        .Text("Delete"),

                    Html.X().GridCommand()
                        .CommandName("Edit")
                        .Icon(Icon.NoteEdit)
                        .Text("Edit")

                )
                        .Listeners(ls => ls.Command.Handler = "Ext.Msg.alert(command, record.data.FormSectionId);")
                )



)

@Ext.Net.MVC.Examples.Areas.GridPanel_RowExpander.Models.MultiLevelGridPanel.BuildLevel(ViewBag.id, Url.Action("BuildLevel"))


}





