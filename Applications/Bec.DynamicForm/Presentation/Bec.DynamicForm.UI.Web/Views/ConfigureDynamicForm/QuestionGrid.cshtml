
@using Ext.Net
@using Ext.Net.MVC
@model  IEnumerable<Bec.DynamicForm.Entities.DTO.QuestionDTO>
@{
    ViewBag.Title = "Dynamic Form Questions";
    Layout = "~/Views/Shared/_LayoutBase.cshtml";
    var X = Html.X();
}

@section headtag
{
    <style>
        .tree {
            float: left;
            margin: 20px;
            border: 1px solid #c3daf9;
        }
    </style>

    <script>
        var loadFilter = function (plugin) {
            plugin.setValue({
                QuestionId: ">0",
                Description: "."
            });
        };
        /* A header Checkbox of CheckboxSelectionModel deals with the current page only.
          This override demonstrates how to take into account all the pages.
          It works with local paging only. It is not going to work with remote paging.
       */
        Ext.selection.CheckboxModel.override({
            selectAll: function (suppressEvent) {
                var me = this,
                    selections = me.store.getAllRange(), // instead of the getRange call
                    i = 0,
                    len = selections.length,
                    start = me.getSelection().length;

                me.suspendChanges();

                for (; i < len; i++) {
                    me.doSelect(selections[i], true, suppressEvent);
                }

                me.resumeChanges();
                if (!suppressEvent) {
                    me.maybeFireSelectionChange(me.getSelection().length !== start);
                }
            },

            deselectAll: Ext.Function.createSequence(Ext.selection.CheckboxModel.prototype.deselectAll, function () {
                this.view.panel.getSelectionMemory().clearMemory();
            })
        });
        var template = '<span style="color:{0};">{1}</span>';

        var change = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value);
        };

        var pctChange = function (value) {
            return Ext.String.format(template, (value > 0) ? "green" : "red", value + "%");
        };
        var getSectionId=function()
        {
            return @ViewBag.FromSectionId;
        }
    </script>



}
@section body
{
    <h1>Select Questions</h1>


    <h2>Section Name</h2>

@(X.Window()
        .ID("questions")
        .Width(800)
        .Height(400)
        .Closable(false)
        .Title("Select Questions")
        .Maximizable(true)
        .Layout(LayoutType.Fit)
        .Items(
            X.GridPanel()
                .ID("gpQuestion")
                .Store(X.Store()
                    .ID("Store1")
                    .DataSource(Model)
                    .PageSize(10)
                    .Model(X.Model()
                        .IDProperty("QuestionId")
                        .Fields(

                                X.ModelField().Name("Description").Type(ModelFieldType.String),
                                X.ModelField().Name("ControlTypeName").Type(ModelFieldType.String),
                                X.ModelField().Name("IsMandatory").Type(ModelFieldType.Boolean),
                                X.ModelField().Name("IsVisible").Type(ModelFieldType.Boolean)
                           
                        )
                    )
                    .Sorters(X.DataSorter().Property("Description").Direction(Ext.Net.SortDirection.ASC))
                )
                .ColumnModel(                           
                   
                    X.Column().Text("Description").DataIndex("Description") ,
                    X.Column().Text("Description").DataIndex("Description"),
                    X.Column().Text("ControlTypeName").DataIndex("ControlTypeName"),                 
                    X.Column().Text("IsMandatory").DataIndex("ControlTypeName") ,                
                    X.Column().Text("IsVisible").DataIndex("ControlTypeName")                    
                )
                .Plugins(
                    X.FilterHeader()
                )
              
                .BottomBar(
                X.PagingToolbar()
                .HideRefresh(true)
                .DisplayInfo(false)
                .Items(
                    X.Button()
                        .Text("Add Questions")
                        .DirectEvents(de =>
                        {
                            de.Click.Action = "Submit";
                            de.Click.EventMask.ShowMask = true;
                            de.Click.ExtraParams.Add(new Parameter()
                            {
                                Name = "selection",
                                Value = "App.gpQuestion.getSelectionSubmit().getSelectionModelField().getValue()",
                                Mode = ParameterMode.Raw
                            });
                            de.Click.ExtraParams.Add(new Parameter()
                            {
                                Name = "FromSectionId",
                                Value = "getSectionId",
                                Mode = ParameterMode.Raw
                            });
                        })
                )

            )
                .DockedItems(
                    X.Toolbar()
                        .Dock(Dock.Bottom)
                        .Items(
                            X.Button()
                                .Text("Case Sensitive")
                                .EnableToggle(true)
                                .AllowDepress(true)
                                .ToggleHandler("var plugin = this.up('grid').filterHeader; plugin.caseSensitive = this.pressed; plugin.applyFilter();"),                            
                            X.Button()
                                .Text("Clear Filters")
                                .Handler("this.up('grid').filterHeader.clearFilter();")
                        )
                )
                .SelectionModel(
                X.CheckboxSelectionModel()
                    .Mode(SelectionMode.Multi)
                    
                )
                .Listeners(l =>
                {
                    l.AfterRender.Handler = "this.filterHeader.fields[0].setIconCls('#Magnifier')";
                    l.AfterRender.Delay = 10;
                })
        )
)
<div style="width:590px; border:1px solid gray; padding:5px;">
    @X.Label().ID("Label1")
</div>
    }