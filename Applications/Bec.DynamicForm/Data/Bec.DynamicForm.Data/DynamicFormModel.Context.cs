//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bec.DynamicForm.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DynamicFormDBEntities : DbContext
    {
        public DynamicFormDBEntities()
            : base("name=DynamicFormDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
        public virtual DbSet<FormSection> FormSections { get; set; }
        public virtual DbSet<FormSectionQuestion> FormSectionQuestions { get; set; }
        public virtual DbSet<QuestionControlType> QuestionControlTypes { get; set; }
        public virtual DbSet<QuestionValidationLookup> QuestionValidationLookups { get; set; }
        public virtual DbSet<Trigger> Triggers { get; set; }
        public virtual DbSet<ValidationType> ValidationTypes { get; set; }
        public virtual DbSet<Version> Versions { get; set; }
        public virtual DbSet<QuestionOption> QuestionOptions { get; set; }
        public virtual DbSet<QuestionOptionLookup> QuestionOptionLookups { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<FormSectionQuestionTemplate> FormSectionQuestionTemplates { get; set; }
        public virtual DbSet<QuestionOptionLookupTemplate> QuestionOptionLookupTemplates { get; set; }
        public virtual DbSet<QuestionTemplate> QuestionTemplates { get; set; }
        public virtual DbSet<QuestionValidationLookupTemplate> QuestionValidationLookupTemplates { get; set; }
        public virtual DbSet<TriggersTemplate> TriggersTemplates { get; set; }
        public virtual DbSet<vQuestion> vQuestions { get; set; }
    
        public virtual int Form_Delete(Nullable<int> formId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Form_Delete", formIdParameter);
        }
    
        public virtual int Form_Insert(ObjectParameter formId, string formName, string formDescription, Nullable<int> parentId, Nullable<int> formTypeId, Nullable<int> versionid, Nullable<bool> isActive)
        {
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var formTypeIdParameter = formTypeId.HasValue ?
                new ObjectParameter("FormTypeId", formTypeId) :
                new ObjectParameter("FormTypeId", typeof(int));
    
            var versionidParameter = versionid.HasValue ?
                new ObjectParameter("Versionid", versionid) :
                new ObjectParameter("Versionid", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Form_Insert", formId, formNameParameter, formDescriptionParameter, parentIdParameter, formTypeIdParameter, versionidParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Form> Form_Select(Nullable<int> formId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Form>("Form_Select", formIdParameter);
        }
    
        public virtual ObjectResult<Form> Form_Select(Nullable<int> formId, MergeOption mergeOption)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Form>("Form_Select", mergeOption, formIdParameter);
        }
    
        public virtual int Form_Update(Nullable<int> formId, string formName, string formDescription, Nullable<int> parentId, Nullable<int> formTypeId, Nullable<int> versionid, Nullable<bool> isActive)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("FormName", formName) :
                new ObjectParameter("FormName", typeof(string));
    
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("FormDescription", formDescription) :
                new ObjectParameter("FormDescription", typeof(string));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            var formTypeIdParameter = formTypeId.HasValue ?
                new ObjectParameter("FormTypeId", formTypeId) :
                new ObjectParameter("FormTypeId", typeof(int));
    
            var versionidParameter = versionid.HasValue ?
                new ObjectParameter("Versionid", versionid) :
                new ObjectParameter("Versionid", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Form_Update", formIdParameter, formNameParameter, formDescriptionParameter, parentIdParameter, formTypeIdParameter, versionidParameter, isActiveParameter);
        }
    
        public virtual int FormSection_Delete(Nullable<int> formSectionId)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSection_Delete", formSectionIdParameter);
        }
    
        public virtual int FormSection_Insert(ObjectParameter formSectionId, Nullable<int> sectionNo, string sectionName, string sectionDescription, Nullable<int> formId, Nullable<int> formSectionParentId)
        {
            var sectionNoParameter = sectionNo.HasValue ?
                new ObjectParameter("SectionNo", sectionNo) :
                new ObjectParameter("SectionNo", typeof(int));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            var sectionDescriptionParameter = sectionDescription != null ?
                new ObjectParameter("SectionDescription", sectionDescription) :
                new ObjectParameter("SectionDescription", typeof(string));
    
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var formSectionParentIdParameter = formSectionParentId.HasValue ?
                new ObjectParameter("FormSectionParentId", formSectionParentId) :
                new ObjectParameter("FormSectionParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSection_Insert", formSectionId, sectionNoParameter, sectionNameParameter, sectionDescriptionParameter, formIdParameter, formSectionParentIdParameter);
        }
    
        public virtual ObjectResult<FormSection> FormSection_Select(Nullable<int> formSectionId, Nullable<int> formId)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSection>("FormSection_Select", formSectionIdParameter, formIdParameter);
        }
    
        public virtual ObjectResult<FormSection> FormSection_Select(Nullable<int> formSectionId, Nullable<int> formId, MergeOption mergeOption)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSection>("FormSection_Select", mergeOption, formSectionIdParameter, formIdParameter);
        }
    
        public virtual int FormSection_Update(Nullable<int> formSectionId, Nullable<int> sectionNo, string sectionName, string sectionDescription, Nullable<int> formId, Nullable<int> formSectionParentId)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            var sectionNoParameter = sectionNo.HasValue ?
                new ObjectParameter("SectionNo", sectionNo) :
                new ObjectParameter("SectionNo", typeof(int));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            var sectionDescriptionParameter = sectionDescription != null ?
                new ObjectParameter("SectionDescription", sectionDescription) :
                new ObjectParameter("SectionDescription", typeof(string));
    
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var formSectionParentIdParameter = formSectionParentId.HasValue ?
                new ObjectParameter("FormSectionParentId", formSectionParentId) :
                new ObjectParameter("FormSectionParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSection_Update", formSectionIdParameter, sectionNoParameter, sectionNameParameter, sectionDescriptionParameter, formIdParameter, formSectionParentIdParameter);
        }
    
        public virtual int FormSectionQuestion_Delete(Nullable<int> formSectionid, Nullable<long> questionid)
        {
            var formSectionidParameter = formSectionid.HasValue ?
                new ObjectParameter("FormSectionid", formSectionid) :
                new ObjectParameter("FormSectionid", typeof(int));
    
            var questionidParameter = questionid.HasValue ?
                new ObjectParameter("Questionid", questionid) :
                new ObjectParameter("Questionid", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSectionQuestion_Delete", formSectionidParameter, questionidParameter);
        }
    
        public virtual int FormSectionQuestion_Insert(ObjectParameter formSectionQuestionid, Nullable<int> formSectionid, Nullable<long> questionId, Nullable<int> sortingOrderNo, Nullable<bool> isVisible, Nullable<bool> isMandatory)
        {
            var formSectionidParameter = formSectionid.HasValue ?
                new ObjectParameter("FormSectionid", formSectionid) :
                new ObjectParameter("FormSectionid", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            var sortingOrderNoParameter = sortingOrderNo.HasValue ?
                new ObjectParameter("SortingOrderNo", sortingOrderNo) :
                new ObjectParameter("SortingOrderNo", typeof(int));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var isMandatoryParameter = isMandatory.HasValue ?
                new ObjectParameter("IsMandatory", isMandatory) :
                new ObjectParameter("IsMandatory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSectionQuestion_Insert", formSectionQuestionid, formSectionidParameter, questionIdParameter, sortingOrderNoParameter, isVisibleParameter, isMandatoryParameter);
        }
    
        public virtual ObjectResult<FormSectionQuestion> FormSectionQuestion_Select(Nullable<int> formSectionid)
        {
            var formSectionidParameter = formSectionid.HasValue ?
                new ObjectParameter("FormSectionid", formSectionid) :
                new ObjectParameter("FormSectionid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSectionQuestion>("FormSectionQuestion_Select", formSectionidParameter);
        }
    
        public virtual ObjectResult<FormSectionQuestion> FormSectionQuestion_Select(Nullable<int> formSectionid, MergeOption mergeOption)
        {
            var formSectionidParameter = formSectionid.HasValue ?
                new ObjectParameter("FormSectionid", formSectionid) :
                new ObjectParameter("FormSectionid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FormSectionQuestion>("FormSectionQuestion_Select", mergeOption, formSectionidParameter);
        }
    
        public virtual int FormSectionQuestion_Update(Nullable<int> formSectionQuestionid, Nullable<int> formSectionid, Nullable<long> questionId, Nullable<int> sortingOrderNo, Nullable<bool> isVisible, Nullable<bool> isMandatory)
        {
            var formSectionQuestionidParameter = formSectionQuestionid.HasValue ?
                new ObjectParameter("FormSectionQuestionid", formSectionQuestionid) :
                new ObjectParameter("FormSectionQuestionid", typeof(int));
    
            var formSectionidParameter = formSectionid.HasValue ?
                new ObjectParameter("FormSectionid", formSectionid) :
                new ObjectParameter("FormSectionid", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            var sortingOrderNoParameter = sortingOrderNo.HasValue ?
                new ObjectParameter("SortingOrderNo", sortingOrderNo) :
                new ObjectParameter("SortingOrderNo", typeof(int));
    
            var isVisibleParameter = isVisible.HasValue ?
                new ObjectParameter("IsVisible", isVisible) :
                new ObjectParameter("IsVisible", typeof(bool));
    
            var isMandatoryParameter = isMandatory.HasValue ?
                new ObjectParameter("IsMandatory", isMandatory) :
                new ObjectParameter("IsMandatory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FormSectionQuestion_Update", formSectionQuestionidParameter, formSectionidParameter, questionIdParameter, sortingOrderNoParameter, isVisibleParameter, isMandatoryParameter);
        }
    
        public virtual int Question_Delete(Nullable<long> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Question_Delete", questionIdParameter);
        }
    
        public virtual int Question_Insert(ObjectParameter questionId, string description, Nullable<int> questionControlTypeId, string helpText, string maxText)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var questionControlTypeIdParameter = questionControlTypeId.HasValue ?
                new ObjectParameter("QuestionControlTypeId", questionControlTypeId) :
                new ObjectParameter("QuestionControlTypeId", typeof(int));
    
            var helpTextParameter = helpText != null ?
                new ObjectParameter("HelpText", helpText) :
                new ObjectParameter("HelpText", typeof(string));
    
            var maxTextParameter = maxText != null ?
                new ObjectParameter("MaxText", maxText) :
                new ObjectParameter("MaxText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Question_Insert", questionId, descriptionParameter, questionControlTypeIdParameter, helpTextParameter, maxTextParameter);
        }
    
        public virtual int Question_Update(Nullable<long> questionId, string description, Nullable<int> questionControlTypeId, string helpText, string maxText)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var questionControlTypeIdParameter = questionControlTypeId.HasValue ?
                new ObjectParameter("QuestionControlTypeId", questionControlTypeId) :
                new ObjectParameter("QuestionControlTypeId", typeof(int));
    
            var helpTextParameter = helpText != null ?
                new ObjectParameter("HelpText", helpText) :
                new ObjectParameter("HelpText", typeof(string));
    
            var maxTextParameter = maxText != null ?
                new ObjectParameter("MaxText", maxText) :
                new ObjectParameter("MaxText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Question_Update", questionIdParameter, descriptionParameter, questionControlTypeIdParameter, helpTextParameter, maxTextParameter);
        }
    
        public virtual int QuestionControlType_Delete(Nullable<int> questionControlTypeid)
        {
            var questionControlTypeidParameter = questionControlTypeid.HasValue ?
                new ObjectParameter("QuestionControlTypeid", questionControlTypeid) :
                new ObjectParameter("QuestionControlTypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionControlType_Delete", questionControlTypeidParameter);
        }
    
        public virtual int QuestionControlType_Insert(ObjectParameter questionControlTypeid, string controlTypeName)
        {
            var controlTypeNameParameter = controlTypeName != null ?
                new ObjectParameter("ControlTypeName", controlTypeName) :
                new ObjectParameter("ControlTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionControlType_Insert", questionControlTypeid, controlTypeNameParameter);
        }
    
        public virtual ObjectResult<QuestionControlType> QuestionControlType_Select(Nullable<int> questionControlTypeid)
        {
            var questionControlTypeidParameter = questionControlTypeid.HasValue ?
                new ObjectParameter("QuestionControlTypeid", questionControlTypeid) :
                new ObjectParameter("QuestionControlTypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionControlType>("QuestionControlType_Select", questionControlTypeidParameter);
        }
    
        public virtual ObjectResult<QuestionControlType> QuestionControlType_Select(Nullable<int> questionControlTypeid, MergeOption mergeOption)
        {
            var questionControlTypeidParameter = questionControlTypeid.HasValue ?
                new ObjectParameter("QuestionControlTypeid", questionControlTypeid) :
                new ObjectParameter("QuestionControlTypeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionControlType>("QuestionControlType_Select", mergeOption, questionControlTypeidParameter);
        }
    
        public virtual int QuestionControlType_Update(Nullable<int> questionControlTypeid, string controlTypeName)
        {
            var questionControlTypeidParameter = questionControlTypeid.HasValue ?
                new ObjectParameter("QuestionControlTypeid", questionControlTypeid) :
                new ObjectParameter("QuestionControlTypeid", typeof(int));
    
            var controlTypeNameParameter = controlTypeName != null ?
                new ObjectParameter("ControlTypeName", controlTypeName) :
                new ObjectParameter("ControlTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionControlType_Update", questionControlTypeidParameter, controlTypeNameParameter);
        }
    
        public virtual int QuestionValidationLookup_Delete(Nullable<int> validationTypeId, Nullable<long> questionId)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionValidationLookup_Delete", validationTypeIdParameter, questionIdParameter);
        }
    
        public virtual int QuestionValidationLookup_Insert(ObjectParameter validationQuestionLookId, Nullable<int> validationTypeId, Nullable<long> questionId)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionValidationLookup_Insert", validationQuestionLookId, validationTypeIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<QuestionValidationLookup_Select_Result> QuestionValidationLookup_Select(Nullable<int> validationQuestionLookId, Nullable<long> questionId)
        {
            var validationQuestionLookIdParameter = validationQuestionLookId.HasValue ?
                new ObjectParameter("ValidationQuestionLookId", validationQuestionLookId) :
                new ObjectParameter("ValidationQuestionLookId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionValidationLookup_Select_Result>("QuestionValidationLookup_Select", validationQuestionLookIdParameter, questionIdParameter);
        }
    
        public virtual int Triggers_Delete(Nullable<int> triggerId)
        {
            var triggerIdParameter = triggerId.HasValue ?
                new ObjectParameter("TriggerId", triggerId) :
                new ObjectParameter("TriggerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Triggers_Delete", triggerIdParameter);
        }
    
        public virtual int Triggers_Insert(ObjectParameter triggerId, string triggerValue, string triggerAction, Nullable<long> triggerPointQuestionid, Nullable<int> triggerPointSectionId)
        {
            var triggerValueParameter = triggerValue != null ?
                new ObjectParameter("TriggerValue", triggerValue) :
                new ObjectParameter("TriggerValue", typeof(string));
    
            var triggerActionParameter = triggerAction != null ?
                new ObjectParameter("TriggerAction", triggerAction) :
                new ObjectParameter("TriggerAction", typeof(string));
    
            var triggerPointQuestionidParameter = triggerPointQuestionid.HasValue ?
                new ObjectParameter("TriggerPointQuestionid", triggerPointQuestionid) :
                new ObjectParameter("TriggerPointQuestionid", typeof(long));
    
            var triggerPointSectionIdParameter = triggerPointSectionId.HasValue ?
                new ObjectParameter("TriggerPointSectionId", triggerPointSectionId) :
                new ObjectParameter("TriggerPointSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Triggers_Insert", triggerId, triggerValueParameter, triggerActionParameter, triggerPointQuestionidParameter, triggerPointSectionIdParameter);
        }
    
        public virtual ObjectResult<Trigger> Triggers_Select(Nullable<int> triggerId)
        {
            var triggerIdParameter = triggerId.HasValue ?
                new ObjectParameter("TriggerId", triggerId) :
                new ObjectParameter("TriggerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trigger>("Triggers_Select", triggerIdParameter);
        }
    
        public virtual ObjectResult<Trigger> Triggers_Select(Nullable<int> triggerId, MergeOption mergeOption)
        {
            var triggerIdParameter = triggerId.HasValue ?
                new ObjectParameter("TriggerId", triggerId) :
                new ObjectParameter("TriggerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Trigger>("Triggers_Select", mergeOption, triggerIdParameter);
        }
    
        public virtual int Triggers_Update(Nullable<int> triggerId, string triggerValue, string triggerAction, Nullable<long> triggerPointQuestionid, Nullable<int> triggerPointSectionId)
        {
            var triggerIdParameter = triggerId.HasValue ?
                new ObjectParameter("TriggerId", triggerId) :
                new ObjectParameter("TriggerId", typeof(int));
    
            var triggerValueParameter = triggerValue != null ?
                new ObjectParameter("TriggerValue", triggerValue) :
                new ObjectParameter("TriggerValue", typeof(string));
    
            var triggerActionParameter = triggerAction != null ?
                new ObjectParameter("TriggerAction", triggerAction) :
                new ObjectParameter("TriggerAction", typeof(string));
    
            var triggerPointQuestionidParameter = triggerPointQuestionid.HasValue ?
                new ObjectParameter("TriggerPointQuestionid", triggerPointQuestionid) :
                new ObjectParameter("TriggerPointQuestionid", typeof(long));
    
            var triggerPointSectionIdParameter = triggerPointSectionId.HasValue ?
                new ObjectParameter("TriggerPointSectionId", triggerPointSectionId) :
                new ObjectParameter("TriggerPointSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Triggers_Update", triggerIdParameter, triggerValueParameter, triggerActionParameter, triggerPointQuestionidParameter, triggerPointSectionIdParameter);
        }
    
        public virtual int ValidationType_Delete(Nullable<int> validationTypeId)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidationType_Delete", validationTypeIdParameter);
        }
    
        public virtual int ValidationType_Insert(ObjectParameter validationTypeId, string validationTypeName, string expression, string format, string errorMessage)
        {
            var validationTypeNameParameter = validationTypeName != null ?
                new ObjectParameter("ValidationTypeName", validationTypeName) :
                new ObjectParameter("ValidationTypeName", typeof(string));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("Expression", expression) :
                new ObjectParameter("Expression", typeof(string));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidationType_Insert", validationTypeId, validationTypeNameParameter, expressionParameter, formatParameter, errorMessageParameter);
        }
    
        public virtual ObjectResult<ValidationType> ValidationType_Select(Nullable<int> validationTypeId)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidationType>("ValidationType_Select", validationTypeIdParameter);
        }
    
        public virtual ObjectResult<ValidationType> ValidationType_Select(Nullable<int> validationTypeId, MergeOption mergeOption)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidationType>("ValidationType_Select", mergeOption, validationTypeIdParameter);
        }
    
        public virtual int ValidationType_Update(Nullable<int> validationTypeId, string validationTypeName, string expression, string format, string errorMessage)
        {
            var validationTypeIdParameter = validationTypeId.HasValue ?
                new ObjectParameter("ValidationTypeId", validationTypeId) :
                new ObjectParameter("ValidationTypeId", typeof(int));
    
            var validationTypeNameParameter = validationTypeName != null ?
                new ObjectParameter("ValidationTypeName", validationTypeName) :
                new ObjectParameter("ValidationTypeName", typeof(string));
    
            var expressionParameter = expression != null ?
                new ObjectParameter("Expression", expression) :
                new ObjectParameter("Expression", typeof(string));
    
            var formatParameter = format != null ?
                new ObjectParameter("Format", format) :
                new ObjectParameter("Format", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ValidationType_Update", validationTypeIdParameter, validationTypeNameParameter, expressionParameter, formatParameter, errorMessageParameter);
        }
    
        public virtual int Version_Insert(ObjectParameter versionId, Nullable<int> formId, string versionName, string notes, Nullable<int> docVersionId)
        {
            var formIdParameter = formId.HasValue ?
                new ObjectParameter("FormId", formId) :
                new ObjectParameter("FormId", typeof(int));
    
            var versionNameParameter = versionName != null ?
                new ObjectParameter("VersionName", versionName) :
                new ObjectParameter("VersionName", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var docVersionIdParameter = docVersionId.HasValue ?
                new ObjectParameter("DocVersionId", docVersionId) :
                new ObjectParameter("DocVersionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Version_Insert", versionId, formIdParameter, versionNameParameter, notesParameter, docVersionIdParameter);
        }
    
        public virtual ObjectResult<Version_Select_Result> Version_Select(Nullable<int> versionId)
        {
            var versionIdParameter = versionId.HasValue ?
                new ObjectParameter("VersionId", versionId) :
                new ObjectParameter("VersionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Version_Select_Result>("Version_Select", versionIdParameter);
        }
    
        public virtual int QuestionOption_Delete(Nullable<int> optionId)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("OptionId", optionId) :
                new ObjectParameter("OptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionOption_Delete", optionIdParameter);
        }
    
        public virtual int QuestionOption_Insert(ObjectParameter optionId, string optionText)
        {
            var optionTextParameter = optionText != null ?
                new ObjectParameter("OptionText", optionText) :
                new ObjectParameter("OptionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionOption_Insert", optionId, optionTextParameter);
        }
    
        public virtual ObjectResult<QuestionOption> QuestionOption_Select(Nullable<int> optionId, Nullable<long> questionId)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("OptionId", optionId) :
                new ObjectParameter("OptionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionOption>("QuestionOption_Select", optionIdParameter, questionIdParameter);
        }
    
        public virtual ObjectResult<QuestionOption> QuestionOption_Select(Nullable<int> optionId, Nullable<long> questionId, MergeOption mergeOption)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("OptionId", optionId) :
                new ObjectParameter("OptionId", typeof(int));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionOption>("QuestionOption_Select", mergeOption, optionIdParameter, questionIdParameter);
        }
    
        public virtual int QuestionOption_Update(Nullable<int> optionId, string optionText)
        {
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("OptionId", optionId) :
                new ObjectParameter("OptionId", typeof(int));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("OptionText", optionText) :
                new ObjectParameter("OptionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionOption_Update", optionIdParameter, optionTextParameter);
        }
    
        public virtual int QuestionOptionLookup_Delete(Nullable<long> questionId, Nullable<int> optionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            var optionIdParameter = optionId.HasValue ?
                new ObjectParameter("OptionId", optionId) :
                new ObjectParameter("OptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionOptionLookup_Delete", questionIdParameter, optionIdParameter);
        }
    
        public virtual int QuestionOptionLookup_Insert(ObjectParameter questionOptionLookupId, Nullable<long> questionId, string optionText)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            var optionTextParameter = optionText != null ?
                new ObjectParameter("OptionText", optionText) :
                new ObjectParameter("OptionText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuestionOptionLookup_Insert", questionOptionLookupId, questionIdParameter, optionTextParameter);
        }
    
        public virtual ObjectResult<QuestionOptionLookup> QuestionOptionLookup_Select(Nullable<int> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionOptionLookup>("QuestionOptionLookup_Select", questionIdParameter);
        }
    
        public virtual ObjectResult<QuestionOptionLookup> QuestionOptionLookup_Select(Nullable<int> questionId, MergeOption mergeOption)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuestionOptionLookup>("QuestionOptionLookup_Select", mergeOption, questionIdParameter);
        }
    
        public virtual ObjectResult<Question> Question_Select(Nullable<long> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("Question_Select", questionIdParameter);
        }
    
        public virtual ObjectResult<Question> Question_Select(Nullable<long> questionId, MergeOption mergeOption)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("Question_Select", mergeOption, questionIdParameter);
        }
    
        public virtual ObjectResult<Question> Question_SelectByFormSection(Nullable<int> formSectionId)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("Question_SelectByFormSection", formSectionIdParameter);
        }
    
        public virtual ObjectResult<Question> Question_SelectByFormSection(Nullable<int> formSectionId, MergeOption mergeOption)
        {
            var formSectionIdParameter = formSectionId.HasValue ?
                new ObjectParameter("FormSectionId", formSectionId) :
                new ObjectParameter("FormSectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Question>("Question_SelectByFormSection", mergeOption, formSectionIdParameter);
        }
    
        public virtual ObjectResult<VQuestion_Select_Result> VQuestion_Select(Nullable<long> questionId)
        {
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VQuestion_Select_Result>("VQuestion_Select", questionIdParameter);
        }
    }
}
